// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/infra/dkms (interfaces: IDKMS)
//
// Generated by this command:
//
//	mockgen -destination=mocks/dkms.go -package=mocks . IDKMS
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIDKMS is a mock of IDKMS interface.
type MockIDKMS struct {
	ctrl     *gomock.Controller
	recorder *MockIDKMSMockRecorder
	isgomock struct{}
}

// MockIDKMSMockRecorder is the mock recorder for MockIDKMS.
type MockIDKMSMockRecorder struct {
	mock *MockIDKMS
}

// NewMockIDKMS creates a new mock instance.
func NewMockIDKMS(ctrl *gomock.Controller) *MockIDKMS {
	mock := &MockIDKMS{ctrl: ctrl}
	mock.recorder = &MockIDKMSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDKMS) EXPECT() *MockIDKMSMockRecorder {
	return m.recorder
}

// Decrypt mocks base method.
func (m *MockIDKMS) Decrypt(ctx context.Context, dataKey, ciphertext string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", ctx, dataKey, ciphertext)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockIDKMSMockRecorder) Decrypt(ctx, dataKey, ciphertext any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockIDKMS)(nil).Decrypt), ctx, dataKey, ciphertext)
}

// Encrypt mocks base method.
func (m *MockIDKMS) Encrypt(ctx context.Context, dataKey, plaintext string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", ctx, dataKey, plaintext)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockIDKMSMockRecorder) Encrypt(ctx, dataKey, plaintext any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockIDKMS)(nil).Encrypt), ctx, dataKey, plaintext)
}
