// Code generated by cozeloop. DO NOT EDIT.
package lotag // import github.com/coze-dev/coze-loop/backend/lotag

import (
	"context"

	"github.com/cloudwego/kitex/client/callopt"
	"github.com/cloudwego/kitex/pkg/endpoint"
	"github.com/cloudwego/kitex/pkg/rpcinfo"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/data/tag"
)

type LocalTagService struct {
	impl tag.TagService // the service implementation
	mds  endpoint.Middleware
}

func NewLocalTagService(impl tag.TagService, mds ...endpoint.Middleware) *LocalTagService {
	return &LocalTagService{
		impl: impl,
		mds:  endpoint.Chain(mds...),
	}
}

// CreateTag
/* Tag */
// 新增标签
func (l *LocalTagService) CreateTag(ctx context.Context, req *tag.CreateTagRequest, callOptions ...callopt.Option) (*tag.CreateTagResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*tag.TagServiceCreateTagArgs)
		result := out.(*tag.TagServiceCreateTagResult)
		resp, err := l.impl.CreateTag(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &tag.TagServiceCreateTagArgs{Req: req}
	result := &tag.TagServiceCreateTagResult{}
	ctx = l.injectRPCInfo(ctx, "CreateTag")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// UpdateTag
// 更新标签
func (l *LocalTagService) UpdateTag(ctx context.Context, req *tag.UpdateTagRequest, callOptions ...callopt.Option) (*tag.UpdateTagResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*tag.TagServiceUpdateTagArgs)
		result := out.(*tag.TagServiceUpdateTagResult)
		resp, err := l.impl.UpdateTag(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &tag.TagServiceUpdateTagArgs{Req: req}
	result := &tag.TagServiceUpdateTagResult{}
	ctx = l.injectRPCInfo(ctx, "UpdateTag")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// BatchUpdateTagStatus
// 批量更新标签状态
func (l *LocalTagService) BatchUpdateTagStatus(ctx context.Context, req *tag.BatchUpdateTagStatusRequest, callOptions ...callopt.Option) (*tag.BatchUpdateTagStatusResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*tag.TagServiceBatchUpdateTagStatusArgs)
		result := out.(*tag.TagServiceBatchUpdateTagStatusResult)
		resp, err := l.impl.BatchUpdateTagStatus(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &tag.TagServiceBatchUpdateTagStatusArgs{Req: req}
	result := &tag.TagServiceBatchUpdateTagStatusResult{}
	ctx = l.injectRPCInfo(ctx, "BatchUpdateTagStatus")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// SearchTags
// 搜索标签
func (l *LocalTagService) SearchTags(ctx context.Context, req *tag.SearchTagsRequest, callOptions ...callopt.Option) (*tag.SearchTagsResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*tag.TagServiceSearchTagsArgs)
		result := out.(*tag.TagServiceSearchTagsResult)
		resp, err := l.impl.SearchTags(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &tag.TagServiceSearchTagsArgs{Req: req}
	result := &tag.TagServiceSearchTagsResult{}
	ctx = l.injectRPCInfo(ctx, "SearchTags")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// GetTagDetail
// 标签详情
func (l *LocalTagService) GetTagDetail(ctx context.Context, req *tag.GetTagDetailRequest, callOptions ...callopt.Option) (*tag.GetTagDetailResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*tag.TagServiceGetTagDetailArgs)
		result := out.(*tag.TagServiceGetTagDetailResult)
		resp, err := l.impl.GetTagDetail(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &tag.TagServiceGetTagDetailArgs{Req: req}
	result := &tag.TagServiceGetTagDetailResult{}
	ctx = l.injectRPCInfo(ctx, "GetTagDetail")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// GetTagSpec
// 获取标签限制
func (l *LocalTagService) GetTagSpec(ctx context.Context, req *tag.GetTagSpecRequest, callOptions ...callopt.Option) (*tag.GetTagSpecResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*tag.TagServiceGetTagSpecArgs)
		result := out.(*tag.TagServiceGetTagSpecResult)
		resp, err := l.impl.GetTagSpec(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &tag.TagServiceGetTagSpecArgs{Req: req}
	result := &tag.TagServiceGetTagSpecResult{}
	ctx = l.injectRPCInfo(ctx, "GetTagSpec")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// BatchGetTags
// 批量获取标签
func (l *LocalTagService) BatchGetTags(ctx context.Context, req *tag.BatchGetTagsRequest, callOptions ...callopt.Option) (*tag.BatchGetTagsResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*tag.TagServiceBatchGetTagsArgs)
		result := out.(*tag.TagServiceBatchGetTagsResult)
		resp, err := l.impl.BatchGetTags(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &tag.TagServiceBatchGetTagsArgs{Req: req}
	result := &tag.TagServiceBatchGetTagsResult{}
	ctx = l.injectRPCInfo(ctx, "BatchGetTags")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalTagService) injectRPCInfo(ctx context.Context, method string) context.Context {
	rpcStats := rpcinfo.AsMutableRPCStats(rpcinfo.NewRPCStats())
	ri := rpcinfo.NewRPCInfo(
		rpcinfo.NewEndpointInfo("TagService", method, nil, nil),
		rpcinfo.NewEndpointInfo("TagService", method, nil, nil),
		rpcinfo.NewServerInvocation(),
		nil,
		rpcStats.ImmutableView(),
	)
	return rpcinfo.NewCtxWithRPCInfo(ctx, ri)
}
