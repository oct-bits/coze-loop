// Code generated by cozeloop. DO NOT EDIT.
package loeval_target // import github.com/coze-dev/coze-loop/backend/loeval_target

import (
	"context"

	"github.com/cloudwego/kitex/client/callopt"
	"github.com/cloudwego/kitex/pkg/endpoint"
	"github.com/cloudwego/kitex/pkg/rpcinfo"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/eval_target"
)

type LocalEvalTargetService struct {
	impl eval_target.EvalTargetService // the service implementation
	mds  endpoint.Middleware
}

func NewLocalEvalTargetService(impl eval_target.EvalTargetService, mds ...endpoint.Middleware) *LocalEvalTargetService {
	return &LocalEvalTargetService{
		impl: impl,
		mds:  endpoint.Chain(mds...),
	}
}

// CreateEvalTarget
// 创建评测对象
func (l *LocalEvalTargetService) CreateEvalTarget(ctx context.Context, request *eval_target.CreateEvalTargetRequest, callOptions ...callopt.Option) (*eval_target.CreateEvalTargetResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*eval_target.EvalTargetServiceCreateEvalTargetArgs)
		result := out.(*eval_target.EvalTargetServiceCreateEvalTargetResult)
		resp, err := l.impl.CreateEvalTarget(ctx, arg.Request)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &eval_target.EvalTargetServiceCreateEvalTargetArgs{Request: request}
	result := &eval_target.EvalTargetServiceCreateEvalTargetResult{}
	ctx = l.injectRPCInfo(ctx, "CreateEvalTarget")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// BatchGetEvalTargetsBySource
// 根据source target获取评测对象信息
func (l *LocalEvalTargetService) BatchGetEvalTargetsBySource(ctx context.Context, request *eval_target.BatchGetEvalTargetsBySourceRequest, callOptions ...callopt.Option) (*eval_target.BatchGetEvalTargetsBySourceResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*eval_target.EvalTargetServiceBatchGetEvalTargetsBySourceArgs)
		result := out.(*eval_target.EvalTargetServiceBatchGetEvalTargetsBySourceResult)
		resp, err := l.impl.BatchGetEvalTargetsBySource(ctx, arg.Request)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &eval_target.EvalTargetServiceBatchGetEvalTargetsBySourceArgs{Request: request}
	result := &eval_target.EvalTargetServiceBatchGetEvalTargetsBySourceResult{}
	ctx = l.injectRPCInfo(ctx, "BatchGetEvalTargetsBySource")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// GetEvalTargetVersion
// 获取评测对象+版本
func (l *LocalEvalTargetService) GetEvalTargetVersion(ctx context.Context, request *eval_target.GetEvalTargetVersionRequest, callOptions ...callopt.Option) (*eval_target.GetEvalTargetVersionResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*eval_target.EvalTargetServiceGetEvalTargetVersionArgs)
		result := out.(*eval_target.EvalTargetServiceGetEvalTargetVersionResult)
		resp, err := l.impl.GetEvalTargetVersion(ctx, arg.Request)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &eval_target.EvalTargetServiceGetEvalTargetVersionArgs{Request: request}
	result := &eval_target.EvalTargetServiceGetEvalTargetVersionResult{}
	ctx = l.injectRPCInfo(ctx, "GetEvalTargetVersion")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// BatchGetEvalTargetVersions
// 批量获取+版本
func (l *LocalEvalTargetService) BatchGetEvalTargetVersions(ctx context.Context, request *eval_target.BatchGetEvalTargetVersionsRequest, callOptions ...callopt.Option) (*eval_target.BatchGetEvalTargetVersionsResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*eval_target.EvalTargetServiceBatchGetEvalTargetVersionsArgs)
		result := out.(*eval_target.EvalTargetServiceBatchGetEvalTargetVersionsResult)
		resp, err := l.impl.BatchGetEvalTargetVersions(ctx, arg.Request)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &eval_target.EvalTargetServiceBatchGetEvalTargetVersionsArgs{Request: request}
	result := &eval_target.EvalTargetServiceBatchGetEvalTargetVersionsResult{}
	ctx = l.injectRPCInfo(ctx, "BatchGetEvalTargetVersions")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// ListSourceEvalTargets
// Source评测对象列表
func (l *LocalEvalTargetService) ListSourceEvalTargets(ctx context.Context, request *eval_target.ListSourceEvalTargetsRequest, callOptions ...callopt.Option) (*eval_target.ListSourceEvalTargetsResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*eval_target.EvalTargetServiceListSourceEvalTargetsArgs)
		result := out.(*eval_target.EvalTargetServiceListSourceEvalTargetsResult)
		resp, err := l.impl.ListSourceEvalTargets(ctx, arg.Request)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &eval_target.EvalTargetServiceListSourceEvalTargetsArgs{Request: request}
	result := &eval_target.EvalTargetServiceListSourceEvalTargetsResult{}
	ctx = l.injectRPCInfo(ctx, "ListSourceEvalTargets")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// ListSourceEvalTargetVersions
// Source评测对象版本列表
func (l *LocalEvalTargetService) ListSourceEvalTargetVersions(ctx context.Context, request *eval_target.ListSourceEvalTargetVersionsRequest, callOptions ...callopt.Option) (*eval_target.ListSourceEvalTargetVersionsResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*eval_target.EvalTargetServiceListSourceEvalTargetVersionsArgs)
		result := out.(*eval_target.EvalTargetServiceListSourceEvalTargetVersionsResult)
		resp, err := l.impl.ListSourceEvalTargetVersions(ctx, arg.Request)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &eval_target.EvalTargetServiceListSourceEvalTargetVersionsArgs{Request: request}
	result := &eval_target.EvalTargetServiceListSourceEvalTargetVersionsResult{}
	ctx = l.injectRPCInfo(ctx, "ListSourceEvalTargetVersions")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalEvalTargetService) BatchGetSourceEvalTargets(ctx context.Context, request *eval_target.BatchGetSourceEvalTargetsRequest, callOptions ...callopt.Option) (*eval_target.BatchGetSourceEvalTargetsResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*eval_target.EvalTargetServiceBatchGetSourceEvalTargetsArgs)
		result := out.(*eval_target.EvalTargetServiceBatchGetSourceEvalTargetsResult)
		resp, err := l.impl.BatchGetSourceEvalTargets(ctx, arg.Request)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &eval_target.EvalTargetServiceBatchGetSourceEvalTargetsArgs{Request: request}
	result := &eval_target.EvalTargetServiceBatchGetSourceEvalTargetsResult{}
	ctx = l.injectRPCInfo(ctx, "BatchGetSourceEvalTargets")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// ExecuteEvalTarget
// 执行
func (l *LocalEvalTargetService) ExecuteEvalTarget(ctx context.Context, request *eval_target.ExecuteEvalTargetRequest, callOptions ...callopt.Option) (*eval_target.ExecuteEvalTargetResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*eval_target.EvalTargetServiceExecuteEvalTargetArgs)
		result := out.(*eval_target.EvalTargetServiceExecuteEvalTargetResult)
		resp, err := l.impl.ExecuteEvalTarget(ctx, arg.Request)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &eval_target.EvalTargetServiceExecuteEvalTargetArgs{Request: request}
	result := &eval_target.EvalTargetServiceExecuteEvalTargetResult{}
	ctx = l.injectRPCInfo(ctx, "ExecuteEvalTarget")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalEvalTargetService) GetEvalTargetRecord(ctx context.Context, request *eval_target.GetEvalTargetRecordRequest, callOptions ...callopt.Option) (*eval_target.GetEvalTargetRecordResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*eval_target.EvalTargetServiceGetEvalTargetRecordArgs)
		result := out.(*eval_target.EvalTargetServiceGetEvalTargetRecordResult)
		resp, err := l.impl.GetEvalTargetRecord(ctx, arg.Request)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &eval_target.EvalTargetServiceGetEvalTargetRecordArgs{Request: request}
	result := &eval_target.EvalTargetServiceGetEvalTargetRecordResult{}
	ctx = l.injectRPCInfo(ctx, "GetEvalTargetRecord")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalEvalTargetService) BatchGetEvalTargetRecords(ctx context.Context, request *eval_target.BatchGetEvalTargetRecordsRequest, callOptions ...callopt.Option) (*eval_target.BatchGetEvalTargetRecordsResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*eval_target.EvalTargetServiceBatchGetEvalTargetRecordsArgs)
		result := out.(*eval_target.EvalTargetServiceBatchGetEvalTargetRecordsResult)
		resp, err := l.impl.BatchGetEvalTargetRecords(ctx, arg.Request)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &eval_target.EvalTargetServiceBatchGetEvalTargetRecordsArgs{Request: request}
	result := &eval_target.EvalTargetServiceBatchGetEvalTargetRecordsResult{}
	ctx = l.injectRPCInfo(ctx, "BatchGetEvalTargetRecords")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalEvalTargetService) injectRPCInfo(ctx context.Context, method string) context.Context {
	rpcStats := rpcinfo.AsMutableRPCStats(rpcinfo.NewRPCStats())
	ri := rpcinfo.NewRPCInfo(
		rpcinfo.NewEndpointInfo("EvalTargetService", method, nil, nil),
		rpcinfo.NewEndpointInfo("EvalTargetService", method, nil, nil),
		rpcinfo.NewServerInvocation(),
		nil,
		rpcStats.ImmutableView(),
	)
	return rpcinfo.NewCtxWithRPCInfo(ctx, ri)
}
