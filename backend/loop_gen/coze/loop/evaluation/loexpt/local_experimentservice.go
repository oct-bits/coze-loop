// Code generated by cozeloop. DO NOT EDIT.
package loexpt // import github.com/coze-dev/coze-loop/backend/loexpt

import (
	"context"

	"github.com/cloudwego/kitex/client/callopt"
	"github.com/cloudwego/kitex/pkg/endpoint"
	"github.com/cloudwego/kitex/pkg/rpcinfo"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/expt"
)

type LocalExperimentService struct {
	impl expt.ExperimentService // the service implementation
	mds  endpoint.Middleware
}

func NewLocalExperimentService(impl expt.ExperimentService, mds ...endpoint.Middleware) *LocalExperimentService {
	return &LocalExperimentService{
		impl: impl,
		mds:  endpoint.Chain(mds...),
	}
}

func (l *LocalExperimentService) CheckExperimentName(ctx context.Context, req *expt.CheckExperimentNameRequest, callOptions ...callopt.Option) (*expt.CheckExperimentNameResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*expt.ExperimentServiceCheckExperimentNameArgs)
		result := out.(*expt.ExperimentServiceCheckExperimentNameResult)
		resp, err := l.impl.CheckExperimentName(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &expt.ExperimentServiceCheckExperimentNameArgs{Req: req}
	result := &expt.ExperimentServiceCheckExperimentNameResult{}
	ctx = l.injectRPCInfo(ctx, "CheckExperimentName")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// CreateExperiment
// CreateExperiment 只创建，不提交运行
func (l *LocalExperimentService) CreateExperiment(ctx context.Context, req *expt.CreateExperimentRequest, callOptions ...callopt.Option) (*expt.CreateExperimentResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*expt.ExperimentServiceCreateExperimentArgs)
		result := out.(*expt.ExperimentServiceCreateExperimentResult)
		resp, err := l.impl.CreateExperiment(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &expt.ExperimentServiceCreateExperimentArgs{Req: req}
	result := &expt.ExperimentServiceCreateExperimentResult{}
	ctx = l.injectRPCInfo(ctx, "CreateExperiment")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// SubmitExperiment
// SubmitExperiment 创建并提交运行
func (l *LocalExperimentService) SubmitExperiment(ctx context.Context, req *expt.SubmitExperimentRequest, callOptions ...callopt.Option) (*expt.SubmitExperimentResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*expt.ExperimentServiceSubmitExperimentArgs)
		result := out.(*expt.ExperimentServiceSubmitExperimentResult)
		resp, err := l.impl.SubmitExperiment(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &expt.ExperimentServiceSubmitExperimentArgs{Req: req}
	result := &expt.ExperimentServiceSubmitExperimentResult{}
	ctx = l.injectRPCInfo(ctx, "SubmitExperiment")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalExperimentService) BatchGetExperiments(ctx context.Context, req *expt.BatchGetExperimentsRequest, callOptions ...callopt.Option) (*expt.BatchGetExperimentsResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*expt.ExperimentServiceBatchGetExperimentsArgs)
		result := out.(*expt.ExperimentServiceBatchGetExperimentsResult)
		resp, err := l.impl.BatchGetExperiments(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &expt.ExperimentServiceBatchGetExperimentsArgs{Req: req}
	result := &expt.ExperimentServiceBatchGetExperimentsResult{}
	ctx = l.injectRPCInfo(ctx, "BatchGetExperiments")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalExperimentService) ListExperiments(ctx context.Context, req *expt.ListExperimentsRequest, callOptions ...callopt.Option) (*expt.ListExperimentsResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*expt.ExperimentServiceListExperimentsArgs)
		result := out.(*expt.ExperimentServiceListExperimentsResult)
		resp, err := l.impl.ListExperiments(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &expt.ExperimentServiceListExperimentsArgs{Req: req}
	result := &expt.ExperimentServiceListExperimentsResult{}
	ctx = l.injectRPCInfo(ctx, "ListExperiments")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalExperimentService) UpdateExperiment(ctx context.Context, req *expt.UpdateExperimentRequest, callOptions ...callopt.Option) (*expt.UpdateExperimentResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*expt.ExperimentServiceUpdateExperimentArgs)
		result := out.(*expt.ExperimentServiceUpdateExperimentResult)
		resp, err := l.impl.UpdateExperiment(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &expt.ExperimentServiceUpdateExperimentArgs{Req: req}
	result := &expt.ExperimentServiceUpdateExperimentResult{}
	ctx = l.injectRPCInfo(ctx, "UpdateExperiment")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalExperimentService) DeleteExperiment(ctx context.Context, req *expt.DeleteExperimentRequest, callOptions ...callopt.Option) (*expt.DeleteExperimentResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*expt.ExperimentServiceDeleteExperimentArgs)
		result := out.(*expt.ExperimentServiceDeleteExperimentResult)
		resp, err := l.impl.DeleteExperiment(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &expt.ExperimentServiceDeleteExperimentArgs{Req: req}
	result := &expt.ExperimentServiceDeleteExperimentResult{}
	ctx = l.injectRPCInfo(ctx, "DeleteExperiment")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalExperimentService) BatchDeleteExperiments(ctx context.Context, req *expt.BatchDeleteExperimentsRequest, callOptions ...callopt.Option) (*expt.BatchDeleteExperimentsResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*expt.ExperimentServiceBatchDeleteExperimentsArgs)
		result := out.(*expt.ExperimentServiceBatchDeleteExperimentsResult)
		resp, err := l.impl.BatchDeleteExperiments(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &expt.ExperimentServiceBatchDeleteExperimentsArgs{Req: req}
	result := &expt.ExperimentServiceBatchDeleteExperimentsResult{}
	ctx = l.injectRPCInfo(ctx, "BatchDeleteExperiments")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalExperimentService) CloneExperiment(ctx context.Context, req *expt.CloneExperimentRequest, callOptions ...callopt.Option) (*expt.CloneExperimentResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*expt.ExperimentServiceCloneExperimentArgs)
		result := out.(*expt.ExperimentServiceCloneExperimentResult)
		resp, err := l.impl.CloneExperiment(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &expt.ExperimentServiceCloneExperimentArgs{Req: req}
	result := &expt.ExperimentServiceCloneExperimentResult{}
	ctx = l.injectRPCInfo(ctx, "CloneExperiment")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// RunExperiment
// RunExperiment 运行已创建的实验
func (l *LocalExperimentService) RunExperiment(ctx context.Context, req *expt.RunExperimentRequest, callOptions ...callopt.Option) (*expt.RunExperimentResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*expt.ExperimentServiceRunExperimentArgs)
		result := out.(*expt.ExperimentServiceRunExperimentResult)
		resp, err := l.impl.RunExperiment(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &expt.ExperimentServiceRunExperimentArgs{Req: req}
	result := &expt.ExperimentServiceRunExperimentResult{}
	ctx = l.injectRPCInfo(ctx, "RunExperiment")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalExperimentService) RetryExperiment(ctx context.Context, req *expt.RetryExperimentRequest, callOptions ...callopt.Option) (*expt.RetryExperimentResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*expt.ExperimentServiceRetryExperimentArgs)
		result := out.(*expt.ExperimentServiceRetryExperimentResult)
		resp, err := l.impl.RetryExperiment(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &expt.ExperimentServiceRetryExperimentArgs{Req: req}
	result := &expt.ExperimentServiceRetryExperimentResult{}
	ctx = l.injectRPCInfo(ctx, "RetryExperiment")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalExperimentService) KillExperiment(ctx context.Context, req *expt.KillExperimentRequest, callOptions ...callopt.Option) (*expt.KillExperimentResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*expt.ExperimentServiceKillExperimentArgs)
		result := out.(*expt.ExperimentServiceKillExperimentResult)
		resp, err := l.impl.KillExperiment(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &expt.ExperimentServiceKillExperimentArgs{Req: req}
	result := &expt.ExperimentServiceKillExperimentResult{}
	ctx = l.injectRPCInfo(ctx, "KillExperiment")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// BatchGetExperimentResult_
// MGetExperimentResult 获取实验结果
func (l *LocalExperimentService) BatchGetExperimentResult_(ctx context.Context, req *expt.BatchGetExperimentResultRequest, callOptions ...callopt.Option) (*expt.BatchGetExperimentResultResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*expt.ExperimentServiceBatchGetExperimentResultArgs)
		result := out.(*expt.ExperimentServiceBatchGetExperimentResultResult)
		resp, err := l.impl.BatchGetExperimentResult_(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &expt.ExperimentServiceBatchGetExperimentResultArgs{Req: req}
	result := &expt.ExperimentServiceBatchGetExperimentResultResult{}
	ctx = l.injectRPCInfo(ctx, "BatchGetExperimentResult_")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalExperimentService) BatchGetExperimentAggrResult_(ctx context.Context, req *expt.BatchGetExperimentAggrResultRequest, callOptions ...callopt.Option) (*expt.BatchGetExperimentAggrResultResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*expt.ExperimentServiceBatchGetExperimentAggrResultArgs)
		result := out.(*expt.ExperimentServiceBatchGetExperimentAggrResultResult)
		resp, err := l.impl.BatchGetExperimentAggrResult_(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &expt.ExperimentServiceBatchGetExperimentAggrResultArgs{Req: req}
	result := &expt.ExperimentServiceBatchGetExperimentAggrResultResult{}
	ctx = l.injectRPCInfo(ctx, "BatchGetExperimentAggrResult_")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// InvokeExperiment
// 在线实验
func (l *LocalExperimentService) InvokeExperiment(ctx context.Context, req *expt.InvokeExperimentRequest, callOptions ...callopt.Option) (*expt.InvokeExperimentResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*expt.ExperimentServiceInvokeExperimentArgs)
		result := out.(*expt.ExperimentServiceInvokeExperimentResult)
		resp, err := l.impl.InvokeExperiment(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &expt.ExperimentServiceInvokeExperimentArgs{Req: req}
	result := &expt.ExperimentServiceInvokeExperimentResult{}
	ctx = l.injectRPCInfo(ctx, "InvokeExperiment")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalExperimentService) FinishExperiment(ctx context.Context, req *expt.FinishExperimentRequest, callOptions ...callopt.Option) (*expt.FinishExperimentResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*expt.ExperimentServiceFinishExperimentArgs)
		result := out.(*expt.ExperimentServiceFinishExperimentResult)
		resp, err := l.impl.FinishExperiment(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &expt.ExperimentServiceFinishExperimentArgs{Req: req}
	result := &expt.ExperimentServiceFinishExperimentResult{}
	ctx = l.injectRPCInfo(ctx, "FinishExperiment")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalExperimentService) ListExperimentStats(ctx context.Context, req *expt.ListExperimentStatsRequest, callOptions ...callopt.Option) (*expt.ListExperimentStatsResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*expt.ExperimentServiceListExperimentStatsArgs)
		result := out.(*expt.ExperimentServiceListExperimentStatsResult)
		resp, err := l.impl.ListExperimentStats(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &expt.ExperimentServiceListExperimentStatsArgs{Req: req}
	result := &expt.ExperimentServiceListExperimentStatsResult{}
	ctx = l.injectRPCInfo(ctx, "ListExperimentStats")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

// UpsertExptTurnResultFilter
// 更新报告ck
func (l *LocalExperimentService) UpsertExptTurnResultFilter(ctx context.Context, req *expt.UpsertExptTurnResultFilterRequest, callOptions ...callopt.Option) (*expt.UpsertExptTurnResultFilterResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*expt.ExperimentServiceUpsertExptTurnResultFilterArgs)
		result := out.(*expt.ExperimentServiceUpsertExptTurnResultFilterResult)
		resp, err := l.impl.UpsertExptTurnResultFilter(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &expt.ExperimentServiceUpsertExptTurnResultFilterArgs{Req: req}
	result := &expt.ExperimentServiceUpsertExptTurnResultFilterResult{}
	ctx = l.injectRPCInfo(ctx, "UpsertExptTurnResultFilter")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalExperimentService) injectRPCInfo(ctx context.Context, method string) context.Context {
	rpcStats := rpcinfo.AsMutableRPCStats(rpcinfo.NewRPCStats())
	ri := rpcinfo.NewRPCInfo(
		rpcinfo.NewEndpointInfo("ExperimentService", method, nil, nil),
		rpcinfo.NewEndpointInfo("ExperimentService", method, nil, nil),
		rpcinfo.NewServerInvocation(),
		nil,
		rpcStats.ImmutableView(),
	)
	return rpcinfo.NewCtxWithRPCInfo(ctx, ri)
}
