// Code generated by cozeloop. DO NOT EDIT.
package loopenapi // import github.com/coze-dev/coze-loop/backend/loopenapi

import (
	"context"

	"github.com/cloudwego/kitex/client/callopt"
	"github.com/cloudwego/kitex/pkg/endpoint"
	"github.com/cloudwego/kitex/pkg/rpcinfo"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/observability/openapi"
)

type LocalOpenAPIService struct {
	impl openapi.OpenAPIService // the service implementation
	mds  endpoint.Middleware
}

func NewLocalOpenAPIService(impl openapi.OpenAPIService, mds ...endpoint.Middleware) *LocalOpenAPIService {
	return &LocalOpenAPIService{
		impl: impl,
		mds:  endpoint.Chain(mds...),
	}
}

func (l *LocalOpenAPIService) IngestTraces(ctx context.Context, req *openapi.IngestTracesRequest, callOptions ...callopt.Option) (*openapi.IngestTracesResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*openapi.OpenAPIServiceIngestTracesArgs)
		result := out.(*openapi.OpenAPIServiceIngestTracesResult)
		resp, err := l.impl.IngestTraces(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &openapi.OpenAPIServiceIngestTracesArgs{Req: req}
	result := &openapi.OpenAPIServiceIngestTracesResult{}
	ctx = l.injectRPCInfo(ctx, "IngestTraces")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalOpenAPIService) CreateAnnotation(ctx context.Context, req *openapi.CreateAnnotationRequest, callOptions ...callopt.Option) (*openapi.CreateAnnotationResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*openapi.OpenAPIServiceCreateAnnotationArgs)
		result := out.(*openapi.OpenAPIServiceCreateAnnotationResult)
		resp, err := l.impl.CreateAnnotation(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &openapi.OpenAPIServiceCreateAnnotationArgs{Req: req}
	result := &openapi.OpenAPIServiceCreateAnnotationResult{}
	ctx = l.injectRPCInfo(ctx, "CreateAnnotation")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalOpenAPIService) DeleteAnnotation(ctx context.Context, req *openapi.DeleteAnnotationRequest, callOptions ...callopt.Option) (*openapi.DeleteAnnotationResponse, error) {
	chain := l.mds(func(ctx context.Context, in, out interface{}) error {
		arg := in.(*openapi.OpenAPIServiceDeleteAnnotationArgs)
		result := out.(*openapi.OpenAPIServiceDeleteAnnotationResult)
		resp, err := l.impl.DeleteAnnotation(ctx, arg.Req)
		if err != nil {
			return err
		}
		result.SetSuccess(resp)
		return nil
	})

	arg := &openapi.OpenAPIServiceDeleteAnnotationArgs{Req: req}
	result := &openapi.OpenAPIServiceDeleteAnnotationResult{}
	ctx = l.injectRPCInfo(ctx, "DeleteAnnotation")
	if err := chain(ctx, arg, result); err != nil {
		return nil, err
	}
	return result.GetSuccess(), nil
}

func (l *LocalOpenAPIService) injectRPCInfo(ctx context.Context, method string) context.Context {
	rpcStats := rpcinfo.AsMutableRPCStats(rpcinfo.NewRPCStats())
	ri := rpcinfo.NewRPCInfo(
		rpcinfo.NewEndpointInfo("OpenAPIService", method, nil, nil),
		rpcinfo.NewEndpointInfo("OpenAPIService", method, nil, nil),
		rpcinfo.NewServerInvocation(),
		nil,
		rpcStats.ImmutableView(),
	)
	return rpcinfo.NewCtxWithRPCInfo(ctx, ri)
}
