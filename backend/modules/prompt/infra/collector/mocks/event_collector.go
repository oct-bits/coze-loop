// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/prompt/infra/collector (interfaces: ICollectorProvider)
//
// Generated by this command:
//
//	mockgen -destination=mocks/event_collector.go -package=mocks . ICollectorProvider
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/prompt/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockICollectorProvider is a mock of ICollectorProvider interface.
type MockICollectorProvider struct {
	ctrl     *gomock.Controller
	recorder *MockICollectorProviderMockRecorder
	isgomock struct{}
}

// MockICollectorProviderMockRecorder is the mock recorder for MockICollectorProvider.
type MockICollectorProviderMockRecorder struct {
	mock *MockICollectorProvider
}

// NewMockICollectorProvider creates a new mock instance.
func NewMockICollectorProvider(ctrl *gomock.Controller) *MockICollectorProvider {
	mock := &MockICollectorProvider{ctrl: ctrl}
	mock.recorder = &MockICollectorProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICollectorProvider) EXPECT() *MockICollectorProviderMockRecorder {
	return m.recorder
}

// CollectPromptHubEvent mocks base method.
func (m *MockICollectorProvider) CollectPromptHubEvent(ctx context.Context, spaceID int64, prompts []*entity.Prompt) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CollectPromptHubEvent", ctx, spaceID, prompts)
}

// CollectPromptHubEvent indicates an expected call of CollectPromptHubEvent.
func (mr *MockICollectorProviderMockRecorder) CollectPromptHubEvent(ctx, spaceID, prompts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectPromptHubEvent", reflect.TypeOf((*MockICollectorProvider)(nil).CollectPromptHubEvent), ctx, spaceID, prompts)
}
