// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/prompt/infra/repo/mysql (interfaces: IPromptCommitDAO)
//
// Generated by this command:
//
//	mockgen -destination=mocks/prompt_commit_dao.go -package=mocks . IPromptCommitDAO
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	db "github.com/coze-dev/coze-loop/backend/infra/db"
	mysql "github.com/coze-dev/coze-loop/backend/modules/prompt/infra/repo/mysql"
	model "github.com/coze-dev/coze-loop/backend/modules/prompt/infra/repo/mysql/gorm_gen/model"
	gomock "go.uber.org/mock/gomock"
)

// MockIPromptCommitDAO is a mock of IPromptCommitDAO interface.
type MockIPromptCommitDAO struct {
	ctrl     *gomock.Controller
	recorder *MockIPromptCommitDAOMockRecorder
	isgomock struct{}
}

// MockIPromptCommitDAOMockRecorder is the mock recorder for MockIPromptCommitDAO.
type MockIPromptCommitDAOMockRecorder struct {
	mock *MockIPromptCommitDAO
}

// NewMockIPromptCommitDAO creates a new mock instance.
func NewMockIPromptCommitDAO(ctrl *gomock.Controller) *MockIPromptCommitDAO {
	mock := &MockIPromptCommitDAO{ctrl: ctrl}
	mock.recorder = &MockIPromptCommitDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPromptCommitDAO) EXPECT() *MockIPromptCommitDAOMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIPromptCommitDAO) Create(ctx context.Context, promptCommitPO *model.PromptCommit, arg2 time.Time, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, promptCommitPO, arg2}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIPromptCommitDAOMockRecorder) Create(ctx, promptCommitPO, arg2 any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, promptCommitPO, arg2}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIPromptCommitDAO)(nil).Create), varargs...)
}

// Get mocks base method.
func (m *MockIPromptCommitDAO) Get(ctx context.Context, promptID int64, commitVersion string, opts ...db.Option) (*model.PromptCommit, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, promptID, commitVersion}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*model.PromptCommit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIPromptCommitDAOMockRecorder) Get(ctx, promptID, commitVersion any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, promptID, commitVersion}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIPromptCommitDAO)(nil).Get), varargs...)
}

// List mocks base method.
func (m *MockIPromptCommitDAO) List(ctx context.Context, param mysql.ListCommitParam, opts ...db.Option) ([]*model.PromptCommit, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, param}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]*model.PromptCommit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIPromptCommitDAOMockRecorder) List(ctx, param any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, param}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIPromptCommitDAO)(nil).List), varargs...)
}

// MGet mocks base method.
func (m *MockIPromptCommitDAO) MGet(ctx context.Context, pairs []mysql.PromptIDCommitVersionPair, opts ...db.Option) (map[mysql.PromptIDCommitVersionPair]*model.PromptCommit, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, pairs}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MGet", varargs...)
	ret0, _ := ret[0].(map[mysql.PromptIDCommitVersionPair]*model.PromptCommit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGet indicates an expected call of MGet.
func (mr *MockIPromptCommitDAOMockRecorder) MGet(ctx, pairs any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, pairs}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGet", reflect.TypeOf((*MockIPromptCommitDAO)(nil).MGet), varargs...)
}
