// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/prompt/domain/component/conf (interfaces: IConfigProvider)
//
// Generated by this command:
//
//	mockgen -destination=mocks/config_provider.go -package=mocks . IConfigProvider
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	prompt "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/prompt/domain/prompt"
	gomock "go.uber.org/mock/gomock"
)

// MockIConfigProvider is a mock of IConfigProvider interface.
type MockIConfigProvider struct {
	ctrl     *gomock.Controller
	recorder *MockIConfigProviderMockRecorder
	isgomock struct{}
}

// MockIConfigProviderMockRecorder is the mock recorder for MockIConfigProvider.
type MockIConfigProviderMockRecorder struct {
	mock *MockIConfigProvider
}

// NewMockIConfigProvider creates a new mock instance.
func NewMockIConfigProvider(ctrl *gomock.Controller) *MockIConfigProvider {
	mock := &MockIConfigProvider{ctrl: ctrl}
	mock.recorder = &MockIConfigProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIConfigProvider) EXPECT() *MockIConfigProviderMockRecorder {
	return m.recorder
}

// GetPromptDefaultConfig mocks base method.
func (m *MockIConfigProvider) GetPromptDefaultConfig(ctx context.Context) (*prompt.PromptDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPromptDefaultConfig", ctx)
	ret0, _ := ret[0].(*prompt.PromptDetail)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPromptDefaultConfig indicates an expected call of GetPromptDefaultConfig.
func (mr *MockIConfigProviderMockRecorder) GetPromptDefaultConfig(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPromptDefaultConfig", reflect.TypeOf((*MockIConfigProvider)(nil).GetPromptDefaultConfig), ctx)
}

// GetPromptHubMaxQPSBySpace mocks base method.
func (m *MockIConfigProvider) GetPromptHubMaxQPSBySpace(ctx context.Context, spaceID int64) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPromptHubMaxQPSBySpace", ctx, spaceID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPromptHubMaxQPSBySpace indicates an expected call of GetPromptHubMaxQPSBySpace.
func (mr *MockIConfigProviderMockRecorder) GetPromptHubMaxQPSBySpace(ctx, spaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPromptHubMaxQPSBySpace", reflect.TypeOf((*MockIConfigProvider)(nil).GetPromptHubMaxQPSBySpace), ctx, spaceID)
}
