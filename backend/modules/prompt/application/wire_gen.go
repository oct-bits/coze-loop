// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package application

import (
	"github.com/coze-dev/coze-loop/backend/infra/db"
	"github.com/coze-dev/coze-loop/backend/infra/external/audit"
	"github.com/coze-dev/coze-loop/backend/infra/external/benefit"
	"github.com/coze-dev/coze-loop/backend/infra/idgen"
	"github.com/coze-dev/coze-loop/backend/infra/limiter"
	"github.com/coze-dev/coze-loop/backend/infra/metrics"
	"github.com/coze-dev/coze-loop/backend/infra/redis"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/auth/authservice"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/file/fileservice"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/user/userservice"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/llm/runtime/llmruntimeservice"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/prompt/debug"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/prompt/execute"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/prompt/manage"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/prompt/openapi"
	"github.com/coze-dev/coze-loop/backend/modules/prompt/domain/service"
	"github.com/coze-dev/coze-loop/backend/modules/prompt/infra/collector"
	conf2 "github.com/coze-dev/coze-loop/backend/modules/prompt/infra/conf"
	"github.com/coze-dev/coze-loop/backend/modules/prompt/infra/repo"
	"github.com/coze-dev/coze-loop/backend/modules/prompt/infra/repo/mysql"
	redis2 "github.com/coze-dev/coze-loop/backend/modules/prompt/infra/repo/redis"
	"github.com/coze-dev/coze-loop/backend/modules/prompt/infra/rpc"
	"github.com/coze-dev/coze-loop/backend/pkg/conf"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitPromptManageApplication(idgen2 idgen.IIDGenerator, db2 db.Provider, redisCli redis.Cmdable, meter metrics.Meter, configFactory conf.IConfigLoaderFactory, llmClient llmruntimeservice.Client, authClient authservice.Client, fileClient fileservice.Client, userClient userservice.Client, auditClient audit.IAuditService) (manage.PromptManageService, error) {
	iPromptBasicDAO := mysql.NewPromptBasicDAO(db2, redisCli)
	iPromptCommitDAO := mysql.NewPromptCommitDAO(db2, redisCli)
	iPromptUserDraftDAO := mysql.NewPromptUserDraftDAO(db2, redisCli)
	redisIPromptBasicDAO := redis2.NewPromptBasicDAO()
	iPromptDAO := redis2.NewPromptDAO()
	iManageRepo := repo.NewManageRepo(db2, idgen2, meter, iPromptBasicDAO, iPromptCommitDAO, iPromptUserDraftDAO, redisIPromptBasicDAO, iPromptDAO)
	iDebugLogDAO := mysql.NewDebugLogDAO(db2)
	iDebugLogRepo := repo.NewDebugLogRepo(idgen2, iDebugLogDAO)
	iDebugContextDAO := mysql.NewDebugContextDAO(db2)
	iDebugContextRepo := repo.NewDebugContextRepo(idgen2, iDebugContextDAO)
	iConfigProvider, err := conf2.NewPromptConfigProvider(configFactory)
	if err != nil {
		return nil, err
	}
	illmProvider := rpc.NewLLMRPCProvider(llmClient)
	iFileProvider := rpc.NewFileRPCProvider(fileClient)
	iPromptService := service.NewPromptService(idgen2, iDebugLogRepo, iDebugContextRepo, iManageRepo, iConfigProvider, illmProvider, iFileProvider)
	iAuthProvider := rpc.NewAuthRPCProvider(authClient)
	iUserProvider := rpc.NewUserRPCProvider(userClient)
	iAuditProvider := rpc.NewAuditRPCProvider(auditClient)
	promptManageService := NewPromptManageApplication(iManageRepo, iPromptService, iAuthProvider, iUserProvider, iAuditProvider, iConfigProvider)
	return promptManageService, nil
}

func InitPromptDebugApplication(idgen2 idgen.IIDGenerator, db2 db.Provider, redisCli redis.Cmdable, meter metrics.Meter, configFactory conf.IConfigLoaderFactory, llmClient llmruntimeservice.Client, authClient authservice.Client, fileClient fileservice.Client, benefitSvc benefit.IBenefitService) (debug.PromptDebugService, error) {
	iDebugLogDAO := mysql.NewDebugLogDAO(db2)
	iDebugLogRepo := repo.NewDebugLogRepo(idgen2, iDebugLogDAO)
	iDebugContextDAO := mysql.NewDebugContextDAO(db2)
	iDebugContextRepo := repo.NewDebugContextRepo(idgen2, iDebugContextDAO)
	iPromptBasicDAO := mysql.NewPromptBasicDAO(db2, redisCli)
	iPromptCommitDAO := mysql.NewPromptCommitDAO(db2, redisCli)
	iPromptUserDraftDAO := mysql.NewPromptUserDraftDAO(db2, redisCli)
	redisIPromptBasicDAO := redis2.NewPromptBasicDAO()
	iPromptDAO := redis2.NewPromptDAO()
	iManageRepo := repo.NewManageRepo(db2, idgen2, meter, iPromptBasicDAO, iPromptCommitDAO, iPromptUserDraftDAO, redisIPromptBasicDAO, iPromptDAO)
	iConfigProvider, err := conf2.NewPromptConfigProvider(configFactory)
	if err != nil {
		return nil, err
	}
	illmProvider := rpc.NewLLMRPCProvider(llmClient)
	iFileProvider := rpc.NewFileRPCProvider(fileClient)
	iPromptService := service.NewPromptService(idgen2, iDebugLogRepo, iDebugContextRepo, iManageRepo, iConfigProvider, illmProvider, iFileProvider)
	iAuthProvider := rpc.NewAuthRPCProvider(authClient)
	promptDebugService := NewPromptDebugApplication(iDebugLogRepo, iDebugContextRepo, iPromptService, benefitSvc, iAuthProvider, iFileProvider)
	return promptDebugService, nil
}

func InitPromptExecuteApplication(idgen2 idgen.IIDGenerator, db2 db.Provider, redisCli redis.Cmdable, meter metrics.Meter, configFactory conf.IConfigLoaderFactory, llmClient llmruntimeservice.Client, fileClient fileservice.Client) (execute.PromptExecuteService, error) {
	iDebugLogDAO := mysql.NewDebugLogDAO(db2)
	iDebugLogRepo := repo.NewDebugLogRepo(idgen2, iDebugLogDAO)
	iDebugContextDAO := mysql.NewDebugContextDAO(db2)
	iDebugContextRepo := repo.NewDebugContextRepo(idgen2, iDebugContextDAO)
	iPromptBasicDAO := mysql.NewPromptBasicDAO(db2, redisCli)
	iPromptCommitDAO := mysql.NewPromptCommitDAO(db2, redisCli)
	iPromptUserDraftDAO := mysql.NewPromptUserDraftDAO(db2, redisCli)
	redisIPromptBasicDAO := redis2.NewPromptBasicDAO()
	iPromptDAO := redis2.NewPromptDAO()
	iManageRepo := repo.NewManageRepo(db2, idgen2, meter, iPromptBasicDAO, iPromptCommitDAO, iPromptUserDraftDAO, redisIPromptBasicDAO, iPromptDAO)
	iConfigProvider, err := conf2.NewPromptConfigProvider(configFactory)
	if err != nil {
		return nil, err
	}
	illmProvider := rpc.NewLLMRPCProvider(llmClient)
	iFileProvider := rpc.NewFileRPCProvider(fileClient)
	iPromptService := service.NewPromptService(idgen2, iDebugLogRepo, iDebugContextRepo, iManageRepo, iConfigProvider, illmProvider, iFileProvider)
	promptExecuteService := NewPromptExecuteApplication(iPromptService, iManageRepo)
	return promptExecuteService, nil
}

func InitPromptOpenAPIApplication(idgen2 idgen.IIDGenerator, db2 db.Provider, redisCli redis.Cmdable, meter metrics.Meter, configFactory conf.IConfigLoaderFactory, limiterFactory limiter.IRateLimiterFactory, llmClient llmruntimeservice.Client, authClient authservice.Client, fileClient fileservice.Client) (openapi.PromptOpenAPIService, error) {
	iDebugLogDAO := mysql.NewDebugLogDAO(db2)
	iDebugLogRepo := repo.NewDebugLogRepo(idgen2, iDebugLogDAO)
	iDebugContextDAO := mysql.NewDebugContextDAO(db2)
	iDebugContextRepo := repo.NewDebugContextRepo(idgen2, iDebugContextDAO)
	iPromptBasicDAO := mysql.NewPromptBasicDAO(db2, redisCli)
	iPromptCommitDAO := mysql.NewPromptCommitDAO(db2, redisCli)
	iPromptUserDraftDAO := mysql.NewPromptUserDraftDAO(db2, redisCli)
	redisIPromptBasicDAO := redis2.NewPromptBasicDAO()
	iPromptDAO := redis2.NewPromptDAO()
	iManageRepo := repo.NewManageRepo(db2, idgen2, meter, iPromptBasicDAO, iPromptCommitDAO, iPromptUserDraftDAO, redisIPromptBasicDAO, iPromptDAO)
	iConfigProvider, err := conf2.NewPromptConfigProvider(configFactory)
	if err != nil {
		return nil, err
	}
	illmProvider := rpc.NewLLMRPCProvider(llmClient)
	iFileProvider := rpc.NewFileRPCProvider(fileClient)
	iPromptService := service.NewPromptService(idgen2, iDebugLogRepo, iDebugContextRepo, iManageRepo, iConfigProvider, illmProvider, iFileProvider)
	iAuthProvider := rpc.NewAuthRPCProvider(authClient)
	iCollectorProvider := collector.NewEventCollectorProvider()
	promptOpenAPIService, err := NewPromptOpenAPIApplication(iPromptService, iManageRepo, iConfigProvider, iAuthProvider, limiterFactory, iCollectorProvider)
	if err != nil {
		return nil, err
	}
	return promptOpenAPIService, nil
}

// wire.go:

var (
	promptDomainSet = wire.NewSet(service.NewPromptService, repo.NewManageRepo, repo.NewDebugLogRepo, repo.NewDebugContextRepo, mysql.NewPromptBasicDAO, mysql.NewPromptCommitDAO, mysql.NewPromptUserDraftDAO, mysql.NewDebugLogDAO, mysql.NewDebugContextDAO, redis2.NewPromptBasicDAO, redis2.NewPromptDAO, conf2.NewPromptConfigProvider, rpc.NewLLMRPCProvider, rpc.NewAuthRPCProvider, rpc.NewFileRPCProvider, rpc.NewUserRPCProvider, rpc.NewAuditRPCProvider, collector.NewEventCollectorProvider)
	manageSet       = wire.NewSet(
		NewPromptManageApplication,
		promptDomainSet,
	)
	debugSet = wire.NewSet(
		NewPromptDebugApplication,
		promptDomainSet,
	)
	executeSet = wire.NewSet(
		NewPromptExecuteApplication,
		promptDomainSet,
	)
	openAPISet = wire.NewSet(
		NewPromptOpenAPIApplication,
		promptDomainSet,
	)
)
