// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/coze-dev/coze-loop/backend/modules/data/infra/repo/tag/mysql/gorm_gen/model"
)

func newTagKey(db *gorm.DB, opts ...gen.DOOption) tagKey {
	_tagKey := tagKey{}

	_tagKey.tagKeyDo.UseDB(db, opts...)
	_tagKey.tagKeyDo.UseModel(&model.TagKey{})

	tableName := _tagKey.tagKeyDo.TableName()
	_tagKey.ALL = field.NewAsterisk(tableName)
	_tagKey.ID = field.NewInt64(tableName, "id")
	_tagKey.AppID = field.NewInt32(tableName, "app_id")
	_tagKey.SpaceID = field.NewInt64(tableName, "space_id")
	_tagKey.VersionNum = field.NewInt32(tableName, "version_num")
	_tagKey.Version = field.NewString(tableName, "version")
	_tagKey.TagKeyID = field.NewInt64(tableName, "tag_key_id")
	_tagKey.TagKeyName = field.NewString(tableName, "tag_key_name")
	_tagKey.Description = field.NewString(tableName, "description")
	_tagKey.ParentKeyID = field.NewInt64(tableName, "parent_key_id")
	_tagKey.CreatedAt = field.NewTime(tableName, "created_at")
	_tagKey.UpdatedAt = field.NewTime(tableName, "updated_at")
	_tagKey.ChangeLog = field.NewField(tableName, "change_log")
	_tagKey.Status = field.NewString(tableName, "status")
	_tagKey.TagType = field.NewString(tableName, "tag_type")
	_tagKey.CreatedBy = field.NewString(tableName, "created_by")
	_tagKey.UpdatedBy = field.NewString(tableName, "updated_by")
	_tagKey.TagTargetType = field.NewString(tableName, "tag_target_type")
	_tagKey.ContentType = field.NewString(tableName, "content_type")
	_tagKey.Spec = field.NewField(tableName, "spec")

	_tagKey.fillFieldMap()

	return _tagKey
}

// tagKey tag元数据表
type tagKey struct {
	tagKeyDo tagKeyDo

	ALL           field.Asterisk
	ID            field.Int64  // 主键id
	AppID         field.Int32  // application id
	SpaceID       field.Int64  // 归属space id,做分片键
	VersionNum    field.Int32  // tag自增版本
	Version       field.String // tag版本文案
	TagKeyID      field.Int64  // tag id，唯一标识一个标签
	TagKeyName    field.String // tag名称
	Description   field.String // tag描述
	ParentKeyID   field.Int64  // 级联标签场景,上层tag key id
	CreatedAt     field.Time   // 创建时间
	UpdatedAt     field.Time   // 更新时间
	ChangeLog     field.Field  // 变更日志
	Status        field.String // tag状态,active,inactive,deprecated
	TagType       field.String // tag类型,tag,option
	CreatedBy     field.String // 创建者
	UpdatedBy     field.String // 更新者
	TagTargetType field.String // tag目标对象列表,resource|dataset_item,多个值由,分隔
	ContentType   field.String // 内容类型: 自由文本,连续分值,分类,布尔值
	Spec          field.Field  // 标签规格

	fieldMap map[string]field.Expr
}

func (t tagKey) Table(newTableName string) *tagKey {
	t.tagKeyDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t tagKey) As(alias string) *tagKey {
	t.tagKeyDo.DO = *(t.tagKeyDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *tagKey) updateTableName(table string) *tagKey {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewInt64(table, "id")
	t.AppID = field.NewInt32(table, "app_id")
	t.SpaceID = field.NewInt64(table, "space_id")
	t.VersionNum = field.NewInt32(table, "version_num")
	t.Version = field.NewString(table, "version")
	t.TagKeyID = field.NewInt64(table, "tag_key_id")
	t.TagKeyName = field.NewString(table, "tag_key_name")
	t.Description = field.NewString(table, "description")
	t.ParentKeyID = field.NewInt64(table, "parent_key_id")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")
	t.ChangeLog = field.NewField(table, "change_log")
	t.Status = field.NewString(table, "status")
	t.TagType = field.NewString(table, "tag_type")
	t.CreatedBy = field.NewString(table, "created_by")
	t.UpdatedBy = field.NewString(table, "updated_by")
	t.TagTargetType = field.NewString(table, "tag_target_type")
	t.ContentType = field.NewString(table, "content_type")
	t.Spec = field.NewField(table, "spec")

	t.fillFieldMap()

	return t
}

func (t *tagKey) WithContext(ctx context.Context) *tagKeyDo { return t.tagKeyDo.WithContext(ctx) }

func (t tagKey) TableName() string { return t.tagKeyDo.TableName() }

func (t tagKey) Alias() string { return t.tagKeyDo.Alias() }

func (t tagKey) Columns(cols ...field.Expr) gen.Columns { return t.tagKeyDo.Columns(cols...) }

func (t *tagKey) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *tagKey) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 19)
	t.fieldMap["id"] = t.ID
	t.fieldMap["app_id"] = t.AppID
	t.fieldMap["space_id"] = t.SpaceID
	t.fieldMap["version_num"] = t.VersionNum
	t.fieldMap["version"] = t.Version
	t.fieldMap["tag_key_id"] = t.TagKeyID
	t.fieldMap["tag_key_name"] = t.TagKeyName
	t.fieldMap["description"] = t.Description
	t.fieldMap["parent_key_id"] = t.ParentKeyID
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
	t.fieldMap["change_log"] = t.ChangeLog
	t.fieldMap["status"] = t.Status
	t.fieldMap["tag_type"] = t.TagType
	t.fieldMap["created_by"] = t.CreatedBy
	t.fieldMap["updated_by"] = t.UpdatedBy
	t.fieldMap["tag_target_type"] = t.TagTargetType
	t.fieldMap["content_type"] = t.ContentType
	t.fieldMap["spec"] = t.Spec
}

func (t tagKey) clone(db *gorm.DB) tagKey {
	t.tagKeyDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t tagKey) replaceDB(db *gorm.DB) tagKey {
	t.tagKeyDo.ReplaceDB(db)
	return t
}

type tagKeyDo struct{ gen.DO }

func (t tagKeyDo) Debug() *tagKeyDo {
	return t.withDO(t.DO.Debug())
}

func (t tagKeyDo) WithContext(ctx context.Context) *tagKeyDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t tagKeyDo) ReadDB() *tagKeyDo {
	return t.Clauses(dbresolver.Read)
}

func (t tagKeyDo) WriteDB() *tagKeyDo {
	return t.Clauses(dbresolver.Write)
}

func (t tagKeyDo) Session(config *gorm.Session) *tagKeyDo {
	return t.withDO(t.DO.Session(config))
}

func (t tagKeyDo) Clauses(conds ...clause.Expression) *tagKeyDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t tagKeyDo) Returning(value interface{}, columns ...string) *tagKeyDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t tagKeyDo) Not(conds ...gen.Condition) *tagKeyDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t tagKeyDo) Or(conds ...gen.Condition) *tagKeyDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t tagKeyDo) Select(conds ...field.Expr) *tagKeyDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t tagKeyDo) Where(conds ...gen.Condition) *tagKeyDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t tagKeyDo) Order(conds ...field.Expr) *tagKeyDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t tagKeyDo) Distinct(cols ...field.Expr) *tagKeyDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t tagKeyDo) Omit(cols ...field.Expr) *tagKeyDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t tagKeyDo) Join(table schema.Tabler, on ...field.Expr) *tagKeyDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t tagKeyDo) LeftJoin(table schema.Tabler, on ...field.Expr) *tagKeyDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t tagKeyDo) RightJoin(table schema.Tabler, on ...field.Expr) *tagKeyDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t tagKeyDo) Group(cols ...field.Expr) *tagKeyDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t tagKeyDo) Having(conds ...gen.Condition) *tagKeyDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t tagKeyDo) Limit(limit int) *tagKeyDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t tagKeyDo) Offset(offset int) *tagKeyDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t tagKeyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *tagKeyDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t tagKeyDo) Unscoped() *tagKeyDo {
	return t.withDO(t.DO.Unscoped())
}

func (t tagKeyDo) Create(values ...*model.TagKey) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t tagKeyDo) CreateInBatches(values []*model.TagKey, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t tagKeyDo) Save(values ...*model.TagKey) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t tagKeyDo) First() (*model.TagKey, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TagKey), nil
	}
}

func (t tagKeyDo) Take() (*model.TagKey, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TagKey), nil
	}
}

func (t tagKeyDo) Last() (*model.TagKey, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TagKey), nil
	}
}

func (t tagKeyDo) Find() ([]*model.TagKey, error) {
	result, err := t.DO.Find()
	return result.([]*model.TagKey), err
}

func (t tagKeyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TagKey, err error) {
	buf := make([]*model.TagKey, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t tagKeyDo) FindInBatches(result *[]*model.TagKey, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t tagKeyDo) Attrs(attrs ...field.AssignExpr) *tagKeyDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t tagKeyDo) Assign(attrs ...field.AssignExpr) *tagKeyDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t tagKeyDo) Joins(fields ...field.RelationField) *tagKeyDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t tagKeyDo) Preload(fields ...field.RelationField) *tagKeyDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t tagKeyDo) FirstOrInit() (*model.TagKey, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TagKey), nil
	}
}

func (t tagKeyDo) FirstOrCreate() (*model.TagKey, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TagKey), nil
	}
}

func (t tagKeyDo) FindByPage(offset int, limit int) (result []*model.TagKey, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t tagKeyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t tagKeyDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t tagKeyDo) Delete(models ...*model.TagKey) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *tagKeyDo) withDO(do gen.Dao) *tagKeyDo {
	t.DO = *do.(*gen.DO)
	return t
}
