// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/data/domain/dataset/service (interfaces: IDatasetAPI)
//
// Generated by this command:
//
//	mockgen -destination=mocks/tag_service.go -package=mocks . IDatasetAPI
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	fs "io/fs"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	entity "github.com/coze-dev/coze-loop/backend/modules/data/domain/dataset/entity"
	service "github.com/coze-dev/coze-loop/backend/modules/data/domain/dataset/service"
	entity0 "github.com/coze-dev/coze-loop/backend/modules/data/domain/entity"
)

// MockIDatasetAPI is a mock of IDatasetAPI interface.
type MockIDatasetAPI struct {
	ctrl     *gomock.Controller
	recorder *MockIDatasetAPIMockRecorder
	isgomock struct{}
}

// MockIDatasetAPIMockRecorder is the mock recorder for MockIDatasetAPI.
type MockIDatasetAPIMockRecorder struct {
	mock *MockIDatasetAPI
}

// NewMockIDatasetAPI creates a new mock instance.
func NewMockIDatasetAPI(ctrl *gomock.Controller) *MockIDatasetAPI {
	mock := &MockIDatasetAPI{ctrl: ctrl}
	mock.recorder = &MockIDatasetAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDatasetAPI) EXPECT() *MockIDatasetAPIMockRecorder {
	return m.recorder
}

// ArchiveAndCreateItem mocks base method.
func (m *MockIDatasetAPI) ArchiveAndCreateItem(ctx context.Context, ds *service.DatasetWithSchema, oldID int64, item *entity.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArchiveAndCreateItem", ctx, ds, oldID, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// ArchiveAndCreateItem indicates an expected call of ArchiveAndCreateItem.
func (mr *MockIDatasetAPIMockRecorder) ArchiveAndCreateItem(ctx, ds, oldID, item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArchiveAndCreateItem", reflect.TypeOf((*MockIDatasetAPI)(nil).ArchiveAndCreateItem), ctx, ds, oldID, item)
}

// BatchCreateItems mocks base method.
func (m *MockIDatasetAPI) BatchCreateItems(ctx context.Context, ds *service.DatasetWithSchema, items []*service.IndexedItem, opt *service.MAddItemOpt) ([]*service.IndexedItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreateItems", ctx, ds, items, opt)
	ret0, _ := ret[0].([]*service.IndexedItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchCreateItems indicates an expected call of BatchCreateItems.
func (mr *MockIDatasetAPIMockRecorder) BatchCreateItems(ctx, ds, items, opt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateItems", reflect.TypeOf((*MockIDatasetAPI)(nil).BatchCreateItems), ctx, ds, items, opt)
}

// BatchDeleteItems mocks base method.
func (m *MockIDatasetAPI) BatchDeleteItems(ctx context.Context, ds *service.DatasetWithSchema, items ...*entity.Item) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, ds}
	for _, a := range items {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchDeleteItems", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchDeleteItems indicates an expected call of BatchDeleteItems.
func (mr *MockIDatasetAPIMockRecorder) BatchDeleteItems(ctx, ds any, items ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, ds}, items...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteItems", reflect.TypeOf((*MockIDatasetAPI)(nil).BatchDeleteItems), varargs...)
}

// BatchGetDataset mocks base method.
func (m *MockIDatasetAPI) BatchGetDataset(ctx context.Context, spaceID int64, ids []int64) ([]*service.DatasetWithSchema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetDataset", ctx, spaceID, ids)
	ret0, _ := ret[0].([]*service.DatasetWithSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetDataset indicates an expected call of BatchGetDataset.
func (mr *MockIDatasetAPIMockRecorder) BatchGetDataset(ctx, spaceID, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetDataset", reflect.TypeOf((*MockIDatasetAPI)(nil).BatchGetDataset), ctx, spaceID, ids)
}

// BatchGetDatasetWithOpt mocks base method.
func (m *MockIDatasetAPI) BatchGetDatasetWithOpt(ctx context.Context, spaceID int64, ids []int64, opt *service.GetOpt) ([]*service.DatasetWithSchema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetDatasetWithOpt", ctx, spaceID, ids, opt)
	ret0, _ := ret[0].([]*service.DatasetWithSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetDatasetWithOpt indicates an expected call of BatchGetDatasetWithOpt.
func (mr *MockIDatasetAPIMockRecorder) BatchGetDatasetWithOpt(ctx, spaceID, ids, opt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetDatasetWithOpt", reflect.TypeOf((*MockIDatasetAPI)(nil).BatchGetDatasetWithOpt), ctx, spaceID, ids, opt)
}

// BatchGetItems mocks base method.
func (m *MockIDatasetAPI) BatchGetItems(ctx context.Context, spaceID, datasetID int64, itemIDs []int64) ([]*entity.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetItems", ctx, spaceID, datasetID, itemIDs)
	ret0, _ := ret[0].([]*entity.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetItems indicates an expected call of BatchGetItems.
func (mr *MockIDatasetAPIMockRecorder) BatchGetItems(ctx, spaceID, datasetID, itemIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetItems", reflect.TypeOf((*MockIDatasetAPI)(nil).BatchGetItems), ctx, spaceID, datasetID, itemIDs)
}

// BatchGetVersionedDatasetsWithOpt mocks base method.
func (m *MockIDatasetAPI) BatchGetVersionedDatasetsWithOpt(ctx context.Context, spaceID int64, versionIDs []int64, opt *service.GetOpt) ([]*service.VersionedDatasetWithSchema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetVersionedDatasetsWithOpt", ctx, spaceID, versionIDs, opt)
	ret0, _ := ret[0].([]*service.VersionedDatasetWithSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetVersionedDatasetsWithOpt indicates an expected call of BatchGetVersionedDatasetsWithOpt.
func (mr *MockIDatasetAPIMockRecorder) BatchGetVersionedDatasetsWithOpt(ctx, spaceID, versionIDs, opt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetVersionedDatasetsWithOpt", reflect.TypeOf((*MockIDatasetAPI)(nil).BatchGetVersionedDatasetsWithOpt), ctx, spaceID, versionIDs, opt)
}

// ClearDataset mocks base method.
func (m *MockIDatasetAPI) ClearDataset(ctx context.Context, ds *service.DatasetWithSchema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearDataset", ctx, ds)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearDataset indicates an expected call of ClearDataset.
func (mr *MockIDatasetAPIMockRecorder) ClearDataset(ctx, ds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearDataset", reflect.TypeOf((*MockIDatasetAPI)(nil).ClearDataset), ctx, ds)
}

// CreateDataset mocks base method.
func (m *MockIDatasetAPI) CreateDataset(ctx context.Context, dataset *entity.Dataset, fields []*entity.FieldSchema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataset", ctx, dataset, fields)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDataset indicates an expected call of CreateDataset.
func (mr *MockIDatasetAPIMockRecorder) CreateDataset(ctx, dataset, fields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataset", reflect.TypeOf((*MockIDatasetAPI)(nil).CreateDataset), ctx, dataset, fields)
}

// CreateIOJob mocks base method.
func (m *MockIDatasetAPI) CreateIOJob(ctx context.Context, job *entity.IOJob) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIOJob", ctx, job)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIOJob indicates an expected call of CreateIOJob.
func (mr *MockIDatasetAPIMockRecorder) CreateIOJob(ctx, job any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIOJob", reflect.TypeOf((*MockIDatasetAPI)(nil).CreateIOJob), ctx, job)
}

// CreateVersion mocks base method.
func (m *MockIDatasetAPI) CreateVersion(ctx context.Context, ds *service.DatasetWithSchema, version *entity.DatasetVersion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVersion", ctx, ds, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVersion indicates an expected call of CreateVersion.
func (mr *MockIDatasetAPIMockRecorder) CreateVersion(ctx, ds, version any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVersion", reflect.TypeOf((*MockIDatasetAPI)(nil).CreateVersion), ctx, ds, version)
}

// DeleteDataset mocks base method.
func (m *MockIDatasetAPI) DeleteDataset(ctx context.Context, spaceID, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDataset", ctx, spaceID, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDataset indicates an expected call of DeleteDataset.
func (mr *MockIDatasetAPIMockRecorder) DeleteDataset(ctx, spaceID, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataset", reflect.TypeOf((*MockIDatasetAPI)(nil).DeleteDataset), ctx, spaceID, id)
}

// GetDataset mocks base method.
func (m *MockIDatasetAPI) GetDataset(ctx context.Context, spaceID, id int64) (*service.DatasetWithSchema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataset", ctx, spaceID, id)
	ret0, _ := ret[0].(*service.DatasetWithSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataset indicates an expected call of GetDataset.
func (mr *MockIDatasetAPIMockRecorder) GetDataset(ctx, spaceID, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataset", reflect.TypeOf((*MockIDatasetAPI)(nil).GetDataset), ctx, spaceID, id)
}

// GetDatasetWithOpt mocks base method.
func (m *MockIDatasetAPI) GetDatasetWithOpt(ctx context.Context, spaceID, id int64, opt *service.GetOpt) (*service.DatasetWithSchema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatasetWithOpt", ctx, spaceID, id, opt)
	ret0, _ := ret[0].(*service.DatasetWithSchema)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDatasetWithOpt indicates an expected call of GetDatasetWithOpt.
func (mr *MockIDatasetAPIMockRecorder) GetDatasetWithOpt(ctx, spaceID, id, opt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatasetWithOpt", reflect.TypeOf((*MockIDatasetAPI)(nil).GetDatasetWithOpt), ctx, spaceID, id, opt)
}

// GetIOJob mocks base method.
func (m *MockIDatasetAPI) GetIOJob(ctx context.Context, jobID int64) (*entity.IOJob, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIOJob", ctx, jobID)
	ret0, _ := ret[0].(*entity.IOJob)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIOJob indicates an expected call of GetIOJob.
func (mr *MockIDatasetAPIMockRecorder) GetIOJob(ctx, jobID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIOJob", reflect.TypeOf((*MockIDatasetAPI)(nil).GetIOJob), ctx, jobID)
}

// GetItem mocks base method.
func (m *MockIDatasetAPI) GetItem(ctx context.Context, spaceID, datasetID, itemID int64) (*entity.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItem", ctx, spaceID, datasetID, itemID)
	ret0, _ := ret[0].(*entity.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItem indicates an expected call of GetItem.
func (mr *MockIDatasetAPIMockRecorder) GetItem(ctx, spaceID, datasetID, itemID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItem", reflect.TypeOf((*MockIDatasetAPI)(nil).GetItem), ctx, spaceID, datasetID, itemID)
}

// GetOrSetItemCountOfVersion mocks base method.
func (m *MockIDatasetAPI) GetOrSetItemCountOfVersion(ctx context.Context, version *entity.DatasetVersion) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrSetItemCountOfVersion", ctx, version)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrSetItemCountOfVersion indicates an expected call of GetOrSetItemCountOfVersion.
func (mr *MockIDatasetAPIMockRecorder) GetOrSetItemCountOfVersion(ctx, version any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrSetItemCountOfVersion", reflect.TypeOf((*MockIDatasetAPI)(nil).GetOrSetItemCountOfVersion), ctx, version)
}

// GetVersionWithOpt mocks base method.
func (m *MockIDatasetAPI) GetVersionWithOpt(ctx context.Context, spaceID, versionID int64, opt *service.GetOpt) (*entity.DatasetVersion, *service.DatasetWithSchema, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVersionWithOpt", ctx, spaceID, versionID, opt)
	ret0, _ := ret[0].(*entity.DatasetVersion)
	ret1, _ := ret[1].(*service.DatasetWithSchema)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetVersionWithOpt indicates an expected call of GetVersionWithOpt.
func (mr *MockIDatasetAPIMockRecorder) GetVersionWithOpt(ctx, spaceID, versionID, opt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersionWithOpt", reflect.TypeOf((*MockIDatasetAPI)(nil).GetVersionWithOpt), ctx, spaceID, versionID, opt)
}

// LoadItemData mocks base method.
func (m *MockIDatasetAPI) LoadItemData(ctx context.Context, items ...*entity.Item) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range items {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoadItemData", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadItemData indicates an expected call of LoadItemData.
func (mr *MockIDatasetAPIMockRecorder) LoadItemData(ctx any, items ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, items...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadItemData", reflect.TypeOf((*MockIDatasetAPI)(nil).LoadItemData), varargs...)
}

// RunIOJob mocks base method.
func (m *MockIDatasetAPI) RunIOJob(ctx context.Context, msg *entity.JobRunMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunIOJob", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunIOJob indicates an expected call of RunIOJob.
func (mr *MockIDatasetAPIMockRecorder) RunIOJob(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunIOJob", reflect.TypeOf((*MockIDatasetAPI)(nil).RunIOJob), ctx, msg)
}

// RunSnapshotItemJob mocks base method.
func (m *MockIDatasetAPI) RunSnapshotItemJob(ctx context.Context, msg *entity.JobRunMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunSnapshotItemJob", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunSnapshotItemJob indicates an expected call of RunSnapshotItemJob.
func (mr *MockIDatasetAPIMockRecorder) RunSnapshotItemJob(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunSnapshotItemJob", reflect.TypeOf((*MockIDatasetAPI)(nil).RunSnapshotItemJob), ctx, msg)
}

// SearchDataset mocks base method.
func (m *MockIDatasetAPI) SearchDataset(ctx context.Context, req *service.SearchDatasetsParam) (*service.SearchDatasetsResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchDataset", ctx, req)
	ret0, _ := ret[0].(*service.SearchDatasetsResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchDataset indicates an expected call of SearchDataset.
func (mr *MockIDatasetAPIMockRecorder) SearchDataset(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchDataset", reflect.TypeOf((*MockIDatasetAPI)(nil).SearchDataset), ctx, req)
}

// StatFile mocks base method.
func (m *MockIDatasetAPI) StatFile(ctx context.Context, provider entity0.Provider, path string) (fs.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatFile", ctx, provider, path)
	ret0, _ := ret[0].(fs.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatFile indicates an expected call of StatFile.
func (mr *MockIDatasetAPIMockRecorder) StatFile(ctx, provider, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatFile", reflect.TypeOf((*MockIDatasetAPI)(nil).StatFile), ctx, provider, path)
}

// UpdateDataset mocks base method.
func (m *MockIDatasetAPI) UpdateDataset(ctx context.Context, param *service.UpdateDatasetParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDataset", ctx, param)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDataset indicates an expected call of UpdateDataset.
func (mr *MockIDatasetAPIMockRecorder) UpdateDataset(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDataset", reflect.TypeOf((*MockIDatasetAPI)(nil).UpdateDataset), ctx, param)
}

// UpdateItem mocks base method.
func (m *MockIDatasetAPI) UpdateItem(ctx context.Context, ds *service.DatasetWithSchema, item *entity.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItem", ctx, ds, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItem indicates an expected call of UpdateItem.
func (mr *MockIDatasetAPIMockRecorder) UpdateItem(ctx, ds, item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItem", reflect.TypeOf((*MockIDatasetAPI)(nil).UpdateItem), ctx, ds, item)
}

// UpdateSchema mocks base method.
func (m *MockIDatasetAPI) UpdateSchema(ctx context.Context, ds *entity.Dataset, fields []*entity.FieldSchema, updatedBy string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSchema", ctx, ds, fields, updatedBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSchema indicates an expected call of UpdateSchema.
func (mr *MockIDatasetAPIMockRecorder) UpdateSchema(ctx, ds, fields, updatedBy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSchema", reflect.TypeOf((*MockIDatasetAPI)(nil).UpdateSchema), ctx, ds, fields, updatedBy)
}
