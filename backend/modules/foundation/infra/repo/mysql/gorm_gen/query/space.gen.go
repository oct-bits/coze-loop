// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/coze-dev/coze-loop/backend/modules/foundation/infra/repo/mysql/gorm_gen/model"
)

func newSpace(db *gorm.DB, opts ...gen.DOOption) space {
	_space := space{}

	_space.spaceDo.UseDB(db, opts...)
	_space.spaceDo.UseModel(&model.Space{})

	tableName := _space.spaceDo.TableName()
	_space.ALL = field.NewAsterisk(tableName)
	_space.ID = field.NewInt64(tableName, "id")
	_space.OwnerID = field.NewInt64(tableName, "owner_id")
	_space.Name = field.NewString(tableName, "name")
	_space.Description = field.NewString(tableName, "description")
	_space.SpaceType = field.NewInt32(tableName, "space_type")
	_space.IconURI = field.NewString(tableName, "icon_uri")
	_space.CreatedBy = field.NewInt64(tableName, "created_by")
	_space.DeletedAt = field.NewInt64(tableName, "deleted_at")
	_space.CreatedAt = field.NewTime(tableName, "created_at")
	_space.UpdatedAt = field.NewTime(tableName, "updated_at")

	_space.fillFieldMap()

	return _space
}

// space Space Table
type space struct {
	spaceDo spaceDo

	ALL         field.Asterisk
	ID          field.Int64  // Primary Key ID, Space ID
	OwnerID     field.Int64  // Owner ID
	Name        field.String // Space Name
	Description field.String // Space Description
	SpaceType   field.Int32  // Space Type, 1: Personal, 2: Team
	IconURI     field.String // Icon URI
	CreatedBy   field.Int64  // Creator ID
	DeletedAt   field.Int64  // 删除时间
	CreatedAt   field.Time   // 创建时间
	UpdatedAt   field.Time   // 更新时间

	fieldMap map[string]field.Expr
}

func (s space) Table(newTableName string) *space {
	s.spaceDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s space) As(alias string) *space {
	s.spaceDo.DO = *(s.spaceDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *space) updateTableName(table string) *space {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.OwnerID = field.NewInt64(table, "owner_id")
	s.Name = field.NewString(table, "name")
	s.Description = field.NewString(table, "description")
	s.SpaceType = field.NewInt32(table, "space_type")
	s.IconURI = field.NewString(table, "icon_uri")
	s.CreatedBy = field.NewInt64(table, "created_by")
	s.DeletedAt = field.NewInt64(table, "deleted_at")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")

	s.fillFieldMap()

	return s
}

func (s *space) WithContext(ctx context.Context) *spaceDo { return s.spaceDo.WithContext(ctx) }

func (s space) TableName() string { return s.spaceDo.TableName() }

func (s space) Alias() string { return s.spaceDo.Alias() }

func (s space) Columns(cols ...field.Expr) gen.Columns { return s.spaceDo.Columns(cols...) }

func (s *space) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *space) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["id"] = s.ID
	s.fieldMap["owner_id"] = s.OwnerID
	s.fieldMap["name"] = s.Name
	s.fieldMap["description"] = s.Description
	s.fieldMap["space_type"] = s.SpaceType
	s.fieldMap["icon_uri"] = s.IconURI
	s.fieldMap["created_by"] = s.CreatedBy
	s.fieldMap["deleted_at"] = s.DeletedAt
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
}

func (s space) clone(db *gorm.DB) space {
	s.spaceDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s space) replaceDB(db *gorm.DB) space {
	s.spaceDo.ReplaceDB(db)
	return s
}

type spaceDo struct{ gen.DO }

func (s spaceDo) Debug() *spaceDo {
	return s.withDO(s.DO.Debug())
}

func (s spaceDo) WithContext(ctx context.Context) *spaceDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s spaceDo) ReadDB() *spaceDo {
	return s.Clauses(dbresolver.Read)
}

func (s spaceDo) WriteDB() *spaceDo {
	return s.Clauses(dbresolver.Write)
}

func (s spaceDo) Session(config *gorm.Session) *spaceDo {
	return s.withDO(s.DO.Session(config))
}

func (s spaceDo) Clauses(conds ...clause.Expression) *spaceDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s spaceDo) Returning(value interface{}, columns ...string) *spaceDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s spaceDo) Not(conds ...gen.Condition) *spaceDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s spaceDo) Or(conds ...gen.Condition) *spaceDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s spaceDo) Select(conds ...field.Expr) *spaceDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s spaceDo) Where(conds ...gen.Condition) *spaceDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s spaceDo) Order(conds ...field.Expr) *spaceDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s spaceDo) Distinct(cols ...field.Expr) *spaceDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s spaceDo) Omit(cols ...field.Expr) *spaceDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s spaceDo) Join(table schema.Tabler, on ...field.Expr) *spaceDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s spaceDo) LeftJoin(table schema.Tabler, on ...field.Expr) *spaceDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s spaceDo) RightJoin(table schema.Tabler, on ...field.Expr) *spaceDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s spaceDo) Group(cols ...field.Expr) *spaceDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s spaceDo) Having(conds ...gen.Condition) *spaceDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s spaceDo) Limit(limit int) *spaceDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s spaceDo) Offset(offset int) *spaceDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s spaceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *spaceDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s spaceDo) Unscoped() *spaceDo {
	return s.withDO(s.DO.Unscoped())
}

func (s spaceDo) Create(values ...*model.Space) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s spaceDo) CreateInBatches(values []*model.Space, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s spaceDo) Save(values ...*model.Space) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s spaceDo) First() (*model.Space, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Space), nil
	}
}

func (s spaceDo) Take() (*model.Space, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Space), nil
	}
}

func (s spaceDo) Last() (*model.Space, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Space), nil
	}
}

func (s spaceDo) Find() ([]*model.Space, error) {
	result, err := s.DO.Find()
	return result.([]*model.Space), err
}

func (s spaceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Space, err error) {
	buf := make([]*model.Space, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s spaceDo) FindInBatches(result *[]*model.Space, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s spaceDo) Attrs(attrs ...field.AssignExpr) *spaceDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s spaceDo) Assign(attrs ...field.AssignExpr) *spaceDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s spaceDo) Joins(fields ...field.RelationField) *spaceDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s spaceDo) Preload(fields ...field.RelationField) *spaceDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s spaceDo) FirstOrInit() (*model.Space, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Space), nil
	}
}

func (s spaceDo) FirstOrCreate() (*model.Space, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Space), nil
	}
}

func (s spaceDo) FindByPage(offset int, limit int) (result []*model.Space, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s spaceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s spaceDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s spaceDo) Delete(models ...*model.Space) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *spaceDo) withDO(do gen.Dao) *spaceDo {
	s.DO = *do.(*gen.DO)
	return s
}
