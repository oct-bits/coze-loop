// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/mysql (interfaces: IExptItemResultDAO)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	db "github.com/coze-dev/coze-loop/backend/infra/db"
	entity "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/entity"
	model "github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/mysql/gorm_gen/model"
	gomock "go.uber.org/mock/gomock"
)

// MockIExptItemResultDAO is a mock of IExptItemResultDAO interface.
type MockIExptItemResultDAO struct {
	ctrl     *gomock.Controller
	recorder *MockIExptItemResultDAOMockRecorder
}

// MockIExptItemResultDAOMockRecorder is the mock recorder for MockIExptItemResultDAO.
type MockIExptItemResultDAOMockRecorder struct {
	mock *MockIExptItemResultDAO
}

// NewMockIExptItemResultDAO creates a new mock instance.
func NewMockIExptItemResultDAO(ctrl *gomock.Controller) *MockIExptItemResultDAO {
	mock := &MockIExptItemResultDAO{ctrl: ctrl}
	mock.recorder = &MockIExptItemResultDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIExptItemResultDAO) EXPECT() *MockIExptItemResultDAOMockRecorder {
	return m.recorder
}

// BatchCreateNX mocks base method.
func (m *MockIExptItemResultDAO) BatchCreateNX(arg0 context.Context, arg1 []*model.ExptItemResult, arg2 ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchCreateNX", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchCreateNX indicates an expected call of BatchCreateNX.
func (mr *MockIExptItemResultDAOMockRecorder) BatchCreateNX(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateNX", reflect.TypeOf((*MockIExptItemResultDAO)(nil).BatchCreateNX), varargs...)
}

// BatchCreateNXRunLogs mocks base method.
func (m *MockIExptItemResultDAO) BatchCreateNXRunLogs(arg0 context.Context, arg1 []*model.ExptItemResultRunLog, arg2 ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchCreateNXRunLogs", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchCreateNXRunLogs indicates an expected call of BatchCreateNXRunLogs.
func (mr *MockIExptItemResultDAOMockRecorder) BatchCreateNXRunLogs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateNXRunLogs", reflect.TypeOf((*MockIExptItemResultDAO)(nil).BatchCreateNXRunLogs), varargs...)
}

// BatchGet mocks base method.
func (m *MockIExptItemResultDAO) BatchGet(arg0 context.Context, arg1, arg2 int64, arg3 []int64, arg4 ...db.Option) ([]*model.ExptItemResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGet", varargs...)
	ret0, _ := ret[0].([]*model.ExptItemResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGet indicates an expected call of BatchGet.
func (mr *MockIExptItemResultDAOMockRecorder) BatchGet(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGet", reflect.TypeOf((*MockIExptItemResultDAO)(nil).BatchGet), varargs...)
}

// GetItemIDListByExptID mocks base method.
func (m *MockIExptItemResultDAO) GetItemIDListByExptID(arg0 context.Context, arg1, arg2 int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemIDListByExptID", arg0, arg1, arg2)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemIDListByExptID indicates an expected call of GetItemIDListByExptID.
func (mr *MockIExptItemResultDAOMockRecorder) GetItemIDListByExptID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemIDListByExptID", reflect.TypeOf((*MockIExptItemResultDAO)(nil).GetItemIDListByExptID), arg0, arg1, arg2)
}

// GetItemRunLog mocks base method.
func (m *MockIExptItemResultDAO) GetItemRunLog(arg0 context.Context, arg1, arg2, arg3, arg4 int64, arg5 ...db.Option) (*model.ExptItemResultRunLog, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetItemRunLog", varargs...)
	ret0, _ := ret[0].(*model.ExptItemResultRunLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemRunLog indicates an expected call of GetItemRunLog.
func (mr *MockIExptItemResultDAOMockRecorder) GetItemRunLog(arg0, arg1, arg2, arg3, arg4 interface{}, arg5 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3, arg4}, arg5...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemRunLog", reflect.TypeOf((*MockIExptItemResultDAO)(nil).GetItemRunLog), varargs...)
}

// GetItemTurnResults mocks base method.
func (m *MockIExptItemResultDAO) GetItemTurnResults(arg0 context.Context, arg1, arg2, arg3 int64, arg4 ...db.Option) ([]*model.ExptTurnResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetItemTurnResults", varargs...)
	ret0, _ := ret[0].([]*model.ExptTurnResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemTurnResults indicates an expected call of GetItemTurnResults.
func (mr *MockIExptItemResultDAOMockRecorder) GetItemTurnResults(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemTurnResults", reflect.TypeOf((*MockIExptItemResultDAO)(nil).GetItemTurnResults), varargs...)
}

// GetMaxItemIdxByExptID mocks base method.
func (m *MockIExptItemResultDAO) GetMaxItemIdxByExptID(arg0 context.Context, arg1, arg2 int64, arg3 ...db.Option) (int32, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMaxItemIdxByExptID", varargs...)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaxItemIdxByExptID indicates an expected call of GetMaxItemIdxByExptID.
func (mr *MockIExptItemResultDAOMockRecorder) GetMaxItemIdxByExptID(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxItemIdxByExptID", reflect.TypeOf((*MockIExptItemResultDAO)(nil).GetMaxItemIdxByExptID), varargs...)
}

// ListItemResultsByExptID mocks base method.
func (m *MockIExptItemResultDAO) ListItemResultsByExptID(arg0 context.Context, arg1, arg2 int64, arg3 entity.Page, arg4 bool) ([]*model.ExptItemResult, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListItemResultsByExptID", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*model.ExptItemResult)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListItemResultsByExptID indicates an expected call of ListItemResultsByExptID.
func (mr *MockIExptItemResultDAOMockRecorder) ListItemResultsByExptID(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListItemResultsByExptID", reflect.TypeOf((*MockIExptItemResultDAO)(nil).ListItemResultsByExptID), arg0, arg1, arg2, arg3, arg4)
}

// MGetItemRunLog mocks base method.
func (m *MockIExptItemResultDAO) MGetItemRunLog(arg0 context.Context, arg1, arg2 int64, arg3 []int64, arg4 int64, arg5 ...db.Option) ([]*model.ExptItemResultRunLog, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MGetItemRunLog", varargs...)
	ret0, _ := ret[0].([]*model.ExptItemResultRunLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetItemRunLog indicates an expected call of MGetItemRunLog.
func (mr *MockIExptItemResultDAOMockRecorder) MGetItemRunLog(arg0, arg1, arg2, arg3, arg4 interface{}, arg5 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3, arg4}, arg5...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetItemRunLog", reflect.TypeOf((*MockIExptItemResultDAO)(nil).MGetItemRunLog), varargs...)
}

// SaveItemResults mocks base method.
func (m *MockIExptItemResultDAO) SaveItemResults(arg0 context.Context, arg1 []*model.ExptItemResult, arg2 ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveItemResults", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveItemResults indicates an expected call of SaveItemResults.
func (mr *MockIExptItemResultDAOMockRecorder) SaveItemResults(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveItemResults", reflect.TypeOf((*MockIExptItemResultDAO)(nil).SaveItemResults), varargs...)
}

// ScanItemResults mocks base method.
func (m *MockIExptItemResultDAO) ScanItemResults(arg0 context.Context, arg1, arg2, arg3 int64, arg4 []int32, arg5 int64, arg6 ...db.Option) ([]*model.ExptItemResult, int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3, arg4, arg5}
	for _, a := range arg6 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScanItemResults", varargs...)
	ret0, _ := ret[0].([]*model.ExptItemResult)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ScanItemResults indicates an expected call of ScanItemResults.
func (mr *MockIExptItemResultDAOMockRecorder) ScanItemResults(arg0, arg1, arg2, arg3, arg4, arg5 interface{}, arg6 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3, arg4, arg5}, arg6...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanItemResults", reflect.TypeOf((*MockIExptItemResultDAO)(nil).ScanItemResults), varargs...)
}

// ScanItemRunLogs mocks base method.
func (m *MockIExptItemResultDAO) ScanItemRunLogs(arg0 context.Context, arg1, arg2 int64, arg3 *entity.ExptItemRunLogFilter, arg4, arg5, arg6 int64, arg7 ...db.Option) ([]*model.ExptItemResultRunLog, int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3, arg4, arg5, arg6}
	for _, a := range arg7 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScanItemRunLogs", varargs...)
	ret0, _ := ret[0].([]*model.ExptItemResultRunLog)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ScanItemRunLogs indicates an expected call of ScanItemRunLogs.
func (mr *MockIExptItemResultDAOMockRecorder) ScanItemRunLogs(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}, arg7 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3, arg4, arg5, arg6}, arg7...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanItemRunLogs", reflect.TypeOf((*MockIExptItemResultDAO)(nil).ScanItemRunLogs), varargs...)
}

// UpdateItemRunLog mocks base method.
func (m *MockIExptItemResultDAO) UpdateItemRunLog(arg0 context.Context, arg1, arg2 int64, arg3 []int64, arg4 map[string]interface{}, arg5 int64, arg6 ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3, arg4, arg5}
	for _, a := range arg6 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateItemRunLog", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItemRunLog indicates an expected call of UpdateItemRunLog.
func (mr *MockIExptItemResultDAOMockRecorder) UpdateItemRunLog(arg0, arg1, arg2, arg3, arg4, arg5 interface{}, arg6 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3, arg4, arg5}, arg6...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItemRunLog", reflect.TypeOf((*MockIExptItemResultDAO)(nil).UpdateItemRunLog), varargs...)
}

// UpdateItemsResult mocks base method.
func (m *MockIExptItemResultDAO) UpdateItemsResult(arg0 context.Context, arg1, arg2 int64, arg3 []int64, arg4 map[string]interface{}, arg5 ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3, arg4}
	for _, a := range arg5 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateItemsResult", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItemsResult indicates an expected call of UpdateItemsResult.
func (mr *MockIExptItemResultDAOMockRecorder) UpdateItemsResult(arg0, arg1, arg2, arg3, arg4 interface{}, arg5 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3, arg4}, arg5...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItemsResult", reflect.TypeOf((*MockIExptItemResultDAO)(nil).UpdateItemsResult), varargs...)
}
