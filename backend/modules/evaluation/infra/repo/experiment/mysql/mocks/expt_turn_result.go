// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/mysql (interfaces: ExptTurnResultDAO)
//
// Generated by this command:
//
//	mockgen -destination=mocks/expt_turn_result.go -package mocks . ExptTurnResultDAO
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	db "github.com/coze-dev/coze-loop/backend/infra/db"
	entity "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/entity"
	model "github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/mysql/gorm_gen/model"
	gomock "go.uber.org/mock/gomock"
)

// MockExptTurnResultDAO is a mock of ExptTurnResultDAO interface.
type MockExptTurnResultDAO struct {
	ctrl     *gomock.Controller
	recorder *MockExptTurnResultDAOMockRecorder
	isgomock struct{}
}

// MockExptTurnResultDAOMockRecorder is the mock recorder for MockExptTurnResultDAO.
type MockExptTurnResultDAOMockRecorder struct {
	mock *MockExptTurnResultDAO
}

// NewMockExptTurnResultDAO creates a new mock instance.
func NewMockExptTurnResultDAO(ctrl *gomock.Controller) *MockExptTurnResultDAO {
	mock := &MockExptTurnResultDAO{ctrl: ctrl}
	mock.recorder = &MockExptTurnResultDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExptTurnResultDAO) EXPECT() *MockExptTurnResultDAOMockRecorder {
	return m.recorder
}

// BatchCreateNX mocks base method.
func (m *MockExptTurnResultDAO) BatchCreateNX(ctx context.Context, turnResults []*model.ExptTurnResult, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, turnResults}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchCreateNX", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchCreateNX indicates an expected call of BatchCreateNX.
func (mr *MockExptTurnResultDAOMockRecorder) BatchCreateNX(ctx, turnResults any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, turnResults}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateNX", reflect.TypeOf((*MockExptTurnResultDAO)(nil).BatchCreateNX), varargs...)
}

// BatchCreateNXRunLog mocks base method.
func (m *MockExptTurnResultDAO) BatchCreateNXRunLog(ctx context.Context, turnResults []*model.ExptTurnResultRunLog, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, turnResults}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchCreateNXRunLog", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchCreateNXRunLog indicates an expected call of BatchCreateNXRunLog.
func (mr *MockExptTurnResultDAOMockRecorder) BatchCreateNXRunLog(ctx, turnResults any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, turnResults}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateNXRunLog", reflect.TypeOf((*MockExptTurnResultDAO)(nil).BatchCreateNXRunLog), varargs...)
}

// BatchGet mocks base method.
func (m *MockExptTurnResultDAO) BatchGet(ctx context.Context, spaceID, exptID int64, itemIDs []int64, opts ...db.Option) ([]*model.ExptTurnResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, exptID, itemIDs}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchGet", varargs...)
	ret0, _ := ret[0].([]*model.ExptTurnResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGet indicates an expected call of BatchGet.
func (mr *MockExptTurnResultDAOMockRecorder) BatchGet(ctx, spaceID, exptID, itemIDs any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, exptID, itemIDs}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGet", reflect.TypeOf((*MockExptTurnResultDAO)(nil).BatchGet), varargs...)
}

// CreateTurnEvaluatorRefs mocks base method.
func (m *MockExptTurnResultDAO) CreateTurnEvaluatorRefs(ctx context.Context, turnResults []*model.ExptTurnEvaluatorResultRef, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, turnResults}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTurnEvaluatorRefs", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTurnEvaluatorRefs indicates an expected call of CreateTurnEvaluatorRefs.
func (mr *MockExptTurnResultDAOMockRecorder) CreateTurnEvaluatorRefs(ctx, turnResults any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, turnResults}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTurnEvaluatorRefs", reflect.TypeOf((*MockExptTurnResultDAO)(nil).CreateTurnEvaluatorRefs), varargs...)
}

// GetItemTurnResults mocks base method.
func (m *MockExptTurnResultDAO) GetItemTurnResults(ctx context.Context, exptID, itemID, spaceID int64, opts ...db.Option) ([]*model.ExptTurnResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, exptID, itemID, spaceID}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetItemTurnResults", varargs...)
	ret0, _ := ret[0].([]*model.ExptTurnResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemTurnResults indicates an expected call of GetItemTurnResults.
func (mr *MockExptTurnResultDAOMockRecorder) GetItemTurnResults(ctx, exptID, itemID, spaceID any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, exptID, itemID, spaceID}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemTurnResults", reflect.TypeOf((*MockExptTurnResultDAO)(nil).GetItemTurnResults), varargs...)
}

// GetItemTurnRunLogs mocks base method.
func (m *MockExptTurnResultDAO) GetItemTurnRunLogs(ctx context.Context, exptID, exptRunID, itemID, spaceID int64, opts ...db.Option) ([]*model.ExptTurnResultRunLog, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, exptID, exptRunID, itemID, spaceID}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetItemTurnRunLogs", varargs...)
	ret0, _ := ret[0].([]*model.ExptTurnResultRunLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemTurnRunLogs indicates an expected call of GetItemTurnRunLogs.
func (mr *MockExptTurnResultDAOMockRecorder) GetItemTurnRunLogs(ctx, exptID, exptRunID, itemID, spaceID any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, exptID, exptRunID, itemID, spaceID}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemTurnRunLogs", reflect.TypeOf((*MockExptTurnResultDAO)(nil).GetItemTurnRunLogs), varargs...)
}

// ListTurnResult mocks base method.
func (m *MockExptTurnResultDAO) ListTurnResult(ctx context.Context, spaceID, exptID int64, filter *entity.ExptTurnResultFilter, page entity.Page, desc bool, opts ...db.Option) ([]*model.ExptTurnResult, int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, exptID, filter, page, desc}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListTurnResult", varargs...)
	ret0, _ := ret[0].([]*model.ExptTurnResult)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTurnResult indicates an expected call of ListTurnResult.
func (mr *MockExptTurnResultDAOMockRecorder) ListTurnResult(ctx, spaceID, exptID, filter, page, desc any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, exptID, filter, page, desc}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTurnResult", reflect.TypeOf((*MockExptTurnResultDAO)(nil).ListTurnResult), varargs...)
}

// MGetItemTurnRunLogs mocks base method.
func (m *MockExptTurnResultDAO) MGetItemTurnRunLogs(ctx context.Context, exptID, exptRunID int64, itemIDs []int64, spaceID int64, opts ...db.Option) ([]*model.ExptTurnResultRunLog, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, exptID, exptRunID, itemIDs, spaceID}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MGetItemTurnRunLogs", varargs...)
	ret0, _ := ret[0].([]*model.ExptTurnResultRunLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetItemTurnRunLogs indicates an expected call of MGetItemTurnRunLogs.
func (mr *MockExptTurnResultDAOMockRecorder) MGetItemTurnRunLogs(ctx, exptID, exptRunID, itemIDs, spaceID any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, exptID, exptRunID, itemIDs, spaceID}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetItemTurnRunLogs", reflect.TypeOf((*MockExptTurnResultDAO)(nil).MGetItemTurnRunLogs), varargs...)
}

// SaveTurnResults mocks base method.
func (m *MockExptTurnResultDAO) SaveTurnResults(ctx context.Context, turnResults []*model.ExptTurnResult, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, turnResults}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveTurnResults", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTurnResults indicates an expected call of SaveTurnResults.
func (mr *MockExptTurnResultDAOMockRecorder) SaveTurnResults(ctx, turnResults any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, turnResults}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTurnResults", reflect.TypeOf((*MockExptTurnResultDAO)(nil).SaveTurnResults), varargs...)
}

// SaveTurnRunLogs mocks base method.
func (m *MockExptTurnResultDAO) SaveTurnRunLogs(ctx context.Context, turnResults []*model.ExptTurnResultRunLog, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, turnResults}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveTurnRunLogs", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTurnRunLogs indicates an expected call of SaveTurnRunLogs.
func (mr *MockExptTurnResultDAOMockRecorder) SaveTurnRunLogs(ctx, turnResults any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, turnResults}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTurnRunLogs", reflect.TypeOf((*MockExptTurnResultDAO)(nil).SaveTurnRunLogs), varargs...)
}

// ScanTurnResults mocks base method.
func (m *MockExptTurnResultDAO) ScanTurnResults(ctx context.Context, exptID int64, status []int32, cursor, limit, spaceID int64, opts ...db.Option) ([]*model.ExptTurnResult, int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, exptID, status, cursor, limit, spaceID}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScanTurnResults", varargs...)
	ret0, _ := ret[0].([]*model.ExptTurnResult)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ScanTurnResults indicates an expected call of ScanTurnResults.
func (mr *MockExptTurnResultDAOMockRecorder) ScanTurnResults(ctx, exptID, status, cursor, limit, spaceID any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, exptID, status, cursor, limit, spaceID}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanTurnResults", reflect.TypeOf((*MockExptTurnResultDAO)(nil).ScanTurnResults), varargs...)
}

// ScanTurnRunLogs mocks base method.
func (m *MockExptTurnResultDAO) ScanTurnRunLogs(ctx context.Context, exptID, cursor, limit, spaceID int64, opts ...db.Option) ([]*model.ExptTurnResultRunLog, int64, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, exptID, cursor, limit, spaceID}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ScanTurnRunLogs", varargs...)
	ret0, _ := ret[0].([]*model.ExptTurnResultRunLog)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ScanTurnRunLogs indicates an expected call of ScanTurnRunLogs.
func (mr *MockExptTurnResultDAOMockRecorder) ScanTurnRunLogs(ctx, exptID, cursor, limit, spaceID any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, exptID, cursor, limit, spaceID}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanTurnRunLogs", reflect.TypeOf((*MockExptTurnResultDAO)(nil).ScanTurnRunLogs), varargs...)
}

// UpdateTurnResults mocks base method.
func (m *MockExptTurnResultDAO) UpdateTurnResults(ctx context.Context, exptID int64, itemTurnIDs []*entity.ItemTurnID, spaceID int64, ufields map[string]any, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, exptID, itemTurnIDs, spaceID, ufields}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTurnResults", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTurnResults indicates an expected call of UpdateTurnResults.
func (mr *MockExptTurnResultDAOMockRecorder) UpdateTurnResults(ctx, exptID, itemTurnIDs, spaceID, ufields any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, exptID, itemTurnIDs, spaceID, ufields}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTurnResults", reflect.TypeOf((*MockExptTurnResultDAO)(nil).UpdateTurnResults), varargs...)
}

// UpdateTurnResultsWithItemIDs mocks base method.
func (m *MockExptTurnResultDAO) UpdateTurnResultsWithItemIDs(ctx context.Context, exptID int64, itemIDs []int64, spaceID int64, ufields map[string]any, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, exptID, itemIDs, spaceID, ufields}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTurnResultsWithItemIDs", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTurnResultsWithItemIDs indicates an expected call of UpdateTurnResultsWithItemIDs.
func (mr *MockExptTurnResultDAOMockRecorder) UpdateTurnResultsWithItemIDs(ctx, exptID, itemIDs, spaceID, ufields any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, exptID, itemIDs, spaceID, ufields}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTurnResultsWithItemIDs", reflect.TypeOf((*MockExptTurnResultDAO)(nil).UpdateTurnResultsWithItemIDs), varargs...)
}

// UpdateTurnRunLogWithItemIDs mocks base method.
func (m *MockExptTurnResultDAO) UpdateTurnRunLogWithItemIDs(ctx context.Context, spaceID, exptID, exptRunID int64, itemIDs []int64, ufields map[string]any, opts ...db.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, exptID, exptRunID, itemIDs, ufields}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateTurnRunLogWithItemIDs", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTurnRunLogWithItemIDs indicates an expected call of UpdateTurnRunLogWithItemIDs.
func (mr *MockExptTurnResultDAOMockRecorder) UpdateTurnRunLogWithItemIDs(ctx, spaceID, exptID, exptRunID, itemIDs, ufields any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, exptID, exptRunID, itemIDs, ufields}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTurnRunLogWithItemIDs", reflect.TypeOf((*MockExptTurnResultDAO)(nil).UpdateTurnRunLogWithItemIDs), varargs...)
}
