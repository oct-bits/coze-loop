// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/mysql (interfaces: IExptTurnResultFilterKeyMappingDAO)

// Package mocks is a generated GoMock package.
package mocks

import (
	"context"
	"reflect"

	"go.uber.org/mock/gomock"

	"github.com/coze-dev/coze-loop/backend/infra/db"
	"github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/mysql/gorm_gen/model"
)

// MockIExptTurnResultFilterKeyMappingDAO is a mock of IExptTurnResultFilterKeyMappingDAO interface.
type MockIExptTurnResultFilterKeyMappingDAO struct {
	ctrl     *gomock.Controller
	recorder *MockIExptTurnResultFilterKeyMappingDAOMockRecorder
}

// MockIExptTurnResultFilterKeyMappingDAOMockRecorder is the mock recorder for MockIExptTurnResultFilterKeyMappingDAO.
type MockIExptTurnResultFilterKeyMappingDAOMockRecorder struct {
	mock *MockIExptTurnResultFilterKeyMappingDAO
}

// NewMockIExptTurnResultFilterKeyMappingDAO creates a new mock instance.
func NewMockIExptTurnResultFilterKeyMappingDAO(ctrl *gomock.Controller) *MockIExptTurnResultFilterKeyMappingDAO {
	mock := &MockIExptTurnResultFilterKeyMappingDAO{ctrl: ctrl}
	mock.recorder = &MockIExptTurnResultFilterKeyMappingDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIExptTurnResultFilterKeyMappingDAO) EXPECT() *MockIExptTurnResultFilterKeyMappingDAOMockRecorder {
	return m.recorder
}

// GetByExptID mocks base method.
func (m *MockIExptTurnResultFilterKeyMappingDAO) GetByExptID(arg0 context.Context, arg1, arg2 int64, arg3 ...db.Option) ([]*model.ExptTurnResultFilterKeyMapping, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByExptID", varargs...)
	ret0, _ := ret[0].([]*model.ExptTurnResultFilterKeyMapping)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByExptID indicates an expected call of GetByExptID.
func (mr *MockIExptTurnResultFilterKeyMappingDAOMockRecorder) GetByExptID(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByExptID", reflect.TypeOf((*MockIExptTurnResultFilterKeyMappingDAO)(nil).GetByExptID), varargs...)
}

// Insert mocks base method.
func (m *MockIExptTurnResultFilterKeyMappingDAO) Insert(arg0 context.Context, arg1 []*model.ExptTurnResultFilterKeyMapping) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockIExptTurnResultFilterKeyMappingDAOMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIExptTurnResultFilterKeyMappingDAO)(nil).Insert), arg0, arg1)
}
