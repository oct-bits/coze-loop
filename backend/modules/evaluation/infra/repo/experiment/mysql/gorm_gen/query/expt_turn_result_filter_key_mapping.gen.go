// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/mysql/gorm_gen/model"
)

func newExptTurnResultFilterKeyMapping(db *gorm.DB, opts ...gen.DOOption) exptTurnResultFilterKeyMapping {
	_exptTurnResultFilterKeyMapping := exptTurnResultFilterKeyMapping{}

	_exptTurnResultFilterKeyMapping.exptTurnResultFilterKeyMappingDo.UseDB(db, opts...)
	_exptTurnResultFilterKeyMapping.exptTurnResultFilterKeyMappingDo.UseModel(&model.ExptTurnResultFilterKeyMapping{})

	tableName := _exptTurnResultFilterKeyMapping.exptTurnResultFilterKeyMappingDo.TableName()
	_exptTurnResultFilterKeyMapping.ALL = field.NewAsterisk(tableName)
	_exptTurnResultFilterKeyMapping.ID = field.NewInt64(tableName, "id")
	_exptTurnResultFilterKeyMapping.SpaceID = field.NewInt64(tableName, "space_id")
	_exptTurnResultFilterKeyMapping.ExptID = field.NewInt64(tableName, "expt_id")
	_exptTurnResultFilterKeyMapping.FromField = field.NewString(tableName, "from_field")
	_exptTurnResultFilterKeyMapping.ToKey = field.NewString(tableName, "to_key")
	_exptTurnResultFilterKeyMapping.FieldType = field.NewInt32(tableName, "field_type")
	_exptTurnResultFilterKeyMapping.CreatedAt = field.NewTime(tableName, "created_at")
	_exptTurnResultFilterKeyMapping.DeletedAt = field.NewField(tableName, "deleted_at")
	_exptTurnResultFilterKeyMapping.CreatedBy = field.NewString(tableName, "created_by")

	_exptTurnResultFilterKeyMapping.fillFieldMap()

	return _exptTurnResultFilterKeyMapping
}

// exptTurnResultFilterKeyMapping expt_turn_result_filter二级key映射表
type exptTurnResultFilterKeyMapping struct {
	exptTurnResultFilterKeyMappingDo exptTurnResultFilterKeyMappingDo

	ALL       field.Asterisk
	ID        field.Int64  // 自增主键
	SpaceID   field.Int64  // 空间id
	ExptID    field.Int64  // 实验id
	FromField field.String // 筛选项唯一键，评估器: evaluator_version_id，人工标准：tag_key_id
	ToKey     field.String // ck侧的map key，评估器：key1 ~ key10，人工标准：key1 ~ key100
	FieldType field.Int32  // 映射类型，Evaluator —— 1，人工标注—— 2
	CreatedAt field.Time   // 创建时间
	DeletedAt field.Field  // 删除时间
	CreatedBy field.String // 创建人

	fieldMap map[string]field.Expr
}

func (e exptTurnResultFilterKeyMapping) Table(newTableName string) *exptTurnResultFilterKeyMapping {
	e.exptTurnResultFilterKeyMappingDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e exptTurnResultFilterKeyMapping) As(alias string) *exptTurnResultFilterKeyMapping {
	e.exptTurnResultFilterKeyMappingDo.DO = *(e.exptTurnResultFilterKeyMappingDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *exptTurnResultFilterKeyMapping) updateTableName(table string) *exptTurnResultFilterKeyMapping {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.SpaceID = field.NewInt64(table, "space_id")
	e.ExptID = field.NewInt64(table, "expt_id")
	e.FromField = field.NewString(table, "from_field")
	e.ToKey = field.NewString(table, "to_key")
	e.FieldType = field.NewInt32(table, "field_type")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.DeletedAt = field.NewField(table, "deleted_at")
	e.CreatedBy = field.NewString(table, "created_by")

	e.fillFieldMap()

	return e
}

func (e *exptTurnResultFilterKeyMapping) WithContext(ctx context.Context) *exptTurnResultFilterKeyMappingDo {
	return e.exptTurnResultFilterKeyMappingDo.WithContext(ctx)
}

func (e exptTurnResultFilterKeyMapping) TableName() string {
	return e.exptTurnResultFilterKeyMappingDo.TableName()
}

func (e exptTurnResultFilterKeyMapping) Alias() string {
	return e.exptTurnResultFilterKeyMappingDo.Alias()
}

func (e exptTurnResultFilterKeyMapping) Columns(cols ...field.Expr) gen.Columns {
	return e.exptTurnResultFilterKeyMappingDo.Columns(cols...)
}

func (e *exptTurnResultFilterKeyMapping) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *exptTurnResultFilterKeyMapping) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 9)
	e.fieldMap["id"] = e.ID
	e.fieldMap["space_id"] = e.SpaceID
	e.fieldMap["expt_id"] = e.ExptID
	e.fieldMap["from_field"] = e.FromField
	e.fieldMap["to_key"] = e.ToKey
	e.fieldMap["field_type"] = e.FieldType
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["deleted_at"] = e.DeletedAt
	e.fieldMap["created_by"] = e.CreatedBy
}

func (e exptTurnResultFilterKeyMapping) clone(db *gorm.DB) exptTurnResultFilterKeyMapping {
	e.exptTurnResultFilterKeyMappingDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e exptTurnResultFilterKeyMapping) replaceDB(db *gorm.DB) exptTurnResultFilterKeyMapping {
	e.exptTurnResultFilterKeyMappingDo.ReplaceDB(db)
	return e
}

type exptTurnResultFilterKeyMappingDo struct{ gen.DO }

func (e exptTurnResultFilterKeyMappingDo) Debug() *exptTurnResultFilterKeyMappingDo {
	return e.withDO(e.DO.Debug())
}

func (e exptTurnResultFilterKeyMappingDo) WithContext(ctx context.Context) *exptTurnResultFilterKeyMappingDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e exptTurnResultFilterKeyMappingDo) ReadDB() *exptTurnResultFilterKeyMappingDo {
	return e.Clauses(dbresolver.Read)
}

func (e exptTurnResultFilterKeyMappingDo) WriteDB() *exptTurnResultFilterKeyMappingDo {
	return e.Clauses(dbresolver.Write)
}

func (e exptTurnResultFilterKeyMappingDo) Session(config *gorm.Session) *exptTurnResultFilterKeyMappingDo {
	return e.withDO(e.DO.Session(config))
}

func (e exptTurnResultFilterKeyMappingDo) Clauses(conds ...clause.Expression) *exptTurnResultFilterKeyMappingDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e exptTurnResultFilterKeyMappingDo) Returning(value interface{}, columns ...string) *exptTurnResultFilterKeyMappingDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e exptTurnResultFilterKeyMappingDo) Not(conds ...gen.Condition) *exptTurnResultFilterKeyMappingDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e exptTurnResultFilterKeyMappingDo) Or(conds ...gen.Condition) *exptTurnResultFilterKeyMappingDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e exptTurnResultFilterKeyMappingDo) Select(conds ...field.Expr) *exptTurnResultFilterKeyMappingDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e exptTurnResultFilterKeyMappingDo) Where(conds ...gen.Condition) *exptTurnResultFilterKeyMappingDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e exptTurnResultFilterKeyMappingDo) Order(conds ...field.Expr) *exptTurnResultFilterKeyMappingDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e exptTurnResultFilterKeyMappingDo) Distinct(cols ...field.Expr) *exptTurnResultFilterKeyMappingDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e exptTurnResultFilterKeyMappingDo) Omit(cols ...field.Expr) *exptTurnResultFilterKeyMappingDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e exptTurnResultFilterKeyMappingDo) Join(table schema.Tabler, on ...field.Expr) *exptTurnResultFilterKeyMappingDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e exptTurnResultFilterKeyMappingDo) LeftJoin(table schema.Tabler, on ...field.Expr) *exptTurnResultFilterKeyMappingDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e exptTurnResultFilterKeyMappingDo) RightJoin(table schema.Tabler, on ...field.Expr) *exptTurnResultFilterKeyMappingDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e exptTurnResultFilterKeyMappingDo) Group(cols ...field.Expr) *exptTurnResultFilterKeyMappingDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e exptTurnResultFilterKeyMappingDo) Having(conds ...gen.Condition) *exptTurnResultFilterKeyMappingDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e exptTurnResultFilterKeyMappingDo) Limit(limit int) *exptTurnResultFilterKeyMappingDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e exptTurnResultFilterKeyMappingDo) Offset(offset int) *exptTurnResultFilterKeyMappingDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e exptTurnResultFilterKeyMappingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *exptTurnResultFilterKeyMappingDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e exptTurnResultFilterKeyMappingDo) Unscoped() *exptTurnResultFilterKeyMappingDo {
	return e.withDO(e.DO.Unscoped())
}

func (e exptTurnResultFilterKeyMappingDo) Create(values ...*model.ExptTurnResultFilterKeyMapping) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e exptTurnResultFilterKeyMappingDo) CreateInBatches(values []*model.ExptTurnResultFilterKeyMapping, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e exptTurnResultFilterKeyMappingDo) Save(values ...*model.ExptTurnResultFilterKeyMapping) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e exptTurnResultFilterKeyMappingDo) First() (*model.ExptTurnResultFilterKeyMapping, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptTurnResultFilterKeyMapping), nil
	}
}

func (e exptTurnResultFilterKeyMappingDo) Take() (*model.ExptTurnResultFilterKeyMapping, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptTurnResultFilterKeyMapping), nil
	}
}

func (e exptTurnResultFilterKeyMappingDo) Last() (*model.ExptTurnResultFilterKeyMapping, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptTurnResultFilterKeyMapping), nil
	}
}

func (e exptTurnResultFilterKeyMappingDo) Find() ([]*model.ExptTurnResultFilterKeyMapping, error) {
	result, err := e.DO.Find()
	return result.([]*model.ExptTurnResultFilterKeyMapping), err
}

func (e exptTurnResultFilterKeyMappingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ExptTurnResultFilterKeyMapping, err error) {
	buf := make([]*model.ExptTurnResultFilterKeyMapping, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e exptTurnResultFilterKeyMappingDo) FindInBatches(result *[]*model.ExptTurnResultFilterKeyMapping, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e exptTurnResultFilterKeyMappingDo) Attrs(attrs ...field.AssignExpr) *exptTurnResultFilterKeyMappingDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e exptTurnResultFilterKeyMappingDo) Assign(attrs ...field.AssignExpr) *exptTurnResultFilterKeyMappingDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e exptTurnResultFilterKeyMappingDo) Joins(fields ...field.RelationField) *exptTurnResultFilterKeyMappingDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e exptTurnResultFilterKeyMappingDo) Preload(fields ...field.RelationField) *exptTurnResultFilterKeyMappingDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e exptTurnResultFilterKeyMappingDo) FirstOrInit() (*model.ExptTurnResultFilterKeyMapping, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptTurnResultFilterKeyMapping), nil
	}
}

func (e exptTurnResultFilterKeyMappingDo) FirstOrCreate() (*model.ExptTurnResultFilterKeyMapping, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptTurnResultFilterKeyMapping), nil
	}
}

func (e exptTurnResultFilterKeyMappingDo) FindByPage(offset int, limit int) (result []*model.ExptTurnResultFilterKeyMapping, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e exptTurnResultFilterKeyMappingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e exptTurnResultFilterKeyMappingDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e exptTurnResultFilterKeyMappingDo) Delete(models ...*model.ExptTurnResultFilterKeyMapping) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *exptTurnResultFilterKeyMappingDo) withDO(do gen.Dao) *exptTurnResultFilterKeyMappingDo {
	e.DO = *do.(*gen.DO)
	return e
}
