// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/ck (interfaces: IExptTurnResultFilterDAO)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	ck "github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/ck"
	model "github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/ck/gorm_gen/model"
	model0 "github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/ck/model"
	gomock "go.uber.org/mock/gomock"
)

// MockIExptTurnResultFilterDAO is a mock of IExptTurnResultFilterDAO interface.
type MockIExptTurnResultFilterDAO struct {
	ctrl     *gomock.Controller
	recorder *MockIExptTurnResultFilterDAOMockRecorder
}

// MockIExptTurnResultFilterDAOMockRecorder is the mock recorder for MockIExptTurnResultFilterDAO.
type MockIExptTurnResultFilterDAOMockRecorder struct {
	mock *MockIExptTurnResultFilterDAO
}

// NewMockIExptTurnResultFilterDAO creates a new mock instance.
func NewMockIExptTurnResultFilterDAO(ctrl *gomock.Controller) *MockIExptTurnResultFilterDAO {
	mock := &MockIExptTurnResultFilterDAO{ctrl: ctrl}
	mock.recorder = &MockIExptTurnResultFilterDAOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIExptTurnResultFilterDAO) EXPECT() *MockIExptTurnResultFilterDAOMockRecorder {
	return m.recorder
}

// GetByExptIDItemIDs mocks base method.
func (m *MockIExptTurnResultFilterDAO) GetByExptIDItemIDs(arg0 context.Context, arg1, arg2, arg3 string, arg4 []string) ([]*model0.ExptTurnResultFilter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByExptIDItemIDs", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*model0.ExptTurnResultFilter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByExptIDItemIDs indicates an expected call of GetByExptIDItemIDs.
func (mr *MockIExptTurnResultFilterDAOMockRecorder) GetByExptIDItemIDs(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByExptIDItemIDs", reflect.TypeOf((*MockIExptTurnResultFilterDAO)(nil).GetByExptIDItemIDs), arg0, arg1, arg2, arg3, arg4)
}

// QueryItemIDStates mocks base method.
func (m *MockIExptTurnResultFilterDAO) QueryItemIDStates(arg0 context.Context, arg1 *ck.ExptTurnResultFilterQueryCond) (map[string]int32, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryItemIDStates", arg0, arg1)
	ret0, _ := ret[0].(map[string]int32)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// QueryItemIDStates indicates an expected call of QueryItemIDStates.
func (mr *MockIExptTurnResultFilterDAOMockRecorder) QueryItemIDStates(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryItemIDStates", reflect.TypeOf((*MockIExptTurnResultFilterDAO)(nil).QueryItemIDStates), arg0, arg1)
}

// Save mocks base method.
func (m *MockIExptTurnResultFilterDAO) Save(arg0 context.Context, arg1 []*model.ExptTurnResultFilter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIExptTurnResultFilterDAOMockRecorder) Save(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIExptTurnResultFilterDAO)(nil).Save), arg0, arg1)
}
