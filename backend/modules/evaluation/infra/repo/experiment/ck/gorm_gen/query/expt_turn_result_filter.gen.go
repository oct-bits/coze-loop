// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/ck/gorm_gen/model"
)

func newExptTurnResultFilter(db *gorm.DB, opts ...gen.DOOption) exptTurnResultFilter {
	_exptTurnResultFilter := exptTurnResultFilter{}

	_exptTurnResultFilter.exptTurnResultFilterDo.UseDB(db, opts...)
	_exptTurnResultFilter.exptTurnResultFilterDo.UseModel(&model.ExptTurnResultFilter{})

	tableName := _exptTurnResultFilter.exptTurnResultFilterDo.TableName()
	_exptTurnResultFilter.ALL = field.NewAsterisk(tableName)
	_exptTurnResultFilter.SpaceID = field.NewString(tableName, "space_id")
	_exptTurnResultFilter.ExptID = field.NewString(tableName, "expt_id")
	_exptTurnResultFilter.ItemID = field.NewString(tableName, "item_id")
	_exptTurnResultFilter.ItemIdx = field.NewInt32(tableName, "item_idx")
	_exptTurnResultFilter.TurnID = field.NewString(tableName, "turn_id")
	_exptTurnResultFilter.Status = field.NewInt32(tableName, "status")
	_exptTurnResultFilter.EvalTargetData = field.NewField(tableName, "eval_target_data")
	_exptTurnResultFilter.EvaluatorScore = field.NewField(tableName, "evaluator_score")
	_exptTurnResultFilter.AnnotationFloat = field.NewField(tableName, "annotation_float")
	_exptTurnResultFilter.AnnotationBool = field.NewField(tableName, "annotation_bool")
	_exptTurnResultFilter.AnnotationString = field.NewField(tableName, "annotation_string")
	_exptTurnResultFilter.EvaluatorScoreCorrected = field.NewInt32(tableName, "evaluator_score_corrected")
	_exptTurnResultFilter.EvalSetVersionID = field.NewString(tableName, "eval_set_version_id")
	_exptTurnResultFilter.CreatedDate = field.NewTime(tableName, "created_date")
	_exptTurnResultFilter.UpdatedAt = field.NewTime(tableName, "updated_at")
	_exptTurnResultFilter.CreatedAt = field.NewTime(tableName, "created_at")

	_exptTurnResultFilter.fillFieldMap()

	return _exptTurnResultFilter
}

type exptTurnResultFilter struct {
	exptTurnResultFilterDo exptTurnResultFilterDo

	ALL                     field.Asterisk
	SpaceID                 field.String
	ExptID                  field.String
	ItemID                  field.String
	ItemIdx                 field.Int32
	TurnID                  field.String
	Status                  field.Int32
	EvalTargetData          field.Field
	EvaluatorScore          field.Field
	AnnotationFloat         field.Field
	AnnotationBool          field.Field
	AnnotationString        field.Field
	EvaluatorScoreCorrected field.Int32
	EvalSetVersionID        field.String
	CreatedDate             field.Time
	UpdatedAt               field.Time
	CreatedAt               field.Time

	fieldMap map[string]field.Expr
}

func (e exptTurnResultFilter) Table(newTableName string) *exptTurnResultFilter {
	e.exptTurnResultFilterDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e exptTurnResultFilter) As(alias string) *exptTurnResultFilter {
	e.exptTurnResultFilterDo.DO = *(e.exptTurnResultFilterDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *exptTurnResultFilter) updateTableName(table string) *exptTurnResultFilter {
	e.ALL = field.NewAsterisk(table)
	e.SpaceID = field.NewString(table, "space_id")
	e.ExptID = field.NewString(table, "expt_id")
	e.ItemID = field.NewString(table, "item_id")
	e.ItemIdx = field.NewInt32(table, "item_idx")
	e.TurnID = field.NewString(table, "turn_id")
	e.Status = field.NewInt32(table, "status")
	e.EvalTargetData = field.NewField(table, "eval_target_data")
	e.EvaluatorScore = field.NewField(table, "evaluator_score")
	e.AnnotationFloat = field.NewField(table, "annotation_float")
	e.AnnotationBool = field.NewField(table, "annotation_bool")
	e.AnnotationString = field.NewField(table, "annotation_string")
	e.EvaluatorScoreCorrected = field.NewInt32(table, "evaluator_score_corrected")
	e.EvalSetVersionID = field.NewString(table, "eval_set_version_id")
	e.CreatedDate = field.NewTime(table, "created_date")
	e.UpdatedAt = field.NewTime(table, "updated_at")
	e.CreatedAt = field.NewTime(table, "created_at")

	e.fillFieldMap()

	return e
}

func (e *exptTurnResultFilter) WithContext(ctx context.Context) IExptTurnResultFilterDo {
	return e.exptTurnResultFilterDo.WithContext(ctx)
}

func (e exptTurnResultFilter) TableName() string { return e.exptTurnResultFilterDo.TableName() }

func (e exptTurnResultFilter) Alias() string { return e.exptTurnResultFilterDo.Alias() }

func (e exptTurnResultFilter) Columns(cols ...field.Expr) gen.Columns {
	return e.exptTurnResultFilterDo.Columns(cols...)
}

func (e *exptTurnResultFilter) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *exptTurnResultFilter) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 16)
	e.fieldMap["space_id"] = e.SpaceID
	e.fieldMap["expt_id"] = e.ExptID
	e.fieldMap["item_id"] = e.ItemID
	e.fieldMap["item_idx"] = e.ItemIdx
	e.fieldMap["turn_id"] = e.TurnID
	e.fieldMap["status"] = e.Status
	e.fieldMap["eval_target_data"] = e.EvalTargetData
	e.fieldMap["evaluator_score"] = e.EvaluatorScore
	e.fieldMap["annotation_float"] = e.AnnotationFloat
	e.fieldMap["annotation_bool"] = e.AnnotationBool
	e.fieldMap["annotation_string"] = e.AnnotationString
	e.fieldMap["evaluator_score_corrected"] = e.EvaluatorScoreCorrected
	e.fieldMap["eval_set_version_id"] = e.EvalSetVersionID
	e.fieldMap["created_date"] = e.CreatedDate
	e.fieldMap["updated_at"] = e.UpdatedAt
	e.fieldMap["created_at"] = e.CreatedAt
}

func (e exptTurnResultFilter) clone(db *gorm.DB) exptTurnResultFilter {
	e.exptTurnResultFilterDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e exptTurnResultFilter) replaceDB(db *gorm.DB) exptTurnResultFilter {
	e.exptTurnResultFilterDo.ReplaceDB(db)
	return e
}

type exptTurnResultFilterDo struct{ gen.DO }

type IExptTurnResultFilterDo interface {
	gen.SubQuery
	Debug() IExptTurnResultFilterDo
	WithContext(ctx context.Context) IExptTurnResultFilterDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IExptTurnResultFilterDo
	WriteDB() IExptTurnResultFilterDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IExptTurnResultFilterDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IExptTurnResultFilterDo
	Not(conds ...gen.Condition) IExptTurnResultFilterDo
	Or(conds ...gen.Condition) IExptTurnResultFilterDo
	Select(conds ...field.Expr) IExptTurnResultFilterDo
	Where(conds ...gen.Condition) IExptTurnResultFilterDo
	Order(conds ...field.Expr) IExptTurnResultFilterDo
	Distinct(cols ...field.Expr) IExptTurnResultFilterDo
	Omit(cols ...field.Expr) IExptTurnResultFilterDo
	Join(table schema.Tabler, on ...field.Expr) IExptTurnResultFilterDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IExptTurnResultFilterDo
	RightJoin(table schema.Tabler, on ...field.Expr) IExptTurnResultFilterDo
	Group(cols ...field.Expr) IExptTurnResultFilterDo
	Having(conds ...gen.Condition) IExptTurnResultFilterDo
	Limit(limit int) IExptTurnResultFilterDo
	Offset(offset int) IExptTurnResultFilterDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IExptTurnResultFilterDo
	Unscoped() IExptTurnResultFilterDo
	Create(values ...*model.ExptTurnResultFilter) error
	CreateInBatches(values []*model.ExptTurnResultFilter, batchSize int) error
	Save(values ...*model.ExptTurnResultFilter) error
	First() (*model.ExptTurnResultFilter, error)
	Take() (*model.ExptTurnResultFilter, error)
	Last() (*model.ExptTurnResultFilter, error)
	Find() ([]*model.ExptTurnResultFilter, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ExptTurnResultFilter, err error)
	FindInBatches(result *[]*model.ExptTurnResultFilter, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ExptTurnResultFilter) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IExptTurnResultFilterDo
	Assign(attrs ...field.AssignExpr) IExptTurnResultFilterDo
	Joins(fields ...field.RelationField) IExptTurnResultFilterDo
	Preload(fields ...field.RelationField) IExptTurnResultFilterDo
	FirstOrInit() (*model.ExptTurnResultFilter, error)
	FirstOrCreate() (*model.ExptTurnResultFilter, error)
	FindByPage(offset int, limit int) (result []*model.ExptTurnResultFilter, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IExptTurnResultFilterDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (e exptTurnResultFilterDo) Debug() IExptTurnResultFilterDo {
	return e.withDO(e.DO.Debug())
}

func (e exptTurnResultFilterDo) WithContext(ctx context.Context) IExptTurnResultFilterDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e exptTurnResultFilterDo) ReadDB() IExptTurnResultFilterDo {
	return e.Clauses(dbresolver.Read)
}

func (e exptTurnResultFilterDo) WriteDB() IExptTurnResultFilterDo {
	return e.Clauses(dbresolver.Write)
}

func (e exptTurnResultFilterDo) Session(config *gorm.Session) IExptTurnResultFilterDo {
	return e.withDO(e.DO.Session(config))
}

func (e exptTurnResultFilterDo) Clauses(conds ...clause.Expression) IExptTurnResultFilterDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e exptTurnResultFilterDo) Returning(value interface{}, columns ...string) IExptTurnResultFilterDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e exptTurnResultFilterDo) Not(conds ...gen.Condition) IExptTurnResultFilterDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e exptTurnResultFilterDo) Or(conds ...gen.Condition) IExptTurnResultFilterDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e exptTurnResultFilterDo) Select(conds ...field.Expr) IExptTurnResultFilterDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e exptTurnResultFilterDo) Where(conds ...gen.Condition) IExptTurnResultFilterDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e exptTurnResultFilterDo) Order(conds ...field.Expr) IExptTurnResultFilterDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e exptTurnResultFilterDo) Distinct(cols ...field.Expr) IExptTurnResultFilterDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e exptTurnResultFilterDo) Omit(cols ...field.Expr) IExptTurnResultFilterDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e exptTurnResultFilterDo) Join(table schema.Tabler, on ...field.Expr) IExptTurnResultFilterDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e exptTurnResultFilterDo) LeftJoin(table schema.Tabler, on ...field.Expr) IExptTurnResultFilterDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e exptTurnResultFilterDo) RightJoin(table schema.Tabler, on ...field.Expr) IExptTurnResultFilterDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e exptTurnResultFilterDo) Group(cols ...field.Expr) IExptTurnResultFilterDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e exptTurnResultFilterDo) Having(conds ...gen.Condition) IExptTurnResultFilterDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e exptTurnResultFilterDo) Limit(limit int) IExptTurnResultFilterDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e exptTurnResultFilterDo) Offset(offset int) IExptTurnResultFilterDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e exptTurnResultFilterDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IExptTurnResultFilterDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e exptTurnResultFilterDo) Unscoped() IExptTurnResultFilterDo {
	return e.withDO(e.DO.Unscoped())
}

func (e exptTurnResultFilterDo) Create(values ...*model.ExptTurnResultFilter) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e exptTurnResultFilterDo) CreateInBatches(values []*model.ExptTurnResultFilter, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e exptTurnResultFilterDo) Save(values ...*model.ExptTurnResultFilter) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e exptTurnResultFilterDo) First() (*model.ExptTurnResultFilter, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptTurnResultFilter), nil
	}
}

func (e exptTurnResultFilterDo) Take() (*model.ExptTurnResultFilter, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptTurnResultFilter), nil
	}
}

func (e exptTurnResultFilterDo) Last() (*model.ExptTurnResultFilter, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptTurnResultFilter), nil
	}
}

func (e exptTurnResultFilterDo) Find() ([]*model.ExptTurnResultFilter, error) {
	result, err := e.DO.Find()
	return result.([]*model.ExptTurnResultFilter), err
}

func (e exptTurnResultFilterDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ExptTurnResultFilter, err error) {
	buf := make([]*model.ExptTurnResultFilter, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e exptTurnResultFilterDo) FindInBatches(result *[]*model.ExptTurnResultFilter, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e exptTurnResultFilterDo) Attrs(attrs ...field.AssignExpr) IExptTurnResultFilterDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e exptTurnResultFilterDo) Assign(attrs ...field.AssignExpr) IExptTurnResultFilterDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e exptTurnResultFilterDo) Joins(fields ...field.RelationField) IExptTurnResultFilterDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e exptTurnResultFilterDo) Preload(fields ...field.RelationField) IExptTurnResultFilterDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e exptTurnResultFilterDo) FirstOrInit() (*model.ExptTurnResultFilter, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptTurnResultFilter), nil
	}
}

func (e exptTurnResultFilterDo) FirstOrCreate() (*model.ExptTurnResultFilter, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ExptTurnResultFilter), nil
	}
}

func (e exptTurnResultFilterDo) FindByPage(offset int, limit int) (result []*model.ExptTurnResultFilter, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e exptTurnResultFilterDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e exptTurnResultFilterDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e exptTurnResultFilterDo) Delete(models ...*model.ExptTurnResultFilter) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *exptTurnResultFilterDo) withDO(do gen.Dao) *exptTurnResultFilterDo {
	e.DO = *do.(*gen.DO)
	return e
}
