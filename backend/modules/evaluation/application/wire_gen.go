// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package application

import (
	"github.com/coze-dev/coze-loop/backend/infra/db"
	"github.com/coze-dev/coze-loop/backend/infra/external/audit"
	"github.com/coze-dev/coze-loop/backend/infra/external/benefit"
	"github.com/coze-dev/coze-loop/backend/infra/idgen"
	"github.com/coze-dev/coze-loop/backend/infra/limiter"
	"github.com/coze-dev/coze-loop/backend/infra/lock"
	"github.com/coze-dev/coze-loop/backend/infra/metrics"
	"github.com/coze-dev/coze-loop/backend/infra/mq"
	"github.com/coze-dev/coze-loop/backend/infra/platestwrite"
	"github.com/coze-dev/coze-loop/backend/infra/redis"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/apis/promptexecuteservice"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/data/dataset/datasetservice"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/auth/authservice"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/user/userservice"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/llm/runtime/llmruntimeservice"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/prompt/promptmanageservice"
	metrics5 "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/component/metrics"
	"github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/component/rpc"
	"github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/component/userinfo"
	"github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/entity"
	"github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/service"
	metrics3 "github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/metrics/eval_target"
	metrics4 "github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/metrics/evaluation_set"
	evaluator2 "github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/metrics/evaluator"
	metrics2 "github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/metrics/experiment"
	"github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/mq/rocket/producer"
	"github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/evaluator"
	mysql2 "github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/evaluator/mysql"
	"github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment"
	"github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/mysql"
	"github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/experiment/redis/dao"
	"github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/idem"
	redis2 "github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/idem/redis"
	"github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/target"
	mysql3 "github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/repo/target/mysql"
	"github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/rpc/data"
	"github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/rpc/foundation"
	"github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/rpc/llm"
	"github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/rpc/prompt"
	conf2 "github.com/coze-dev/coze-loop/backend/modules/evaluation/pkg/conf"
	"github.com/coze-dev/coze-loop/backend/pkg/conf"
	"context"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitExperimentApplication(ctx context.Context, idgen2 idgen.IIDGenerator, db2 db.Provider, configFactory conf.IConfigLoaderFactory, rmqFactory mq.IFactory, cmdable redis.Cmdable, auditClient audit.IAuditService, meter metrics.Meter, authClient authservice.Client, evalSetService evaluation.EvaluationSetService, evaluatorService evaluation.EvaluatorService, targetService evaluation.EvalTargetService, uc userservice.Client, pms promptmanageservice.Client, pes promptexecuteservice.Client, sds datasetservice.Client, limiterFactory limiter.IRateLimiterFactory, llmcli llmruntimeservice.Client, benefitSvc benefit.IBenefitService) (IExperimentApplication, error) {
	exptTurnResultDAO := mysql.NewExptTurnResultDAO(db2)
	iExptTurnEvaluatorResultRefDAO := mysql.NewExptTurnEvaluatorResultRefDAO(db2)
	iExptTurnResultRepo := experiment.NewExptTurnResultRepo(idgen2, exptTurnResultDAO, iExptTurnEvaluatorResultRefDAO)
	exptAggrResultDAO := mysql.NewExptAggrResultDAO(db2)
	iExptAggrResultRepo := experiment.NewExptAggrResultRepo(exptAggrResultDAO, idgen2)
	iExptDAO := mysql.NewExptDAO(db2)
	iExptEvaluatorRefDAO := mysql.NewExptEvaluatorRefDAO(db2)
	iExperimentRepo := experiment.NewExptRepo(iExptDAO, iExptEvaluatorRefDAO, idgen2)
	exptMetric := metrics2.NewExperimentMetric(meter)
	iConfiger := conf2.NewEvaluatorConfiger(configFactory)
	rateLimiter := evaluator.NewRateLimiterImpl(ctx, limiterFactory, iConfiger)
	evaluatorDAO := mysql2.NewEvaluatorDAO(db2)
	evaluatorVersionDAO := mysql2.NewEvaluatorVersionDAO(db2)
	iLatestWriteTracker := platestwrite.NewLatestWriteTracker(cmdable)
	iEvaluatorRepo := evaluator.NewEvaluatorRepo(idgen2, db2, evaluatorDAO, evaluatorVersionDAO, iLatestWriteTracker)
	evaluatorRecordDAO := mysql2.NewEvaluatorRecordDAO(db2)
	iEvaluatorRecordRepo := evaluator.NewEvaluatorRecordRepo(idgen2, db2, evaluatorRecordDAO)
	iIdemDAO := redis2.NewIdemDAO(cmdable)
	idempotentService := idem.NewIdempotentService(iIdemDAO)
	illmProvider := llm.NewLLMRPCProvider(llmcli)
	evaluatorExecMetrics := evaluator2.NewEvaluatorMetrics(meter)
	v := NewEvaluatorSourceServices(illmProvider, evaluatorExecMetrics, iConfiger)
	serviceEvaluatorService := service.NewEvaluatorServiceImpl(idgen2, rateLimiter, rmqFactory, iEvaluatorRepo, iEvaluatorRecordRepo, idempotentService, iConfiger, v)
	exptEventPublisher, err := producer.NewExptEventPublisher(ctx, configFactory, rmqFactory)
	if err != nil {
		return nil, err
	}
	evaluatorEventPublisher, err := producer.NewEvaluatorEventPublisher(ctx, configFactory, rmqFactory)
	if err != nil {
		return nil, err
	}
	iUserProvider := foundation.NewUserRPCProvider(uc)
	userInfoService := userinfo.NewUserInfoServiceImpl(iUserProvider)
	evaluatorRecordService := service.NewEvaluatorRecordServiceImpl(idgen2, iEvaluatorRecordRepo, exptEventPublisher, evaluatorEventPublisher, userInfoService, iExperimentRepo)
	exptAggrResultService := service.NewExptAggrResultService(iExptTurnResultRepo, iExptAggrResultRepo, iExperimentRepo, exptMetric, serviceEvaluatorService, evaluatorRecordService)
	iExptItemResultDAO := mysql.NewExptItemResultDAO(db2)
	iExptItemResultRepo := experiment.NewExptItemResultRepo(iExptItemResultDAO)
	iExptStatsDAO := mysql.NewExptStatsDAO(db2)
	iExptStatsRepo := experiment.NewExptStatsRepo(iExptStatsDAO)
	evalTargetDAO := mysql3.NewEvalTargetDAO(db2)
	evalTargetVersionDAO := mysql3.NewEvalTargetVersionDAO(db2)
	evalTargetRecordDAO := mysql3.NewEvalTargetRecordDAO(db2)
	iEvalTargetRepo := target.NewEvalTargetRepo(idgen2, db2, evalTargetDAO, evalTargetVersionDAO, evalTargetRecordDAO, iLatestWriteTracker)
	evalTargetMetrics := metrics3.NewEvalTargetMetrics(meter)
	iPromptRPCAdapter := prompt.NewPromptRPCAdapter(pms, pes)
	v2 := NewSourceTargetOperators(iPromptRPCAdapter)
	iEvalTargetService := service.NewEvalTargetServiceImpl(iEvalTargetRepo, idgen2, evalTargetMetrics, v2)
	iDatasetRPCAdapter := data.NewDatasetRPCAdapter(sds)
	evaluationSetVersionService := service.NewEvaluationSetVersionServiceImpl(iDatasetRPCAdapter)
	iEvaluationSetService := service.NewEvaluationSetServiceImpl(iDatasetRPCAdapter)
	evaluationSetItemService := service.NewEvaluationSetItemServiceImpl(iDatasetRPCAdapter)
	exptResultService := service.NewExptResultService(iExptItemResultRepo, iExptTurnResultRepo, iExptStatsRepo, iExperimentRepo, exptMetric, iLatestWriteTracker, idgen2, serviceEvaluatorService, iEvalTargetService, evaluationSetVersionService, iEvaluationSetService, evaluatorRecordService, evaluationSetItemService, exptEventPublisher)
	iExptRunLogDAO := mysql.NewExptRunLogDAO(db2)
	iExptRunLogRepo := experiment.NewExptRunLogRepo(iExptRunLogDAO)
	componentIConfiger, err := conf2.NewExptConfiger(configFactory)
	if err != nil {
		return nil, err
	}
	iQuotaDAO := dao.NewQuotaDAO(cmdable)
	iLocker := NewLock(cmdable)
	quotaRepo := experiment.NewQuotaService(iQuotaDAO, iLocker)
	iExptManager := service.NewExptManager(exptResultService, iExperimentRepo, iExptRunLogRepo, iExptStatsRepo, iExptItemResultRepo, iExptTurnResultRepo, componentIConfiger, quotaRepo, iLocker, idempotentService, exptEventPublisher, auditClient, idgen2, exptMetric, iLatestWriteTracker, evaluationSetVersionService, iEvaluationSetService, iEvalTargetService, serviceEvaluatorService, benefitSvc, exptAggrResultService)
	schedulerModeFactory := service.NewSchedulerModeFactory(iExptManager, iExptItemResultRepo, iExptStatsRepo, iExptTurnResultRepo, idgen2, evaluationSetItemService, iExperimentRepo, idempotentService, componentIConfiger, exptEventPublisher, evaluatorRecordService)
	exptSchedulerEvent := service.NewExptSchedulerSvc(iExptManager, iExperimentRepo, iExptItemResultRepo, iExptTurnResultRepo, iExptStatsRepo, iExptRunLogRepo, idempotentService, componentIConfiger, quotaRepo, iLocker, exptEventPublisher, auditClient, exptMetric, exptResultService, idgen2, evaluationSetItemService, schedulerModeFactory)
	exptItemEvalEvent := service.NewExptRecordEvalService(iExptManager, componentIConfiger, exptEventPublisher, iExptItemResultRepo, iExptTurnResultRepo, iExptStatsRepo, iExperimentRepo, quotaRepo, iLocker, idempotentService, auditClient, exptMetric, exptResultService, iEvalTargetService, evaluationSetItemService, evaluatorRecordService, serviceEvaluatorService, idgen2, benefitSvc)
	iAuthProvider := foundation.NewAuthRPCProvider(authClient)
	iExperimentApplication := NewExperimentApplication(exptAggrResultService, exptResultService, iExptManager, exptSchedulerEvent, exptItemEvalEvent, idgen2, componentIConfiger, iAuthProvider, userInfoService, iEvalTargetService, evaluationSetItemService)
	return iExperimentApplication, nil
}

func InitEvaluatorApplication(ctx context.Context, idgen2 idgen.IIDGenerator, authClient authservice.Client, db2 db.Provider, configFactory conf.IConfigLoaderFactory, rmqFactory mq.IFactory, llmClient llmruntimeservice.Client, meter metrics.Meter, userClient userservice.Client, auditClient audit.IAuditService, cmdable redis.Cmdable, benefitSvc benefit.IBenefitService, limiterFactory limiter.IRateLimiterFactory) (evaluation.EvaluatorService, error) {
	iConfiger := conf2.NewEvaluatorConfiger(configFactory)
	iAuthProvider := foundation.NewAuthRPCProvider(authClient)
	rateLimiter := evaluator.NewRateLimiterImpl(ctx, limiterFactory, iConfiger)
	evaluatorDAO := mysql2.NewEvaluatorDAO(db2)
	evaluatorVersionDAO := mysql2.NewEvaluatorVersionDAO(db2)
	iLatestWriteTracker := platestwrite.NewLatestWriteTracker(cmdable)
	iEvaluatorRepo := evaluator.NewEvaluatorRepo(idgen2, db2, evaluatorDAO, evaluatorVersionDAO, iLatestWriteTracker)
	evaluatorRecordDAO := mysql2.NewEvaluatorRecordDAO(db2)
	iEvaluatorRecordRepo := evaluator.NewEvaluatorRecordRepo(idgen2, db2, evaluatorRecordDAO)
	iIdemDAO := redis2.NewIdemDAO(cmdable)
	idempotentService := idem.NewIdempotentService(iIdemDAO)
	illmProvider := llm.NewLLMRPCProvider(llmClient)
	evaluatorExecMetrics := evaluator2.NewEvaluatorMetrics(meter)
	v := NewEvaluatorSourceServices(illmProvider, evaluatorExecMetrics, iConfiger)
	evaluatorService := service.NewEvaluatorServiceImpl(idgen2, rateLimiter, rmqFactory, iEvaluatorRepo, iEvaluatorRecordRepo, idempotentService, iConfiger, v)
	exptEventPublisher, err := producer.NewExptEventPublisher(ctx, configFactory, rmqFactory)
	if err != nil {
		return nil, err
	}
	evaluatorEventPublisher, err := producer.NewEvaluatorEventPublisher(ctx, configFactory, rmqFactory)
	if err != nil {
		return nil, err
	}
	iUserProvider := foundation.NewUserRPCProvider(userClient)
	userInfoService := userinfo.NewUserInfoServiceImpl(iUserProvider)
	iExptDAO := mysql.NewExptDAO(db2)
	iExptEvaluatorRefDAO := mysql.NewExptEvaluatorRefDAO(db2)
	iExperimentRepo := experiment.NewExptRepo(iExptDAO, iExptEvaluatorRefDAO, idgen2)
	evaluatorRecordService := service.NewEvaluatorRecordServiceImpl(idgen2, iEvaluatorRecordRepo, exptEventPublisher, evaluatorEventPublisher, userInfoService, iExperimentRepo)
	evaluationEvaluatorService := NewEvaluatorHandlerImpl(idgen2, iConfiger, iAuthProvider, evaluatorService, evaluatorRecordService, evaluatorExecMetrics, userInfoService, auditClient, benefitSvc)
	return evaluationEvaluatorService, nil
}

func InitEvaluationSetApplication(client datasetservice.Client, authClient authservice.Client, meter metrics.Meter, userClient userservice.Client) evaluation.EvaluationSetService {
	iAuthProvider := foundation.NewAuthRPCProvider(authClient)
	iDatasetRPCAdapter := data.NewDatasetRPCAdapter(client)
	iEvaluationSetService := service.NewEvaluationSetServiceImpl(iDatasetRPCAdapter)
	evaluationSetSchemaService := service.NewEvaluationSetSchemaServiceImpl(iDatasetRPCAdapter)
	evaluationSetVersionService := service.NewEvaluationSetVersionServiceImpl(iDatasetRPCAdapter)
	evaluationSetItemService := service.NewEvaluationSetItemServiceImpl(iDatasetRPCAdapter)
	evaluationSetMetrics := metrics4.NewEvaluationSetMetrics(meter)
	iUserProvider := foundation.NewUserRPCProvider(userClient)
	userInfoService := userinfo.NewUserInfoServiceImpl(iUserProvider)
	evaluationSetService := NewEvaluationSetApplicationImpl(iAuthProvider, iEvaluationSetService, evaluationSetSchemaService, evaluationSetVersionService, evaluationSetItemService, evaluationSetMetrics, userInfoService)
	return evaluationSetService
}

func InitEvalTargetApplication(ctx context.Context, idgen2 idgen.IIDGenerator, db2 db.Provider, client promptmanageservice.Client, executeClient promptexecuteservice.Client, authClient authservice.Client, cmdable redis.Cmdable, meter metrics.Meter) evaluation.EvalTargetService {
	iAuthProvider := foundation.NewAuthRPCProvider(authClient)
	evalTargetDAO := mysql3.NewEvalTargetDAO(db2)
	evalTargetVersionDAO := mysql3.NewEvalTargetVersionDAO(db2)
	evalTargetRecordDAO := mysql3.NewEvalTargetRecordDAO(db2)
	iLatestWriteTracker := platestwrite.NewLatestWriteTracker(cmdable)
	iEvalTargetRepo := target.NewEvalTargetRepo(idgen2, db2, evalTargetDAO, evalTargetVersionDAO, evalTargetRecordDAO, iLatestWriteTracker)
	evalTargetMetrics := metrics3.NewEvalTargetMetrics(meter)
	iPromptRPCAdapter := prompt.NewPromptRPCAdapter(client, executeClient)
	v := NewSourceTargetOperators(iPromptRPCAdapter)
	iEvalTargetService := service.NewEvalTargetServiceImpl(iEvalTargetRepo, idgen2, evalTargetMetrics, v)
	evalTargetService := NewEvalTargetHandlerImpl(iAuthProvider, iEvalTargetService, v)
	return evalTargetService
}

// wire.go:

var (
	flagSet = wire.NewSet(platestwrite.NewLatestWriteTracker)

	experimentSet = wire.NewSet(
		NewExperimentApplication, service.NewExptManager, service.NewExptResultService, service.NewExptAggrResultService, service.NewExptSchedulerSvc, service.NewExptRecordEvalService, service.NewSchedulerModeFactory, experiment.NewExptRepo, experiment.NewExptStatsRepo, experiment.NewExptAggrResultRepo, experiment.NewExptItemResultRepo, experiment.NewExptTurnResultRepo, experiment.NewExptRunLogRepo, experiment.NewQuotaService, idem.NewIdempotentService, mysql.NewExptDAO, mysql.NewExptEvaluatorRefDAO, mysql.NewExptRunLogDAO, mysql.NewExptStatsDAO, mysql.NewExptTurnResultDAO, mysql.NewExptItemResultDAO, mysql.NewExptTurnEvaluatorResultRefDAO, mysql.NewExptAggrResultDAO, dao.NewQuotaDAO, redis2.NewIdemDAO, conf2.NewExptConfiger, producer.NewExptEventPublisher, metrics2.NewExperimentMetric, metrics3.NewEvalTargetMetrics, foundation.NewAuthRPCProvider, foundation.NewUserRPCProvider, userinfo.NewUserInfoServiceImpl, NewLock,
		evalSetDomainService,
		targetDomainService,
		evaluatorDomainService,
		flagSet,
	)

	evaluatorDomainService = wire.NewSet(service.NewEvaluatorServiceImpl, service.NewEvaluatorRecordServiceImpl, NewEvaluatorSourceServices, llm.NewLLMRPCProvider, evaluator.NewEvaluatorRepo, evaluator.NewEvaluatorRecordRepo, mysql2.NewEvaluatorDAO, mysql2.NewEvaluatorVersionDAO, mysql2.NewEvaluatorRecordDAO, evaluator.NewRateLimiterImpl, conf2.NewEvaluatorConfiger, evaluator2.NewEvaluatorMetrics, producer.NewEvaluatorEventPublisher)

	evaluatorSet = wire.NewSet(
		NewEvaluatorHandlerImpl, foundation.NewAuthRPCProvider, foundation.NewUserRPCProvider, userinfo.NewUserInfoServiceImpl, idem.NewIdempotentService, redis2.NewIdemDAO, producer.NewExptEventPublisher, evaluatorDomainService,
		flagSet, experiment.NewExptRepo, mysql.NewExptDAO, mysql.NewExptEvaluatorRefDAO,
	)

	evalSetDomainService = wire.NewSet(service.NewEvaluationSetVersionServiceImpl, service.NewEvaluationSetItemServiceImpl, data.NewDatasetRPCAdapter, service.NewEvaluationSetServiceImpl)

	evaluationSetSet = wire.NewSet(
		NewEvaluationSetApplicationImpl,
		evalSetDomainService, metrics4.NewEvaluationSetMetrics, service.NewEvaluationSetSchemaServiceImpl, foundation.NewAuthRPCProvider, foundation.NewUserRPCProvider, userinfo.NewUserInfoServiceImpl,
	)

	targetDomainService = wire.NewSet(service.NewEvalTargetServiceImpl, NewSourceTargetOperators, prompt.NewPromptRPCAdapter, target.NewEvalTargetRepo, mysql3.NewEvalTargetDAO, mysql3.NewEvalTargetRecordDAO, mysql3.NewEvalTargetVersionDAO)

	evalTargetSet = wire.NewSet(
		NewEvalTargetHandlerImpl, metrics3.NewEvalTargetMetrics, foundation.NewAuthRPCProvider, targetDomainService,
		flagSet,
	)
)

func NewSourceTargetOperators(adapter rpc.IPromptRPCAdapter) map[entity.EvalTargetType]service.ISourceEvalTargetOperateService {
	return map[entity.EvalTargetType]service.ISourceEvalTargetOperateService{entity.EvalTargetTypeLoopPrompt: service.NewPromptSourceEvalTargetServiceImpl(adapter)}
}

func NewLock(cmdable redis.Cmdable) lock.ILocker {
	return lock.NewRedisLockerWithHolder(cmdable, "evaluation")
}

func NewEvaluatorSourceServices(llmProvider rpc.ILLMProvider, metric metrics5.EvaluatorExecMetrics, config conf2.IConfiger) []service.EvaluatorSourceService {
	return []service.EvaluatorSourceService{service.NewEvaluatorSourcePromptServiceImpl(llmProvider, metric, config)}
}
