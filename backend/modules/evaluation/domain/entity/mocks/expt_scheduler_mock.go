// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/entity (interfaces: ExptSchedulerMode)

// Package mocks is a generated GoMock package.
package mocks

import (
	"context"
	"reflect"

	"go.uber.org/mock/gomock"

	"github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/entity"
)

// MockExptSchedulerMode is a mock of ExptSchedulerMode interface.
type MockExptSchedulerMode struct {
	ctrl     *gomock.Controller
	recorder *MockExptSchedulerModeMockRecorder
}

// MockExptSchedulerModeMockRecorder is the mock recorder for MockExptSchedulerMode.
type MockExptSchedulerModeMockRecorder struct {
	mock *MockExptSchedulerMode
}

// NewMockExptSchedulerMode creates a new mock instance.
func NewMockExptSchedulerMode(ctrl *gomock.Controller) *MockExptSchedulerMode {
	mock := &MockExptSchedulerMode{ctrl: ctrl}
	mock.recorder = &MockExptSchedulerModeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExptSchedulerMode) EXPECT() *MockExptSchedulerModeMockRecorder {
	return m.recorder
}

// ExptEnd mocks base method.
func (m *MockExptSchedulerMode) ExptEnd(arg0 context.Context, arg1 *entity.ExptScheduleEvent, arg2 *entity.Experiment, arg3, arg4 int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExptEnd", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExptEnd indicates an expected call of ExptEnd.
func (mr *MockExptSchedulerModeMockRecorder) ExptEnd(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExptEnd", reflect.TypeOf((*MockExptSchedulerMode)(nil).ExptEnd), arg0, arg1, arg2, arg3, arg4)
}

// ExptStart mocks base method.
func (m *MockExptSchedulerMode) ExptStart(arg0 context.Context, arg1 *entity.ExptScheduleEvent, arg2 *entity.Experiment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExptStart", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExptStart indicates an expected call of ExptStart.
func (mr *MockExptSchedulerModeMockRecorder) ExptStart(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExptStart", reflect.TypeOf((*MockExptSchedulerMode)(nil).ExptStart), arg0, arg1, arg2)
}

// Mode mocks base method.
func (m *MockExptSchedulerMode) Mode() entity.ExptRunMode {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mode")
	ret0, _ := ret[0].(entity.ExptRunMode)
	return ret0
}

// Mode indicates an expected call of Mode.
func (mr *MockExptSchedulerModeMockRecorder) Mode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mode", reflect.TypeOf((*MockExptSchedulerMode)(nil).Mode))
}

// NextTick mocks base method.
func (m *MockExptSchedulerMode) NextTick(arg0 context.Context, arg1 *entity.ExptScheduleEvent, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextTick", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// NextTick indicates an expected call of NextTick.
func (mr *MockExptSchedulerModeMockRecorder) NextTick(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextTick", reflect.TypeOf((*MockExptSchedulerMode)(nil).NextTick), arg0, arg1, arg2)
}

// PublishResult mocks base method.
func (m *MockExptSchedulerMode) PublishResult(arg0 context.Context, arg1 []*entity.ExptTurnEvaluatorResultRef, arg2 *entity.ExptScheduleEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishResult", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishResult indicates an expected call of PublishResult.
func (mr *MockExptSchedulerModeMockRecorder) PublishResult(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishResult", reflect.TypeOf((*MockExptSchedulerMode)(nil).PublishResult), arg0, arg1, arg2)
}

// ScanEvalItems mocks base method.
func (m *MockExptSchedulerMode) ScanEvalItems(arg0 context.Context, arg1 *entity.ExptScheduleEvent, arg2 *entity.Experiment) ([]*entity.ExptEvalItem, []*entity.ExptEvalItem, []*entity.ExptEvalItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanEvalItems", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*entity.ExptEvalItem)
	ret1, _ := ret[1].([]*entity.ExptEvalItem)
	ret2, _ := ret[2].([]*entity.ExptEvalItem)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ScanEvalItems indicates an expected call of ScanEvalItems.
func (mr *MockExptSchedulerModeMockRecorder) ScanEvalItems(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanEvalItems", reflect.TypeOf((*MockExptSchedulerMode)(nil).ScanEvalItems), arg0, arg1, arg2)
}

// ScheduleEnd mocks base method.
func (m *MockExptSchedulerMode) ScheduleEnd(arg0 context.Context, arg1 *entity.ExptScheduleEvent, arg2 *entity.Experiment, arg3, arg4 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleEnd", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScheduleEnd indicates an expected call of ScheduleEnd.
func (mr *MockExptSchedulerModeMockRecorder) ScheduleEnd(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleEnd", reflect.TypeOf((*MockExptSchedulerMode)(nil).ScheduleEnd), arg0, arg1, arg2, arg3, arg4)
}

// ScheduleStart mocks base method.
func (m *MockExptSchedulerMode) ScheduleStart(arg0 context.Context, arg1 *entity.ExptScheduleEvent, arg2 *entity.Experiment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScheduleStart", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ScheduleStart indicates an expected call of ScheduleStart.
func (mr *MockExptSchedulerModeMockRecorder) ScheduleStart(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleStart", reflect.TypeOf((*MockExptSchedulerMode)(nil).ScheduleStart), arg0, arg1, arg2)
}
