// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/repo (interfaces: IEvaluatorRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/entity"
	repo "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/repo"
	gomock "go.uber.org/mock/gomock"
)

// MockIEvaluatorRepo is a mock of IEvaluatorRepo interface.
type MockIEvaluatorRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIEvaluatorRepoMockRecorder
}

// MockIEvaluatorRepoMockRecorder is the mock recorder for MockIEvaluatorRepo.
type MockIEvaluatorRepoMockRecorder struct {
	mock *MockIEvaluatorRepo
}

// NewMockIEvaluatorRepo creates a new mock instance.
func NewMockIEvaluatorRepo(ctrl *gomock.Controller) *MockIEvaluatorRepo {
	mock := &MockIEvaluatorRepo{ctrl: ctrl}
	mock.recorder = &MockIEvaluatorRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEvaluatorRepo) EXPECT() *MockIEvaluatorRepoMockRecorder {
	return m.recorder
}

// BatchDeleteEvaluator mocks base method.
func (m *MockIEvaluatorRepo) BatchDeleteEvaluator(arg0 context.Context, arg1 []int64, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteEvaluator", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchDeleteEvaluator indicates an expected call of BatchDeleteEvaluator.
func (mr *MockIEvaluatorRepoMockRecorder) BatchDeleteEvaluator(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteEvaluator", reflect.TypeOf((*MockIEvaluatorRepo)(nil).BatchDeleteEvaluator), arg0, arg1, arg2)
}

// BatchGetEvaluatorByVersionID mocks base method.
func (m *MockIEvaluatorRepo) BatchGetEvaluatorByVersionID(arg0 context.Context, arg1 *int64, arg2 []int64, arg3 bool) ([]*entity.Evaluator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetEvaluatorByVersionID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*entity.Evaluator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetEvaluatorByVersionID indicates an expected call of BatchGetEvaluatorByVersionID.
func (mr *MockIEvaluatorRepoMockRecorder) BatchGetEvaluatorByVersionID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetEvaluatorByVersionID", reflect.TypeOf((*MockIEvaluatorRepo)(nil).BatchGetEvaluatorByVersionID), arg0, arg1, arg2, arg3)
}

// BatchGetEvaluatorDraftByEvaluatorID mocks base method.
func (m *MockIEvaluatorRepo) BatchGetEvaluatorDraftByEvaluatorID(arg0 context.Context, arg1 int64, arg2 []int64, arg3 bool) ([]*entity.Evaluator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetEvaluatorDraftByEvaluatorID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*entity.Evaluator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetEvaluatorDraftByEvaluatorID indicates an expected call of BatchGetEvaluatorDraftByEvaluatorID.
func (mr *MockIEvaluatorRepoMockRecorder) BatchGetEvaluatorDraftByEvaluatorID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetEvaluatorDraftByEvaluatorID", reflect.TypeOf((*MockIEvaluatorRepo)(nil).BatchGetEvaluatorDraftByEvaluatorID), arg0, arg1, arg2, arg3)
}

// BatchGetEvaluatorMetaByID mocks base method.
func (m *MockIEvaluatorRepo) BatchGetEvaluatorMetaByID(arg0 context.Context, arg1 []int64, arg2 bool) ([]*entity.Evaluator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetEvaluatorMetaByID", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*entity.Evaluator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetEvaluatorMetaByID indicates an expected call of BatchGetEvaluatorMetaByID.
func (mr *MockIEvaluatorRepoMockRecorder) BatchGetEvaluatorMetaByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetEvaluatorMetaByID", reflect.TypeOf((*MockIEvaluatorRepo)(nil).BatchGetEvaluatorMetaByID), arg0, arg1, arg2)
}

// BatchGetEvaluatorVersionsByEvaluatorIDs mocks base method.
func (m *MockIEvaluatorRepo) BatchGetEvaluatorVersionsByEvaluatorIDs(arg0 context.Context, arg1 []int64, arg2 bool) ([]*entity.Evaluator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetEvaluatorVersionsByEvaluatorIDs", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*entity.Evaluator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetEvaluatorVersionsByEvaluatorIDs indicates an expected call of BatchGetEvaluatorVersionsByEvaluatorIDs.
func (mr *MockIEvaluatorRepoMockRecorder) BatchGetEvaluatorVersionsByEvaluatorIDs(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetEvaluatorVersionsByEvaluatorIDs", reflect.TypeOf((*MockIEvaluatorRepo)(nil).BatchGetEvaluatorVersionsByEvaluatorIDs), arg0, arg1, arg2)
}

// CheckNameExist mocks base method.
func (m *MockIEvaluatorRepo) CheckNameExist(arg0 context.Context, arg1, arg2 int64, arg3 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckNameExist", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckNameExist indicates an expected call of CheckNameExist.
func (mr *MockIEvaluatorRepoMockRecorder) CheckNameExist(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckNameExist", reflect.TypeOf((*MockIEvaluatorRepo)(nil).CheckNameExist), arg0, arg1, arg2, arg3)
}

// CheckVersionExist mocks base method.
func (m *MockIEvaluatorRepo) CheckVersionExist(arg0 context.Context, arg1 int64, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckVersionExist", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckVersionExist indicates an expected call of CheckVersionExist.
func (mr *MockIEvaluatorRepoMockRecorder) CheckVersionExist(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckVersionExist", reflect.TypeOf((*MockIEvaluatorRepo)(nil).CheckVersionExist), arg0, arg1, arg2)
}

// CreateEvaluator mocks base method.
func (m *MockIEvaluatorRepo) CreateEvaluator(arg0 context.Context, arg1 *entity.Evaluator) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvaluator", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvaluator indicates an expected call of CreateEvaluator.
func (mr *MockIEvaluatorRepoMockRecorder) CreateEvaluator(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvaluator", reflect.TypeOf((*MockIEvaluatorRepo)(nil).CreateEvaluator), arg0, arg1)
}

// ListEvaluator mocks base method.
func (m *MockIEvaluatorRepo) ListEvaluator(arg0 context.Context, arg1 *repo.ListEvaluatorRequest) (*repo.ListEvaluatorResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEvaluator", arg0, arg1)
	ret0, _ := ret[0].(*repo.ListEvaluatorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEvaluator indicates an expected call of ListEvaluator.
func (mr *MockIEvaluatorRepoMockRecorder) ListEvaluator(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEvaluator", reflect.TypeOf((*MockIEvaluatorRepo)(nil).ListEvaluator), arg0, arg1)
}

// ListEvaluatorVersion mocks base method.
func (m *MockIEvaluatorRepo) ListEvaluatorVersion(arg0 context.Context, arg1 *repo.ListEvaluatorVersionRequest) (*repo.ListEvaluatorVersionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEvaluatorVersion", arg0, arg1)
	ret0, _ := ret[0].(*repo.ListEvaluatorVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEvaluatorVersion indicates an expected call of ListEvaluatorVersion.
func (mr *MockIEvaluatorRepoMockRecorder) ListEvaluatorVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEvaluatorVersion", reflect.TypeOf((*MockIEvaluatorRepo)(nil).ListEvaluatorVersion), arg0, arg1)
}

// SubmitEvaluatorVersion mocks base method.
func (m *MockIEvaluatorRepo) SubmitEvaluatorVersion(arg0 context.Context, arg1 *entity.Evaluator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitEvaluatorVersion", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SubmitEvaluatorVersion indicates an expected call of SubmitEvaluatorVersion.
func (mr *MockIEvaluatorRepoMockRecorder) SubmitEvaluatorVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitEvaluatorVersion", reflect.TypeOf((*MockIEvaluatorRepo)(nil).SubmitEvaluatorVersion), arg0, arg1)
}

// UpdateEvaluatorDraft mocks base method.
func (m *MockIEvaluatorRepo) UpdateEvaluatorDraft(arg0 context.Context, arg1 *entity.Evaluator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvaluatorDraft", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEvaluatorDraft indicates an expected call of UpdateEvaluatorDraft.
func (mr *MockIEvaluatorRepoMockRecorder) UpdateEvaluatorDraft(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvaluatorDraft", reflect.TypeOf((*MockIEvaluatorRepo)(nil).UpdateEvaluatorDraft), arg0, arg1)
}

// UpdateEvaluatorMeta mocks base method.
func (m *MockIEvaluatorRepo) UpdateEvaluatorMeta(arg0 context.Context, arg1 int64, arg2, arg3, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvaluatorMeta", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEvaluatorMeta indicates an expected call of UpdateEvaluatorMeta.
func (mr *MockIEvaluatorRepoMockRecorder) UpdateEvaluatorMeta(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvaluatorMeta", reflect.TypeOf((*MockIEvaluatorRepo)(nil).UpdateEvaluatorMeta), arg0, arg1, arg2, arg3, arg4)
}
