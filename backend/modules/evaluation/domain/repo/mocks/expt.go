// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/repo (interfaces: IExperimentRepo,IExptStatsRepo,IExptItemResultRepo,IExptTurnResultRepo,IExptRunLogRepo,IExptAggrResultRepo,QuotaRepo)
//
// Generated by this command:
//
//	mockgen -destination ./mocks/expt.go --package mocks . IExperimentRepo,IExptStatsRepo,IExptItemResultRepo,IExptTurnResultRepo,IExptRunLogRepo,IExptAggrResultRepo,QuotaRepo
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockIExperimentRepo is a mock of IExperimentRepo interface.
type MockIExperimentRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIExperimentRepoMockRecorder
	isgomock struct{}
}

// MockIExperimentRepoMockRecorder is the mock recorder for MockIExperimentRepo.
type MockIExperimentRepoMockRecorder struct {
	mock *MockIExperimentRepo
}

// NewMockIExperimentRepo creates a new mock instance.
func NewMockIExperimentRepo(ctrl *gomock.Controller) *MockIExperimentRepo {
	mock := &MockIExperimentRepo{ctrl: ctrl}
	mock.recorder = &MockIExperimentRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIExperimentRepo) EXPECT() *MockIExperimentRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIExperimentRepo) Create(ctx context.Context, expt *entity.Experiment, exptEvaluatorRefs []*entity.ExptEvaluatorRef) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, expt, exptEvaluatorRefs)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIExperimentRepoMockRecorder) Create(ctx, expt, exptEvaluatorRefs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIExperimentRepo)(nil).Create), ctx, expt, exptEvaluatorRefs)
}

// Delete mocks base method.
func (m *MockIExperimentRepo) Delete(ctx context.Context, id, spaceID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id, spaceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIExperimentRepoMockRecorder) Delete(ctx, id, spaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIExperimentRepo)(nil).Delete), ctx, id, spaceID)
}

// GetByID mocks base method.
func (m *MockIExperimentRepo) GetByID(ctx context.Context, id, spaceID int64) (*entity.Experiment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id, spaceID)
	ret0, _ := ret[0].(*entity.Experiment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIExperimentRepoMockRecorder) GetByID(ctx, id, spaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIExperimentRepo)(nil).GetByID), ctx, id, spaceID)
}

// GetByName mocks base method.
func (m *MockIExperimentRepo) GetByName(ctx context.Context, name string, spaceID int64) (*entity.Experiment, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", ctx, name, spaceID)
	ret0, _ := ret[0].(*entity.Experiment)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByName indicates an expected call of GetByName.
func (mr *MockIExperimentRepoMockRecorder) GetByName(ctx, name, spaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockIExperimentRepo)(nil).GetByName), ctx, name, spaceID)
}

// GetEvaluatorRefByExptIDs mocks base method.
func (m *MockIExperimentRepo) GetEvaluatorRefByExptIDs(ctx context.Context, exptID []int64, spaceID int64) ([]*entity.ExptEvaluatorRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvaluatorRefByExptIDs", ctx, exptID, spaceID)
	ret0, _ := ret[0].([]*entity.ExptEvaluatorRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvaluatorRefByExptIDs indicates an expected call of GetEvaluatorRefByExptIDs.
func (mr *MockIExperimentRepoMockRecorder) GetEvaluatorRefByExptIDs(ctx, exptID, spaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvaluatorRefByExptIDs", reflect.TypeOf((*MockIExperimentRepo)(nil).GetEvaluatorRefByExptIDs), ctx, exptID, spaceID)
}

// List mocks base method.
func (m *MockIExperimentRepo) List(ctx context.Context, page, size int32, filter *entity.ExptListFilter, orders []*entity.OrderBy, spaceID int64) ([]*entity.Experiment, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, page, size, filter, orders, spaceID)
	ret0, _ := ret[0].([]*entity.Experiment)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockIExperimentRepoMockRecorder) List(ctx, page, size, filter, orders, spaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIExperimentRepo)(nil).List), ctx, page, size, filter, orders, spaceID)
}

// MDelete mocks base method.
func (m *MockIExperimentRepo) MDelete(ctx context.Context, ids []int64, spaceID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MDelete", ctx, ids, spaceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// MDelete indicates an expected call of MDelete.
func (mr *MockIExperimentRepoMockRecorder) MDelete(ctx, ids, spaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MDelete", reflect.TypeOf((*MockIExperimentRepo)(nil).MDelete), ctx, ids, spaceID)
}

// MGetBasicByID mocks base method.
func (m *MockIExperimentRepo) MGetBasicByID(ctx context.Context, ids []int64) ([]*entity.Experiment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGetBasicByID", ctx, ids)
	ret0, _ := ret[0].([]*entity.Experiment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetBasicByID indicates an expected call of MGetBasicByID.
func (mr *MockIExperimentRepoMockRecorder) MGetBasicByID(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetBasicByID", reflect.TypeOf((*MockIExperimentRepo)(nil).MGetBasicByID), ctx, ids)
}

// MGetByID mocks base method.
func (m *MockIExperimentRepo) MGetByID(ctx context.Context, ids []int64, spaceID int64) ([]*entity.Experiment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGetByID", ctx, ids, spaceID)
	ret0, _ := ret[0].([]*entity.Experiment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetByID indicates an expected call of MGetByID.
func (mr *MockIExperimentRepoMockRecorder) MGetByID(ctx, ids, spaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetByID", reflect.TypeOf((*MockIExperimentRepo)(nil).MGetByID), ctx, ids, spaceID)
}

// Update mocks base method.
func (m *MockIExperimentRepo) Update(ctx context.Context, expt *entity.Experiment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, expt)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIExperimentRepoMockRecorder) Update(ctx, expt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIExperimentRepo)(nil).Update), ctx, expt)
}

// MockIExptStatsRepo is a mock of IExptStatsRepo interface.
type MockIExptStatsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIExptStatsRepoMockRecorder
	isgomock struct{}
}

// MockIExptStatsRepoMockRecorder is the mock recorder for MockIExptStatsRepo.
type MockIExptStatsRepoMockRecorder struct {
	mock *MockIExptStatsRepo
}

// NewMockIExptStatsRepo creates a new mock instance.
func NewMockIExptStatsRepo(ctrl *gomock.Controller) *MockIExptStatsRepo {
	mock := &MockIExptStatsRepo{ctrl: ctrl}
	mock.recorder = &MockIExptStatsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIExptStatsRepo) EXPECT() *MockIExptStatsRepoMockRecorder {
	return m.recorder
}

// ArithOperateCount mocks base method.
func (m *MockIExptStatsRepo) ArithOperateCount(ctx context.Context, exptID, spaceID int64, cntArithOp *entity.StatsCntArithOp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArithOperateCount", ctx, exptID, spaceID, cntArithOp)
	ret0, _ := ret[0].(error)
	return ret0
}

// ArithOperateCount indicates an expected call of ArithOperateCount.
func (mr *MockIExptStatsRepoMockRecorder) ArithOperateCount(ctx, exptID, spaceID, cntArithOp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArithOperateCount", reflect.TypeOf((*MockIExptStatsRepo)(nil).ArithOperateCount), ctx, exptID, spaceID, cntArithOp)
}

// Create mocks base method.
func (m *MockIExptStatsRepo) Create(ctx context.Context, stats *entity.ExptStats) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, stats)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIExptStatsRepoMockRecorder) Create(ctx, stats any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIExptStatsRepo)(nil).Create), ctx, stats)
}

// Get mocks base method.
func (m *MockIExptStatsRepo) Get(ctx context.Context, exptID, spaceID int64) (*entity.ExptStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, exptID, spaceID)
	ret0, _ := ret[0].(*entity.ExptStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIExptStatsRepoMockRecorder) Get(ctx, exptID, spaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIExptStatsRepo)(nil).Get), ctx, exptID, spaceID)
}

// MGet mocks base method.
func (m *MockIExptStatsRepo) MGet(ctx context.Context, exptIDs []int64, spaceID int64) ([]*entity.ExptStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGet", ctx, exptIDs, spaceID)
	ret0, _ := ret[0].([]*entity.ExptStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGet indicates an expected call of MGet.
func (mr *MockIExptStatsRepoMockRecorder) MGet(ctx, exptIDs, spaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGet", reflect.TypeOf((*MockIExptStatsRepo)(nil).MGet), ctx, exptIDs, spaceID)
}

// Save mocks base method.
func (m *MockIExptStatsRepo) Save(ctx context.Context, stats *entity.ExptStats) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, stats)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIExptStatsRepoMockRecorder) Save(ctx, stats any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIExptStatsRepo)(nil).Save), ctx, stats)
}

// UpdateByExptID mocks base method.
func (m *MockIExptStatsRepo) UpdateByExptID(ctx context.Context, exptID, spaceID int64, stats *entity.ExptStats) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByExptID", ctx, exptID, spaceID, stats)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByExptID indicates an expected call of UpdateByExptID.
func (mr *MockIExptStatsRepoMockRecorder) UpdateByExptID(ctx, exptID, spaceID, stats any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByExptID", reflect.TypeOf((*MockIExptStatsRepo)(nil).UpdateByExptID), ctx, exptID, spaceID, stats)
}

// MockIExptItemResultRepo is a mock of IExptItemResultRepo interface.
type MockIExptItemResultRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIExptItemResultRepoMockRecorder
	isgomock struct{}
}

// MockIExptItemResultRepoMockRecorder is the mock recorder for MockIExptItemResultRepo.
type MockIExptItemResultRepoMockRecorder struct {
	mock *MockIExptItemResultRepo
}

// NewMockIExptItemResultRepo creates a new mock instance.
func NewMockIExptItemResultRepo(ctrl *gomock.Controller) *MockIExptItemResultRepo {
	mock := &MockIExptItemResultRepo{ctrl: ctrl}
	mock.recorder = &MockIExptItemResultRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIExptItemResultRepo) EXPECT() *MockIExptItemResultRepoMockRecorder {
	return m.recorder
}

// BatchCreateNX mocks base method.
func (m *MockIExptItemResultRepo) BatchCreateNX(ctx context.Context, itemResults []*entity.ExptItemResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreateNX", ctx, itemResults)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchCreateNX indicates an expected call of BatchCreateNX.
func (mr *MockIExptItemResultRepoMockRecorder) BatchCreateNX(ctx, itemResults any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateNX", reflect.TypeOf((*MockIExptItemResultRepo)(nil).BatchCreateNX), ctx, itemResults)
}

// BatchCreateNXRunLogs mocks base method.
func (m *MockIExptItemResultRepo) BatchCreateNXRunLogs(ctx context.Context, itemRunLogs []*entity.ExptItemResultRunLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreateNXRunLogs", ctx, itemRunLogs)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchCreateNXRunLogs indicates an expected call of BatchCreateNXRunLogs.
func (mr *MockIExptItemResultRepoMockRecorder) BatchCreateNXRunLogs(ctx, itemRunLogs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateNXRunLogs", reflect.TypeOf((*MockIExptItemResultRepo)(nil).BatchCreateNXRunLogs), ctx, itemRunLogs)
}

// BatchGet mocks base method.
func (m *MockIExptItemResultRepo) BatchGet(ctx context.Context, spaceID, exptID int64, itemIDs []int64) ([]*entity.ExptItemResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGet", ctx, spaceID, exptID, itemIDs)
	ret0, _ := ret[0].([]*entity.ExptItemResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGet indicates an expected call of BatchGet.
func (mr *MockIExptItemResultRepoMockRecorder) BatchGet(ctx, spaceID, exptID, itemIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGet", reflect.TypeOf((*MockIExptItemResultRepo)(nil).BatchGet), ctx, spaceID, exptID, itemIDs)
}

// GetItemIDListByExptID mocks base method.
func (m *MockIExptItemResultRepo) GetItemIDListByExptID(ctx context.Context, exptID, spaceID int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemIDListByExptID", ctx, exptID, spaceID)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemIDListByExptID indicates an expected call of GetItemIDListByExptID.
func (mr *MockIExptItemResultRepoMockRecorder) GetItemIDListByExptID(ctx, exptID, spaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemIDListByExptID", reflect.TypeOf((*MockIExptItemResultRepo)(nil).GetItemIDListByExptID), ctx, exptID, spaceID)
}

// GetItemRunLog mocks base method.
func (m *MockIExptItemResultRepo) GetItemRunLog(ctx context.Context, exptID, exptRunID, itemID, spaceID int64) (*entity.ExptItemResultRunLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemRunLog", ctx, exptID, exptRunID, itemID, spaceID)
	ret0, _ := ret[0].(*entity.ExptItemResultRunLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemRunLog indicates an expected call of GetItemRunLog.
func (mr *MockIExptItemResultRepoMockRecorder) GetItemRunLog(ctx, exptID, exptRunID, itemID, spaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemRunLog", reflect.TypeOf((*MockIExptItemResultRepo)(nil).GetItemRunLog), ctx, exptID, exptRunID, itemID, spaceID)
}

// GetItemTurnResults mocks base method.
func (m *MockIExptItemResultRepo) GetItemTurnResults(ctx context.Context, spaceID, exptID, itemID int64) ([]*entity.ExptTurnResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemTurnResults", ctx, spaceID, exptID, itemID)
	ret0, _ := ret[0].([]*entity.ExptTurnResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemTurnResults indicates an expected call of GetItemTurnResults.
func (mr *MockIExptItemResultRepoMockRecorder) GetItemTurnResults(ctx, spaceID, exptID, itemID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemTurnResults", reflect.TypeOf((*MockIExptItemResultRepo)(nil).GetItemTurnResults), ctx, spaceID, exptID, itemID)
}

// GetMaxItemIdxByExptID mocks base method.
func (m *MockIExptItemResultRepo) GetMaxItemIdxByExptID(ctx context.Context, exptID, spaceID int64) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxItemIdxByExptID", ctx, exptID, spaceID)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaxItemIdxByExptID indicates an expected call of GetMaxItemIdxByExptID.
func (mr *MockIExptItemResultRepoMockRecorder) GetMaxItemIdxByExptID(ctx, exptID, spaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxItemIdxByExptID", reflect.TypeOf((*MockIExptItemResultRepo)(nil).GetMaxItemIdxByExptID), ctx, exptID, spaceID)
}

// MGetItemRunLog mocks base method.
func (m *MockIExptItemResultRepo) MGetItemRunLog(ctx context.Context, exptID, exptRunID int64, itemIDs []int64, spaceID int64) ([]*entity.ExptItemResultRunLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGetItemRunLog", ctx, exptID, exptRunID, itemIDs, spaceID)
	ret0, _ := ret[0].([]*entity.ExptItemResultRunLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetItemRunLog indicates an expected call of MGetItemRunLog.
func (mr *MockIExptItemResultRepoMockRecorder) MGetItemRunLog(ctx, exptID, exptRunID, itemIDs, spaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetItemRunLog", reflect.TypeOf((*MockIExptItemResultRepo)(nil).MGetItemRunLog), ctx, exptID, exptRunID, itemIDs, spaceID)
}

// SaveItemResults mocks base method.
func (m *MockIExptItemResultRepo) SaveItemResults(ctx context.Context, itemResults []*entity.ExptItemResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveItemResults", ctx, itemResults)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveItemResults indicates an expected call of SaveItemResults.
func (mr *MockIExptItemResultRepoMockRecorder) SaveItemResults(ctx, itemResults any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveItemResults", reflect.TypeOf((*MockIExptItemResultRepo)(nil).SaveItemResults), ctx, itemResults)
}

// ScanItemResults mocks base method.
func (m *MockIExptItemResultRepo) ScanItemResults(ctx context.Context, exptID, cursor, limit int64, status []int32, spaceID int64) ([]*entity.ExptItemResult, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanItemResults", ctx, exptID, cursor, limit, status, spaceID)
	ret0, _ := ret[0].([]*entity.ExptItemResult)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ScanItemResults indicates an expected call of ScanItemResults.
func (mr *MockIExptItemResultRepoMockRecorder) ScanItemResults(ctx, exptID, cursor, limit, status, spaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanItemResults", reflect.TypeOf((*MockIExptItemResultRepo)(nil).ScanItemResults), ctx, exptID, cursor, limit, status, spaceID)
}

// ScanItemRunLogs mocks base method.
func (m *MockIExptItemResultRepo) ScanItemRunLogs(ctx context.Context, exptID, exptRunID int64, filter *entity.ExptItemRunLogFilter, cursor, limit, spaceID int64) ([]*entity.ExptItemResultRunLog, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanItemRunLogs", ctx, exptID, exptRunID, filter, cursor, limit, spaceID)
	ret0, _ := ret[0].([]*entity.ExptItemResultRunLog)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ScanItemRunLogs indicates an expected call of ScanItemRunLogs.
func (mr *MockIExptItemResultRepoMockRecorder) ScanItemRunLogs(ctx, exptID, exptRunID, filter, cursor, limit, spaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanItemRunLogs", reflect.TypeOf((*MockIExptItemResultRepo)(nil).ScanItemRunLogs), ctx, exptID, exptRunID, filter, cursor, limit, spaceID)
}

// UpdateItemRunLog mocks base method.
func (m *MockIExptItemResultRepo) UpdateItemRunLog(ctx context.Context, exptID, exptRunID int64, itemID []int64, ufields map[string]any, spaceID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItemRunLog", ctx, exptID, exptRunID, itemID, ufields, spaceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItemRunLog indicates an expected call of UpdateItemRunLog.
func (mr *MockIExptItemResultRepoMockRecorder) UpdateItemRunLog(ctx, exptID, exptRunID, itemID, ufields, spaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItemRunLog", reflect.TypeOf((*MockIExptItemResultRepo)(nil).UpdateItemRunLog), ctx, exptID, exptRunID, itemID, ufields, spaceID)
}

// UpdateItemsResult mocks base method.
func (m *MockIExptItemResultRepo) UpdateItemsResult(ctx context.Context, spaceID, exptID int64, itemID []int64, ufields map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItemsResult", ctx, spaceID, exptID, itemID, ufields)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItemsResult indicates an expected call of UpdateItemsResult.
func (mr *MockIExptItemResultRepoMockRecorder) UpdateItemsResult(ctx, spaceID, exptID, itemID, ufields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItemsResult", reflect.TypeOf((*MockIExptItemResultRepo)(nil).UpdateItemsResult), ctx, spaceID, exptID, itemID, ufields)
}

// MockIExptTurnResultRepo is a mock of IExptTurnResultRepo interface.
type MockIExptTurnResultRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIExptTurnResultRepoMockRecorder
	isgomock struct{}
}

// MockIExptTurnResultRepoMockRecorder is the mock recorder for MockIExptTurnResultRepo.
type MockIExptTurnResultRepoMockRecorder struct {
	mock *MockIExptTurnResultRepo
}

// NewMockIExptTurnResultRepo creates a new mock instance.
func NewMockIExptTurnResultRepo(ctrl *gomock.Controller) *MockIExptTurnResultRepo {
	mock := &MockIExptTurnResultRepo{ctrl: ctrl}
	mock.recorder = &MockIExptTurnResultRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIExptTurnResultRepo) EXPECT() *MockIExptTurnResultRepoMockRecorder {
	return m.recorder
}

// BatchCreateNX mocks base method.
func (m *MockIExptTurnResultRepo) BatchCreateNX(ctx context.Context, turnResults []*entity.ExptTurnResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreateNX", ctx, turnResults)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchCreateNX indicates an expected call of BatchCreateNX.
func (mr *MockIExptTurnResultRepoMockRecorder) BatchCreateNX(ctx, turnResults any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateNX", reflect.TypeOf((*MockIExptTurnResultRepo)(nil).BatchCreateNX), ctx, turnResults)
}

// BatchCreateNXRunLog mocks base method.
func (m *MockIExptTurnResultRepo) BatchCreateNXRunLog(ctx context.Context, turnResults []*entity.ExptTurnResultRunLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreateNXRunLog", ctx, turnResults)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchCreateNXRunLog indicates an expected call of BatchCreateNXRunLog.
func (mr *MockIExptTurnResultRepoMockRecorder) BatchCreateNXRunLog(ctx, turnResults any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateNXRunLog", reflect.TypeOf((*MockIExptTurnResultRepo)(nil).BatchCreateNXRunLog), ctx, turnResults)
}

// BatchGet mocks base method.
func (m *MockIExptTurnResultRepo) BatchGet(ctx context.Context, spaceID, exptID int64, itemIDs []int64) ([]*entity.ExptTurnResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGet", ctx, spaceID, exptID, itemIDs)
	ret0, _ := ret[0].([]*entity.ExptTurnResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGet indicates an expected call of BatchGet.
func (mr *MockIExptTurnResultRepoMockRecorder) BatchGet(ctx, spaceID, exptID, itemIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGet", reflect.TypeOf((*MockIExptTurnResultRepo)(nil).BatchGet), ctx, spaceID, exptID, itemIDs)
}

// BatchGetTurnEvaluatorResultRef mocks base method.
func (m *MockIExptTurnResultRepo) BatchGetTurnEvaluatorResultRef(ctx context.Context, spaceID int64, exptTurnResultIDs []int64) ([]*entity.ExptTurnEvaluatorResultRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetTurnEvaluatorResultRef", ctx, spaceID, exptTurnResultIDs)
	ret0, _ := ret[0].([]*entity.ExptTurnEvaluatorResultRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetTurnEvaluatorResultRef indicates an expected call of BatchGetTurnEvaluatorResultRef.
func (mr *MockIExptTurnResultRepoMockRecorder) BatchGetTurnEvaluatorResultRef(ctx, spaceID, exptTurnResultIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetTurnEvaluatorResultRef", reflect.TypeOf((*MockIExptTurnResultRepo)(nil).BatchGetTurnEvaluatorResultRef), ctx, spaceID, exptTurnResultIDs)
}

// CreateOrUpdateItemsTurnRunLogStatus mocks base method.
func (m *MockIExptTurnResultRepo) CreateOrUpdateItemsTurnRunLogStatus(ctx context.Context, spaceID, exptID, exptRunID int64, itemIDs []int64, status entity.TurnRunState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateItemsTurnRunLogStatus", ctx, spaceID, exptID, exptRunID, itemIDs, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateItemsTurnRunLogStatus indicates an expected call of CreateOrUpdateItemsTurnRunLogStatus.
func (mr *MockIExptTurnResultRepoMockRecorder) CreateOrUpdateItemsTurnRunLogStatus(ctx, spaceID, exptID, exptRunID, itemIDs, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateItemsTurnRunLogStatus", reflect.TypeOf((*MockIExptTurnResultRepo)(nil).CreateOrUpdateItemsTurnRunLogStatus), ctx, spaceID, exptID, exptRunID, itemIDs, status)
}

// CreateTurnEvaluatorRefs mocks base method.
func (m *MockIExptTurnResultRepo) CreateTurnEvaluatorRefs(ctx context.Context, turnResults []*entity.ExptTurnEvaluatorResultRef) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTurnEvaluatorRefs", ctx, turnResults)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTurnEvaluatorRefs indicates an expected call of CreateTurnEvaluatorRefs.
func (mr *MockIExptTurnResultRepoMockRecorder) CreateTurnEvaluatorRefs(ctx, turnResults any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTurnEvaluatorRefs", reflect.TypeOf((*MockIExptTurnResultRepo)(nil).CreateTurnEvaluatorRefs), ctx, turnResults)
}

// GetItemTurnResults mocks base method.
func (m *MockIExptTurnResultRepo) GetItemTurnResults(ctx context.Context, exptID, itemID, spaceID int64) ([]*entity.ExptTurnResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemTurnResults", ctx, exptID, itemID, spaceID)
	ret0, _ := ret[0].([]*entity.ExptTurnResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemTurnResults indicates an expected call of GetItemTurnResults.
func (mr *MockIExptTurnResultRepoMockRecorder) GetItemTurnResults(ctx, exptID, itemID, spaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemTurnResults", reflect.TypeOf((*MockIExptTurnResultRepo)(nil).GetItemTurnResults), ctx, exptID, itemID, spaceID)
}

// GetItemTurnRunLogs mocks base method.
func (m *MockIExptTurnResultRepo) GetItemTurnRunLogs(ctx context.Context, exptID, exptRunID, itemID, spaceID int64) ([]*entity.ExptTurnResultRunLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemTurnRunLogs", ctx, exptID, exptRunID, itemID, spaceID)
	ret0, _ := ret[0].([]*entity.ExptTurnResultRunLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemTurnRunLogs indicates an expected call of GetItemTurnRunLogs.
func (mr *MockIExptTurnResultRepoMockRecorder) GetItemTurnRunLogs(ctx, exptID, exptRunID, itemID, spaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemTurnRunLogs", reflect.TypeOf((*MockIExptTurnResultRepo)(nil).GetItemTurnRunLogs), ctx, exptID, exptRunID, itemID, spaceID)
}

// GetTurnEvaluatorResultRefByEvaluatorVersionID mocks base method.
func (m *MockIExptTurnResultRepo) GetTurnEvaluatorResultRefByEvaluatorVersionID(ctx context.Context, spaceID, exptID, evaluatorVersionID int64) ([]*entity.ExptTurnEvaluatorResultRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTurnEvaluatorResultRefByEvaluatorVersionID", ctx, spaceID, exptID, evaluatorVersionID)
	ret0, _ := ret[0].([]*entity.ExptTurnEvaluatorResultRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTurnEvaluatorResultRefByEvaluatorVersionID indicates an expected call of GetTurnEvaluatorResultRefByEvaluatorVersionID.
func (mr *MockIExptTurnResultRepoMockRecorder) GetTurnEvaluatorResultRefByEvaluatorVersionID(ctx, spaceID, exptID, evaluatorVersionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTurnEvaluatorResultRefByEvaluatorVersionID", reflect.TypeOf((*MockIExptTurnResultRepo)(nil).GetTurnEvaluatorResultRefByEvaluatorVersionID), ctx, spaceID, exptID, evaluatorVersionID)
}

// GetTurnEvaluatorResultRefByExptID mocks base method.
func (m *MockIExptTurnResultRepo) GetTurnEvaluatorResultRefByExptID(ctx context.Context, spaceID, exptID int64) ([]*entity.ExptTurnEvaluatorResultRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTurnEvaluatorResultRefByExptID", ctx, spaceID, exptID)
	ret0, _ := ret[0].([]*entity.ExptTurnEvaluatorResultRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTurnEvaluatorResultRefByExptID indicates an expected call of GetTurnEvaluatorResultRefByExptID.
func (mr *MockIExptTurnResultRepoMockRecorder) GetTurnEvaluatorResultRefByExptID(ctx, spaceID, exptID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTurnEvaluatorResultRefByExptID", reflect.TypeOf((*MockIExptTurnResultRepo)(nil).GetTurnEvaluatorResultRefByExptID), ctx, spaceID, exptID)
}

// ListTurnResult mocks base method.
func (m *MockIExptTurnResultRepo) ListTurnResult(ctx context.Context, spaceID, exptID int64, filter *entity.ExptTurnResultFilter, page entity.Page, desc bool) ([]*entity.ExptTurnResult, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTurnResult", ctx, spaceID, exptID, filter, page, desc)
	ret0, _ := ret[0].([]*entity.ExptTurnResult)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTurnResult indicates an expected call of ListTurnResult.
func (mr *MockIExptTurnResultRepoMockRecorder) ListTurnResult(ctx, spaceID, exptID, filter, page, desc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTurnResult", reflect.TypeOf((*MockIExptTurnResultRepo)(nil).ListTurnResult), ctx, spaceID, exptID, filter, page, desc)
}

// MGetItemTurnRunLogs mocks base method.
func (m *MockIExptTurnResultRepo) MGetItemTurnRunLogs(ctx context.Context, exptID, exptRunID int64, itemIDs []int64, spaceID int64) ([]*entity.ExptTurnResultRunLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGetItemTurnRunLogs", ctx, exptID, exptRunID, itemIDs, spaceID)
	ret0, _ := ret[0].([]*entity.ExptTurnResultRunLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetItemTurnRunLogs indicates an expected call of MGetItemTurnRunLogs.
func (mr *MockIExptTurnResultRepoMockRecorder) MGetItemTurnRunLogs(ctx, exptID, exptRunID, itemIDs, spaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetItemTurnRunLogs", reflect.TypeOf((*MockIExptTurnResultRepo)(nil).MGetItemTurnRunLogs), ctx, exptID, exptRunID, itemIDs, spaceID)
}

// SaveTurnResults mocks base method.
func (m *MockIExptTurnResultRepo) SaveTurnResults(ctx context.Context, turnResults []*entity.ExptTurnResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTurnResults", ctx, turnResults)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTurnResults indicates an expected call of SaveTurnResults.
func (mr *MockIExptTurnResultRepoMockRecorder) SaveTurnResults(ctx, turnResults any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTurnResults", reflect.TypeOf((*MockIExptTurnResultRepo)(nil).SaveTurnResults), ctx, turnResults)
}

// SaveTurnRunLogs mocks base method.
func (m *MockIExptTurnResultRepo) SaveTurnRunLogs(ctx context.Context, turnResults []*entity.ExptTurnResultRunLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTurnRunLogs", ctx, turnResults)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTurnRunLogs indicates an expected call of SaveTurnRunLogs.
func (mr *MockIExptTurnResultRepoMockRecorder) SaveTurnRunLogs(ctx, turnResults any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTurnRunLogs", reflect.TypeOf((*MockIExptTurnResultRepo)(nil).SaveTurnRunLogs), ctx, turnResults)
}

// ScanTurnResults mocks base method.
func (m *MockIExptTurnResultRepo) ScanTurnResults(ctx context.Context, exptID int64, status []int32, cursor, limit, spaceID int64) ([]*entity.ExptTurnResult, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanTurnResults", ctx, exptID, status, cursor, limit, spaceID)
	ret0, _ := ret[0].([]*entity.ExptTurnResult)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ScanTurnResults indicates an expected call of ScanTurnResults.
func (mr *MockIExptTurnResultRepoMockRecorder) ScanTurnResults(ctx, exptID, status, cursor, limit, spaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanTurnResults", reflect.TypeOf((*MockIExptTurnResultRepo)(nil).ScanTurnResults), ctx, exptID, status, cursor, limit, spaceID)
}

// ScanTurnRunLogs mocks base method.
func (m *MockIExptTurnResultRepo) ScanTurnRunLogs(ctx context.Context, exptID, cursor, limit, spaceID int64) ([]*entity.ExptTurnResultRunLog, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanTurnRunLogs", ctx, exptID, cursor, limit, spaceID)
	ret0, _ := ret[0].([]*entity.ExptTurnResultRunLog)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ScanTurnRunLogs indicates an expected call of ScanTurnRunLogs.
func (mr *MockIExptTurnResultRepoMockRecorder) ScanTurnRunLogs(ctx, exptID, cursor, limit, spaceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanTurnRunLogs", reflect.TypeOf((*MockIExptTurnResultRepo)(nil).ScanTurnRunLogs), ctx, exptID, cursor, limit, spaceID)
}

// UpdateTurnResults mocks base method.
func (m *MockIExptTurnResultRepo) UpdateTurnResults(ctx context.Context, exptID int64, itemTurnIDs []*entity.ItemTurnID, spaceID int64, ufields map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTurnResults", ctx, exptID, itemTurnIDs, spaceID, ufields)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTurnResults indicates an expected call of UpdateTurnResults.
func (mr *MockIExptTurnResultRepoMockRecorder) UpdateTurnResults(ctx, exptID, itemTurnIDs, spaceID, ufields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTurnResults", reflect.TypeOf((*MockIExptTurnResultRepo)(nil).UpdateTurnResults), ctx, exptID, itemTurnIDs, spaceID, ufields)
}

// UpdateTurnResultsWithItemIDs mocks base method.
func (m *MockIExptTurnResultRepo) UpdateTurnResultsWithItemIDs(ctx context.Context, exptID int64, itemIDs []int64, spaceID int64, ufields map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTurnResultsWithItemIDs", ctx, exptID, itemIDs, spaceID, ufields)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTurnResultsWithItemIDs indicates an expected call of UpdateTurnResultsWithItemIDs.
func (mr *MockIExptTurnResultRepoMockRecorder) UpdateTurnResultsWithItemIDs(ctx, exptID, itemIDs, spaceID, ufields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTurnResultsWithItemIDs", reflect.TypeOf((*MockIExptTurnResultRepo)(nil).UpdateTurnResultsWithItemIDs), ctx, exptID, itemIDs, spaceID, ufields)
}

// MockIExptRunLogRepo is a mock of IExptRunLogRepo interface.
type MockIExptRunLogRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIExptRunLogRepoMockRecorder
	isgomock struct{}
}

// MockIExptRunLogRepoMockRecorder is the mock recorder for MockIExptRunLogRepo.
type MockIExptRunLogRepoMockRecorder struct {
	mock *MockIExptRunLogRepo
}

// NewMockIExptRunLogRepo creates a new mock instance.
func NewMockIExptRunLogRepo(ctrl *gomock.Controller) *MockIExptRunLogRepo {
	mock := &MockIExptRunLogRepo{ctrl: ctrl}
	mock.recorder = &MockIExptRunLogRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIExptRunLogRepo) EXPECT() *MockIExptRunLogRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIExptRunLogRepo) Create(ctx context.Context, exptRunLog *entity.ExptRunLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, exptRunLog)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIExptRunLogRepoMockRecorder) Create(ctx, exptRunLog any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIExptRunLogRepo)(nil).Create), ctx, exptRunLog)
}

// Get mocks base method.
func (m *MockIExptRunLogRepo) Get(ctx context.Context, exptID, exptRunID int64) (*entity.ExptRunLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, exptID, exptRunID)
	ret0, _ := ret[0].(*entity.ExptRunLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIExptRunLogRepoMockRecorder) Get(ctx, exptID, exptRunID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIExptRunLogRepo)(nil).Get), ctx, exptID, exptRunID)
}

// Save mocks base method.
func (m *MockIExptRunLogRepo) Save(ctx context.Context, exptRunLog *entity.ExptRunLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, exptRunLog)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIExptRunLogRepoMockRecorder) Save(ctx, exptRunLog any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIExptRunLogRepo)(nil).Save), ctx, exptRunLog)
}

// Update mocks base method.
func (m *MockIExptRunLogRepo) Update(ctx context.Context, exptID, exptRunID int64, ufields map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, exptID, exptRunID, ufields)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIExptRunLogRepoMockRecorder) Update(ctx, exptID, exptRunID, ufields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIExptRunLogRepo)(nil).Update), ctx, exptID, exptRunID, ufields)
}

// MockIExptAggrResultRepo is a mock of IExptAggrResultRepo interface.
type MockIExptAggrResultRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIExptAggrResultRepoMockRecorder
	isgomock struct{}
}

// MockIExptAggrResultRepoMockRecorder is the mock recorder for MockIExptAggrResultRepo.
type MockIExptAggrResultRepoMockRecorder struct {
	mock *MockIExptAggrResultRepo
}

// NewMockIExptAggrResultRepo creates a new mock instance.
func NewMockIExptAggrResultRepo(ctrl *gomock.Controller) *MockIExptAggrResultRepo {
	mock := &MockIExptAggrResultRepo{ctrl: ctrl}
	mock.recorder = &MockIExptAggrResultRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIExptAggrResultRepo) EXPECT() *MockIExptAggrResultRepoMockRecorder {
	return m.recorder
}

// BatchCreateExptAggrResult mocks base method.
func (m *MockIExptAggrResultRepo) BatchCreateExptAggrResult(ctx context.Context, exptAggrResults []*entity.ExptAggrResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreateExptAggrResult", ctx, exptAggrResults)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchCreateExptAggrResult indicates an expected call of BatchCreateExptAggrResult.
func (mr *MockIExptAggrResultRepoMockRecorder) BatchCreateExptAggrResult(ctx, exptAggrResults any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateExptAggrResult", reflect.TypeOf((*MockIExptAggrResultRepo)(nil).BatchCreateExptAggrResult), ctx, exptAggrResults)
}

// BatchGetExptAggrResultByExperimentIDs mocks base method.
func (m *MockIExptAggrResultRepo) BatchGetExptAggrResultByExperimentIDs(ctx context.Context, experimentIDs []int64) ([]*entity.ExptAggrResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetExptAggrResultByExperimentIDs", ctx, experimentIDs)
	ret0, _ := ret[0].([]*entity.ExptAggrResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetExptAggrResultByExperimentIDs indicates an expected call of BatchGetExptAggrResultByExperimentIDs.
func (mr *MockIExptAggrResultRepoMockRecorder) BatchGetExptAggrResultByExperimentIDs(ctx, experimentIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetExptAggrResultByExperimentIDs", reflect.TypeOf((*MockIExptAggrResultRepo)(nil).BatchGetExptAggrResultByExperimentIDs), ctx, experimentIDs)
}

// CreateExptAggrResult mocks base method.
func (m *MockIExptAggrResultRepo) CreateExptAggrResult(ctx context.Context, exptAggrResult *entity.ExptAggrResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExptAggrResult", ctx, exptAggrResult)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateExptAggrResult indicates an expected call of CreateExptAggrResult.
func (mr *MockIExptAggrResultRepoMockRecorder) CreateExptAggrResult(ctx, exptAggrResult any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExptAggrResult", reflect.TypeOf((*MockIExptAggrResultRepo)(nil).CreateExptAggrResult), ctx, exptAggrResult)
}

// GetExptAggrResult mocks base method.
func (m *MockIExptAggrResultRepo) GetExptAggrResult(ctx context.Context, experimentID int64, fieldType int32, fieldKey string) (*entity.ExptAggrResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExptAggrResult", ctx, experimentID, fieldType, fieldKey)
	ret0, _ := ret[0].(*entity.ExptAggrResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExptAggrResult indicates an expected call of GetExptAggrResult.
func (mr *MockIExptAggrResultRepoMockRecorder) GetExptAggrResult(ctx, experimentID, fieldType, fieldKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExptAggrResult", reflect.TypeOf((*MockIExptAggrResultRepo)(nil).GetExptAggrResult), ctx, experimentID, fieldType, fieldKey)
}

// GetExptAggrResultByExperimentID mocks base method.
func (m *MockIExptAggrResultRepo) GetExptAggrResultByExperimentID(ctx context.Context, experimentID int64) ([]*entity.ExptAggrResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExptAggrResultByExperimentID", ctx, experimentID)
	ret0, _ := ret[0].([]*entity.ExptAggrResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExptAggrResultByExperimentID indicates an expected call of GetExptAggrResultByExperimentID.
func (mr *MockIExptAggrResultRepoMockRecorder) GetExptAggrResultByExperimentID(ctx, experimentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExptAggrResultByExperimentID", reflect.TypeOf((*MockIExptAggrResultRepo)(nil).GetExptAggrResultByExperimentID), ctx, experimentID)
}

// UpdateAndGetLatestVersion mocks base method.
func (m *MockIExptAggrResultRepo) UpdateAndGetLatestVersion(ctx context.Context, experimentID int64, fieldType int32, fieldKey string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAndGetLatestVersion", ctx, experimentID, fieldType, fieldKey)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAndGetLatestVersion indicates an expected call of UpdateAndGetLatestVersion.
func (mr *MockIExptAggrResultRepoMockRecorder) UpdateAndGetLatestVersion(ctx, experimentID, fieldType, fieldKey any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAndGetLatestVersion", reflect.TypeOf((*MockIExptAggrResultRepo)(nil).UpdateAndGetLatestVersion), ctx, experimentID, fieldType, fieldKey)
}

// UpdateExptAggrResultByVersion mocks base method.
func (m *MockIExptAggrResultRepo) UpdateExptAggrResultByVersion(ctx context.Context, exptAggrResult *entity.ExptAggrResult, taskVersion int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExptAggrResultByVersion", ctx, exptAggrResult, taskVersion)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExptAggrResultByVersion indicates an expected call of UpdateExptAggrResultByVersion.
func (mr *MockIExptAggrResultRepoMockRecorder) UpdateExptAggrResultByVersion(ctx, exptAggrResult, taskVersion any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExptAggrResultByVersion", reflect.TypeOf((*MockIExptAggrResultRepo)(nil).UpdateExptAggrResultByVersion), ctx, exptAggrResult, taskVersion)
}

// MockQuotaRepo is a mock of QuotaRepo interface.
type MockQuotaRepo struct {
	ctrl     *gomock.Controller
	recorder *MockQuotaRepoMockRecorder
	isgomock struct{}
}

// MockQuotaRepoMockRecorder is the mock recorder for MockQuotaRepo.
type MockQuotaRepoMockRecorder struct {
	mock *MockQuotaRepo
}

// NewMockQuotaRepo creates a new mock instance.
func NewMockQuotaRepo(ctrl *gomock.Controller) *MockQuotaRepo {
	mock := &MockQuotaRepo{ctrl: ctrl}
	mock.recorder = &MockQuotaRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuotaRepo) EXPECT() *MockQuotaRepoMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method.
func (m *MockQuotaRepo) CreateOrUpdate(ctx context.Context, spaceID int64, updater func(*entity.QuotaSpaceExpt) (*entity.QuotaSpaceExpt, bool, error), session *entity.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", ctx, spaceID, updater, session)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockQuotaRepoMockRecorder) CreateOrUpdate(ctx, spaceID, updater, session any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockQuotaRepo)(nil).CreateOrUpdate), ctx, spaceID, updater, session)
}
