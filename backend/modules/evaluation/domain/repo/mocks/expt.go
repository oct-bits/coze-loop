// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/repo (interfaces: IExperimentRepo,IExptStatsRepo,IExptItemResultRepo,IExptTurnResultRepo,IExptRunLogRepo,IExptAggrResultRepo,QuotaRepo,IExptTurnResultFilterRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	"context"
	"reflect"

	"go.uber.org/mock/gomock"

	"github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/entity"
)

// MockIExperimentRepo is a mock of IExperimentRepo interface.
type MockIExperimentRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIExperimentRepoMockRecorder
}

// MockIExperimentRepoMockRecorder is the mock recorder for MockIExperimentRepo.
type MockIExperimentRepoMockRecorder struct {
	mock *MockIExperimentRepo
}

// NewMockIExperimentRepo creates a new mock instance.
func NewMockIExperimentRepo(ctrl *gomock.Controller) *MockIExperimentRepo {
	mock := &MockIExperimentRepo{ctrl: ctrl}
	mock.recorder = &MockIExperimentRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIExperimentRepo) EXPECT() *MockIExperimentRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIExperimentRepo) Create(arg0 context.Context, arg1 *entity.Experiment, arg2 []*entity.ExptEvaluatorRef) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIExperimentRepoMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIExperimentRepo)(nil).Create), arg0, arg1, arg2)
}

// Delete mocks base method.
func (m *MockIExperimentRepo) Delete(arg0 context.Context, arg1, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockIExperimentRepoMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIExperimentRepo)(nil).Delete), arg0, arg1, arg2)
}

// GetByID mocks base method.
func (m *MockIExperimentRepo) GetByID(arg0 context.Context, arg1, arg2 int64) (*entity.Experiment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*entity.Experiment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIExperimentRepoMockRecorder) GetByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIExperimentRepo)(nil).GetByID), arg0, arg1, arg2)
}

// GetByName mocks base method.
func (m *MockIExperimentRepo) GetByName(arg0 context.Context, arg1 string, arg2 int64) (*entity.Experiment, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", arg0, arg1, arg2)
	ret0, _ := ret[0].(*entity.Experiment)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetByName indicates an expected call of GetByName.
func (mr *MockIExperimentRepoMockRecorder) GetByName(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockIExperimentRepo)(nil).GetByName), arg0, arg1, arg2)
}

// GetEvaluatorRefByExptIDs mocks base method.
func (m *MockIExperimentRepo) GetEvaluatorRefByExptIDs(arg0 context.Context, arg1 []int64, arg2 int64) ([]*entity.ExptEvaluatorRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvaluatorRefByExptIDs", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*entity.ExptEvaluatorRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvaluatorRefByExptIDs indicates an expected call of GetEvaluatorRefByExptIDs.
func (mr *MockIExperimentRepoMockRecorder) GetEvaluatorRefByExptIDs(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvaluatorRefByExptIDs", reflect.TypeOf((*MockIExperimentRepo)(nil).GetEvaluatorRefByExptIDs), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockIExperimentRepo) List(arg0 context.Context, arg1, arg2 int32, arg3 *entity.ExptListFilter, arg4 []*entity.OrderBy, arg5 int64) ([]*entity.Experiment, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].([]*entity.Experiment)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockIExperimentRepoMockRecorder) List(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIExperimentRepo)(nil).List), arg0, arg1, arg2, arg3, arg4, arg5)
}

// MDelete mocks base method.
func (m *MockIExperimentRepo) MDelete(arg0 context.Context, arg1 []int64, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MDelete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// MDelete indicates an expected call of MDelete.
func (mr *MockIExperimentRepoMockRecorder) MDelete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MDelete", reflect.TypeOf((*MockIExperimentRepo)(nil).MDelete), arg0, arg1, arg2)
}

// MGetBasicByID mocks base method.
func (m *MockIExperimentRepo) MGetBasicByID(arg0 context.Context, arg1 []int64) ([]*entity.Experiment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGetBasicByID", arg0, arg1)
	ret0, _ := ret[0].([]*entity.Experiment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetBasicByID indicates an expected call of MGetBasicByID.
func (mr *MockIExperimentRepoMockRecorder) MGetBasicByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetBasicByID", reflect.TypeOf((*MockIExperimentRepo)(nil).MGetBasicByID), arg0, arg1)
}

// MGetByID mocks base method.
func (m *MockIExperimentRepo) MGetByID(arg0 context.Context, arg1 []int64, arg2 int64) ([]*entity.Experiment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGetByID", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*entity.Experiment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetByID indicates an expected call of MGetByID.
func (mr *MockIExperimentRepoMockRecorder) MGetByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetByID", reflect.TypeOf((*MockIExperimentRepo)(nil).MGetByID), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockIExperimentRepo) Update(arg0 context.Context, arg1 *entity.Experiment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIExperimentRepoMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIExperimentRepo)(nil).Update), arg0, arg1)
}

// MockIExptStatsRepo is a mock of IExptStatsRepo interface.
type MockIExptStatsRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIExptStatsRepoMockRecorder
}

// MockIExptStatsRepoMockRecorder is the mock recorder for MockIExptStatsRepo.
type MockIExptStatsRepoMockRecorder struct {
	mock *MockIExptStatsRepo
}

// NewMockIExptStatsRepo creates a new mock instance.
func NewMockIExptStatsRepo(ctrl *gomock.Controller) *MockIExptStatsRepo {
	mock := &MockIExptStatsRepo{ctrl: ctrl}
	mock.recorder = &MockIExptStatsRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIExptStatsRepo) EXPECT() *MockIExptStatsRepoMockRecorder {
	return m.recorder
}

// ArithOperateCount mocks base method.
func (m *MockIExptStatsRepo) ArithOperateCount(arg0 context.Context, arg1, arg2 int64, arg3 *entity.StatsCntArithOp) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ArithOperateCount", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ArithOperateCount indicates an expected call of ArithOperateCount.
func (mr *MockIExptStatsRepoMockRecorder) ArithOperateCount(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ArithOperateCount", reflect.TypeOf((*MockIExptStatsRepo)(nil).ArithOperateCount), arg0, arg1, arg2, arg3)
}

// Create mocks base method.
func (m *MockIExptStatsRepo) Create(arg0 context.Context, arg1 *entity.ExptStats) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIExptStatsRepoMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIExptStatsRepo)(nil).Create), arg0, arg1)
}

// Get mocks base method.
func (m *MockIExptStatsRepo) Get(arg0 context.Context, arg1, arg2 int64) (*entity.ExptStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*entity.ExptStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIExptStatsRepoMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIExptStatsRepo)(nil).Get), arg0, arg1, arg2)
}

// MGet mocks base method.
func (m *MockIExptStatsRepo) MGet(arg0 context.Context, arg1 []int64, arg2 int64) ([]*entity.ExptStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGet", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*entity.ExptStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGet indicates an expected call of MGet.
func (mr *MockIExptStatsRepoMockRecorder) MGet(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGet", reflect.TypeOf((*MockIExptStatsRepo)(nil).MGet), arg0, arg1, arg2)
}

// Save mocks base method.
func (m *MockIExptStatsRepo) Save(arg0 context.Context, arg1 *entity.ExptStats) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIExptStatsRepoMockRecorder) Save(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIExptStatsRepo)(nil).Save), arg0, arg1)
}

// UpdateByExptID mocks base method.
func (m *MockIExptStatsRepo) UpdateByExptID(arg0 context.Context, arg1, arg2 int64, arg3 *entity.ExptStats) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateByExptID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateByExptID indicates an expected call of UpdateByExptID.
func (mr *MockIExptStatsRepoMockRecorder) UpdateByExptID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateByExptID", reflect.TypeOf((*MockIExptStatsRepo)(nil).UpdateByExptID), arg0, arg1, arg2, arg3)
}

// MockIExptItemResultRepo is a mock of IExptItemResultRepo interface.
type MockIExptItemResultRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIExptItemResultRepoMockRecorder
}

// MockIExptItemResultRepoMockRecorder is the mock recorder for MockIExptItemResultRepo.
type MockIExptItemResultRepoMockRecorder struct {
	mock *MockIExptItemResultRepo
}

// NewMockIExptItemResultRepo creates a new mock instance.
func NewMockIExptItemResultRepo(ctrl *gomock.Controller) *MockIExptItemResultRepo {
	mock := &MockIExptItemResultRepo{ctrl: ctrl}
	mock.recorder = &MockIExptItemResultRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIExptItemResultRepo) EXPECT() *MockIExptItemResultRepoMockRecorder {
	return m.recorder
}

// BatchCreateNX mocks base method.
func (m *MockIExptItemResultRepo) BatchCreateNX(arg0 context.Context, arg1 []*entity.ExptItemResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreateNX", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchCreateNX indicates an expected call of BatchCreateNX.
func (mr *MockIExptItemResultRepoMockRecorder) BatchCreateNX(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateNX", reflect.TypeOf((*MockIExptItemResultRepo)(nil).BatchCreateNX), arg0, arg1)
}

// BatchCreateNXRunLogs mocks base method.
func (m *MockIExptItemResultRepo) BatchCreateNXRunLogs(arg0 context.Context, arg1 []*entity.ExptItemResultRunLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreateNXRunLogs", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchCreateNXRunLogs indicates an expected call of BatchCreateNXRunLogs.
func (mr *MockIExptItemResultRepoMockRecorder) BatchCreateNXRunLogs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateNXRunLogs", reflect.TypeOf((*MockIExptItemResultRepo)(nil).BatchCreateNXRunLogs), arg0, arg1)
}

// BatchGet mocks base method.
func (m *MockIExptItemResultRepo) BatchGet(arg0 context.Context, arg1, arg2 int64, arg3 []int64) ([]*entity.ExptItemResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGet", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*entity.ExptItemResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGet indicates an expected call of BatchGet.
func (mr *MockIExptItemResultRepoMockRecorder) BatchGet(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGet", reflect.TypeOf((*MockIExptItemResultRepo)(nil).BatchGet), arg0, arg1, arg2, arg3)
}

// GetItemIDListByExptID mocks base method.
func (m *MockIExptItemResultRepo) GetItemIDListByExptID(arg0 context.Context, arg1, arg2 int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemIDListByExptID", arg0, arg1, arg2)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemIDListByExptID indicates an expected call of GetItemIDListByExptID.
func (mr *MockIExptItemResultRepoMockRecorder) GetItemIDListByExptID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemIDListByExptID", reflect.TypeOf((*MockIExptItemResultRepo)(nil).GetItemIDListByExptID), arg0, arg1, arg2)
}

// GetItemRunLog mocks base method.
func (m *MockIExptItemResultRepo) GetItemRunLog(arg0 context.Context, arg1, arg2, arg3, arg4 int64) (*entity.ExptItemResultRunLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemRunLog", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*entity.ExptItemResultRunLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemRunLog indicates an expected call of GetItemRunLog.
func (mr *MockIExptItemResultRepoMockRecorder) GetItemRunLog(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemRunLog", reflect.TypeOf((*MockIExptItemResultRepo)(nil).GetItemRunLog), arg0, arg1, arg2, arg3, arg4)
}

// GetItemTurnResults mocks base method.
func (m *MockIExptItemResultRepo) GetItemTurnResults(arg0 context.Context, arg1, arg2, arg3 int64) ([]*entity.ExptTurnResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemTurnResults", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*entity.ExptTurnResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemTurnResults indicates an expected call of GetItemTurnResults.
func (mr *MockIExptItemResultRepoMockRecorder) GetItemTurnResults(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemTurnResults", reflect.TypeOf((*MockIExptItemResultRepo)(nil).GetItemTurnResults), arg0, arg1, arg2, arg3)
}

// GetMaxItemIdxByExptID mocks base method.
func (m *MockIExptItemResultRepo) GetMaxItemIdxByExptID(arg0 context.Context, arg1, arg2 int64) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxItemIdxByExptID", arg0, arg1, arg2)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaxItemIdxByExptID indicates an expected call of GetMaxItemIdxByExptID.
func (mr *MockIExptItemResultRepoMockRecorder) GetMaxItemIdxByExptID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxItemIdxByExptID", reflect.TypeOf((*MockIExptItemResultRepo)(nil).GetMaxItemIdxByExptID), arg0, arg1, arg2)
}

// ListItemResultsByExptID mocks base method.
func (m *MockIExptItemResultRepo) ListItemResultsByExptID(arg0 context.Context, arg1, arg2 int64, arg3 entity.Page, arg4 bool) ([]*entity.ExptItemResult, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListItemResultsByExptID", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*entity.ExptItemResult)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListItemResultsByExptID indicates an expected call of ListItemResultsByExptID.
func (mr *MockIExptItemResultRepoMockRecorder) ListItemResultsByExptID(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListItemResultsByExptID", reflect.TypeOf((*MockIExptItemResultRepo)(nil).ListItemResultsByExptID), arg0, arg1, arg2, arg3, arg4)
}

// MGetItemRunLog mocks base method.
func (m *MockIExptItemResultRepo) MGetItemRunLog(arg0 context.Context, arg1, arg2 int64, arg3 []int64, arg4 int64) ([]*entity.ExptItemResultRunLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGetItemRunLog", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*entity.ExptItemResultRunLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetItemRunLog indicates an expected call of MGetItemRunLog.
func (mr *MockIExptItemResultRepoMockRecorder) MGetItemRunLog(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetItemRunLog", reflect.TypeOf((*MockIExptItemResultRepo)(nil).MGetItemRunLog), arg0, arg1, arg2, arg3, arg4)
}

// SaveItemResults mocks base method.
func (m *MockIExptItemResultRepo) SaveItemResults(arg0 context.Context, arg1 []*entity.ExptItemResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveItemResults", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveItemResults indicates an expected call of SaveItemResults.
func (mr *MockIExptItemResultRepoMockRecorder) SaveItemResults(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveItemResults", reflect.TypeOf((*MockIExptItemResultRepo)(nil).SaveItemResults), arg0, arg1)
}

// ScanItemResults mocks base method.
func (m *MockIExptItemResultRepo) ScanItemResults(arg0 context.Context, arg1, arg2, arg3 int64, arg4 []int32, arg5 int64) ([]*entity.ExptItemResult, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanItemResults", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].([]*entity.ExptItemResult)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ScanItemResults indicates an expected call of ScanItemResults.
func (mr *MockIExptItemResultRepoMockRecorder) ScanItemResults(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanItemResults", reflect.TypeOf((*MockIExptItemResultRepo)(nil).ScanItemResults), arg0, arg1, arg2, arg3, arg4, arg5)
}

// ScanItemRunLogs mocks base method.
func (m *MockIExptItemResultRepo) ScanItemRunLogs(arg0 context.Context, arg1, arg2 int64, arg3 *entity.ExptItemRunLogFilter, arg4, arg5, arg6 int64) ([]*entity.ExptItemResultRunLog, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanItemRunLogs", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].([]*entity.ExptItemResultRunLog)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ScanItemRunLogs indicates an expected call of ScanItemRunLogs.
func (mr *MockIExptItemResultRepoMockRecorder) ScanItemRunLogs(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanItemRunLogs", reflect.TypeOf((*MockIExptItemResultRepo)(nil).ScanItemRunLogs), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// UpdateItemRunLog mocks base method.
func (m *MockIExptItemResultRepo) UpdateItemRunLog(arg0 context.Context, arg1, arg2 int64, arg3 []int64, arg4 map[string]interface{}, arg5 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItemRunLog", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItemRunLog indicates an expected call of UpdateItemRunLog.
func (mr *MockIExptItemResultRepoMockRecorder) UpdateItemRunLog(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItemRunLog", reflect.TypeOf((*MockIExptItemResultRepo)(nil).UpdateItemRunLog), arg0, arg1, arg2, arg3, arg4, arg5)
}

// UpdateItemsResult mocks base method.
func (m *MockIExptItemResultRepo) UpdateItemsResult(arg0 context.Context, arg1, arg2 int64, arg3 []int64, arg4 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateItemsResult", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateItemsResult indicates an expected call of UpdateItemsResult.
func (mr *MockIExptItemResultRepoMockRecorder) UpdateItemsResult(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItemsResult", reflect.TypeOf((*MockIExptItemResultRepo)(nil).UpdateItemsResult), arg0, arg1, arg2, arg3, arg4)
}

// MockIExptTurnResultRepo is a mock of IExptTurnResultRepo interface.
type MockIExptTurnResultRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIExptTurnResultRepoMockRecorder
}

// MockIExptTurnResultRepoMockRecorder is the mock recorder for MockIExptTurnResultRepo.
type MockIExptTurnResultRepoMockRecorder struct {
	mock *MockIExptTurnResultRepo
}

// NewMockIExptTurnResultRepo creates a new mock instance.
func NewMockIExptTurnResultRepo(ctrl *gomock.Controller) *MockIExptTurnResultRepo {
	mock := &MockIExptTurnResultRepo{ctrl: ctrl}
	mock.recorder = &MockIExptTurnResultRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIExptTurnResultRepo) EXPECT() *MockIExptTurnResultRepoMockRecorder {
	return m.recorder
}

// BatchCreateNX mocks base method.
func (m *MockIExptTurnResultRepo) BatchCreateNX(arg0 context.Context, arg1 []*entity.ExptTurnResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreateNX", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchCreateNX indicates an expected call of BatchCreateNX.
func (mr *MockIExptTurnResultRepoMockRecorder) BatchCreateNX(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateNX", reflect.TypeOf((*MockIExptTurnResultRepo)(nil).BatchCreateNX), arg0, arg1)
}

// BatchCreateNXRunLog mocks base method.
func (m *MockIExptTurnResultRepo) BatchCreateNXRunLog(arg0 context.Context, arg1 []*entity.ExptTurnResultRunLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreateNXRunLog", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchCreateNXRunLog indicates an expected call of BatchCreateNXRunLog.
func (mr *MockIExptTurnResultRepoMockRecorder) BatchCreateNXRunLog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateNXRunLog", reflect.TypeOf((*MockIExptTurnResultRepo)(nil).BatchCreateNXRunLog), arg0, arg1)
}

// BatchGet mocks base method.
func (m *MockIExptTurnResultRepo) BatchGet(arg0 context.Context, arg1, arg2 int64, arg3 []int64) ([]*entity.ExptTurnResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGet", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*entity.ExptTurnResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGet indicates an expected call of BatchGet.
func (mr *MockIExptTurnResultRepoMockRecorder) BatchGet(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGet", reflect.TypeOf((*MockIExptTurnResultRepo)(nil).BatchGet), arg0, arg1, arg2, arg3)
}

// BatchGetTurnEvaluatorResultRef mocks base method.
func (m *MockIExptTurnResultRepo) BatchGetTurnEvaluatorResultRef(arg0 context.Context, arg1 int64, arg2 []int64) ([]*entity.ExptTurnEvaluatorResultRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetTurnEvaluatorResultRef", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*entity.ExptTurnEvaluatorResultRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetTurnEvaluatorResultRef indicates an expected call of BatchGetTurnEvaluatorResultRef.
func (mr *MockIExptTurnResultRepoMockRecorder) BatchGetTurnEvaluatorResultRef(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetTurnEvaluatorResultRef", reflect.TypeOf((*MockIExptTurnResultRepo)(nil).BatchGetTurnEvaluatorResultRef), arg0, arg1, arg2)
}

// CreateOrUpdateItemsTurnRunLogStatus mocks base method.
func (m *MockIExptTurnResultRepo) CreateOrUpdateItemsTurnRunLogStatus(arg0 context.Context, arg1, arg2, arg3 int64, arg4 []int64, arg5 entity.TurnRunState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateItemsTurnRunLogStatus", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateItemsTurnRunLogStatus indicates an expected call of CreateOrUpdateItemsTurnRunLogStatus.
func (mr *MockIExptTurnResultRepoMockRecorder) CreateOrUpdateItemsTurnRunLogStatus(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateItemsTurnRunLogStatus", reflect.TypeOf((*MockIExptTurnResultRepo)(nil).CreateOrUpdateItemsTurnRunLogStatus), arg0, arg1, arg2, arg3, arg4, arg5)
}

// CreateTurnEvaluatorRefs mocks base method.
func (m *MockIExptTurnResultRepo) CreateTurnEvaluatorRefs(arg0 context.Context, arg1 []*entity.ExptTurnEvaluatorResultRef) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTurnEvaluatorRefs", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTurnEvaluatorRefs indicates an expected call of CreateTurnEvaluatorRefs.
func (mr *MockIExptTurnResultRepoMockRecorder) CreateTurnEvaluatorRefs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTurnEvaluatorRefs", reflect.TypeOf((*MockIExptTurnResultRepo)(nil).CreateTurnEvaluatorRefs), arg0, arg1)
}

// GetItemTurnResults mocks base method.
func (m *MockIExptTurnResultRepo) GetItemTurnResults(arg0 context.Context, arg1, arg2, arg3 int64) ([]*entity.ExptTurnResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemTurnResults", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*entity.ExptTurnResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemTurnResults indicates an expected call of GetItemTurnResults.
func (mr *MockIExptTurnResultRepoMockRecorder) GetItemTurnResults(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemTurnResults", reflect.TypeOf((*MockIExptTurnResultRepo)(nil).GetItemTurnResults), arg0, arg1, arg2, arg3)
}

// GetItemTurnRunLogs mocks base method.
func (m *MockIExptTurnResultRepo) GetItemTurnRunLogs(arg0 context.Context, arg1, arg2, arg3, arg4 int64) ([]*entity.ExptTurnResultRunLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetItemTurnRunLogs", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*entity.ExptTurnResultRunLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetItemTurnRunLogs indicates an expected call of GetItemTurnRunLogs.
func (mr *MockIExptTurnResultRepoMockRecorder) GetItemTurnRunLogs(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetItemTurnRunLogs", reflect.TypeOf((*MockIExptTurnResultRepo)(nil).GetItemTurnRunLogs), arg0, arg1, arg2, arg3, arg4)
}

// GetTurnEvaluatorResultRefByEvaluatorVersionID mocks base method.
func (m *MockIExptTurnResultRepo) GetTurnEvaluatorResultRefByEvaluatorVersionID(arg0 context.Context, arg1, arg2, arg3 int64) ([]*entity.ExptTurnEvaluatorResultRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTurnEvaluatorResultRefByEvaluatorVersionID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*entity.ExptTurnEvaluatorResultRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTurnEvaluatorResultRefByEvaluatorVersionID indicates an expected call of GetTurnEvaluatorResultRefByEvaluatorVersionID.
func (mr *MockIExptTurnResultRepoMockRecorder) GetTurnEvaluatorResultRefByEvaluatorVersionID(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTurnEvaluatorResultRefByEvaluatorVersionID", reflect.TypeOf((*MockIExptTurnResultRepo)(nil).GetTurnEvaluatorResultRefByEvaluatorVersionID), arg0, arg1, arg2, arg3)
}

// GetTurnEvaluatorResultRefByExptID mocks base method.
func (m *MockIExptTurnResultRepo) GetTurnEvaluatorResultRefByExptID(arg0 context.Context, arg1, arg2 int64) ([]*entity.ExptTurnEvaluatorResultRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTurnEvaluatorResultRefByExptID", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*entity.ExptTurnEvaluatorResultRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTurnEvaluatorResultRefByExptID indicates an expected call of GetTurnEvaluatorResultRefByExptID.
func (mr *MockIExptTurnResultRepoMockRecorder) GetTurnEvaluatorResultRefByExptID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTurnEvaluatorResultRefByExptID", reflect.TypeOf((*MockIExptTurnResultRepo)(nil).GetTurnEvaluatorResultRefByExptID), arg0, arg1, arg2)
}

// ListTurnResult mocks base method.
func (m *MockIExptTurnResultRepo) ListTurnResult(arg0 context.Context, arg1, arg2 int64, arg3 *entity.ExptTurnResultFilter, arg4 entity.Page, arg5 bool) ([]*entity.ExptTurnResult, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTurnResult", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].([]*entity.ExptTurnResult)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTurnResult indicates an expected call of ListTurnResult.
func (mr *MockIExptTurnResultRepoMockRecorder) ListTurnResult(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTurnResult", reflect.TypeOf((*MockIExptTurnResultRepo)(nil).ListTurnResult), arg0, arg1, arg2, arg3, arg4, arg5)
}

// ListTurnResultByItemIDs mocks base method.
func (m *MockIExptTurnResultRepo) ListTurnResultByItemIDs(arg0 context.Context, arg1, arg2 int64, arg3 []int64, arg4 entity.Page, arg5 bool) ([]*entity.ExptTurnResult, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTurnResultByItemIDs", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].([]*entity.ExptTurnResult)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListTurnResultByItemIDs indicates an expected call of ListTurnResultByItemIDs.
func (mr *MockIExptTurnResultRepoMockRecorder) ListTurnResultByItemIDs(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTurnResultByItemIDs", reflect.TypeOf((*MockIExptTurnResultRepo)(nil).ListTurnResultByItemIDs), arg0, arg1, arg2, arg3, arg4, arg5)
}

// MGetItemTurnRunLogs mocks base method.
func (m *MockIExptTurnResultRepo) MGetItemTurnRunLogs(arg0 context.Context, arg1, arg2 int64, arg3 []int64, arg4 int64) ([]*entity.ExptTurnResultRunLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGetItemTurnRunLogs", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*entity.ExptTurnResultRunLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetItemTurnRunLogs indicates an expected call of MGetItemTurnRunLogs.
func (mr *MockIExptTurnResultRepoMockRecorder) MGetItemTurnRunLogs(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetItemTurnRunLogs", reflect.TypeOf((*MockIExptTurnResultRepo)(nil).MGetItemTurnRunLogs), arg0, arg1, arg2, arg3, arg4)
}

// SaveTurnResults mocks base method.
func (m *MockIExptTurnResultRepo) SaveTurnResults(arg0 context.Context, arg1 []*entity.ExptTurnResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTurnResults", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTurnResults indicates an expected call of SaveTurnResults.
func (mr *MockIExptTurnResultRepoMockRecorder) SaveTurnResults(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTurnResults", reflect.TypeOf((*MockIExptTurnResultRepo)(nil).SaveTurnResults), arg0, arg1)
}

// SaveTurnRunLogs mocks base method.
func (m *MockIExptTurnResultRepo) SaveTurnRunLogs(arg0 context.Context, arg1 []*entity.ExptTurnResultRunLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTurnRunLogs", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTurnRunLogs indicates an expected call of SaveTurnRunLogs.
func (mr *MockIExptTurnResultRepoMockRecorder) SaveTurnRunLogs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTurnRunLogs", reflect.TypeOf((*MockIExptTurnResultRepo)(nil).SaveTurnRunLogs), arg0, arg1)
}

// ScanTurnResults mocks base method.
func (m *MockIExptTurnResultRepo) ScanTurnResults(arg0 context.Context, arg1 int64, arg2 []int32, arg3, arg4, arg5 int64) ([]*entity.ExptTurnResult, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanTurnResults", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].([]*entity.ExptTurnResult)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ScanTurnResults indicates an expected call of ScanTurnResults.
func (mr *MockIExptTurnResultRepoMockRecorder) ScanTurnResults(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanTurnResults", reflect.TypeOf((*MockIExptTurnResultRepo)(nil).ScanTurnResults), arg0, arg1, arg2, arg3, arg4, arg5)
}

// ScanTurnRunLogs mocks base method.
func (m *MockIExptTurnResultRepo) ScanTurnRunLogs(arg0 context.Context, arg1, arg2, arg3, arg4 int64) ([]*entity.ExptTurnResultRunLog, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ScanTurnRunLogs", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*entity.ExptTurnResultRunLog)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ScanTurnRunLogs indicates an expected call of ScanTurnRunLogs.
func (mr *MockIExptTurnResultRepoMockRecorder) ScanTurnRunLogs(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScanTurnRunLogs", reflect.TypeOf((*MockIExptTurnResultRepo)(nil).ScanTurnRunLogs), arg0, arg1, arg2, arg3, arg4)
}

// UpdateTurnResults mocks base method.
func (m *MockIExptTurnResultRepo) UpdateTurnResults(arg0 context.Context, arg1 int64, arg2 []*entity.ItemTurnID, arg3 int64, arg4 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTurnResults", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTurnResults indicates an expected call of UpdateTurnResults.
func (mr *MockIExptTurnResultRepoMockRecorder) UpdateTurnResults(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTurnResults", reflect.TypeOf((*MockIExptTurnResultRepo)(nil).UpdateTurnResults), arg0, arg1, arg2, arg3, arg4)
}

// UpdateTurnResultsWithItemIDs mocks base method.
func (m *MockIExptTurnResultRepo) UpdateTurnResultsWithItemIDs(arg0 context.Context, arg1 int64, arg2 []int64, arg3 int64, arg4 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTurnResultsWithItemIDs", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTurnResultsWithItemIDs indicates an expected call of UpdateTurnResultsWithItemIDs.
func (mr *MockIExptTurnResultRepoMockRecorder) UpdateTurnResultsWithItemIDs(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTurnResultsWithItemIDs", reflect.TypeOf((*MockIExptTurnResultRepo)(nil).UpdateTurnResultsWithItemIDs), arg0, arg1, arg2, arg3, arg4)
}

// MockIExptRunLogRepo is a mock of IExptRunLogRepo interface.
type MockIExptRunLogRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIExptRunLogRepoMockRecorder
}

// MockIExptRunLogRepoMockRecorder is the mock recorder for MockIExptRunLogRepo.
type MockIExptRunLogRepoMockRecorder struct {
	mock *MockIExptRunLogRepo
}

// NewMockIExptRunLogRepo creates a new mock instance.
func NewMockIExptRunLogRepo(ctrl *gomock.Controller) *MockIExptRunLogRepo {
	mock := &MockIExptRunLogRepo{ctrl: ctrl}
	mock.recorder = &MockIExptRunLogRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIExptRunLogRepo) EXPECT() *MockIExptRunLogRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIExptRunLogRepo) Create(arg0 context.Context, arg1 *entity.ExptRunLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockIExptRunLogRepoMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIExptRunLogRepo)(nil).Create), arg0, arg1)
}

// Get mocks base method.
func (m *MockIExptRunLogRepo) Get(arg0 context.Context, arg1, arg2 int64) (*entity.ExptRunLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*entity.ExptRunLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIExptRunLogRepoMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIExptRunLogRepo)(nil).Get), arg0, arg1, arg2)
}

// Save mocks base method.
func (m *MockIExptRunLogRepo) Save(arg0 context.Context, arg1 *entity.ExptRunLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIExptRunLogRepoMockRecorder) Save(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIExptRunLogRepo)(nil).Save), arg0, arg1)
}

// Update mocks base method.
func (m *MockIExptRunLogRepo) Update(arg0 context.Context, arg1, arg2 int64, arg3 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockIExptRunLogRepoMockRecorder) Update(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIExptRunLogRepo)(nil).Update), arg0, arg1, arg2, arg3)
}

// MockIExptAggrResultRepo is a mock of IExptAggrResultRepo interface.
type MockIExptAggrResultRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIExptAggrResultRepoMockRecorder
}

// MockIExptAggrResultRepoMockRecorder is the mock recorder for MockIExptAggrResultRepo.
type MockIExptAggrResultRepoMockRecorder struct {
	mock *MockIExptAggrResultRepo
}

// NewMockIExptAggrResultRepo creates a new mock instance.
func NewMockIExptAggrResultRepo(ctrl *gomock.Controller) *MockIExptAggrResultRepo {
	mock := &MockIExptAggrResultRepo{ctrl: ctrl}
	mock.recorder = &MockIExptAggrResultRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIExptAggrResultRepo) EXPECT() *MockIExptAggrResultRepoMockRecorder {
	return m.recorder
}

// BatchCreateExptAggrResult mocks base method.
func (m *MockIExptAggrResultRepo) BatchCreateExptAggrResult(arg0 context.Context, arg1 []*entity.ExptAggrResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreateExptAggrResult", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchCreateExptAggrResult indicates an expected call of BatchCreateExptAggrResult.
func (mr *MockIExptAggrResultRepoMockRecorder) BatchCreateExptAggrResult(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateExptAggrResult", reflect.TypeOf((*MockIExptAggrResultRepo)(nil).BatchCreateExptAggrResult), arg0, arg1)
}

// BatchGetExptAggrResultByExperimentIDs mocks base method.
func (m *MockIExptAggrResultRepo) BatchGetExptAggrResultByExperimentIDs(arg0 context.Context, arg1 []int64) ([]*entity.ExptAggrResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetExptAggrResultByExperimentIDs", arg0, arg1)
	ret0, _ := ret[0].([]*entity.ExptAggrResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetExptAggrResultByExperimentIDs indicates an expected call of BatchGetExptAggrResultByExperimentIDs.
func (mr *MockIExptAggrResultRepoMockRecorder) BatchGetExptAggrResultByExperimentIDs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetExptAggrResultByExperimentIDs", reflect.TypeOf((*MockIExptAggrResultRepo)(nil).BatchGetExptAggrResultByExperimentIDs), arg0, arg1)
}

// CreateExptAggrResult mocks base method.
func (m *MockIExptAggrResultRepo) CreateExptAggrResult(arg0 context.Context, arg1 *entity.ExptAggrResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExptAggrResult", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateExptAggrResult indicates an expected call of CreateExptAggrResult.
func (mr *MockIExptAggrResultRepoMockRecorder) CreateExptAggrResult(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExptAggrResult", reflect.TypeOf((*MockIExptAggrResultRepo)(nil).CreateExptAggrResult), arg0, arg1)
}

// GetExptAggrResult mocks base method.
func (m *MockIExptAggrResultRepo) GetExptAggrResult(arg0 context.Context, arg1 int64, arg2 int32, arg3 string) (*entity.ExptAggrResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExptAggrResult", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*entity.ExptAggrResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExptAggrResult indicates an expected call of GetExptAggrResult.
func (mr *MockIExptAggrResultRepoMockRecorder) GetExptAggrResult(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExptAggrResult", reflect.TypeOf((*MockIExptAggrResultRepo)(nil).GetExptAggrResult), arg0, arg1, arg2, arg3)
}

// GetExptAggrResultByExperimentID mocks base method.
func (m *MockIExptAggrResultRepo) GetExptAggrResultByExperimentID(arg0 context.Context, arg1 int64) ([]*entity.ExptAggrResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExptAggrResultByExperimentID", arg0, arg1)
	ret0, _ := ret[0].([]*entity.ExptAggrResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExptAggrResultByExperimentID indicates an expected call of GetExptAggrResultByExperimentID.
func (mr *MockIExptAggrResultRepoMockRecorder) GetExptAggrResultByExperimentID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExptAggrResultByExperimentID", reflect.TypeOf((*MockIExptAggrResultRepo)(nil).GetExptAggrResultByExperimentID), arg0, arg1)
}

// UpdateAndGetLatestVersion mocks base method.
func (m *MockIExptAggrResultRepo) UpdateAndGetLatestVersion(arg0 context.Context, arg1 int64, arg2 int32, arg3 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAndGetLatestVersion", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAndGetLatestVersion indicates an expected call of UpdateAndGetLatestVersion.
func (mr *MockIExptAggrResultRepoMockRecorder) UpdateAndGetLatestVersion(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAndGetLatestVersion", reflect.TypeOf((*MockIExptAggrResultRepo)(nil).UpdateAndGetLatestVersion), arg0, arg1, arg2, arg3)
}

// UpdateExptAggrResultByVersion mocks base method.
func (m *MockIExptAggrResultRepo) UpdateExptAggrResultByVersion(arg0 context.Context, arg1 *entity.ExptAggrResult, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExptAggrResultByVersion", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExptAggrResultByVersion indicates an expected call of UpdateExptAggrResultByVersion.
func (mr *MockIExptAggrResultRepoMockRecorder) UpdateExptAggrResultByVersion(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExptAggrResultByVersion", reflect.TypeOf((*MockIExptAggrResultRepo)(nil).UpdateExptAggrResultByVersion), arg0, arg1, arg2)
}

// MockQuotaRepo is a mock of QuotaRepo interface.
type MockQuotaRepo struct {
	ctrl     *gomock.Controller
	recorder *MockQuotaRepoMockRecorder
}

// MockQuotaRepoMockRecorder is the mock recorder for MockQuotaRepo.
type MockQuotaRepoMockRecorder struct {
	mock *MockQuotaRepo
}

// NewMockQuotaRepo creates a new mock instance.
func NewMockQuotaRepo(ctrl *gomock.Controller) *MockQuotaRepo {
	mock := &MockQuotaRepo{ctrl: ctrl}
	mock.recorder = &MockQuotaRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuotaRepo) EXPECT() *MockQuotaRepoMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method.
func (m *MockQuotaRepo) CreateOrUpdate(arg0 context.Context, arg1 int64, arg2 func(*entity.QuotaSpaceExpt) (*entity.QuotaSpaceExpt, bool, error), arg3 *entity.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockQuotaRepoMockRecorder) CreateOrUpdate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockQuotaRepo)(nil).CreateOrUpdate), arg0, arg1, arg2, arg3)
}

// MockIExptTurnResultFilterRepo is a mock of IExptTurnResultFilterRepo interface.
type MockIExptTurnResultFilterRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIExptTurnResultFilterRepoMockRecorder
}

// MockIExptTurnResultFilterRepoMockRecorder is the mock recorder for MockIExptTurnResultFilterRepo.
type MockIExptTurnResultFilterRepoMockRecorder struct {
	mock *MockIExptTurnResultFilterRepo
}

// NewMockIExptTurnResultFilterRepo creates a new mock instance.
func NewMockIExptTurnResultFilterRepo(ctrl *gomock.Controller) *MockIExptTurnResultFilterRepo {
	mock := &MockIExptTurnResultFilterRepo{ctrl: ctrl}
	mock.recorder = &MockIExptTurnResultFilterRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIExptTurnResultFilterRepo) EXPECT() *MockIExptTurnResultFilterRepoMockRecorder {
	return m.recorder
}

// GetByExptIDItemIDs mocks base method.
func (m *MockIExptTurnResultFilterRepo) GetByExptIDItemIDs(arg0 context.Context, arg1, arg2, arg3 string, arg4 []string) ([]*entity.ExptTurnResultFilterEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByExptIDItemIDs", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*entity.ExptTurnResultFilterEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByExptIDItemIDs indicates an expected call of GetByExptIDItemIDs.
func (mr *MockIExptTurnResultFilterRepoMockRecorder) GetByExptIDItemIDs(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByExptIDItemIDs", reflect.TypeOf((*MockIExptTurnResultFilterRepo)(nil).GetByExptIDItemIDs), arg0, arg1, arg2, arg3, arg4)
}

// GetExptTurnResultFilterKeyMappings mocks base method.
func (m *MockIExptTurnResultFilterRepo) GetExptTurnResultFilterKeyMappings(arg0 context.Context, arg1, arg2 int64) ([]*entity.ExptTurnResultFilterKeyMapping, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExptTurnResultFilterKeyMappings", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*entity.ExptTurnResultFilterKeyMapping)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExptTurnResultFilterKeyMappings indicates an expected call of GetExptTurnResultFilterKeyMappings.
func (mr *MockIExptTurnResultFilterRepoMockRecorder) GetExptTurnResultFilterKeyMappings(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExptTurnResultFilterKeyMappings", reflect.TypeOf((*MockIExptTurnResultFilterRepo)(nil).GetExptTurnResultFilterKeyMappings), arg0, arg1, arg2)
}

// InsertExptTurnResultFilterKeyMappings mocks base method.
func (m *MockIExptTurnResultFilterRepo) InsertExptTurnResultFilterKeyMappings(arg0 context.Context, arg1 []*entity.ExptTurnResultFilterKeyMapping) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertExptTurnResultFilterKeyMappings", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertExptTurnResultFilterKeyMappings indicates an expected call of InsertExptTurnResultFilterKeyMappings.
func (mr *MockIExptTurnResultFilterRepoMockRecorder) InsertExptTurnResultFilterKeyMappings(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertExptTurnResultFilterKeyMappings", reflect.TypeOf((*MockIExptTurnResultFilterRepo)(nil).InsertExptTurnResultFilterKeyMappings), arg0, arg1)
}

// QueryItemIDStates mocks base method.
func (m *MockIExptTurnResultFilterRepo) QueryItemIDStates(arg0 context.Context, arg1 *entity.ExptTurnResultFilterAccelerator) (map[int64]entity.ItemRunState, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryItemIDStates", arg0, arg1)
	ret0, _ := ret[0].(map[int64]entity.ItemRunState)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// QueryItemIDStates indicates an expected call of QueryItemIDStates.
func (mr *MockIExptTurnResultFilterRepoMockRecorder) QueryItemIDStates(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryItemIDStates", reflect.TypeOf((*MockIExptTurnResultFilterRepo)(nil).QueryItemIDStates), arg0, arg1)
}

// Save mocks base method.
func (m *MockIExptTurnResultFilterRepo) Save(arg0 context.Context, arg1 []*entity.ExptTurnResultFilterEntity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIExptTurnResultFilterRepoMockRecorder) Save(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIExptTurnResultFilterRepo)(nil).Save), arg0, arg1)
}
