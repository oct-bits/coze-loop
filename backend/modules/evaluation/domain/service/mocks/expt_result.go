// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/service (interfaces: ExptResultService,ExptAggrResultService)

// Package mocks is a generated GoMock package.
package mocks

import (
	"context"
	"reflect"

	"go.uber.org/mock/gomock"

	"github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/entity"
)

// MockExptResultService is a mock of ExptResultService interface.
type MockExptResultService struct {
	ctrl     *gomock.Controller
	recorder *MockExptResultServiceMockRecorder
}

// MockExptResultServiceMockRecorder is the mock recorder for MockExptResultService.
type MockExptResultServiceMockRecorder struct {
	mock *MockExptResultService
}

// NewMockExptResultService creates a new mock instance.
func NewMockExptResultService(ctrl *gomock.Controller) *MockExptResultService {
	mock := &MockExptResultService{ctrl: ctrl}
	mock.recorder = &MockExptResultServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExptResultService) EXPECT() *MockExptResultServiceMockRecorder {
	return m.recorder
}

// CalculateStats mocks base method.
func (m *MockExptResultService) CalculateStats(arg0 context.Context, arg1, arg2 int64, arg3 *entity.Session) (*entity.ExptCalculateStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateStats", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*entity.ExptCalculateStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateStats indicates an expected call of CalculateStats.
func (mr *MockExptResultServiceMockRecorder) CalculateStats(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateStats", reflect.TypeOf((*MockExptResultService)(nil).CalculateStats), arg0, arg1, arg2, arg3)
}

// CompareExptTurnResultFilters mocks base method.
func (m *MockExptResultService) CompareExptTurnResultFilters(arg0 context.Context, arg1, arg2 int64, arg3 []int64, arg4 int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompareExptTurnResultFilters", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompareExptTurnResultFilters indicates an expected call of CompareExptTurnResultFilters.
func (mr *MockExptResultServiceMockRecorder) CompareExptTurnResultFilters(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompareExptTurnResultFilters", reflect.TypeOf((*MockExptResultService)(nil).CompareExptTurnResultFilters), arg0, arg1, arg2, arg3, arg4)
}

// CreateStats mocks base method.
func (m *MockExptResultService) CreateStats(arg0 context.Context, arg1 *entity.ExptStats, arg2 *entity.Session) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStats", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStats indicates an expected call of CreateStats.
func (mr *MockExptResultServiceMockRecorder) CreateStats(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStats", reflect.TypeOf((*MockExptResultService)(nil).CreateStats), arg0, arg1, arg2)
}

// GetExptItemTurnResults mocks base method.
func (m *MockExptResultService) GetExptItemTurnResults(arg0 context.Context, arg1, arg2, arg3 int64, arg4 *entity.Session) ([]*entity.ExptTurnResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExptItemTurnResults", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*entity.ExptTurnResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExptItemTurnResults indicates an expected call of GetExptItemTurnResults.
func (mr *MockExptResultServiceMockRecorder) GetExptItemTurnResults(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExptItemTurnResults", reflect.TypeOf((*MockExptResultService)(nil).GetExptItemTurnResults), arg0, arg1, arg2, arg3, arg4)
}

// GetStats mocks base method.
func (m *MockExptResultService) GetStats(arg0 context.Context, arg1, arg2 int64, arg3 *entity.Session) (*entity.ExptStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*entity.ExptStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStats indicates an expected call of GetStats.
func (mr *MockExptResultServiceMockRecorder) GetStats(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockExptResultService)(nil).GetStats), arg0, arg1, arg2, arg3)
}

// InsertExptTurnResultFilterKeyMappings mocks base method.
func (m *MockExptResultService) InsertExptTurnResultFilterKeyMappings(arg0 context.Context, arg1 []*entity.ExptTurnResultFilterKeyMapping) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertExptTurnResultFilterKeyMappings", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertExptTurnResultFilterKeyMappings indicates an expected call of InsertExptTurnResultFilterKeyMappings.
func (mr *MockExptResultServiceMockRecorder) InsertExptTurnResultFilterKeyMappings(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertExptTurnResultFilterKeyMappings", reflect.TypeOf((*MockExptResultService)(nil).InsertExptTurnResultFilterKeyMappings), arg0, arg1)
}

// MGetExperimentResult mocks base method.
func (m *MockExptResultService) MGetExperimentResult(arg0 context.Context, arg1 *entity.MGetExperimentResultParam) ([]*entity.ColumnEvaluator, []*entity.ColumnEvalSetField, []*entity.ItemResult, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGetExperimentResult", arg0, arg1)
	ret0, _ := ret[0].([]*entity.ColumnEvaluator)
	ret1, _ := ret[1].([]*entity.ColumnEvalSetField)
	ret2, _ := ret[2].([]*entity.ItemResult)
	ret3, _ := ret[3].(int64)
	ret4, _ := ret[4].(error)
	return ret0, ret1, ret2, ret3, ret4
}

// MGetExperimentResult indicates an expected call of MGetExperimentResult.
func (mr *MockExptResultServiceMockRecorder) MGetExperimentResult(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetExperimentResult", reflect.TypeOf((*MockExptResultService)(nil).MGetExperimentResult), arg0, arg1)
}

// MGetStats mocks base method.
func (m *MockExptResultService) MGetStats(arg0 context.Context, arg1 []int64, arg2 int64, arg3 *entity.Session) ([]*entity.ExptStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MGetStats", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*entity.ExptStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MGetStats indicates an expected call of MGetStats.
func (mr *MockExptResultServiceMockRecorder) MGetStats(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MGetStats", reflect.TypeOf((*MockExptResultService)(nil).MGetStats), arg0, arg1, arg2, arg3)
}

// ManualUpsertExptTurnResultFilter mocks base method.
func (m *MockExptResultService) ManualUpsertExptTurnResultFilter(arg0 context.Context, arg1, arg2 int64, arg3 []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ManualUpsertExptTurnResultFilter", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ManualUpsertExptTurnResultFilter indicates an expected call of ManualUpsertExptTurnResultFilter.
func (mr *MockExptResultServiceMockRecorder) ManualUpsertExptTurnResultFilter(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ManualUpsertExptTurnResultFilter", reflect.TypeOf((*MockExptResultService)(nil).ManualUpsertExptTurnResultFilter), arg0, arg1, arg2, arg3)
}

// RecordItemRunLogs mocks base method.
func (m *MockExptResultService) RecordItemRunLogs(arg0 context.Context, arg1, arg2, arg3, arg4 int64) ([]*entity.ExptTurnEvaluatorResultRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordItemRunLogs", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*entity.ExptTurnEvaluatorResultRef)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecordItemRunLogs indicates an expected call of RecordItemRunLogs.
func (mr *MockExptResultServiceMockRecorder) RecordItemRunLogs(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordItemRunLogs", reflect.TypeOf((*MockExptResultService)(nil).RecordItemRunLogs), arg0, arg1, arg2, arg3, arg4)
}

// UpsertExptTurnResultFilter mocks base method.
func (m *MockExptResultService) UpsertExptTurnResultFilter(arg0 context.Context, arg1, arg2 int64, arg3 []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertExptTurnResultFilter", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertExptTurnResultFilter indicates an expected call of UpsertExptTurnResultFilter.
func (mr *MockExptResultServiceMockRecorder) UpsertExptTurnResultFilter(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertExptTurnResultFilter", reflect.TypeOf((*MockExptResultService)(nil).UpsertExptTurnResultFilter), arg0, arg1, arg2, arg3)
}

// MockExptAggrResultService is a mock of ExptAggrResultService interface.
type MockExptAggrResultService struct {
	ctrl     *gomock.Controller
	recorder *MockExptAggrResultServiceMockRecorder
}

// MockExptAggrResultServiceMockRecorder is the mock recorder for MockExptAggrResultService.
type MockExptAggrResultServiceMockRecorder struct {
	mock *MockExptAggrResultService
}

// NewMockExptAggrResultService creates a new mock instance.
func NewMockExptAggrResultService(ctrl *gomock.Controller) *MockExptAggrResultService {
	mock := &MockExptAggrResultService{ctrl: ctrl}
	mock.recorder = &MockExptAggrResultServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExptAggrResultService) EXPECT() *MockExptAggrResultServiceMockRecorder {
	return m.recorder
}

// BatchGetExptAggrResultByExperimentIDs mocks base method.
func (m *MockExptAggrResultService) BatchGetExptAggrResultByExperimentIDs(arg0 context.Context, arg1 int64, arg2 []int64) ([]*entity.ExptAggregateResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetExptAggrResultByExperimentIDs", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*entity.ExptAggregateResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetExptAggrResultByExperimentIDs indicates an expected call of BatchGetExptAggrResultByExperimentIDs.
func (mr *MockExptAggrResultServiceMockRecorder) BatchGetExptAggrResultByExperimentIDs(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetExptAggrResultByExperimentIDs", reflect.TypeOf((*MockExptAggrResultService)(nil).BatchGetExptAggrResultByExperimentIDs), arg0, arg1, arg2)
}

// CreateExptAggrResult mocks base method.
func (m *MockExptAggrResultService) CreateExptAggrResult(arg0 context.Context, arg1, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateExptAggrResult", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateExptAggrResult indicates an expected call of CreateExptAggrResult.
func (mr *MockExptAggrResultServiceMockRecorder) CreateExptAggrResult(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateExptAggrResult", reflect.TypeOf((*MockExptAggrResultService)(nil).CreateExptAggrResult), arg0, arg1, arg2)
}

// UpdateExptAggrResult mocks base method.
func (m *MockExptAggrResultService) UpdateExptAggrResult(arg0 context.Context, arg1 *entity.UpdateExptAggrResultParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExptAggrResult", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExptAggrResult indicates an expected call of UpdateExptAggrResult.
func (mr *MockExptAggrResultServiceMockRecorder) UpdateExptAggrResult(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExptAggrResult", reflect.TypeOf((*MockExptAggrResultService)(nil).UpdateExptAggrResult), arg0, arg1)
}
