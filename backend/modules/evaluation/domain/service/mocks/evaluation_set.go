// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/service (interfaces: IEvaluationSetService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockIEvaluationSetService is a mock of IEvaluationSetService interface.
type MockIEvaluationSetService struct {
	ctrl     *gomock.Controller
	recorder *MockIEvaluationSetServiceMockRecorder
}

// MockIEvaluationSetServiceMockRecorder is the mock recorder for MockIEvaluationSetService.
type MockIEvaluationSetServiceMockRecorder struct {
	mock *MockIEvaluationSetService
}

// NewMockIEvaluationSetService creates a new mock instance.
func NewMockIEvaluationSetService(ctrl *gomock.Controller) *MockIEvaluationSetService {
	mock := &MockIEvaluationSetService{ctrl: ctrl}
	mock.recorder = &MockIEvaluationSetServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIEvaluationSetService) EXPECT() *MockIEvaluationSetServiceMockRecorder {
	return m.recorder
}

// BatchGetEvaluationSets mocks base method.
func (m *MockIEvaluationSetService) BatchGetEvaluationSets(arg0 context.Context, arg1 *int64, arg2 []int64, arg3 *bool) ([]*entity.EvaluationSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetEvaluationSets", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*entity.EvaluationSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetEvaluationSets indicates an expected call of BatchGetEvaluationSets.
func (mr *MockIEvaluationSetServiceMockRecorder) BatchGetEvaluationSets(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetEvaluationSets", reflect.TypeOf((*MockIEvaluationSetService)(nil).BatchGetEvaluationSets), arg0, arg1, arg2, arg3)
}

// CreateEvaluationSet mocks base method.
func (m *MockIEvaluationSetService) CreateEvaluationSet(arg0 context.Context, arg1 *entity.CreateEvaluationSetParam) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvaluationSet", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvaluationSet indicates an expected call of CreateEvaluationSet.
func (mr *MockIEvaluationSetServiceMockRecorder) CreateEvaluationSet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvaluationSet", reflect.TypeOf((*MockIEvaluationSetService)(nil).CreateEvaluationSet), arg0, arg1)
}

// DeleteEvaluationSet mocks base method.
func (m *MockIEvaluationSetService) DeleteEvaluationSet(arg0 context.Context, arg1, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvaluationSet", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEvaluationSet indicates an expected call of DeleteEvaluationSet.
func (mr *MockIEvaluationSetServiceMockRecorder) DeleteEvaluationSet(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvaluationSet", reflect.TypeOf((*MockIEvaluationSetService)(nil).DeleteEvaluationSet), arg0, arg1, arg2)
}

// GetEvaluationSet mocks base method.
func (m *MockIEvaluationSetService) GetEvaluationSet(arg0 context.Context, arg1 *int64, arg2 int64, arg3 *bool) (*entity.EvaluationSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvaluationSet", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*entity.EvaluationSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvaluationSet indicates an expected call of GetEvaluationSet.
func (mr *MockIEvaluationSetServiceMockRecorder) GetEvaluationSet(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvaluationSet", reflect.TypeOf((*MockIEvaluationSetService)(nil).GetEvaluationSet), arg0, arg1, arg2, arg3)
}

// ListEvaluationSets mocks base method.
func (m *MockIEvaluationSetService) ListEvaluationSets(arg0 context.Context, arg1 *entity.ListEvaluationSetsParam) ([]*entity.EvaluationSet, *int64, *string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEvaluationSets", arg0, arg1)
	ret0, _ := ret[0].([]*entity.EvaluationSet)
	ret1, _ := ret[1].(*int64)
	ret2, _ := ret[2].(*string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ListEvaluationSets indicates an expected call of ListEvaluationSets.
func (mr *MockIEvaluationSetServiceMockRecorder) ListEvaluationSets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEvaluationSets", reflect.TypeOf((*MockIEvaluationSetService)(nil).ListEvaluationSets), arg0, arg1)
}

// QueryItemSnapshotMappings mocks base method.
func (m *MockIEvaluationSetService) QueryItemSnapshotMappings(arg0 context.Context, arg1, arg2 int64, arg3 *int64) ([]*entity.ItemSnapshotFieldMapping, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryItemSnapshotMappings", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*entity.ItemSnapshotFieldMapping)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// QueryItemSnapshotMappings indicates an expected call of QueryItemSnapshotMappings.
func (mr *MockIEvaluationSetServiceMockRecorder) QueryItemSnapshotMappings(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryItemSnapshotMappings", reflect.TypeOf((*MockIEvaluationSetService)(nil).QueryItemSnapshotMappings), arg0, arg1, arg2, arg3)
}

// UpdateEvaluationSet mocks base method.
func (m *MockIEvaluationSetService) UpdateEvaluationSet(arg0 context.Context, arg1 *entity.UpdateEvaluationSetParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvaluationSet", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEvaluationSet indicates an expected call of UpdateEvaluationSet.
func (mr *MockIEvaluationSetServiceMockRecorder) UpdateEvaluationSet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvaluationSet", reflect.TypeOf((*MockIEvaluationSetService)(nil).UpdateEvaluationSet), arg0, arg1)
}
