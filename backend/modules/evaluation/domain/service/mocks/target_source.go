// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/service (interfaces: ISourceEvalTargetOperateService)
//
// Generated by this command:
//
//	mockgen -destination=mocks/target_source.go -package=mocks . ISourceEvalTargetOperateService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockISourceEvalTargetOperateService is a mock of ISourceEvalTargetOperateService interface.
type MockISourceEvalTargetOperateService struct {
	ctrl     *gomock.Controller
	recorder *MockISourceEvalTargetOperateServiceMockRecorder
	isgomock struct{}
}

// MockISourceEvalTargetOperateServiceMockRecorder is the mock recorder for MockISourceEvalTargetOperateService.
type MockISourceEvalTargetOperateServiceMockRecorder struct {
	mock *MockISourceEvalTargetOperateService
}

// NewMockISourceEvalTargetOperateService creates a new mock instance.
func NewMockISourceEvalTargetOperateService(ctrl *gomock.Controller) *MockISourceEvalTargetOperateService {
	mock := &MockISourceEvalTargetOperateService{ctrl: ctrl}
	mock.recorder = &MockISourceEvalTargetOperateServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISourceEvalTargetOperateService) EXPECT() *MockISourceEvalTargetOperateServiceMockRecorder {
	return m.recorder
}

// BatchGetSource mocks base method.
func (m *MockISourceEvalTargetOperateService) BatchGetSource(ctx context.Context, spaceID int64, ids []string) ([]*entity.EvalTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetSource", ctx, spaceID, ids)
	ret0, _ := ret[0].([]*entity.EvalTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetSource indicates an expected call of BatchGetSource.
func (mr *MockISourceEvalTargetOperateServiceMockRecorder) BatchGetSource(ctx, spaceID, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetSource", reflect.TypeOf((*MockISourceEvalTargetOperateService)(nil).BatchGetSource), ctx, spaceID, ids)
}

// BuildBySource mocks base method.
func (m *MockISourceEvalTargetOperateService) BuildBySource(ctx context.Context, spaceID int64, sourceTargetID, sourceTargetVersion string, opts ...entity.Option) (*entity.EvalTarget, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, spaceID, sourceTargetID, sourceTargetVersion}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BuildBySource", varargs...)
	ret0, _ := ret[0].(*entity.EvalTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildBySource indicates an expected call of BuildBySource.
func (mr *MockISourceEvalTargetOperateServiceMockRecorder) BuildBySource(ctx, spaceID, sourceTargetID, sourceTargetVersion any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, spaceID, sourceTargetID, sourceTargetVersion}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildBySource", reflect.TypeOf((*MockISourceEvalTargetOperateService)(nil).BuildBySource), varargs...)
}

// EvalType mocks base method.
func (m *MockISourceEvalTargetOperateService) EvalType() entity.EvalTargetType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EvalType")
	ret0, _ := ret[0].(entity.EvalTargetType)
	return ret0
}

// EvalType indicates an expected call of EvalType.
func (mr *MockISourceEvalTargetOperateServiceMockRecorder) EvalType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EvalType", reflect.TypeOf((*MockISourceEvalTargetOperateService)(nil).EvalType))
}

// Execute mocks base method.
func (m *MockISourceEvalTargetOperateService) Execute(ctx context.Context, spaceID int64, param *entity.ExecuteEvalTargetParam) (*entity.EvalTargetOutputData, entity.EvalTargetRunStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, spaceID, param)
	ret0, _ := ret[0].(*entity.EvalTargetOutputData)
	ret1, _ := ret[1].(entity.EvalTargetRunStatus)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Execute indicates an expected call of Execute.
func (mr *MockISourceEvalTargetOperateServiceMockRecorder) Execute(ctx, spaceID, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockISourceEvalTargetOperateService)(nil).Execute), ctx, spaceID, param)
}

// ListSource mocks base method.
func (m *MockISourceEvalTargetOperateService) ListSource(ctx context.Context, param *entity.ListSourceParam) ([]*entity.EvalTarget, string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSource", ctx, param)
	ret0, _ := ret[0].([]*entity.EvalTarget)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ListSource indicates an expected call of ListSource.
func (mr *MockISourceEvalTargetOperateServiceMockRecorder) ListSource(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSource", reflect.TypeOf((*MockISourceEvalTargetOperateService)(nil).ListSource), ctx, param)
}

// ListSourceVersion mocks base method.
func (m *MockISourceEvalTargetOperateService) ListSourceVersion(ctx context.Context, param *entity.ListSourceVersionParam) ([]*entity.EvalTargetVersion, string, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSourceVersion", ctx, param)
	ret0, _ := ret[0].([]*entity.EvalTargetVersion)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(bool)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ListSourceVersion indicates an expected call of ListSourceVersion.
func (mr *MockISourceEvalTargetOperateServiceMockRecorder) ListSourceVersion(ctx, param any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSourceVersion", reflect.TypeOf((*MockISourceEvalTargetOperateService)(nil).ListSourceVersion), ctx, param)
}

// PackSourceInfo mocks base method.
func (m *MockISourceEvalTargetOperateService) PackSourceInfo(ctx context.Context, spaceID int64, dos []*entity.EvalTarget) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PackSourceInfo", ctx, spaceID, dos)
	ret0, _ := ret[0].(error)
	return ret0
}

// PackSourceInfo indicates an expected call of PackSourceInfo.
func (mr *MockISourceEvalTargetOperateServiceMockRecorder) PackSourceInfo(ctx, spaceID, dos any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PackSourceInfo", reflect.TypeOf((*MockISourceEvalTargetOperateService)(nil).PackSourceInfo), ctx, spaceID, dos)
}

// PackSourceVersionInfo mocks base method.
func (m *MockISourceEvalTargetOperateService) PackSourceVersionInfo(ctx context.Context, spaceID int64, dos []*entity.EvalTarget) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PackSourceVersionInfo", ctx, spaceID, dos)
	ret0, _ := ret[0].(error)
	return ret0
}

// PackSourceVersionInfo indicates an expected call of PackSourceVersionInfo.
func (mr *MockISourceEvalTargetOperateServiceMockRecorder) PackSourceVersionInfo(ctx, spaceID, dos any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PackSourceVersionInfo", reflect.TypeOf((*MockISourceEvalTargetOperateService)(nil).PackSourceVersionInfo), ctx, spaceID, dos)
}

// ValidateInput mocks base method.
func (m *MockISourceEvalTargetOperateService) ValidateInput(ctx context.Context, spaceID int64, inputSchema []*entity.ArgsSchema, input *entity.EvalTargetInputData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateInput", ctx, spaceID, inputSchema, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateInput indicates an expected call of ValidateInput.
func (mr *MockISourceEvalTargetOperateServiceMockRecorder) ValidateInput(ctx, spaceID, inputSchema, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateInput", reflect.TypeOf((*MockISourceEvalTargetOperateService)(nil).ValidateInput), ctx, spaceID, inputSchema, input)
}
