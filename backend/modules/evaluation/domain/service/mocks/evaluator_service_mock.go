// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/service (interfaces: EvaluatorService)

// Package mocks is a generated GoMock package.
package mocks

import (
	"context"
	"reflect"

	"go.uber.org/mock/gomock"

	"github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/entity"
)

// MockEvaluatorService is a mock of EvaluatorService interface.
type MockEvaluatorService struct {
	ctrl     *gomock.Controller
	recorder *MockEvaluatorServiceMockRecorder
}

// MockEvaluatorServiceMockRecorder is the mock recorder for MockEvaluatorService.
type MockEvaluatorServiceMockRecorder struct {
	mock *MockEvaluatorService
}

// NewMockEvaluatorService creates a new mock instance.
func NewMockEvaluatorService(ctrl *gomock.Controller) *MockEvaluatorService {
	mock := &MockEvaluatorService{ctrl: ctrl}
	mock.recorder = &MockEvaluatorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvaluatorService) EXPECT() *MockEvaluatorServiceMockRecorder {
	return m.recorder
}

// BatchGetEvaluator mocks base method.
func (m *MockEvaluatorService) BatchGetEvaluator(arg0 context.Context, arg1 int64, arg2 []int64, arg3 bool) ([]*entity.Evaluator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetEvaluator", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*entity.Evaluator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetEvaluator indicates an expected call of BatchGetEvaluator.
func (mr *MockEvaluatorServiceMockRecorder) BatchGetEvaluator(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetEvaluator", reflect.TypeOf((*MockEvaluatorService)(nil).BatchGetEvaluator), arg0, arg1, arg2, arg3)
}

// BatchGetEvaluatorVersion mocks base method.
func (m *MockEvaluatorService) BatchGetEvaluatorVersion(arg0 context.Context, arg1 *int64, arg2 []int64, arg3 bool) ([]*entity.Evaluator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetEvaluatorVersion", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*entity.Evaluator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetEvaluatorVersion indicates an expected call of BatchGetEvaluatorVersion.
func (mr *MockEvaluatorServiceMockRecorder) BatchGetEvaluatorVersion(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetEvaluatorVersion", reflect.TypeOf((*MockEvaluatorService)(nil).BatchGetEvaluatorVersion), arg0, arg1, arg2, arg3)
}

// CheckNameExist mocks base method.
func (m *MockEvaluatorService) CheckNameExist(arg0 context.Context, arg1, arg2 int64, arg3 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckNameExist", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckNameExist indicates an expected call of CheckNameExist.
func (mr *MockEvaluatorServiceMockRecorder) CheckNameExist(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckNameExist", reflect.TypeOf((*MockEvaluatorService)(nil).CheckNameExist), arg0, arg1, arg2, arg3)
}

// CreateEvaluator mocks base method.
func (m *MockEvaluatorService) CreateEvaluator(arg0 context.Context, arg1 *entity.Evaluator, arg2 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvaluator", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvaluator indicates an expected call of CreateEvaluator.
func (mr *MockEvaluatorServiceMockRecorder) CreateEvaluator(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvaluator", reflect.TypeOf((*MockEvaluatorService)(nil).CreateEvaluator), arg0, arg1, arg2)
}

// DebugEvaluator mocks base method.
func (m *MockEvaluatorService) DebugEvaluator(arg0 context.Context, arg1 *entity.Evaluator, arg2 *entity.EvaluatorInputData) (*entity.EvaluatorOutputData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DebugEvaluator", arg0, arg1, arg2)
	ret0, _ := ret[0].(*entity.EvaluatorOutputData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DebugEvaluator indicates an expected call of DebugEvaluator.
func (mr *MockEvaluatorServiceMockRecorder) DebugEvaluator(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebugEvaluator", reflect.TypeOf((*MockEvaluatorService)(nil).DebugEvaluator), arg0, arg1, arg2)
}

// DeleteEvaluator mocks base method.
func (m *MockEvaluatorService) DeleteEvaluator(arg0 context.Context, arg1 []int64, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvaluator", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEvaluator indicates an expected call of DeleteEvaluator.
func (mr *MockEvaluatorServiceMockRecorder) DeleteEvaluator(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvaluator", reflect.TypeOf((*MockEvaluatorService)(nil).DeleteEvaluator), arg0, arg1, arg2)
}

// GetEvaluator mocks base method.
func (m *MockEvaluatorService) GetEvaluator(arg0 context.Context, arg1, arg2 int64, arg3 bool) (*entity.Evaluator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvaluator", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*entity.Evaluator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvaluator indicates an expected call of GetEvaluator.
func (mr *MockEvaluatorServiceMockRecorder) GetEvaluator(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvaluator", reflect.TypeOf((*MockEvaluatorService)(nil).GetEvaluator), arg0, arg1, arg2, arg3)
}

// GetEvaluatorVersion mocks base method.
func (m *MockEvaluatorService) GetEvaluatorVersion(arg0 context.Context, arg1 int64, arg2 bool) (*entity.Evaluator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvaluatorVersion", arg0, arg1, arg2)
	ret0, _ := ret[0].(*entity.Evaluator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvaluatorVersion indicates an expected call of GetEvaluatorVersion.
func (mr *MockEvaluatorServiceMockRecorder) GetEvaluatorVersion(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvaluatorVersion", reflect.TypeOf((*MockEvaluatorService)(nil).GetEvaluatorVersion), arg0, arg1, arg2)
}

// ListEvaluator mocks base method.
func (m *MockEvaluatorService) ListEvaluator(arg0 context.Context, arg1 *entity.ListEvaluatorRequest) ([]*entity.Evaluator, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEvaluator", arg0, arg1)
	ret0, _ := ret[0].([]*entity.Evaluator)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListEvaluator indicates an expected call of ListEvaluator.
func (mr *MockEvaluatorServiceMockRecorder) ListEvaluator(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEvaluator", reflect.TypeOf((*MockEvaluatorService)(nil).ListEvaluator), arg0, arg1)
}

// ListEvaluatorVersion mocks base method.
func (m *MockEvaluatorService) ListEvaluatorVersion(arg0 context.Context, arg1 *entity.ListEvaluatorVersionRequest) ([]*entity.Evaluator, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEvaluatorVersion", arg0, arg1)
	ret0, _ := ret[0].([]*entity.Evaluator)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListEvaluatorVersion indicates an expected call of ListEvaluatorVersion.
func (mr *MockEvaluatorServiceMockRecorder) ListEvaluatorVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEvaluatorVersion", reflect.TypeOf((*MockEvaluatorService)(nil).ListEvaluatorVersion), arg0, arg1)
}

// RunEvaluator mocks base method.
func (m *MockEvaluatorService) RunEvaluator(arg0 context.Context, arg1 *entity.RunEvaluatorRequest) (*entity.EvaluatorRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunEvaluator", arg0, arg1)
	ret0, _ := ret[0].(*entity.EvaluatorRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunEvaluator indicates an expected call of RunEvaluator.
func (mr *MockEvaluatorServiceMockRecorder) RunEvaluator(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunEvaluator", reflect.TypeOf((*MockEvaluatorService)(nil).RunEvaluator), arg0, arg1)
}

// SubmitEvaluatorVersion mocks base method.
func (m *MockEvaluatorService) SubmitEvaluatorVersion(arg0 context.Context, arg1 *entity.Evaluator, arg2, arg3, arg4 string) (*entity.Evaluator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitEvaluatorVersion", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*entity.Evaluator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitEvaluatorVersion indicates an expected call of SubmitEvaluatorVersion.
func (mr *MockEvaluatorServiceMockRecorder) SubmitEvaluatorVersion(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitEvaluatorVersion", reflect.TypeOf((*MockEvaluatorService)(nil).SubmitEvaluatorVersion), arg0, arg1, arg2, arg3, arg4)
}

// UpdateEvaluatorDraft mocks base method.
func (m *MockEvaluatorService) UpdateEvaluatorDraft(arg0 context.Context, arg1 *entity.Evaluator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvaluatorDraft", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEvaluatorDraft indicates an expected call of UpdateEvaluatorDraft.
func (mr *MockEvaluatorServiceMockRecorder) UpdateEvaluatorDraft(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvaluatorDraft", reflect.TypeOf((*MockEvaluatorService)(nil).UpdateEvaluatorDraft), arg0, arg1)
}

// UpdateEvaluatorMeta mocks base method.
func (m *MockEvaluatorService) UpdateEvaluatorMeta(arg0 context.Context, arg1, arg2 int64, arg3, arg4, arg5 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvaluatorMeta", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEvaluatorMeta indicates an expected call of UpdateEvaluatorMeta.
func (mr *MockEvaluatorServiceMockRecorder) UpdateEvaluatorMeta(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvaluatorMeta", reflect.TypeOf((*MockEvaluatorService)(nil).UpdateEvaluatorMeta), arg0, arg1, arg2, arg3, arg4, arg5)
}
