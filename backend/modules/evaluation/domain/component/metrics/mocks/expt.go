// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/component/metrics (interfaces: ExptMetric)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockExptMetric is a mock of ExptMetric interface.
type MockExptMetric struct {
	ctrl     *gomock.Controller
	recorder *MockExptMetricMockRecorder
}

// MockExptMetricMockRecorder is the mock recorder for MockExptMetric.
type MockExptMetricMockRecorder struct {
	mock *MockExptMetric
}

// NewMockExptMetric creates a new mock instance.
func NewMockExptMetric(ctrl *gomock.Controller) *MockExptMetric {
	mock := &MockExptMetric{ctrl: ctrl}
	mock.recorder = &MockExptMetricMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExptMetric) EXPECT() *MockExptMetricMockRecorder {
	return m.recorder
}

// EmitCalculateExptAggrResult mocks base method.
func (m *MockExptMetric) EmitCalculateExptAggrResult(arg0, arg1 int64, arg2 bool, arg3 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitCalculateExptAggrResult", arg0, arg1, arg2, arg3)
}

// EmitCalculateExptAggrResult indicates an expected call of EmitCalculateExptAggrResult.
func (mr *MockExptMetricMockRecorder) EmitCalculateExptAggrResult(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitCalculateExptAggrResult", reflect.TypeOf((*MockExptMetric)(nil).EmitCalculateExptAggrResult), arg0, arg1, arg2, arg3)
}

// EmitExptExecResult mocks base method.
func (m *MockExptMetric) EmitExptExecResult(arg0, arg1, arg2 int64, arg3 time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitExptExecResult", arg0, arg1, arg2, arg3)
}

// EmitExptExecResult indicates an expected call of EmitExptExecResult.
func (mr *MockExptMetricMockRecorder) EmitExptExecResult(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitExptExecResult", reflect.TypeOf((*MockExptMetric)(nil).EmitExptExecResult), arg0, arg1, arg2, arg3)
}

// EmitExptExecRun mocks base method.
func (m *MockExptMetric) EmitExptExecRun(arg0, arg1 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitExptExecRun", arg0, arg1)
}

// EmitExptExecRun indicates an expected call of EmitExptExecRun.
func (mr *MockExptMetricMockRecorder) EmitExptExecRun(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitExptExecRun", reflect.TypeOf((*MockExptMetric)(nil).EmitExptExecRun), arg0, arg1)
}

// EmitExptTurnResultFilterCheck mocks base method.
func (m *MockExptMetric) EmitExptTurnResultFilterCheck(arg0 int64, arg1, arg2, arg3 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitExptTurnResultFilterCheck", arg0, arg1, arg2, arg3)
}

// EmitExptTurnResultFilterCheck indicates an expected call of EmitExptTurnResultFilterCheck.
func (mr *MockExptMetricMockRecorder) EmitExptTurnResultFilterCheck(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitExptTurnResultFilterCheck", reflect.TypeOf((*MockExptMetric)(nil).EmitExptTurnResultFilterCheck), arg0, arg1, arg2, arg3)
}

// EmitExptTurnResultFilterQueryLatency mocks base method.
func (m *MockExptMetric) EmitExptTurnResultFilterQueryLatency(arg0, arg1 int64, arg2 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitExptTurnResultFilterQueryLatency", arg0, arg1, arg2)
}

// EmitExptTurnResultFilterQueryLatency indicates an expected call of EmitExptTurnResultFilterQueryLatency.
func (mr *MockExptMetricMockRecorder) EmitExptTurnResultFilterQueryLatency(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitExptTurnResultFilterQueryLatency", reflect.TypeOf((*MockExptMetric)(nil).EmitExptTurnResultFilterQueryLatency), arg0, arg1, arg2)
}

// EmitGetExptResult mocks base method.
func (m *MockExptMetric) EmitGetExptResult(arg0 int64, arg1 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitGetExptResult", arg0, arg1)
}

// EmitGetExptResult indicates an expected call of EmitGetExptResult.
func (mr *MockExptMetricMockRecorder) EmitGetExptResult(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitGetExptResult", reflect.TypeOf((*MockExptMetric)(nil).EmitGetExptResult), arg0, arg1)
}

// EmitItemExecEval mocks base method.
func (m *MockExptMetric) EmitItemExecEval(arg0, arg1 int64, arg2 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitItemExecEval", arg0, arg1, arg2)
}

// EmitItemExecEval indicates an expected call of EmitItemExecEval.
func (mr *MockExptMetricMockRecorder) EmitItemExecEval(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitItemExecEval", reflect.TypeOf((*MockExptMetric)(nil).EmitItemExecEval), arg0, arg1, arg2)
}

// EmitItemExecResult mocks base method.
func (m *MockExptMetric) EmitItemExecResult(arg0, arg1 int64, arg2, arg3, arg4 bool, arg5, arg6 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitItemExecResult", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// EmitItemExecResult indicates an expected call of EmitItemExecResult.
func (mr *MockExptMetricMockRecorder) EmitItemExecResult(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitItemExecResult", reflect.TypeOf((*MockExptMetric)(nil).EmitItemExecResult), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// EmitTurnExecEval mocks base method.
func (m *MockExptMetric) EmitTurnExecEval(arg0, arg1 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitTurnExecEval", arg0, arg1)
}

// EmitTurnExecEval indicates an expected call of EmitTurnExecEval.
func (mr *MockExptMetricMockRecorder) EmitTurnExecEval(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitTurnExecEval", reflect.TypeOf((*MockExptMetric)(nil).EmitTurnExecEval), arg0, arg1)
}

// EmitTurnExecEvaluatorResult mocks base method.
func (m *MockExptMetric) EmitTurnExecEvaluatorResult(arg0 int64, arg1 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitTurnExecEvaluatorResult", arg0, arg1)
}

// EmitTurnExecEvaluatorResult indicates an expected call of EmitTurnExecEvaluatorResult.
func (mr *MockExptMetricMockRecorder) EmitTurnExecEvaluatorResult(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitTurnExecEvaluatorResult", reflect.TypeOf((*MockExptMetric)(nil).EmitTurnExecEvaluatorResult), arg0, arg1)
}

// EmitTurnExecResult mocks base method.
func (m *MockExptMetric) EmitTurnExecResult(arg0, arg1 int64, arg2, arg3 bool, arg4 int64, arg5 time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitTurnExecResult", arg0, arg1, arg2, arg3, arg4, arg5)
}

// EmitTurnExecResult indicates an expected call of EmitTurnExecResult.
func (mr *MockExptMetricMockRecorder) EmitTurnExecResult(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitTurnExecResult", reflect.TypeOf((*MockExptMetric)(nil).EmitTurnExecResult), arg0, arg1, arg2, arg3, arg4, arg5)
}

// EmitTurnExecTargetResult mocks base method.
func (m *MockExptMetric) EmitTurnExecTargetResult(arg0 int64, arg1 bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitTurnExecTargetResult", arg0, arg1)
}

// EmitTurnExecTargetResult indicates an expected call of EmitTurnExecTargetResult.
func (mr *MockExptMetricMockRecorder) EmitTurnExecTargetResult(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitTurnExecTargetResult", reflect.TypeOf((*MockExptMetric)(nil).EmitTurnExecTargetResult), arg0, arg1)
}

// EmitZombies mocks base method.
func (m *MockExptMetric) EmitZombies(arg0, arg1, arg2, arg3 int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitZombies", arg0, arg1, arg2, arg3)
}

// EmitZombies indicates an expected call of EmitZombies.
func (mr *MockExptMetricMockRecorder) EmitZombies(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitZombies", reflect.TypeOf((*MockExptMetric)(nil).EmitZombies), arg0, arg1, arg2, arg3)
}
