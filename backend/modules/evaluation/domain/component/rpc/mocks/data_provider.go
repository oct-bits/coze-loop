// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/component/rpc (interfaces: IDatasetRPCAdapter)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	rpc "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/component/rpc"
	entity "github.com/coze-dev/coze-loop/backend/modules/evaluation/domain/entity"
)

// MockIDatasetRPCAdapter is a mock of IDatasetRPCAdapter interface.
type MockIDatasetRPCAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockIDatasetRPCAdapterMockRecorder
}

// MockIDatasetRPCAdapterMockRecorder is the mock recorder for MockIDatasetRPCAdapter.
type MockIDatasetRPCAdapterMockRecorder struct {
	mock *MockIDatasetRPCAdapter
}

// NewMockIDatasetRPCAdapter creates a new mock instance.
func NewMockIDatasetRPCAdapter(ctrl *gomock.Controller) *MockIDatasetRPCAdapter {
	mock := &MockIDatasetRPCAdapter{ctrl: ctrl}
	mock.recorder = &MockIDatasetRPCAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDatasetRPCAdapter) EXPECT() *MockIDatasetRPCAdapterMockRecorder {
	return m.recorder
}

// BatchCreateDatasetItems mocks base method.
func (m *MockIDatasetRPCAdapter) BatchCreateDatasetItems(arg0 context.Context, arg1 *rpc.BatchCreateDatasetItemsParam) (map[int64]int64, []*entity.ItemErrorGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreateDatasetItems", arg0, arg1)
	ret0, _ := ret[0].(map[int64]int64)
	ret1, _ := ret[1].([]*entity.ItemErrorGroup)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// BatchCreateDatasetItems indicates an expected call of BatchCreateDatasetItems.
func (mr *MockIDatasetRPCAdapterMockRecorder) BatchCreateDatasetItems(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateDatasetItems", reflect.TypeOf((*MockIDatasetRPCAdapter)(nil).BatchCreateDatasetItems), arg0, arg1)
}

// BatchDeleteDatasetItems mocks base method.
func (m *MockIDatasetRPCAdapter) BatchDeleteDatasetItems(arg0 context.Context, arg1, arg2 int64, arg3 []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDeleteDatasetItems", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchDeleteDatasetItems indicates an expected call of BatchDeleteDatasetItems.
func (mr *MockIDatasetRPCAdapterMockRecorder) BatchDeleteDatasetItems(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDeleteDatasetItems", reflect.TypeOf((*MockIDatasetRPCAdapter)(nil).BatchDeleteDatasetItems), arg0, arg1, arg2, arg3)
}

// BatchGetDatasetItems mocks base method.
func (m *MockIDatasetRPCAdapter) BatchGetDatasetItems(arg0 context.Context, arg1 *rpc.BatchGetDatasetItemsParam) ([]*entity.EvaluationSetItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetDatasetItems", arg0, arg1)
	ret0, _ := ret[0].([]*entity.EvaluationSetItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetDatasetItems indicates an expected call of BatchGetDatasetItems.
func (mr *MockIDatasetRPCAdapterMockRecorder) BatchGetDatasetItems(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetDatasetItems", reflect.TypeOf((*MockIDatasetRPCAdapter)(nil).BatchGetDatasetItems), arg0, arg1)
}

// BatchGetDatasetItemsByVersion mocks base method.
func (m *MockIDatasetRPCAdapter) BatchGetDatasetItemsByVersion(arg0 context.Context, arg1 *rpc.BatchGetDatasetItemsParam) ([]*entity.EvaluationSetItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetDatasetItemsByVersion", arg0, arg1)
	ret0, _ := ret[0].([]*entity.EvaluationSetItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetDatasetItemsByVersion indicates an expected call of BatchGetDatasetItemsByVersion.
func (mr *MockIDatasetRPCAdapterMockRecorder) BatchGetDatasetItemsByVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetDatasetItemsByVersion", reflect.TypeOf((*MockIDatasetRPCAdapter)(nil).BatchGetDatasetItemsByVersion), arg0, arg1)
}

// BatchGetDatasets mocks base method.
func (m *MockIDatasetRPCAdapter) BatchGetDatasets(arg0 context.Context, arg1 *int64, arg2 []int64, arg3 *bool) ([]*entity.EvaluationSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetDatasets", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*entity.EvaluationSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetDatasets indicates an expected call of BatchGetDatasets.
func (mr *MockIDatasetRPCAdapterMockRecorder) BatchGetDatasets(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetDatasets", reflect.TypeOf((*MockIDatasetRPCAdapter)(nil).BatchGetDatasets), arg0, arg1, arg2, arg3)
}

// BatchGetVersionedDatasets mocks base method.
func (m *MockIDatasetRPCAdapter) BatchGetVersionedDatasets(arg0 context.Context, arg1 *int64, arg2 []int64, arg3 *bool) ([]*rpc.BatchGetVersionedDatasetsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetVersionedDatasets", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*rpc.BatchGetVersionedDatasetsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetVersionedDatasets indicates an expected call of BatchGetVersionedDatasets.
func (mr *MockIDatasetRPCAdapterMockRecorder) BatchGetVersionedDatasets(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetVersionedDatasets", reflect.TypeOf((*MockIDatasetRPCAdapter)(nil).BatchGetVersionedDatasets), arg0, arg1, arg2, arg3)
}

// ClearEvaluationSetDraftItem mocks base method.
func (m *MockIDatasetRPCAdapter) ClearEvaluationSetDraftItem(arg0 context.Context, arg1, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearEvaluationSetDraftItem", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearEvaluationSetDraftItem indicates an expected call of ClearEvaluationSetDraftItem.
func (mr *MockIDatasetRPCAdapterMockRecorder) ClearEvaluationSetDraftItem(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearEvaluationSetDraftItem", reflect.TypeOf((*MockIDatasetRPCAdapter)(nil).ClearEvaluationSetDraftItem), arg0, arg1, arg2)
}

// CreateDataset mocks base method.
func (m *MockIDatasetRPCAdapter) CreateDataset(arg0 context.Context, arg1 *rpc.CreateDatasetParam) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataset", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataset indicates an expected call of CreateDataset.
func (mr *MockIDatasetRPCAdapterMockRecorder) CreateDataset(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataset", reflect.TypeOf((*MockIDatasetRPCAdapter)(nil).CreateDataset), arg0, arg1)
}

// CreateDatasetVersion mocks base method.
func (m *MockIDatasetRPCAdapter) CreateDatasetVersion(arg0 context.Context, arg1, arg2 int64, arg3 string, arg4 *string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDatasetVersion", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDatasetVersion indicates an expected call of CreateDatasetVersion.
func (mr *MockIDatasetRPCAdapterMockRecorder) CreateDatasetVersion(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDatasetVersion", reflect.TypeOf((*MockIDatasetRPCAdapter)(nil).CreateDatasetVersion), arg0, arg1, arg2, arg3, arg4)
}

// DeleteDataset mocks base method.
func (m *MockIDatasetRPCAdapter) DeleteDataset(arg0 context.Context, arg1, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDataset", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDataset indicates an expected call of DeleteDataset.
func (mr *MockIDatasetRPCAdapterMockRecorder) DeleteDataset(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataset", reflect.TypeOf((*MockIDatasetRPCAdapter)(nil).DeleteDataset), arg0, arg1, arg2)
}

// GetDataset mocks base method.
func (m *MockIDatasetRPCAdapter) GetDataset(arg0 context.Context, arg1 *int64, arg2 int64, arg3 *bool) (*entity.EvaluationSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataset", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*entity.EvaluationSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataset indicates an expected call of GetDataset.
func (mr *MockIDatasetRPCAdapterMockRecorder) GetDataset(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataset", reflect.TypeOf((*MockIDatasetRPCAdapter)(nil).GetDataset), arg0, arg1, arg2, arg3)
}

// GetDatasetVersion mocks base method.
func (m *MockIDatasetRPCAdapter) GetDatasetVersion(arg0 context.Context, arg1, arg2 int64, arg3 *bool) (*entity.EvaluationSetVersion, *entity.EvaluationSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatasetVersion", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*entity.EvaluationSetVersion)
	ret1, _ := ret[1].(*entity.EvaluationSet)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDatasetVersion indicates an expected call of GetDatasetVersion.
func (mr *MockIDatasetRPCAdapterMockRecorder) GetDatasetVersion(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatasetVersion", reflect.TypeOf((*MockIDatasetRPCAdapter)(nil).GetDatasetVersion), arg0, arg1, arg2, arg3)
}

// ListDatasetItems mocks base method.
func (m *MockIDatasetRPCAdapter) ListDatasetItems(arg0 context.Context, arg1 *rpc.ListDatasetItemsParam) ([]*entity.EvaluationSetItem, *int64, *string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatasetItems", arg0, arg1)
	ret0, _ := ret[0].([]*entity.EvaluationSetItem)
	ret1, _ := ret[1].(*int64)
	ret2, _ := ret[2].(*string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ListDatasetItems indicates an expected call of ListDatasetItems.
func (mr *MockIDatasetRPCAdapterMockRecorder) ListDatasetItems(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetItems", reflect.TypeOf((*MockIDatasetRPCAdapter)(nil).ListDatasetItems), arg0, arg1)
}

// ListDatasetItemsByVersion mocks base method.
func (m *MockIDatasetRPCAdapter) ListDatasetItemsByVersion(arg0 context.Context, arg1 *rpc.ListDatasetItemsParam) ([]*entity.EvaluationSetItem, *int64, *string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatasetItemsByVersion", arg0, arg1)
	ret0, _ := ret[0].([]*entity.EvaluationSetItem)
	ret1, _ := ret[1].(*int64)
	ret2, _ := ret[2].(*string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ListDatasetItemsByVersion indicates an expected call of ListDatasetItemsByVersion.
func (mr *MockIDatasetRPCAdapterMockRecorder) ListDatasetItemsByVersion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetItemsByVersion", reflect.TypeOf((*MockIDatasetRPCAdapter)(nil).ListDatasetItemsByVersion), arg0, arg1)
}

// ListDatasetVersions mocks base method.
func (m *MockIDatasetRPCAdapter) ListDatasetVersions(arg0 context.Context, arg1, arg2 int64, arg3 *string, arg4, arg5 *int32, arg6 *string) ([]*entity.EvaluationSetVersion, *int64, *string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatasetVersions", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].([]*entity.EvaluationSetVersion)
	ret1, _ := ret[1].(*int64)
	ret2, _ := ret[2].(*string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ListDatasetVersions indicates an expected call of ListDatasetVersions.
func (mr *MockIDatasetRPCAdapterMockRecorder) ListDatasetVersions(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasetVersions", reflect.TypeOf((*MockIDatasetRPCAdapter)(nil).ListDatasetVersions), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// ListDatasets mocks base method.
func (m *MockIDatasetRPCAdapter) ListDatasets(arg0 context.Context, arg1 *rpc.ListDatasetsParam) ([]*entity.EvaluationSet, *int64, *string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDatasets", arg0, arg1)
	ret0, _ := ret[0].([]*entity.EvaluationSet)
	ret1, _ := ret[1].(*int64)
	ret2, _ := ret[2].(*string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// ListDatasets indicates an expected call of ListDatasets.
func (mr *MockIDatasetRPCAdapterMockRecorder) ListDatasets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDatasets", reflect.TypeOf((*MockIDatasetRPCAdapter)(nil).ListDatasets), arg0, arg1)
}

// QueryItemSnapshotMappings mocks base method.
func (m *MockIDatasetRPCAdapter) QueryItemSnapshotMappings(arg0 context.Context, arg1, arg2 int64, arg3 *int64) ([]*entity.ItemSnapshotFieldMapping, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryItemSnapshotMappings", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*entity.ItemSnapshotFieldMapping)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// QueryItemSnapshotMappings indicates an expected call of QueryItemSnapshotMappings.
func (mr *MockIDatasetRPCAdapterMockRecorder) QueryItemSnapshotMappings(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryItemSnapshotMappings", reflect.TypeOf((*MockIDatasetRPCAdapter)(nil).QueryItemSnapshotMappings), arg0, arg1, arg2, arg3)
}

// UpdateDataset mocks base method.
func (m *MockIDatasetRPCAdapter) UpdateDataset(arg0 context.Context, arg1, arg2 int64, arg3, arg4 *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDataset", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDataset indicates an expected call of UpdateDataset.
func (mr *MockIDatasetRPCAdapterMockRecorder) UpdateDataset(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDataset", reflect.TypeOf((*MockIDatasetRPCAdapter)(nil).UpdateDataset), arg0, arg1, arg2, arg3, arg4)
}

// UpdateDatasetItem mocks base method.
func (m *MockIDatasetRPCAdapter) UpdateDatasetItem(arg0 context.Context, arg1, arg2, arg3 int64, arg4 []*entity.Turn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDatasetItem", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDatasetItem indicates an expected call of UpdateDatasetItem.
func (mr *MockIDatasetRPCAdapterMockRecorder) UpdateDatasetItem(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDatasetItem", reflect.TypeOf((*MockIDatasetRPCAdapter)(nil).UpdateDatasetItem), arg0, arg1, arg2, arg3, arg4)
}

// UpdateDatasetSchema mocks base method.
func (m *MockIDatasetRPCAdapter) UpdateDatasetSchema(arg0 context.Context, arg1, arg2 int64, arg3 []*entity.FieldSchema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDatasetSchema", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDatasetSchema indicates an expected call of UpdateDatasetSchema.
func (mr *MockIDatasetRPCAdapterMockRecorder) UpdateDatasetSchema(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDatasetSchema", reflect.TypeOf((*MockIDatasetRPCAdapter)(nil).UpdateDatasetSchema), arg0, arg1, arg2, arg3)
}
