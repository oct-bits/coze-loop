// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package application

import (
	"github.com/coze-dev/coze-loop/backend/infra/ck"
	"github.com/coze-dev/coze-loop/backend/infra/db"
	"github.com/coze-dev/coze-loop/backend/infra/external/benefit"
	"github.com/coze-dev/coze-loop/backend/infra/metrics"
	"github.com/coze-dev/coze-loop/backend/infra/mq"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/data/tag/tagservice"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/evaluatorservice"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/auth/authservice"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/file/fileservice"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/user/userservice"
	config2 "github.com/coze-dev/coze-loop/backend/modules/observability/domain/component/config"
	"github.com/coze-dev/coze-loop/backend/modules/observability/domain/component/rpc"
	"github.com/coze-dev/coze-loop/backend/modules/observability/domain/trace/entity/collector/exporter"
	"github.com/coze-dev/coze-loop/backend/modules/observability/domain/trace/entity/collector/processor"
	"github.com/coze-dev/coze-loop/backend/modules/observability/domain/trace/entity/collector/receiver"
	repo2 "github.com/coze-dev/coze-loop/backend/modules/observability/domain/trace/repo"
	"github.com/coze-dev/coze-loop/backend/modules/observability/domain/trace/service"
	"github.com/coze-dev/coze-loop/backend/modules/observability/domain/trace/service/collector/exporter/clickhouseexporter"
	"github.com/coze-dev/coze-loop/backend/modules/observability/domain/trace/service/collector/processor/queueprocessor"
	"github.com/coze-dev/coze-loop/backend/modules/observability/domain/trace/service/collector/receiver/rmqreceiver"
	"github.com/coze-dev/coze-loop/backend/modules/observability/domain/trace/service/trace/span_filter"
	"github.com/coze-dev/coze-loop/backend/modules/observability/domain/trace/service/trace/span_processor"
	"github.com/coze-dev/coze-loop/backend/modules/observability/infra/config"
	metrics2 "github.com/coze-dev/coze-loop/backend/modules/observability/infra/metrics"
	"github.com/coze-dev/coze-loop/backend/modules/observability/infra/mq/producer"
	"github.com/coze-dev/coze-loop/backend/modules/observability/infra/repo"
	ck2 "github.com/coze-dev/coze-loop/backend/modules/observability/infra/repo/ck"
	"github.com/coze-dev/coze-loop/backend/modules/observability/infra/repo/mysql"
	"github.com/coze-dev/coze-loop/backend/modules/observability/infra/rpc/auth"
	"github.com/coze-dev/coze-loop/backend/modules/observability/infra/rpc/evaluator"
	"github.com/coze-dev/coze-loop/backend/modules/observability/infra/rpc/file"
	"github.com/coze-dev/coze-loop/backend/modules/observability/infra/rpc/tag"
	"github.com/coze-dev/coze-loop/backend/modules/observability/infra/rpc/user"
	"github.com/coze-dev/coze-loop/backend/pkg/conf"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitTraceApplication(db2 db.Provider, ckDb ck.Provider, meter metrics.Meter, mqFactory mq.IFactory, configFactory conf.IConfigLoaderFactory, fileClient fileservice.Client, benefit2 benefit.IBenefitService, authClient authservice.Client, userClient userservice.Client, evalService evaluatorservice.Client, tagService tagservice.Client) (ITraceApplication, error) {
	iSpansDao, err := ck2.NewSpansCkDaoImpl(ckDb)
	if err != nil {
		return nil, err
	}
	iAnnotationDao, err := ck2.NewAnnotationCkDaoImpl(ckDb)
	if err != nil {
		return nil, err
	}
	iConfigLoader, err := NewTraceConfigLoader(configFactory)
	if err != nil {
		return nil, err
	}
	iTraceConfig := config.NewTraceConfigCenter(iConfigLoader)
	iTraceRepo, err := repo.NewTraceCKRepoImpl(iSpansDao, iAnnotationDao, iTraceConfig)
	if err != nil {
		return nil, err
	}
	iTraceProducer, err := producer.NewTraceProducerImpl(iTraceConfig, mqFactory)
	if err != nil {
		return nil, err
	}
	iAnnotationProducer, err := producer.NewAnnotationProducerImpl(iTraceConfig, mqFactory)
	if err != nil {
		return nil, err
	}
	iTraceMetrics := metrics2.NewTraceMetricsImpl(meter)
	iFileProvider := file.NewFileRPCProvider(fileClient)
	traceFilterProcessorBuilder := NewTraceQueryProcessorBuilder(iTraceConfig, iFileProvider, benefit2)
	iTraceService, err := service.NewTraceServiceImpl(iTraceRepo, iTraceConfig, iTraceProducer, iAnnotationProducer, iTraceMetrics, traceFilterProcessorBuilder)
	if err != nil {
		return nil, err
	}
	iViewDao := mysql.NewViewDaoImpl(db2)
	iViewRepo := repo.NewViewRepoImpl(iViewDao)
	iAuthProvider := auth.NewAuthProvider(authClient)
	iEvaluatorRPCAdapter := evaluator.NewEvaluatorRPCProvider(evalService)
	iUserProvider := user.NewUserRPCProvider(userClient)
	iTagRPCAdapter := tag.NewTagRPCProvider(tagService)
	iTraceApplication, err := NewTraceApplication(iTraceService, iViewRepo, benefit2, iTraceMetrics, iTraceConfig, iAuthProvider, iEvaluatorRPCAdapter, iUserProvider, iTagRPCAdapter)
	if err != nil {
		return nil, err
	}
	return iTraceApplication, nil
}

func InitOpenAPIApplication(mqFactory mq.IFactory, configFactory conf.IConfigLoaderFactory, fileClient fileservice.Client, ckDb ck.Provider, benefit2 benefit.IBenefitService, authClient authservice.Client, meter metrics.Meter) (IObservabilityOpenAPIApplication, error) {
	iSpansDao, err := ck2.NewSpansCkDaoImpl(ckDb)
	if err != nil {
		return nil, err
	}
	iAnnotationDao, err := ck2.NewAnnotationCkDaoImpl(ckDb)
	if err != nil {
		return nil, err
	}
	iConfigLoader, err := NewTraceConfigLoader(configFactory)
	if err != nil {
		return nil, err
	}
	iTraceConfig := config.NewTraceConfigCenter(iConfigLoader)
	iTraceRepo, err := repo.NewTraceCKRepoImpl(iSpansDao, iAnnotationDao, iTraceConfig)
	if err != nil {
		return nil, err
	}
	iTraceProducer, err := producer.NewTraceProducerImpl(iTraceConfig, mqFactory)
	if err != nil {
		return nil, err
	}
	iAnnotationProducer, err := producer.NewAnnotationProducerImpl(iTraceConfig, mqFactory)
	if err != nil {
		return nil, err
	}
	iTraceMetrics := metrics2.NewTraceMetricsImpl(meter)
	iFileProvider := file.NewFileRPCProvider(fileClient)
	traceFilterProcessorBuilder := NewTraceQueryProcessorBuilder(iTraceConfig, iFileProvider, benefit2)
	iTraceService, err := service.NewTraceServiceImpl(iTraceRepo, iTraceConfig, iTraceProducer, iAnnotationProducer, iTraceMetrics, traceFilterProcessorBuilder)
	if err != nil {
		return nil, err
	}
	iAuthProvider := auth.NewAuthProvider(authClient)
	iObservabilityOpenAPIApplication, err := NewOpenAPIApplication(iTraceService, iAuthProvider, benefit2)
	if err != nil {
		return nil, err
	}
	return iObservabilityOpenAPIApplication, nil
}

func InitTraceIngestionApplication(configFactory conf.IConfigLoaderFactory, ckDb ck.Provider, mqFactory mq.IFactory) (ITraceIngestionApplication, error) {
	iConfigLoader, err := NewTraceConfigLoader(configFactory)
	if err != nil {
		return nil, err
	}
	iSpansDao, err := ck2.NewSpansCkDaoImpl(ckDb)
	if err != nil {
		return nil, err
	}
	iAnnotationDao, err := ck2.NewAnnotationCkDaoImpl(ckDb)
	if err != nil {
		return nil, err
	}
	iTraceConfig := config.NewTraceConfigCenter(iConfigLoader)
	iTraceRepo, err := repo.NewTraceCKRepoImpl(iSpansDao, iAnnotationDao, iTraceConfig)
	if err != nil {
		return nil, err
	}
	ingestionCollectorFactory := NewIngestionCollectorFactory(mqFactory, iTraceRepo)
	ingestionService, err := service.NewIngestionServiceImpl(iConfigLoader, ingestionCollectorFactory)
	if err != nil {
		return nil, err
	}
	iTraceIngestionApplication := NewIngestionApplication(ingestionService)
	return iTraceIngestionApplication, nil
}

// wire.go:

var (
	traceDomainSet = wire.NewSet(service.NewTraceServiceImpl, repo.NewTraceCKRepoImpl, ck2.NewSpansCkDaoImpl, ck2.NewAnnotationCkDaoImpl, metrics2.NewTraceMetricsImpl, producer.NewTraceProducerImpl, producer.NewAnnotationProducerImpl, file.NewFileRPCProvider, NewTraceConfigLoader,
		NewTraceQueryProcessorBuilder, config.NewTraceConfigCenter,
	)
	traceSet = wire.NewSet(
		NewTraceApplication, repo.NewViewRepoImpl, mysql.NewViewDaoImpl, auth.NewAuthProvider, user.NewUserRPCProvider, tag.NewTagRPCProvider, evaluator.NewEvaluatorRPCProvider, traceDomainSet,
	)
	traceIngestionSet = wire.NewSet(
		NewIngestionApplication, service.NewIngestionServiceImpl, repo.NewTraceCKRepoImpl, ck2.NewSpansCkDaoImpl, ck2.NewAnnotationCkDaoImpl, config.NewTraceConfigCenter, NewTraceConfigLoader,
		NewIngestionCollectorFactory,
	)
	openApiSet = wire.NewSet(
		NewOpenAPIApplication, auth.NewAuthProvider, traceDomainSet,
	)
)

func NewTraceQueryProcessorBuilder(
	traceConfig config2.ITraceConfig,
	fileProvider rpc.IFileProvider,
	benefitSvc benefit.IBenefitService,
) service.TraceFilterProcessorBuilder {
	return service.NewTraceFilterProcessorBuilder(span_filter.NewPlatformFilterFactory(
		[]span_filter.Factory{span_filter.NewCozeLoopFilterFactory(), span_filter.NewPromptFilterFactory(traceConfig), span_filter.NewEvaluatorFilterFactory(), span_filter.NewEvalTargetFilterFactory()}), []span_processor.Factory{span_processor.NewPlatformProcessorFactory(traceConfig), span_processor.NewCheckProcessorFactory(), span_processor.NewAttrTosProcessorFactory(fileProvider), span_processor.NewExpireErrorProcessorFactory(benefitSvc)},

		[]span_processor.Factory{span_processor.NewAttrTosProcessorFactory(fileProvider), span_processor.NewExpireErrorProcessorFactory(benefitSvc)},

		[]span_processor.Factory{span_processor.NewCheckProcessorFactory()})
}

func NewIngestionCollectorFactory(mqFactory mq.IFactory, traceRepo repo2.ITraceRepo) service.IngestionCollectorFactory {
	return service.NewIngestionCollectorFactory(
		[]receiver.Factory{rmqreceiver.NewFactory(mqFactory)},
		[]processor.Factory{queueprocessor.NewFactory()},
		[]exporter.Factory{clickhouseexporter.NewFactory(traceRepo)},
	)
}

func NewTraceConfigLoader(confFactory conf.IConfigLoaderFactory) (conf.IConfigLoader, error) {
	return confFactory.NewConfigLoader("observability.yaml")
}
