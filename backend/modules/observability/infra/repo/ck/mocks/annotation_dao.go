// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/observability/infra/repo/ck (interfaces: IAnnotationDao)
//
// Generated by this command:
//
//	mockgen -destination=mocks/annotation_dao.go -package=mocks . IAnnotationDao
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	ck "github.com/coze-dev/coze-loop/backend/modules/observability/infra/repo/ck"
	model "github.com/coze-dev/coze-loop/backend/modules/observability/infra/repo/ck/gorm_gen/model"
	gomock "go.uber.org/mock/gomock"
)

// MockIAnnotationDao is a mock of IAnnotationDao interface.
type MockIAnnotationDao struct {
	ctrl     *gomock.Controller
	recorder *MockIAnnotationDaoMockRecorder
	isgomock struct{}
}

// MockIAnnotationDaoMockRecorder is the mock recorder for MockIAnnotationDao.
type MockIAnnotationDaoMockRecorder struct {
	mock *MockIAnnotationDao
}

// NewMockIAnnotationDao creates a new mock instance.
func NewMockIAnnotationDao(ctrl *gomock.Controller) *MockIAnnotationDao {
	mock := &MockIAnnotationDao{ctrl: ctrl}
	mock.recorder = &MockIAnnotationDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAnnotationDao) EXPECT() *MockIAnnotationDaoMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockIAnnotationDao) Get(arg0 context.Context, arg1 *ck.GetAnnotationParam) (*model.ObservabilityAnnotation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*model.ObservabilityAnnotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIAnnotationDaoMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIAnnotationDao)(nil).Get), arg0, arg1)
}

// Insert mocks base method.
func (m *MockIAnnotationDao) Insert(arg0 context.Context, arg1 *ck.InsertAnnotationParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockIAnnotationDaoMockRecorder) Insert(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIAnnotationDao)(nil).Insert), arg0, arg1)
}

// List mocks base method.
func (m *MockIAnnotationDao) List(arg0 context.Context, arg1 *ck.ListAnnotationsParam) ([]*model.ObservabilityAnnotation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*model.ObservabilityAnnotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIAnnotationDaoMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIAnnotationDao)(nil).List), arg0, arg1)
}
