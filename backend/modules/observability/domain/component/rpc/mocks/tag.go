// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/observability/domain/component/rpc (interfaces: ITagRPCAdapter)
//
// Generated by this command:
//
//	mockgen -destination=mocks/tag.go -package=mocks . ITagRPCAdapter
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	rpc "github.com/coze-dev/coze-loop/backend/modules/observability/domain/component/rpc"
	gomock "go.uber.org/mock/gomock"
)

// MockITagRPCAdapter is a mock of ITagRPCAdapter interface.
type MockITagRPCAdapter struct {
	ctrl     *gomock.Controller
	recorder *MockITagRPCAdapterMockRecorder
	isgomock struct{}
}

// MockITagRPCAdapterMockRecorder is the mock recorder for MockITagRPCAdapter.
type MockITagRPCAdapterMockRecorder struct {
	mock *MockITagRPCAdapter
}

// NewMockITagRPCAdapter creates a new mock instance.
func NewMockITagRPCAdapter(ctrl *gomock.Controller) *MockITagRPCAdapter {
	mock := &MockITagRPCAdapter{ctrl: ctrl}
	mock.recorder = &MockITagRPCAdapterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITagRPCAdapter) EXPECT() *MockITagRPCAdapterMockRecorder {
	return m.recorder
}

// BatchGetTagInfo mocks base method.
func (m *MockITagRPCAdapter) BatchGetTagInfo(arg0 context.Context, arg1 int64, arg2 []string) (map[int64]*rpc.TagInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchGetTagInfo", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[int64]*rpc.TagInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchGetTagInfo indicates an expected call of BatchGetTagInfo.
func (mr *MockITagRPCAdapterMockRecorder) BatchGetTagInfo(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchGetTagInfo", reflect.TypeOf((*MockITagRPCAdapter)(nil).BatchGetTagInfo), arg0, arg1, arg2)
}

// GetTagInfo mocks base method.
func (m *MockITagRPCAdapter) GetTagInfo(arg0 context.Context, arg1 int64, arg2 string) (*rpc.TagInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTagInfo", arg0, arg1, arg2)
	ret0, _ := ret[0].(*rpc.TagInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTagInfo indicates an expected call of GetTagInfo.
func (mr *MockITagRPCAdapterMockRecorder) GetTagInfo(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTagInfo", reflect.TypeOf((*MockITagRPCAdapter)(nil).GetTagInfo), arg0, arg1, arg2)
}
