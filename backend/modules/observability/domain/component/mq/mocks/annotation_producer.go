// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/observability/domain/component/mq (interfaces: IAnnotationProducer)
//
// Generated by this command:
//
//	mockgen -destination=mocks/annotation_producer.go -package=mocks . IAnnotationProducer
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/observability/domain/trace/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockIAnnotationProducer is a mock of IAnnotationProducer interface.
type MockIAnnotationProducer struct {
	ctrl     *gomock.Controller
	recorder *MockIAnnotationProducerMockRecorder
	isgomock struct{}
}

// MockIAnnotationProducerMockRecorder is the mock recorder for MockIAnnotationProducer.
type MockIAnnotationProducerMockRecorder struct {
	mock *MockIAnnotationProducer
}

// NewMockIAnnotationProducer creates a new mock instance.
func NewMockIAnnotationProducer(ctrl *gomock.Controller) *MockIAnnotationProducer {
	mock := &MockIAnnotationProducer{ctrl: ctrl}
	mock.recorder = &MockIAnnotationProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAnnotationProducer) EXPECT() *MockIAnnotationProducerMockRecorder {
	return m.recorder
}

// SendAnnotation mocks base method.
func (m *MockIAnnotationProducer) SendAnnotation(ctx context.Context, message *entity.AnnotationEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAnnotation", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAnnotation indicates an expected call of SendAnnotation.
func (mr *MockIAnnotationProducerMockRecorder) SendAnnotation(ctx, message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAnnotation", reflect.TypeOf((*MockIAnnotationProducer)(nil).SendAnnotation), ctx, message)
}
