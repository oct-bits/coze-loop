// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/observability/domain/component/config (interfaces: ITraceConfig)
//
// Generated by this command:
//
//	mockgen -destination=mocks/config.go -package=mocks . ITraceConfig
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	config "github.com/coze-dev/coze-loop/backend/modules/observability/domain/component/config"
	conf "github.com/coze-dev/coze-loop/backend/pkg/conf"
	gomock "go.uber.org/mock/gomock"
)

// MockITraceConfig is a mock of ITraceConfig interface.
type MockITraceConfig struct {
	ctrl     *gomock.Controller
	recorder *MockITraceConfigMockRecorder
	isgomock struct{}
}

// MockITraceConfigMockRecorder is the mock recorder for MockITraceConfig.
type MockITraceConfigMockRecorder struct {
	mock *MockITraceConfig
}

// NewMockITraceConfig creates a new mock instance.
func NewMockITraceConfig(ctrl *gomock.Controller) *MockITraceConfig {
	mock := &MockITraceConfig{ctrl: ctrl}
	mock.recorder = &MockITraceConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITraceConfig) EXPECT() *MockITraceConfigMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockITraceConfig) Get(ctx context.Context, key string) any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(any)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockITraceConfigMockRecorder) Get(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockITraceConfig)(nil).Get), ctx, key)
}

// GetAnnotationMqProducerCfg mocks base method.
func (m *MockITraceConfig) GetAnnotationMqProducerCfg(ctx context.Context) (*config.MqProducerCfg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnnotationMqProducerCfg", ctx)
	ret0, _ := ret[0].(*config.MqProducerCfg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnnotationMqProducerCfg indicates an expected call of GetAnnotationMqProducerCfg.
func (mr *MockITraceConfigMockRecorder) GetAnnotationMqProducerCfg(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnnotationMqProducerCfg", reflect.TypeOf((*MockITraceConfig)(nil).GetAnnotationMqProducerCfg), ctx)
}

// GetAnnotationSourceCfg mocks base method.
func (m *MockITraceConfig) GetAnnotationSourceCfg(ctx context.Context) (*config.AnnotationSourceConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnnotationSourceCfg", ctx)
	ret0, _ := ret[0].(*config.AnnotationSourceConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnnotationSourceCfg indicates an expected call of GetAnnotationSourceCfg.
func (mr *MockITraceConfigMockRecorder) GetAnnotationSourceCfg(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnnotationSourceCfg", reflect.TypeOf((*MockITraceConfig)(nil).GetAnnotationSourceCfg), ctx)
}

// GetDefaultTraceTenant mocks base method.
func (m *MockITraceConfig) GetDefaultTraceTenant(ctx context.Context) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultTraceTenant", ctx)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDefaultTraceTenant indicates an expected call of GetDefaultTraceTenant.
func (mr *MockITraceConfigMockRecorder) GetDefaultTraceTenant(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultTraceTenant", reflect.TypeOf((*MockITraceConfig)(nil).GetDefaultTraceTenant), ctx)
}

// GetPlatformSpansTrans mocks base method.
func (m *MockITraceConfig) GetPlatformSpansTrans(ctx context.Context) (*config.SpanTransHandlerConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlatformSpansTrans", ctx)
	ret0, _ := ret[0].(*config.SpanTransHandlerConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlatformSpansTrans indicates an expected call of GetPlatformSpansTrans.
func (mr *MockITraceConfigMockRecorder) GetPlatformSpansTrans(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlatformSpansTrans", reflect.TypeOf((*MockITraceConfig)(nil).GetPlatformSpansTrans), ctx)
}

// GetPlatformTenants mocks base method.
func (m *MockITraceConfig) GetPlatformTenants(ctx context.Context) (*config.PlatformTenantsCfg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlatformTenants", ctx)
	ret0, _ := ret[0].(*config.PlatformTenantsCfg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlatformTenants indicates an expected call of GetPlatformTenants.
func (mr *MockITraceConfigMockRecorder) GetPlatformTenants(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlatformTenants", reflect.TypeOf((*MockITraceConfig)(nil).GetPlatformTenants), ctx)
}

// GetSystemViews mocks base method.
func (m *MockITraceConfig) GetSystemViews(ctx context.Context) ([]*config.SystemView, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSystemViews", ctx)
	ret0, _ := ret[0].([]*config.SystemView)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSystemViews indicates an expected call of GetSystemViews.
func (mr *MockITraceConfigMockRecorder) GetSystemViews(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSystemViews", reflect.TypeOf((*MockITraceConfig)(nil).GetSystemViews), ctx)
}

// GetTenantConfig mocks base method.
func (m *MockITraceConfig) GetTenantConfig(ctx context.Context) (*config.TenantCfg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTenantConfig", ctx)
	ret0, _ := ret[0].(*config.TenantCfg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTenantConfig indicates an expected call of GetTenantConfig.
func (mr *MockITraceConfigMockRecorder) GetTenantConfig(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTenantConfig", reflect.TypeOf((*MockITraceConfig)(nil).GetTenantConfig), ctx)
}

// GetTraceAttrTosCfg mocks base method.
func (m *MockITraceConfig) GetTraceAttrTosCfg(ctx context.Context) (*config.TraceAttrTosCfg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTraceAttrTosCfg", ctx)
	ret0, _ := ret[0].(*config.TraceAttrTosCfg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTraceAttrTosCfg indicates an expected call of GetTraceAttrTosCfg.
func (mr *MockITraceConfigMockRecorder) GetTraceAttrTosCfg(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraceAttrTosCfg", reflect.TypeOf((*MockITraceConfig)(nil).GetTraceAttrTosCfg), ctx)
}

// GetTraceCkCfg mocks base method.
func (m *MockITraceConfig) GetTraceCkCfg(ctx context.Context) (*config.TraceCKCfg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTraceCkCfg", ctx)
	ret0, _ := ret[0].(*config.TraceCKCfg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTraceCkCfg indicates an expected call of GetTraceCkCfg.
func (mr *MockITraceConfigMockRecorder) GetTraceCkCfg(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraceCkCfg", reflect.TypeOf((*MockITraceConfig)(nil).GetTraceCkCfg), ctx)
}

// GetTraceDataMaxDurationDay mocks base method.
func (m *MockITraceConfig) GetTraceDataMaxDurationDay(ctx context.Context, platformType *string) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTraceDataMaxDurationDay", ctx, platformType)
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetTraceDataMaxDurationDay indicates an expected call of GetTraceDataMaxDurationDay.
func (mr *MockITraceConfigMockRecorder) GetTraceDataMaxDurationDay(ctx, platformType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraceDataMaxDurationDay", reflect.TypeOf((*MockITraceConfig)(nil).GetTraceDataMaxDurationDay), ctx, platformType)
}

// GetTraceFieldMetaInfo mocks base method.
func (m *MockITraceConfig) GetTraceFieldMetaInfo(ctx context.Context) (*config.TraceFieldMetaInfoCfg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTraceFieldMetaInfo", ctx)
	ret0, _ := ret[0].(*config.TraceFieldMetaInfoCfg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTraceFieldMetaInfo indicates an expected call of GetTraceFieldMetaInfo.
func (mr *MockITraceConfigMockRecorder) GetTraceFieldMetaInfo(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraceFieldMetaInfo", reflect.TypeOf((*MockITraceConfig)(nil).GetTraceFieldMetaInfo), ctx)
}

// GetTraceMqProducerCfg mocks base method.
func (m *MockITraceConfig) GetTraceMqProducerCfg(ctx context.Context) (*config.MqProducerCfg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTraceMqProducerCfg", ctx)
	ret0, _ := ret[0].(*config.MqProducerCfg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTraceMqProducerCfg indicates an expected call of GetTraceMqProducerCfg.
func (mr *MockITraceConfigMockRecorder) GetTraceMqProducerCfg(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraceMqProducerCfg", reflect.TypeOf((*MockITraceConfig)(nil).GetTraceMqProducerCfg), ctx)
}

// Unmarshal mocks base method.
func (m *MockITraceConfig) Unmarshal(ctx context.Context, value any, opts ...conf.DecodeOptionFn) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, value}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Unmarshal", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmarshal indicates an expected call of Unmarshal.
func (mr *MockITraceConfigMockRecorder) Unmarshal(ctx, value any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, value}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmarshal", reflect.TypeOf((*MockITraceConfig)(nil).Unmarshal), varargs...)
}

// UnmarshalKey mocks base method.
func (m *MockITraceConfig) UnmarshalKey(ctx context.Context, key string, value any, opts ...conf.DecodeOptionFn) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, key, value}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UnmarshalKey", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmarshalKey indicates an expected call of UnmarshalKey.
func (mr *MockITraceConfigMockRecorder) UnmarshalKey(ctx, key, value any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, key, value}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalKey", reflect.TypeOf((*MockITraceConfig)(nil).UnmarshalKey), varargs...)
}
