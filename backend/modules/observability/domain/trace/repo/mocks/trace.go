// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/observability/domain/trace/repo (interfaces: ITraceRepo)
//
// Generated by this command:
//
//	mockgen -destination=mocks/trace.go -package=mocks . ITraceRepo
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	loop_span "github.com/coze-dev/coze-loop/backend/modules/observability/domain/trace/entity/loop_span"
	repo "github.com/coze-dev/coze-loop/backend/modules/observability/domain/trace/repo"
	gomock "go.uber.org/mock/gomock"
)

// MockITraceRepo is a mock of ITraceRepo interface.
type MockITraceRepo struct {
	ctrl     *gomock.Controller
	recorder *MockITraceRepoMockRecorder
	isgomock struct{}
}

// MockITraceRepoMockRecorder is the mock recorder for MockITraceRepo.
type MockITraceRepoMockRecorder struct {
	mock *MockITraceRepo
}

// NewMockITraceRepo creates a new mock instance.
func NewMockITraceRepo(ctrl *gomock.Controller) *MockITraceRepo {
	mock := &MockITraceRepo{ctrl: ctrl}
	mock.recorder = &MockITraceRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITraceRepo) EXPECT() *MockITraceRepoMockRecorder {
	return m.recorder
}

// GetAnnotation mocks base method.
func (m *MockITraceRepo) GetAnnotation(arg0 context.Context, arg1 *repo.GetAnnotationParam) (*loop_span.Annotation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnnotation", arg0, arg1)
	ret0, _ := ret[0].(*loop_span.Annotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnnotation indicates an expected call of GetAnnotation.
func (mr *MockITraceRepoMockRecorder) GetAnnotation(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnnotation", reflect.TypeOf((*MockITraceRepo)(nil).GetAnnotation), arg0, arg1)
}

// GetTrace mocks base method.
func (m *MockITraceRepo) GetTrace(arg0 context.Context, arg1 *repo.GetTraceParam) (loop_span.SpanList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrace", arg0, arg1)
	ret0, _ := ret[0].(loop_span.SpanList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrace indicates an expected call of GetTrace.
func (mr *MockITraceRepoMockRecorder) GetTrace(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrace", reflect.TypeOf((*MockITraceRepo)(nil).GetTrace), arg0, arg1)
}

// InsertAnnotation mocks base method.
func (m *MockITraceRepo) InsertAnnotation(arg0 context.Context, arg1 *repo.InsertAnnotationParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertAnnotation", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertAnnotation indicates an expected call of InsertAnnotation.
func (mr *MockITraceRepoMockRecorder) InsertAnnotation(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertAnnotation", reflect.TypeOf((*MockITraceRepo)(nil).InsertAnnotation), arg0, arg1)
}

// InsertSpans mocks base method.
func (m *MockITraceRepo) InsertSpans(arg0 context.Context, arg1 *repo.InsertTraceParam) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertSpans", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertSpans indicates an expected call of InsertSpans.
func (mr *MockITraceRepoMockRecorder) InsertSpans(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertSpans", reflect.TypeOf((*MockITraceRepo)(nil).InsertSpans), arg0, arg1)
}

// ListAnnotations mocks base method.
func (m *MockITraceRepo) ListAnnotations(arg0 context.Context, arg1 *repo.ListAnnotationsParam) (loop_span.AnnotationList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnnotations", arg0, arg1)
	ret0, _ := ret[0].(loop_span.AnnotationList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnnotations indicates an expected call of ListAnnotations.
func (mr *MockITraceRepoMockRecorder) ListAnnotations(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnnotations", reflect.TypeOf((*MockITraceRepo)(nil).ListAnnotations), arg0, arg1)
}

// ListSpans mocks base method.
func (m *MockITraceRepo) ListSpans(arg0 context.Context, arg1 *repo.ListSpansParam) (*repo.ListSpansResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSpans", arg0, arg1)
	ret0, _ := ret[0].(*repo.ListSpansResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSpans indicates an expected call of ListSpans.
func (mr *MockITraceRepoMockRecorder) ListSpans(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSpans", reflect.TypeOf((*MockITraceRepo)(nil).ListSpans), arg0, arg1)
}
