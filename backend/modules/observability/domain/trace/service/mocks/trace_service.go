// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/observability/domain/trace/service (interfaces: ITraceService)
//
// Generated by this command:
//
//	mockgen -destination=mocks/trace_service.go -package=mocks . ITraceService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/observability/domain/trace/entity"
	service "github.com/coze-dev/coze-loop/backend/modules/observability/domain/trace/service"
	gomock "go.uber.org/mock/gomock"
)

// MockITraceService is a mock of ITraceService interface.
type MockITraceService struct {
	ctrl     *gomock.Controller
	recorder *MockITraceServiceMockRecorder
	isgomock struct{}
}

// MockITraceServiceMockRecorder is the mock recorder for MockITraceService.
type MockITraceServiceMockRecorder struct {
	mock *MockITraceService
}

// NewMockITraceService creates a new mock instance.
func NewMockITraceService(ctrl *gomock.Controller) *MockITraceService {
	mock := &MockITraceService{ctrl: ctrl}
	mock.recorder = &MockITraceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITraceService) EXPECT() *MockITraceServiceMockRecorder {
	return m.recorder
}

// CreateAnnotation mocks base method.
func (m *MockITraceService) CreateAnnotation(ctx context.Context, req *service.CreateAnnotationReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnnotation", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAnnotation indicates an expected call of CreateAnnotation.
func (mr *MockITraceServiceMockRecorder) CreateAnnotation(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnnotation", reflect.TypeOf((*MockITraceService)(nil).CreateAnnotation), ctx, req)
}

// CreateManualAnnotation mocks base method.
func (m *MockITraceService) CreateManualAnnotation(ctx context.Context, req *service.CreateManualAnnotationReq) (*service.CreateManualAnnotationResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateManualAnnotation", ctx, req)
	ret0, _ := ret[0].(*service.CreateManualAnnotationResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateManualAnnotation indicates an expected call of CreateManualAnnotation.
func (mr *MockITraceServiceMockRecorder) CreateManualAnnotation(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateManualAnnotation", reflect.TypeOf((*MockITraceService)(nil).CreateManualAnnotation), ctx, req)
}

// DeleteAnnotation mocks base method.
func (m *MockITraceService) DeleteAnnotation(ctx context.Context, req *service.DeleteAnnotationReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnnotation", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnnotation indicates an expected call of DeleteAnnotation.
func (mr *MockITraceServiceMockRecorder) DeleteAnnotation(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnnotation", reflect.TypeOf((*MockITraceService)(nil).DeleteAnnotation), ctx, req)
}

// DeleteManualAnnotation mocks base method.
func (m *MockITraceService) DeleteManualAnnotation(ctx context.Context, req *service.DeleteManualAnnotationReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteManualAnnotation", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteManualAnnotation indicates an expected call of DeleteManualAnnotation.
func (mr *MockITraceServiceMockRecorder) DeleteManualAnnotation(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteManualAnnotation", reflect.TypeOf((*MockITraceService)(nil).DeleteManualAnnotation), ctx, req)
}

// GetTrace mocks base method.
func (m *MockITraceService) GetTrace(ctx context.Context, req *service.GetTraceReq) (*service.GetTraceResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrace", ctx, req)
	ret0, _ := ret[0].(*service.GetTraceResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrace indicates an expected call of GetTrace.
func (mr *MockITraceServiceMockRecorder) GetTrace(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrace", reflect.TypeOf((*MockITraceService)(nil).GetTrace), ctx, req)
}

// GetTracesAdvanceInfo mocks base method.
func (m *MockITraceService) GetTracesAdvanceInfo(ctx context.Context, req *service.GetTracesAdvanceInfoReq) (*service.GetTracesAdvanceInfoResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTracesAdvanceInfo", ctx, req)
	ret0, _ := ret[0].(*service.GetTracesAdvanceInfoResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTracesAdvanceInfo indicates an expected call of GetTracesAdvanceInfo.
func (mr *MockITraceServiceMockRecorder) GetTracesAdvanceInfo(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTracesAdvanceInfo", reflect.TypeOf((*MockITraceService)(nil).GetTracesAdvanceInfo), ctx, req)
}

// GetTracesMetaInfo mocks base method.
func (m *MockITraceService) GetTracesMetaInfo(ctx context.Context, req *service.GetTracesMetaInfoReq) (*service.GetTracesMetaInfoResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTracesMetaInfo", ctx, req)
	ret0, _ := ret[0].(*service.GetTracesMetaInfoResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTracesMetaInfo indicates an expected call of GetTracesMetaInfo.
func (mr *MockITraceServiceMockRecorder) GetTracesMetaInfo(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTracesMetaInfo", reflect.TypeOf((*MockITraceService)(nil).GetTracesMetaInfo), ctx, req)
}

// IngestTraces mocks base method.
func (m *MockITraceService) IngestTraces(ctx context.Context, req *service.IngestTracesReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IngestTraces", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// IngestTraces indicates an expected call of IngestTraces.
func (mr *MockITraceServiceMockRecorder) IngestTraces(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IngestTraces", reflect.TypeOf((*MockITraceService)(nil).IngestTraces), ctx, req)
}

// ListAnnotations mocks base method.
func (m *MockITraceService) ListAnnotations(ctx context.Context, req *service.ListAnnotationsReq) (*service.ListAnnotationsResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnnotations", ctx, req)
	ret0, _ := ret[0].(*service.ListAnnotationsResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnnotations indicates an expected call of ListAnnotations.
func (mr *MockITraceServiceMockRecorder) ListAnnotations(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnnotations", reflect.TypeOf((*MockITraceService)(nil).ListAnnotations), ctx, req)
}

// ListSpans mocks base method.
func (m *MockITraceService) ListSpans(ctx context.Context, req *service.ListSpansReq) (*service.ListSpansResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSpans", ctx, req)
	ret0, _ := ret[0].(*service.ListSpansResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSpans indicates an expected call of ListSpans.
func (mr *MockITraceServiceMockRecorder) ListSpans(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSpans", reflect.TypeOf((*MockITraceService)(nil).ListSpans), ctx, req)
}

// Send mocks base method.
func (m *MockITraceService) Send(ctx context.Context, msg *entity.AnnotationEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", ctx, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockITraceServiceMockRecorder) Send(ctx, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockITraceService)(nil).Send), ctx, msg)
}

// UpdateManualAnnotation mocks base method.
func (m *MockITraceService) UpdateManualAnnotation(ctx context.Context, req *service.UpdateManualAnnotationReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateManualAnnotation", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateManualAnnotation indicates an expected call of UpdateManualAnnotation.
func (mr *MockITraceServiceMockRecorder) UpdateManualAnnotation(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateManualAnnotation", reflect.TypeOf((*MockITraceService)(nil).UpdateManualAnnotation), ctx, req)
}
