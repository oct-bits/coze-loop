// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/observability/domain/trace/service (interfaces: TraceFilterProcessorBuilder)
//
// Generated by this command:
//
//	mockgen -destination=mocks/span_processor.go -package=mocks . TraceFilterProcessorBuilder
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	loop_span "github.com/coze-dev/coze-loop/backend/modules/observability/domain/trace/entity/loop_span"
	span_filter "github.com/coze-dev/coze-loop/backend/modules/observability/domain/trace/service/trace/span_filter"
	span_processor "github.com/coze-dev/coze-loop/backend/modules/observability/domain/trace/service/trace/span_processor"
	gomock "go.uber.org/mock/gomock"
)

// MockTraceFilterProcessorBuilder is a mock of TraceFilterProcessorBuilder interface.
type MockTraceFilterProcessorBuilder struct {
	ctrl     *gomock.Controller
	recorder *MockTraceFilterProcessorBuilderMockRecorder
	isgomock struct{}
}

// MockTraceFilterProcessorBuilderMockRecorder is the mock recorder for MockTraceFilterProcessorBuilder.
type MockTraceFilterProcessorBuilderMockRecorder struct {
	mock *MockTraceFilterProcessorBuilder
}

// NewMockTraceFilterProcessorBuilder creates a new mock instance.
func NewMockTraceFilterProcessorBuilder(ctrl *gomock.Controller) *MockTraceFilterProcessorBuilder {
	mock := &MockTraceFilterProcessorBuilder{ctrl: ctrl}
	mock.recorder = &MockTraceFilterProcessorBuilderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTraceFilterProcessorBuilder) EXPECT() *MockTraceFilterProcessorBuilderMockRecorder {
	return m.recorder
}

// BuildAdvanceInfoProcessors mocks base method.
func (m *MockTraceFilterProcessorBuilder) BuildAdvanceInfoProcessors(arg0 context.Context, arg1 span_processor.Settings) ([]span_processor.Processor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildAdvanceInfoProcessors", arg0, arg1)
	ret0, _ := ret[0].([]span_processor.Processor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildAdvanceInfoProcessors indicates an expected call of BuildAdvanceInfoProcessors.
func (mr *MockTraceFilterProcessorBuilderMockRecorder) BuildAdvanceInfoProcessors(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildAdvanceInfoProcessors", reflect.TypeOf((*MockTraceFilterProcessorBuilder)(nil).BuildAdvanceInfoProcessors), arg0, arg1)
}

// BuildGetTraceProcessors mocks base method.
func (m *MockTraceFilterProcessorBuilder) BuildGetTraceProcessors(arg0 context.Context, arg1 span_processor.Settings) ([]span_processor.Processor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildGetTraceProcessors", arg0, arg1)
	ret0, _ := ret[0].([]span_processor.Processor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildGetTraceProcessors indicates an expected call of BuildGetTraceProcessors.
func (mr *MockTraceFilterProcessorBuilderMockRecorder) BuildGetTraceProcessors(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildGetTraceProcessors", reflect.TypeOf((*MockTraceFilterProcessorBuilder)(nil).BuildGetTraceProcessors), arg0, arg1)
}

// BuildListSpansProcessors mocks base method.
func (m *MockTraceFilterProcessorBuilder) BuildListSpansProcessors(arg0 context.Context, arg1 span_processor.Settings) ([]span_processor.Processor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildListSpansProcessors", arg0, arg1)
	ret0, _ := ret[0].([]span_processor.Processor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildListSpansProcessors indicates an expected call of BuildListSpansProcessors.
func (mr *MockTraceFilterProcessorBuilderMockRecorder) BuildListSpansProcessors(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildListSpansProcessors", reflect.TypeOf((*MockTraceFilterProcessorBuilder)(nil).BuildListSpansProcessors), arg0, arg1)
}

// BuildPlatformRelatedFilter mocks base method.
func (m *MockTraceFilterProcessorBuilder) BuildPlatformRelatedFilter(arg0 context.Context, arg1 loop_span.PlatformType) (span_filter.Filter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildPlatformRelatedFilter", arg0, arg1)
	ret0, _ := ret[0].(span_filter.Filter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildPlatformRelatedFilter indicates an expected call of BuildPlatformRelatedFilter.
func (mr *MockTraceFilterProcessorBuilderMockRecorder) BuildPlatformRelatedFilter(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildPlatformRelatedFilter", reflect.TypeOf((*MockTraceFilterProcessorBuilder)(nil).BuildPlatformRelatedFilter), arg0, arg1)
}
