// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coze-dev/coze-loop/backend/modules/llm/domain/service/llmfactory (interfaces: IFactory)
//
// Generated by this command:
//
//	mockgen -destination=mocks/factory.go -package=mocks . IFactory
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/coze-dev/coze-loop/backend/modules/llm/domain/entity"
	llminterface "github.com/coze-dev/coze-loop/backend/modules/llm/domain/service/llminterface"
	gomock "go.uber.org/mock/gomock"
)

// MockIFactory is a mock of IFactory interface.
type MockIFactory struct {
	ctrl     *gomock.Controller
	recorder *MockIFactoryMockRecorder
	isgomock struct{}
}

// MockIFactoryMockRecorder is the mock recorder for MockIFactory.
type MockIFactoryMockRecorder struct {
	mock *MockIFactory
}

// NewMockIFactory creates a new mock instance.
func NewMockIFactory(ctrl *gomock.Controller) *MockIFactory {
	mock := &MockIFactory{ctrl: ctrl}
	mock.recorder = &MockIFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFactory) EXPECT() *MockIFactoryMockRecorder {
	return m.recorder
}

// CreateLLM mocks base method.
func (m *MockIFactory) CreateLLM(ctx context.Context, model *entity.Model, opts ...entity.Option) (llminterface.ILLM, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, model}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateLLM", varargs...)
	ret0, _ := ret[0].(llminterface.ILLM)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLLM indicates an expected call of CreateLLM.
func (mr *MockIFactoryMockRecorder) CreateLLM(ctx, model any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, model}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLLM", reflect.TypeOf((*MockIFactory)(nil).CreateLLM), varargs...)
}
