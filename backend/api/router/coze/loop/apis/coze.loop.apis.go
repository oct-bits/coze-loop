// Code generated by hertz generator. DO NOT EDIT.

package apis

import (
	"github.com/cloudwego/hertz/pkg/app/server"

	apis "github.com/coze-dev/coze-loop/backend/api/handler/coze/loop/apis"
)

/*
 This file will register all the routes of the services in the master idl.
 And it will update automatically when you use the "update" command for the idl.
 So don't modify the contents of the file, or your code will be deleted when it is updated.
*/

// Register register routes based on the IDL 'api.${HTTP Method}' annotation.
func Register(r *server.Hertz, handler *apis.APIHandler) {

	root := r.Group("/", rootMw(handler)...)
	{
		_api := root.Group("/api", _apiMw(handler)...)
		{
			_auth := _api.Group("/auth", _authMw(handler)...)
			{
				_v1 := _auth.Group("/v1", _v1Mw(handler)...)
				_v1.POST("/personal_access_tokens", append(_personal_access_tokensMw(handler), apis.CreatePersonalAccessToken)...)
				_personal_access_tokens := _v1.Group("/personal_access_tokens", _personal_access_tokensMw(handler)...)
				_personal_access_tokens.DELETE("/:id", append(_deletepersonalaccesstokenMw(handler), apis.DeletePersonalAccessToken)...)
				_personal_access_tokens.GET("/:id", append(_getpersonalaccesstokenMw(handler), apis.GetPersonalAccessToken)...)
				_personal_access_tokens.PUT("/:id", append(_updatepersonalaccesstokenMw(handler), apis.UpdatePersonalAccessToken)...)
				_personal_access_tokens.POST("/list", append(_listpersonalaccesstokenMw(handler), apis.ListPersonalAccessToken)...)
			}
		}
		{
			_data := _api.Group("/data", _dataMw(handler)...)
			{
				_v10 := _data.Group("/v1", _v10Mw(handler)...)
				_v10.POST("/datasets", append(_datasetsMw(handler), apis.CreateDataset)...)
				_datasets := _v10.Group("/datasets", _datasetsMw(handler)...)
				_datasets.POST("/batch_get", append(_batchgetdatasetsMw(handler), apis.BatchGetDatasets)...)
				_datasets.DELETE("/:dataset_id", append(_dataset_idMw(handler), apis.DeleteDataset)...)
				_dataset_id := _datasets.Group("/:dataset_id", _dataset_idMw(handler)...)
				_dataset_id.POST("/import", append(_importdatasetMw(handler), apis.ImportDataset)...)
				_dataset_id.POST("/io_jobs", append(_listdatasetiojobsMw(handler), apis.ListDatasetIOJobs)...)
				_dataset_id.GET("/schema", append(_getdatasetschemaMw(handler), apis.GetDatasetSchema)...)
				_dataset_id.PUT("/schema", append(_updatedatasetschemaMw(handler), apis.UpdateDatasetSchema)...)
				_dataset_id.POST("/versions", append(_versionsMw(handler), apis.CreateDatasetVersion)...)
				_versions := _dataset_id.Group("/versions", _versionsMw(handler)...)
				_versions.POST("/list", append(_listdatasetversionsMw(handler), apis.ListDatasetVersions)...)
				{
					_version_id := _versions.Group("/:version_id", _version_idMw(handler)...)
					{
						_items := _version_id.Group("/items", _itemsMw(handler)...)
						_items.POST("/batch_get", append(_batchgetdatasetitemsbyversionMw(handler), apis.BatchGetDatasetItemsByVersion)...)
						_items.POST("/list", append(_listdatasetitemsbyversionMw(handler), apis.ListDatasetItemsByVersion)...)
					}
				}
				{
					_items0 := _dataset_id.Group("/items", _items0Mw(handler)...)
					_items0.POST("/batch_create", append(_batchcreatedatasetitemsMw(handler), apis.BatchCreateDatasetItems)...)
					_items0.POST("/batch_delete", append(_batchdeletedatasetitemsMw(handler), apis.BatchDeleteDatasetItems)...)
					_items0.POST("/batch_get", append(_batchgetdatasetitemsMw(handler), apis.BatchGetDatasetItems)...)
					_items0.POST("/clear", append(_cleardatasetitemMw(handler), apis.ClearDatasetItem)...)
					_items0.DELETE("/:item_id", append(_deletedatasetitemMw(handler), apis.DeleteDatasetItem)...)
					_items0.GET("/:item_id", append(_getdatasetitemMw(handler), apis.GetDatasetItem)...)
					_items0.PUT("/:item_id", append(_updatedatasetitemMw(handler), apis.UpdateDatasetItem)...)
					_items0.POST("/list", append(_listdatasetitemsMw(handler), apis.ListDatasetItems)...)
				}
				_datasets.GET("/:dataset_id", append(_getdatasetMw(handler), apis.GetDataset)...)
				_datasets.PATCH("/:dataset_id", append(_updatedatasetMw(handler), apis.UpdateDataset)...)
				_datasets.POST("/list", append(_listdatasetsMw(handler), apis.ListDatasets)...)
				{
					_dataset_io_jobs := _v10.Group("/dataset_io_jobs", _dataset_io_jobsMw(handler)...)
					_dataset_io_jobs.GET("/:job_id", append(_getdatasetiojobMw(handler), apis.GetDatasetIOJob)...)
				}
				{
					_dataset_versions := _v10.Group("/dataset_versions", _dataset_versionsMw(handler)...)
					_dataset_versions.POST("/batch_get", append(_batchgetdatasetversionsMw(handler), apis.BatchGetDatasetVersions)...)
					_dataset_versions.GET("/:version_id", append(_getdatasetversionMw(handler), apis.GetDatasetVersion)...)
				}
			}
		}
		{
			_evaluation := _api.Group("/evaluation", _evaluationMw(handler)...)
			{
				_v11 := _evaluation.Group("/v1", _v11Mw(handler)...)
				_v11.POST("/eval_targets", append(_eval_targetsMw(handler), apis.CreateEvalTarget)...)
				_eval_targets := _v11.Group("/eval_targets", _eval_targetsMw(handler)...)
				_eval_targets.POST("/batch_get_by_source", append(_batchgetevaltargetsbysourceMw(handler), apis.BatchGetEvalTargetsBySource)...)
				_eval_targets.POST("/batch_get_source", append(_batchgetsourceevaltargetsMw(handler), apis.BatchGetSourceEvalTargets)...)
				_eval_targets.POST("/list_source", append(_listsourceevaltargetsMw(handler), apis.ListSourceEvalTargets)...)
				_eval_targets.POST("/list_source_version", append(_listsourceevaltargetversionsMw(handler), apis.ListSourceEvalTargetVersions)...)
				{
					_eval_target_id := _eval_targets.Group("/:eval_target_id", _eval_target_idMw(handler)...)
					{
						_versions0 := _eval_target_id.Group("/versions", _versions0Mw(handler)...)
						{
							_eval_target_version_id := _versions0.Group("/:eval_target_version_id", _eval_target_version_idMw(handler)...)
							_eval_target_version_id.POST("/execute", append(_executeevaltargetMw(handler), apis.ExecuteEvalTarget)...)
						}
					}
				}
				_v11.POST("/evaluation_sets", append(_evaluation_setsMw(handler), apis.CreateEvaluationSet)...)
				_evaluation_sets := _v11.Group("/evaluation_sets", _evaluation_setsMw(handler)...)
				_evaluation_sets.DELETE("/:evaluation_set_id", append(_evaluation_set_idMw(handler), apis.DeleteEvaluationSet)...)
				_evaluation_set_id := _evaluation_sets.Group("/:evaluation_set_id", _evaluation_set_idMw(handler)...)
				_evaluation_set_id.PUT("/schema", append(_updateevaluationsetschemaMw(handler), apis.UpdateEvaluationSetSchema)...)
				_evaluation_set_id.POST("/versions", append(_versions1Mw(handler), apis.CreateEvaluationSetVersion)...)
				_versions1 := _evaluation_set_id.Group("/versions", _versions1Mw(handler)...)
				_versions1.POST("/list", append(_listevaluationsetversionsMw(handler), apis.ListEvaluationSetVersions)...)
				_versions1.GET("/:version_id", append(_getevaluationsetversionMw(handler), apis.GetEvaluationSetVersion)...)
				{
					_items1 := _evaluation_set_id.Group("/items", _items1Mw(handler)...)
					_items1.POST("/batch_create", append(_batchcreateevaluationsetitemsMw(handler), apis.BatchCreateEvaluationSetItems)...)
					_items1.POST("/batch_delete", append(_batchdeleteevaluationsetitemsMw(handler), apis.BatchDeleteEvaluationSetItems)...)
					_items1.POST("/batch_get", append(_batchgetevaluationsetitemsMw(handler), apis.BatchGetEvaluationSetItems)...)
					_items1.POST("/clear", append(_clearevaluationsetdraftitemMw(handler), apis.ClearEvaluationSetDraftItem)...)
					_items1.PUT("/:item_id", append(_updateevaluationsetitemMw(handler), apis.UpdateEvaluationSetItem)...)
					_items1.POST("/list", append(_listevaluationsetitemsMw(handler), apis.ListEvaluationSetItems)...)
				}
				_evaluation_sets.GET("/:evaluation_set_id", append(_getevaluationsetMw(handler), apis.GetEvaluationSet)...)
				_evaluation_sets.PATCH("/:evaluation_set_id", append(_updateevaluationsetMw(handler), apis.UpdateEvaluationSet)...)
				_evaluation_sets.POST("/list", append(_listevaluationsetsMw(handler), apis.ListEvaluationSets)...)
				_v11.POST("/evaluators", append(_evaluatorsMw(handler), apis.CreateEvaluator)...)
				_evaluators := _v11.Group("/evaluators", _evaluatorsMw(handler)...)
				_evaluators.POST("/check_name", append(_checkevaluatornameMw(handler), apis.CheckEvaluatorName)...)
				_evaluators.POST("/debug", append(_debugevaluatorMw(handler), apis.DebugEvaluator)...)
				_evaluators.POST("/default_prompt_evaluator_tools", append(_getdefaultpromptevaluatortoolsMw(handler), apis.GetDefaultPromptEvaluatorTools)...)
				_evaluators.DELETE("/:evaluator_id", append(_evaluator_idMw(handler), apis.DeleteEvaluator)...)
				_evaluator_id := _evaluators.Group("/:evaluator_id", _evaluator_idMw(handler)...)
				_evaluator_id.POST("/submit_version", append(_submitevaluatorversionMw(handler), apis.SubmitEvaluatorVersion)...)
				{
					_versions2 := _evaluator_id.Group("/versions", _versions2Mw(handler)...)
					_versions2.POST("/list", append(_listevaluatorversionsMw(handler), apis.ListEvaluatorVersions)...)
				}
				_evaluators.PATCH("/:evaluator_id", append(_evaluator_id0Mw(handler), apis.UpdateEvaluator)...)
				_evaluator_id0 := _evaluators.Group("/:evaluator_id", _evaluator_id0Mw(handler)...)
				_evaluator_id0.PATCH("/update_draft", append(_updateevaluatordraftMw(handler), apis.UpdateEvaluatorDraft)...)
				_evaluators.POST("/get_template_info", append(_gettemplateinfoMw(handler), apis.GetTemplateInfo)...)
				_evaluators.POST("/list_template", append(_listtemplatesMw(handler), apis.ListTemplates)...)
				{
					_eval_target_records := _v11.Group("/eval_target_records", _eval_target_recordsMw(handler)...)
					_eval_target_records.POST("/batch_get", append(_batchgetevaltargetrecordsMw(handler), apis.BatchGetEvalTargetRecords)...)
					_eval_target_records.GET("/:eval_target_record_id", append(_getevaltargetrecordMw(handler), apis.GetEvalTargetRecord)...)
				}
				{
					_eval_target_versions := _v11.Group("/eval_target_versions", _eval_target_versionsMw(handler)...)
					_eval_target_versions.POST("/batch_get", append(_batchgetevaltargetversionsMw(handler), apis.BatchGetEvalTargetVersions)...)
					_eval_target_versions.GET("/:eval_target_version_id", append(_getevaltargetversionMw(handler), apis.GetEvalTargetVersion)...)
				}
				{
					_evaluation_set_versions := _v11.Group("/evaluation_set_versions", _evaluation_set_versionsMw(handler)...)
					_evaluation_set_versions.POST("/batch_get", append(_batchgetevaluationsetversionsMw(handler), apis.BatchGetEvaluationSetVersions)...)
				}
				{
					_evaluator_records := _v11.Group("/evaluator_records", _evaluator_recordsMw(handler)...)
					_evaluator_records.PATCH("/:evaluator_record_id", append(_updateevaluatorrecordMw(handler), apis.UpdateEvaluatorRecord)...)
				}
				{
					_evaluators0 := _v11.Group("/evaluators", _evaluators0Mw(handler)...)
					_evaluators0.POST("/batch_get", append(_batchgetevaluatorsMw(handler), apis.BatchGetEvaluators)...)
					_evaluators0.GET("/:evaluator_id", append(_getevaluatorMw(handler), apis.GetEvaluator)...)
					_evaluators0.POST("/list", append(_listevaluatorsMw(handler), apis.ListEvaluators)...)
				}
				{
					_evaluators_versions := _v11.Group("/evaluators_versions", _evaluators_versionsMw(handler)...)
					_evaluators_versions.POST("/batch_get", append(_batchgetevaluatorversionsMw(handler), apis.BatchGetEvaluatorVersions)...)
					_evaluators_versions.GET("/:evaluator_version_id", append(_evaluator_version_idMw(handler), apis.GetEvaluatorVersion)...)
					_evaluator_version_id := _evaluators_versions.Group("/:evaluator_version_id", _evaluator_version_idMw(handler)...)
					_evaluator_version_id.POST("/run", append(_runevaluatorMw(handler), apis.RunEvaluator)...)
				}
				{
					_experiments := _v11.Group("/experiments", _experimentsMw(handler)...)
					_experiments.DELETE("/batch_delete", append(_batchdeleteexperimentsMw(handler), apis.BatchDeleteExperiments)...)
					_experiments.POST("/batch_get", append(_batchgetexperimentsMw(handler), apis.BatchGetExperiments)...)
					_experiments.POST("/check_name", append(_checkexperimentnameMw(handler), apis.CheckExperimentName)...)
					_experiments.DELETE("/:expt_id", append(_expt_idMw(handler), apis.DeleteExperiment)...)
					_expt_id := _experiments.Group("/:expt_id", _expt_idMw(handler)...)
					_expt_id.POST("/clone", append(_cloneexperimentMw(handler), apis.CloneExperiment)...)
					_expt_id.POST("/kill", append(_killexperimentMw(handler), apis.KillExperiment)...)
					_expt_id.POST("/retry", append(_retryexperimentMw(handler), apis.RetryExperiment)...)
					_experiments.PATCH("/:expt_id", append(_updateexperimentMw(handler), apis.UpdateExperiment)...)
					_experiments.POST("/list", append(_listexperimentsMw(handler), apis.ListExperiments)...)
					_experiments.POST("/submit", append(_submitexperimentMw(handler), apis.SubmitExperiment)...)
					{
						_aggr_results := _experiments.Group("/aggr_results", _aggr_resultsMw(handler)...)
						_aggr_results.POST("/batch_get", append(_batchgetexperimentaggrresultMw(handler), apis.BatchGetExperimentAggrResult)...)
					}
					{
						_results := _experiments.Group("/results", _resultsMw(handler)...)
						_results.POST("/batch_get", append(_batchgetexperimentresultMw(handler), apis.BatchGetExperimentResult)...)
					}
				}
			}
		}
		{
			_foundation := _api.Group("/foundation", _foundationMw(handler)...)
			{
				_v12 := _foundation.Group("/v1", _v12Mw(handler)...)
				_v12.POST("/sign_upload_files", append(_signuploadfileMw(handler), apis.SignUploadFile)...)
				{
					_spaces := _v12.Group("/spaces", _spacesMw(handler)...)
					_spaces.POST("/list", append(_listuserspacesMw(handler), apis.ListUserSpaces)...)
					_spaces.GET("/:space_id", append(_getspaceMw(handler), apis.GetSpace)...)
				}
				{
					_users := _v12.Group("/users", _usersMw(handler)...)
					_users.POST("/login_by_password", append(_loginbypasswordMw(handler), apis.LoginByPassword)...)
					_users.POST("/logout", append(_logoutMw(handler), apis.Logout)...)
					_users.POST("/register", append(_registerMw(handler), apis.Register)...)
					_users.POST("/reset_password", append(_resetpasswordMw(handler), apis.ResetPassword)...)
					_users.GET("/session", append(_getuserinfobytokenMw(handler), apis.GetUserInfoByToken)...)
					{
						_user_id := _users.Group("/:user_id", _user_idMw(handler)...)
						_user_id.PUT("/update_profile", append(_modifyuserprofileMw(handler), apis.ModifyUserProfile)...)
					}
				}
			}
		}
		{
			_llm := _api.Group("/llm", _llmMw(handler)...)
			{
				_v13 := _llm.Group("/v1", _v13Mw(handler)...)
				{
					_models := _v13.Group("/models", _modelsMw(handler)...)
					_models.POST("/list", append(_listmodelsMw(handler), apis.ListModels)...)
					_models.POST("/:model_id", append(_getmodelMw(handler), apis.GetModel)...)
				}
			}
		}
		{
			_observability := _api.Group("/observability", _observabilityMw(handler)...)
			{
				_v14 := _observability.Group("/v1", _v14Mw(handler)...)
				_v14.POST("/views", append(_viewsMw(handler), apis.CreateView)...)
				_views := _v14.Group("/views", _viewsMw(handler)...)
				_views.POST("/list", append(_listviewsMw(handler), apis.ListViews)...)
				_views.DELETE("/:view_id", append(_deleteviewMw(handler), apis.DeleteView)...)
				_views.PUT("/:view_id", append(_updateviewMw(handler), apis.UpdateView)...)
				{
					_spans := _v14.Group("/spans", _spansMw(handler)...)
					_spans.POST("/list", append(_listspansMw(handler), apis.ListSpans)...)
				}
				{
					_traces := _v14.Group("/traces", _tracesMw(handler)...)
					_traces.POST("/batch_get_advance_info", append(_batchgettracesadvanceinfoMw(handler), apis.BatchGetTracesAdvanceInfo)...)
					_traces.GET("/meta_info", append(_gettracesmetainfoMw(handler), apis.GetTracesMetaInfo)...)
					_traces.GET("/:trace_id", append(_gettraceMw(handler), apis.GetTrace)...)
				}
			}
		}
		{
			_prompt := _api.Group("/prompt", _promptMw(handler)...)
			{
				_v15 := _prompt.Group("/v1", _v15Mw(handler)...)
				_v15.POST("/prompts", append(_promptsMw(handler), apis.CreatePrompt)...)
				_prompts := _v15.Group("/prompts", _promptsMw(handler)...)
				_prompts.POST("/list", append(_listpromptMw(handler), apis.ListPrompt)...)
				_prompts.DELETE("/:prompt_id", append(_prompt_idMw(handler), apis.DeletePrompt)...)
				_prompt_id := _prompts.Group("/:prompt_id", _prompt_idMw(handler)...)
				_prompt_id.POST("/debug_streaming", append(_debugstreamingMw(handler), apis.DebugStreaming)...)
				{
					_commits := _prompt_id.Group("/commits", _commitsMw(handler)...)
					_commits.POST("/list", append(_listcommitMw(handler), apis.ListCommit)...)
				}
				{
					_debug_context := _prompt_id.Group("/debug_context", _debug_contextMw(handler)...)
					_debug_context.GET("/get", append(_getdebugcontextMw(handler), apis.GetDebugContext)...)
					_debug_context.POST("/save", append(_savedebugcontextMw(handler), apis.SaveDebugContext)...)
				}
				{
					_debug_history := _prompt_id.Group("/debug_history", _debug_historyMw(handler)...)
					_debug_history.GET("/list", append(_listdebughistoryMw(handler), apis.ListDebugHistory)...)
				}
				{
					_drafts := _prompt_id.Group("/drafts", _draftsMw(handler)...)
					_drafts.POST("/commit", append(_commitdraftMw(handler), apis.CommitDraft)...)
					_drafts.POST("/revert_from_commit", append(_revertdraftfromcommitMw(handler), apis.RevertDraftFromCommit)...)
					_drafts.POST("/save", append(_savedraftMw(handler), apis.SaveDraft)...)
				}
				_prompts.GET("/:prompt_id", append(_getpromptMw(handler), apis.GetPrompt)...)
				_prompts.PUT("/:prompt_id", append(_updatepromptMw(handler), apis.UpdatePrompt)...)
				{
					_prompt_id0 := _prompts.Group("/:prompt_id", _prompt_id0Mw(handler)...)
					_prompt_id0.POST("/clone", append(_clonepromptMw(handler), apis.ClonePrompt)...)
				}
			}
		}
	}
	{
		_v16 := root.Group("/v1", _v16Mw(handler)...)
		{
			_loop := _v16.Group("/loop", _loopMw(handler)...)
			{
				_files := _loop.Group("/files", _filesMw(handler)...)
				_files.POST("/upload", append(_uploadloopfileMw(handler), apis.UploadLoopFile)...)
			}
			{
				_prompts0 := _loop.Group("/prompts", _prompts0Mw(handler)...)
				_prompts0.POST("/mget", append(_batchgetpromptbypromptkeyMw(handler), apis.BatchGetPromptByPromptKey)...)
			}
			{
				_traces0 := _loop.Group("/traces", _traces0Mw(handler)...)
				_traces0.POST("/ingest", append(_ingesttracesMw(handler), apis.IngestTraces)...)
			}
		}
	}
}
