// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package apis

import (
	"context"

	"github.com/cloudwego/kitex/pkg/endpoint"
	"github.com/coze-dev/coze-loop/backend/infra/ck"
	"github.com/coze-dev/coze-loop/backend/infra/db"
	"github.com/coze-dev/coze-loop/backend/infra/external/audit"
	"github.com/coze-dev/coze-loop/backend/infra/external/benefit"
	"github.com/coze-dev/coze-loop/backend/infra/fileserver"
	"github.com/coze-dev/coze-loop/backend/infra/idgen"
	"github.com/coze-dev/coze-loop/backend/infra/limiter"
	"github.com/coze-dev/coze-loop/backend/infra/metrics"
	"github.com/coze-dev/coze-loop/backend/infra/mq"
	"github.com/coze-dev/coze-loop/backend/infra/redis"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/apis/promptexecuteservice"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/data/dataset/datasetservice"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/data/tag/tagservice"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/evaluatorservice"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/auth/authservice"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/file/fileservice"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/user/userservice"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/llm/runtime/llmruntimeservice"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/prompt/promptmanageservice"
	"github.com/coze-dev/coze-loop/backend/loop_gen/coze/loop/foundation/loauth"
	application5 "github.com/coze-dev/coze-loop/backend/modules/data/application"
	conf2 "github.com/coze-dev/coze-loop/backend/modules/data/infra/conf"
	application4 "github.com/coze-dev/coze-loop/backend/modules/evaluation/application"
	"github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/rpc/data"
	"github.com/coze-dev/coze-loop/backend/modules/evaluation/infra/rpc/prompt"
	"github.com/coze-dev/coze-loop/backend/modules/foundation/application"
	application3 "github.com/coze-dev/coze-loop/backend/modules/llm/application"
	application6 "github.com/coze-dev/coze-loop/backend/modules/observability/application"
	application2 "github.com/coze-dev/coze-loop/backend/modules/prompt/application"
	"github.com/coze-dev/coze-loop/backend/pkg/conf"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitFoundationHandler(idgen2 idgen.IIDGenerator, db2 db.Provider, objectStorage fileserver.BatchObjectStorage, configFactory conf.IConfigLoaderFactory) (*FoundationHandler, error) {
	authService, err := application.InitAuthApplication(idgen2, db2)
	if err != nil {
		return nil, err
	}
	authNService, err := application.InitAuthNApplication(idgen2, db2)
	if err != nil {
		return nil, err
	}
	spaceService, err := application.InitSpaceApplication(idgen2, db2)
	if err != nil {
		return nil, err
	}
	userService, err := application.InitUserApplication(idgen2, db2, configFactory)
	if err != nil {
		return nil, err
	}
	v := _wireValue
	localAuthService := loauth.NewLocalAuthService(authService, v...)
	fileService, err := application.InitFileApplication(objectStorage, localAuthService)
	if err != nil {
		return nil, err
	}
	foundationOpenAPIService, err := application.InitFoundationOpenAPIApplication(objectStorage, localAuthService)
	if err != nil {
		return nil, err
	}
	foundationHandler := NewFoundationHandler(authService, authNService, spaceService, userService, fileService, foundationOpenAPIService)
	return foundationHandler, nil
}

var (
	_wireValue = []endpoint.Middleware(nil)
)

func InitPromptHandler(ctx context.Context, idgen2 idgen.IIDGenerator, db2 db.Provider, redisCli redis.Cmdable, meter metrics.Meter, configFactory conf.IConfigLoaderFactory, limiterFactory limiter.IRateLimiterFactory, benefitSvc benefit.IBenefitService, llmClient llmruntimeservice.Client, authClient authservice.Client, fileClient fileservice.Client, userClient userservice.Client, auditClient audit.IAuditService) (*PromptHandler, error) {
	promptManageService, err := application2.InitPromptManageApplication(idgen2, db2, redisCli, meter, configFactory, llmClient, authClient, fileClient, userClient, auditClient)
	if err != nil {
		return nil, err
	}
	promptDebugService, err := application2.InitPromptDebugApplication(idgen2, db2, redisCli, meter, configFactory, llmClient, authClient, fileClient, benefitSvc)
	if err != nil {
		return nil, err
	}
	promptExecuteService, err := application2.InitPromptExecuteApplication(idgen2, db2, redisCli, meter, configFactory, llmClient, fileClient)
	if err != nil {
		return nil, err
	}
	promptOpenAPIService, err := application2.InitPromptOpenAPIApplication(idgen2, db2, redisCli, meter, configFactory, limiterFactory, llmClient, authClient, fileClient)
	if err != nil {
		return nil, err
	}
	promptHandler := NewPromptHandler(promptManageService, promptDebugService, promptExecuteService, promptOpenAPIService)
	return promptHandler, nil
}

func InitLLMHandler(ctx context.Context, idgen2 idgen.IIDGenerator, db2 db.Provider, cmdable redis.Cmdable, configFactory conf.IConfigLoaderFactory, limiterFactory limiter.IRateLimiterFactory, authClient authservice.Client) (*LLMHandler, error) {
	llmManageService, err := application3.InitManageApplication(ctx, configFactory, authClient)
	if err != nil {
		return nil, err
	}
	llmRuntimeService, err := application3.InitRuntimeApplication(ctx, idgen2, configFactory, db2, cmdable, limiterFactory)
	if err != nil {
		return nil, err
	}
	llmHandler := NewLLMHandler(llmManageService, llmRuntimeService)
	return llmHandler, nil
}

func InitEvaluationHandler(ctx context.Context, idgen2 idgen.IIDGenerator, db2 db.Provider, cmdable redis.Cmdable, configFactory conf.IConfigLoaderFactory, mqFactory mq.IFactory, client datasetservice.Client, promptClient promptmanageservice.Client, pec promptexecuteservice.Client, authClient authservice.Client, meter metrics.Meter, auditClient audit.IAuditService, llmClient llmruntimeservice.Client, userClient userservice.Client, benefitSvc benefit.IBenefitService, limiterFactory limiter.IRateLimiterFactory) (*EvaluationHandler, error) {
	evaluationSetService := application4.InitEvaluationSetApplication(client, authClient, meter, userClient)
	evaluatorService, err := application4.InitEvaluatorApplication(ctx, idgen2, authClient, db2, configFactory, mqFactory, llmClient, meter, userClient, auditClient, cmdable, benefitSvc, limiterFactory)
	if err != nil {
		return nil, err
	}
	evalTargetService := application4.InitEvalTargetApplication(ctx, idgen2, db2, promptClient, pec, authClient, cmdable, meter)
	iExperimentApplication, err := application4.InitExperimentApplication(ctx, idgen2, db2, configFactory, mqFactory, cmdable, auditClient, meter, authClient, evaluationSetService, evaluatorService, evalTargetService, userClient, promptClient, pec, client, limiterFactory, llmClient, benefitSvc)
	if err != nil {
		return nil, err
	}
	evaluationHandler := NewEvaluationHandler(iExperimentApplication, evaluatorService, evaluationSetService, evalTargetService)
	return evaluationHandler, nil
}

func InitDataHandler(ctx context.Context, idgen2 idgen.IIDGenerator, db2 db.Provider, redisCli redis.Cmdable, configFactory conf.IConfigLoaderFactory, mqFactory mq.IFactory, objectStorage fileserver.ObjectStorage, batchObjectStorage fileserver.BatchObjectStorage, auditClient audit.IAuditService, auth authservice.Client, userClient userservice.Client) (*DataHandler, error) {
	iConfigLoader, err := conf2.NewConfigerFactory(configFactory)
	if err != nil {
		return nil, err
	}
	iDatasetApplication, err := application5.InitDatasetApplication(idgen2, db2, redisCli, configFactory, iConfigLoader, mqFactory, objectStorage, batchObjectStorage, auditClient, auth)
	if err != nil {
		return nil, err
	}
	tagService, err := application5.InitTagApplication(idgen2, db2, redisCli, iConfigLoader, userClient, auth)
	if err != nil {
		return nil, err
	}
	dataHandler := NewDataHandler(iDatasetApplication, tagService)
	return dataHandler, nil
}

func InitObservabilityHandler(ctx context.Context, db2 db.Provider, ckDb ck.Provider, meter metrics.Meter, mqFactory mq.IFactory, configFactory conf.IConfigLoaderFactory, benefit2 benefit.IBenefitService, fileClient fileservice.Client, authCli authservice.Client, userClient userservice.Client, evalClient evaluatorservice.Client, tagClient tagservice.Client) (*ObservabilityHandler, error) {
	iTraceApplication, err := application6.InitTraceApplication(db2, ckDb, meter, mqFactory, configFactory, fileClient, benefit2, authCli, userClient, evalClient, tagClient)
	if err != nil {
		return nil, err
	}
	iTraceIngestionApplication, err := application6.InitTraceIngestionApplication(configFactory, ckDb, mqFactory)
	if err != nil {
		return nil, err
	}
	iObservabilityOpenAPIApplication, err := application6.InitOpenAPIApplication(mqFactory, configFactory, fileClient, ckDb, benefit2, authCli, meter)
	if err != nil {
		return nil, err
	}
	observabilityHandler := NewObservabilityHandler(iTraceApplication, iTraceIngestionApplication, iObservabilityOpenAPIApplication)
	return observabilityHandler, nil
}

// wire.go:

var (
	foundationSet = wire.NewSet(
		NewFoundationHandler, application.InitAuthApplication, application.InitAuthNApplication, application.InitSpaceApplication, application.InitUserApplication, application.InitFileApplication, application.InitFoundationOpenAPIApplication, wire.Value([]endpoint.Middleware(nil)), wire.Bind(new(authservice.Client), new(*loauth.LocalAuthService)), loauth.NewLocalAuthService,
	)
	llmSet = wire.NewSet(
		NewLLMHandler, application3.InitManageApplication, application3.InitRuntimeApplication,
	)
	promptSet = wire.NewSet(
		NewPromptHandler, application2.InitPromptManageApplication, application2.InitPromptDebugApplication, application2.InitPromptExecuteApplication, application2.InitPromptOpenAPIApplication,
	)
	evaluationSet = wire.NewSet(
		NewEvaluationHandler, data.NewDatasetRPCAdapter, prompt.NewPromptRPCAdapter, application4.InitExperimentApplication, application4.InitEvaluatorApplication, application4.InitEvaluationSetApplication, application4.InitEvalTargetApplication,
	)
	dataSet = wire.NewSet(
		NewDataHandler, application5.InitDatasetApplication, application5.InitTagApplication, conf2.NewConfigerFactory,
	)
	observabilitySet = wire.NewSet(
		NewObservabilityHandler, application6.InitTraceApplication, application6.InitTraceIngestionApplication, application6.InitOpenAPIApplication,
	)
)
