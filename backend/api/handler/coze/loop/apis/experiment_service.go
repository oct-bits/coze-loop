// Copyright (c) 2025 coze-dev Authors
// SPDX-License-Identifier: Apache-2.0

// Code generated by hertz generator.

package apis

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"

	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/experimentservice"
	expt "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/expt"
)

var localExptSvc experimentservice.Client

// CheckExperimentName .
// @router /api/evaluation/v2/experiment/check/name [POST]
func CheckExperimentName(ctx context.Context, c *app.RequestContext) {
	invokeAndRender(ctx, c, localExptSvc.CheckExperimentName)
}

// SubmitExperiment .
// @router /api/evaluation/v2/experiment/submit [POST]
func SubmitExperiment(ctx context.Context, c *app.RequestContext) {
	invokeAndRender(ctx, c, localExptSvc.SubmitExperiment)
}

// UpdateExperiment .
// @router /api/evaluation/v2/experiment [PUT]
func UpdateExperiment(ctx context.Context, c *app.RequestContext) {
	invokeAndRender(ctx, c, localExptSvc.UpdateExperiment)
}

// DeleteExperiment .
// @router /api/evaluation/v2/experiment [DELETE]
func DeleteExperiment(ctx context.Context, c *app.RequestContext) {
	invokeAndRender(ctx, c, localExptSvc.DeleteExperiment)
}

// CloneExperiment .
// @router /api/evaluation/v2/experiment/clone [POST]
func CloneExperiment(ctx context.Context, c *app.RequestContext) {
	invokeAndRender(ctx, c, localExptSvc.CloneExperiment)
}

// RetryExperiment .
// @router /api/evaluation/v2/experiment/retry [POST]
func RetryExperiment(ctx context.Context, c *app.RequestContext) {
	invokeAndRender(ctx, c, localExptSvc.RetryExperiment)
}

// KillExperiment .
// @router /api/evaluation/v2/experiment/kill [POST]
func KillExperiment(ctx context.Context, c *app.RequestContext) {
	invokeAndRender(ctx, c, localExptSvc.KillExperiment)
}

// BatchGetExperiments .
// @router /api/evaluation/v2/experiments/batch_get [POST]
func BatchGetExperiments(ctx context.Context, c *app.RequestContext) {
	invokeAndRender(ctx, c, localExptSvc.BatchGetExperiments)
}

// ListExperiments .
// @router /api/evaluation/v2/experiments/list [POST]
func ListExperiments(ctx context.Context, c *app.RequestContext) {
	invokeAndRender(ctx, c, localExptSvc.ListExperiments)
}

// BatchDeleteExperiments .
// @router /api/evaluation/v2/experiments/batch_delete [DELETE]
func BatchDeleteExperiments(ctx context.Context, c *app.RequestContext) {
	invokeAndRender(ctx, c, localExptSvc.BatchDeleteExperiments)
}

// BatchGetExperimentResult .
// @router /api/evaluation/v2/experiments/results/batch_get [POST]
func BatchGetExperimentResult(ctx context.Context, c *app.RequestContext) {
	invokeAndRender(ctx, c, localExptSvc.BatchGetExperimentResult_)
}

// BatchGetExperimentAggrResult .
// @router /api/evaluation/v2/experiments/aggr_results/batch_get [POST]
func BatchGetExperimentAggrResult(ctx context.Context, c *app.RequestContext) {
	invokeAndRender(ctx, c, localExptSvc.BatchGetExperimentAggrResult_)
}

// InvokeExperiment .
// @router /api/evaluation/v3/experiments/:experiment_id/invoke [POST]
func InvokeExperiment(ctx context.Context, c *app.RequestContext) {
	invokeAndRender(ctx, c, localExptSvc.InvokeExperiment)
}

// FinishExperiment .
// @router /api/evaluation/v3/experiments/:experiment_id/finish [POST]
func FinishExperiment(ctx context.Context, c *app.RequestContext) {
	invokeAndRender(ctx, c, localExptSvc.FinishExperiment)
}

// ListExperimentStats .
// @router /api/evaluation/v1/experiments/list_stats [POST]
func ListExperimentStats(ctx context.Context, c *app.RequestContext) {
	var err error
	var req expt.ListExperimentStatsRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(expt.ListExperimentStatsResponse)

	c.JSON(consts.StatusOK, resp)
}

// UpsertExptTurnResultFilter .
// @router /api/evaluation/v1/experiments/turn_result_filter [POST]
func UpsertExptTurnResultFilter(ctx context.Context, c *app.RequestContext) {
	var err error
	var req expt.UpsertExptTurnResultFilterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(expt.UpsertExptTurnResultFilterResponse)

	c.JSON(consts.StatusOK, resp)
}
