// Code generated by Kitex v0.13.1. DO NOT EDIT.

package experimentservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	expt "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/expt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CheckExperimentName(ctx context.Context, req *expt.CheckExperimentNameRequest, callOptions ...callopt.Option) (r *expt.CheckExperimentNameResponse, err error)
	CreateExperiment(ctx context.Context, req *expt.CreateExperimentRequest, callOptions ...callopt.Option) (r *expt.CreateExperimentResponse, err error)
	SubmitExperiment(ctx context.Context, req *expt.SubmitExperimentRequest, callOptions ...callopt.Option) (r *expt.SubmitExperimentResponse, err error)
	BatchGetExperiments(ctx context.Context, req *expt.BatchGetExperimentsRequest, callOptions ...callopt.Option) (r *expt.BatchGetExperimentsResponse, err error)
	ListExperiments(ctx context.Context, req *expt.ListExperimentsRequest, callOptions ...callopt.Option) (r *expt.ListExperimentsResponse, err error)
	UpdateExperiment(ctx context.Context, req *expt.UpdateExperimentRequest, callOptions ...callopt.Option) (r *expt.UpdateExperimentResponse, err error)
	DeleteExperiment(ctx context.Context, req *expt.DeleteExperimentRequest, callOptions ...callopt.Option) (r *expt.DeleteExperimentResponse, err error)
	BatchDeleteExperiments(ctx context.Context, req *expt.BatchDeleteExperimentsRequest, callOptions ...callopt.Option) (r *expt.BatchDeleteExperimentsResponse, err error)
	CloneExperiment(ctx context.Context, req *expt.CloneExperimentRequest, callOptions ...callopt.Option) (r *expt.CloneExperimentResponse, err error)
	RunExperiment(ctx context.Context, req *expt.RunExperimentRequest, callOptions ...callopt.Option) (r *expt.RunExperimentResponse, err error)
	RetryExperiment(ctx context.Context, req *expt.RetryExperimentRequest, callOptions ...callopt.Option) (r *expt.RetryExperimentResponse, err error)
	KillExperiment(ctx context.Context, req *expt.KillExperimentRequest, callOptions ...callopt.Option) (r *expt.KillExperimentResponse, err error)
	BatchGetExperimentResult_(ctx context.Context, req *expt.BatchGetExperimentResultRequest, callOptions ...callopt.Option) (r *expt.BatchGetExperimentResultResponse, err error)
	BatchGetExperimentAggrResult_(ctx context.Context, req *expt.BatchGetExperimentAggrResultRequest, callOptions ...callopt.Option) (r *expt.BatchGetExperimentAggrResultResponse, err error)
	InvokeExperiment(ctx context.Context, req *expt.InvokeExperimentRequest, callOptions ...callopt.Option) (r *expt.InvokeExperimentResponse, err error)
	FinishExperiment(ctx context.Context, req *expt.FinishExperimentRequest, callOptions ...callopt.Option) (r *expt.FinishExperimentResponse, err error)
	ListExperimentStats(ctx context.Context, req *expt.ListExperimentStatsRequest, callOptions ...callopt.Option) (r *expt.ListExperimentStatsResponse, err error)
	UpsertExptTurnResultFilter(ctx context.Context, req *expt.UpsertExptTurnResultFilterRequest, callOptions ...callopt.Option) (r *expt.UpsertExptTurnResultFilterResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kExperimentServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kExperimentServiceClient struct {
	*kClient
}

func (p *kExperimentServiceClient) CheckExperimentName(ctx context.Context, req *expt.CheckExperimentNameRequest, callOptions ...callopt.Option) (r *expt.CheckExperimentNameResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CheckExperimentName(ctx, req)
}

func (p *kExperimentServiceClient) CreateExperiment(ctx context.Context, req *expt.CreateExperimentRequest, callOptions ...callopt.Option) (r *expt.CreateExperimentResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateExperiment(ctx, req)
}

func (p *kExperimentServiceClient) SubmitExperiment(ctx context.Context, req *expt.SubmitExperimentRequest, callOptions ...callopt.Option) (r *expt.SubmitExperimentResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SubmitExperiment(ctx, req)
}

func (p *kExperimentServiceClient) BatchGetExperiments(ctx context.Context, req *expt.BatchGetExperimentsRequest, callOptions ...callopt.Option) (r *expt.BatchGetExperimentsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.BatchGetExperiments(ctx, req)
}

func (p *kExperimentServiceClient) ListExperiments(ctx context.Context, req *expt.ListExperimentsRequest, callOptions ...callopt.Option) (r *expt.ListExperimentsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListExperiments(ctx, req)
}

func (p *kExperimentServiceClient) UpdateExperiment(ctx context.Context, req *expt.UpdateExperimentRequest, callOptions ...callopt.Option) (r *expt.UpdateExperimentResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateExperiment(ctx, req)
}

func (p *kExperimentServiceClient) DeleteExperiment(ctx context.Context, req *expt.DeleteExperimentRequest, callOptions ...callopt.Option) (r *expt.DeleteExperimentResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteExperiment(ctx, req)
}

func (p *kExperimentServiceClient) BatchDeleteExperiments(ctx context.Context, req *expt.BatchDeleteExperimentsRequest, callOptions ...callopt.Option) (r *expt.BatchDeleteExperimentsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.BatchDeleteExperiments(ctx, req)
}

func (p *kExperimentServiceClient) CloneExperiment(ctx context.Context, req *expt.CloneExperimentRequest, callOptions ...callopt.Option) (r *expt.CloneExperimentResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CloneExperiment(ctx, req)
}

func (p *kExperimentServiceClient) RunExperiment(ctx context.Context, req *expt.RunExperimentRequest, callOptions ...callopt.Option) (r *expt.RunExperimentResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RunExperiment(ctx, req)
}

func (p *kExperimentServiceClient) RetryExperiment(ctx context.Context, req *expt.RetryExperimentRequest, callOptions ...callopt.Option) (r *expt.RetryExperimentResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RetryExperiment(ctx, req)
}

func (p *kExperimentServiceClient) KillExperiment(ctx context.Context, req *expt.KillExperimentRequest, callOptions ...callopt.Option) (r *expt.KillExperimentResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.KillExperiment(ctx, req)
}

func (p *kExperimentServiceClient) BatchGetExperimentResult_(ctx context.Context, req *expt.BatchGetExperimentResultRequest, callOptions ...callopt.Option) (r *expt.BatchGetExperimentResultResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.BatchGetExperimentResult_(ctx, req)
}

func (p *kExperimentServiceClient) BatchGetExperimentAggrResult_(ctx context.Context, req *expt.BatchGetExperimentAggrResultRequest, callOptions ...callopt.Option) (r *expt.BatchGetExperimentAggrResultResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.BatchGetExperimentAggrResult_(ctx, req)
}

func (p *kExperimentServiceClient) InvokeExperiment(ctx context.Context, req *expt.InvokeExperimentRequest, callOptions ...callopt.Option) (r *expt.InvokeExperimentResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.InvokeExperiment(ctx, req)
}

func (p *kExperimentServiceClient) FinishExperiment(ctx context.Context, req *expt.FinishExperimentRequest, callOptions ...callopt.Option) (r *expt.FinishExperimentResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FinishExperiment(ctx, req)
}

func (p *kExperimentServiceClient) ListExperimentStats(ctx context.Context, req *expt.ListExperimentStatsRequest, callOptions ...callopt.Option) (r *expt.ListExperimentStatsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListExperimentStats(ctx, req)
}

func (p *kExperimentServiceClient) UpsertExptTurnResultFilter(ctx context.Context, req *expt.UpsertExptTurnResultFilterRequest, callOptions ...callopt.Option) (r *expt.UpsertExptTurnResultFilterResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpsertExptTurnResultFilter(ctx, req)
}
