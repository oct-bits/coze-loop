// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package expt

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/base"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/data/domain/dataset"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/domain/common"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/domain/eval_set"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/domain/expt"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/eval_target"
	"strings"
)

type CreateExperimentRequest struct {
	WorkspaceID           int64                              `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" `
	EvalSetVersionID      *int64                             `thrift:"eval_set_version_id,2,optional" frugal:"2,optional,i64" json:"eval_set_version_id" form:"eval_set_version_id" `
	TargetVersionID       *int64                             `thrift:"target_version_id,3,optional" frugal:"3,optional,i64" json:"target_version_id" form:"target_version_id" `
	EvaluatorVersionIds   []int64                            `thrift:"evaluator_version_ids,4,optional" frugal:"4,optional,list<i64>" json:"evaluator_version_ids" form:"evaluator_version_ids" `
	Name                  *string                            `thrift:"name,5,optional" frugal:"5,optional,string" form:"name" json:"name,omitempty"`
	Desc                  *string                            `thrift:"desc,6,optional" frugal:"6,optional,string" form:"desc" json:"desc,omitempty"`
	EvalSetID             *int64                             `thrift:"eval_set_id,7,optional" frugal:"7,optional,i64" json:"eval_set_id" form:"eval_set_id" `
	TargetID              *int64                             `thrift:"target_id,8,optional" frugal:"8,optional,i64" json:"target_id" form:"target_id" `
	TargetFieldMapping    *expt.TargetFieldMapping           `thrift:"target_field_mapping,20,optional" frugal:"20,optional,expt.TargetFieldMapping" form:"target_field_mapping" json:"target_field_mapping,omitempty"`
	EvaluatorFieldMapping []*expt.EvaluatorFieldMapping      `thrift:"evaluator_field_mapping,21,optional" frugal:"21,optional,list<expt.EvaluatorFieldMapping>" form:"evaluator_field_mapping" json:"evaluator_field_mapping,omitempty"`
	ItemConcurNum         *int32                             `thrift:"item_concur_num,22,optional" frugal:"22,optional,i32" form:"item_concur_num" json:"item_concur_num,omitempty"`
	EvaluatorsConcurNum   *int32                             `thrift:"evaluators_concur_num,23,optional" frugal:"23,optional,i32" form:"evaluators_concur_num" json:"evaluators_concur_num,omitempty"`
	CreateEvalTargetParam *eval_target.CreateEvalTargetParam `thrift:"create_eval_target_param,24,optional" frugal:"24,optional,eval_target.CreateEvalTargetParam" form:"create_eval_target_param" json:"create_eval_target_param,omitempty"`
	ExptType              *expt.ExptType                     `thrift:"expt_type,30,optional" frugal:"30,optional,ExptType" form:"expt_type" json:"expt_type,omitempty"`
	MaxAliveTime          *int64                             `thrift:"max_alive_time,31,optional" frugal:"31,optional,i64" form:"max_alive_time" json:"max_alive_time,omitempty"`
	SourceType            *expt.SourceType                   `thrift:"source_type,32,optional" frugal:"32,optional,SourceType" form:"source_type" json:"source_type,omitempty"`
	SourceID              *string                            `thrift:"source_id,33,optional" frugal:"33,optional,string" form:"source_id" json:"source_id,omitempty"`
	Session               *common.Session                    `thrift:"session,200,optional" frugal:"200,optional,common.Session" form:"session" json:"session,omitempty" query:"session"`
	Base                  *base.Base                         `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewCreateExperimentRequest() *CreateExperimentRequest {
	return &CreateExperimentRequest{}
}

func (p *CreateExperimentRequest) InitDefault() {
}

func (p *CreateExperimentRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

var CreateExperimentRequest_EvalSetVersionID_DEFAULT int64

func (p *CreateExperimentRequest) GetEvalSetVersionID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetEvalSetVersionID() {
		return CreateExperimentRequest_EvalSetVersionID_DEFAULT
	}
	return *p.EvalSetVersionID
}

var CreateExperimentRequest_TargetVersionID_DEFAULT int64

func (p *CreateExperimentRequest) GetTargetVersionID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTargetVersionID() {
		return CreateExperimentRequest_TargetVersionID_DEFAULT
	}
	return *p.TargetVersionID
}

var CreateExperimentRequest_EvaluatorVersionIds_DEFAULT []int64

func (p *CreateExperimentRequest) GetEvaluatorVersionIds() (v []int64) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorVersionIds() {
		return CreateExperimentRequest_EvaluatorVersionIds_DEFAULT
	}
	return p.EvaluatorVersionIds
}

var CreateExperimentRequest_Name_DEFAULT string

func (p *CreateExperimentRequest) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return CreateExperimentRequest_Name_DEFAULT
	}
	return *p.Name
}

var CreateExperimentRequest_Desc_DEFAULT string

func (p *CreateExperimentRequest) GetDesc() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDesc() {
		return CreateExperimentRequest_Desc_DEFAULT
	}
	return *p.Desc
}

var CreateExperimentRequest_EvalSetID_DEFAULT int64

func (p *CreateExperimentRequest) GetEvalSetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetEvalSetID() {
		return CreateExperimentRequest_EvalSetID_DEFAULT
	}
	return *p.EvalSetID
}

var CreateExperimentRequest_TargetID_DEFAULT int64

func (p *CreateExperimentRequest) GetTargetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTargetID() {
		return CreateExperimentRequest_TargetID_DEFAULT
	}
	return *p.TargetID
}

var CreateExperimentRequest_TargetFieldMapping_DEFAULT *expt.TargetFieldMapping

func (p *CreateExperimentRequest) GetTargetFieldMapping() (v *expt.TargetFieldMapping) {
	if p == nil {
		return
	}
	if !p.IsSetTargetFieldMapping() {
		return CreateExperimentRequest_TargetFieldMapping_DEFAULT
	}
	return p.TargetFieldMapping
}

var CreateExperimentRequest_EvaluatorFieldMapping_DEFAULT []*expt.EvaluatorFieldMapping

func (p *CreateExperimentRequest) GetEvaluatorFieldMapping() (v []*expt.EvaluatorFieldMapping) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorFieldMapping() {
		return CreateExperimentRequest_EvaluatorFieldMapping_DEFAULT
	}
	return p.EvaluatorFieldMapping
}

var CreateExperimentRequest_ItemConcurNum_DEFAULT int32

func (p *CreateExperimentRequest) GetItemConcurNum() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetItemConcurNum() {
		return CreateExperimentRequest_ItemConcurNum_DEFAULT
	}
	return *p.ItemConcurNum
}

var CreateExperimentRequest_EvaluatorsConcurNum_DEFAULT int32

func (p *CreateExperimentRequest) GetEvaluatorsConcurNum() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorsConcurNum() {
		return CreateExperimentRequest_EvaluatorsConcurNum_DEFAULT
	}
	return *p.EvaluatorsConcurNum
}

var CreateExperimentRequest_CreateEvalTargetParam_DEFAULT *eval_target.CreateEvalTargetParam

func (p *CreateExperimentRequest) GetCreateEvalTargetParam() (v *eval_target.CreateEvalTargetParam) {
	if p == nil {
		return
	}
	if !p.IsSetCreateEvalTargetParam() {
		return CreateExperimentRequest_CreateEvalTargetParam_DEFAULT
	}
	return p.CreateEvalTargetParam
}

var CreateExperimentRequest_ExptType_DEFAULT expt.ExptType

func (p *CreateExperimentRequest) GetExptType() (v expt.ExptType) {
	if p == nil {
		return
	}
	if !p.IsSetExptType() {
		return CreateExperimentRequest_ExptType_DEFAULT
	}
	return *p.ExptType
}

var CreateExperimentRequest_MaxAliveTime_DEFAULT int64

func (p *CreateExperimentRequest) GetMaxAliveTime() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetMaxAliveTime() {
		return CreateExperimentRequest_MaxAliveTime_DEFAULT
	}
	return *p.MaxAliveTime
}

var CreateExperimentRequest_SourceType_DEFAULT expt.SourceType

func (p *CreateExperimentRequest) GetSourceType() (v expt.SourceType) {
	if p == nil {
		return
	}
	if !p.IsSetSourceType() {
		return CreateExperimentRequest_SourceType_DEFAULT
	}
	return *p.SourceType
}

var CreateExperimentRequest_SourceID_DEFAULT string

func (p *CreateExperimentRequest) GetSourceID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetSourceID() {
		return CreateExperimentRequest_SourceID_DEFAULT
	}
	return *p.SourceID
}

var CreateExperimentRequest_Session_DEFAULT *common.Session

func (p *CreateExperimentRequest) GetSession() (v *common.Session) {
	if p == nil {
		return
	}
	if !p.IsSetSession() {
		return CreateExperimentRequest_Session_DEFAULT
	}
	return p.Session
}

var CreateExperimentRequest_Base_DEFAULT *base.Base

func (p *CreateExperimentRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return CreateExperimentRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *CreateExperimentRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *CreateExperimentRequest) SetEvalSetVersionID(val *int64) {
	p.EvalSetVersionID = val
}
func (p *CreateExperimentRequest) SetTargetVersionID(val *int64) {
	p.TargetVersionID = val
}
func (p *CreateExperimentRequest) SetEvaluatorVersionIds(val []int64) {
	p.EvaluatorVersionIds = val
}
func (p *CreateExperimentRequest) SetName(val *string) {
	p.Name = val
}
func (p *CreateExperimentRequest) SetDesc(val *string) {
	p.Desc = val
}
func (p *CreateExperimentRequest) SetEvalSetID(val *int64) {
	p.EvalSetID = val
}
func (p *CreateExperimentRequest) SetTargetID(val *int64) {
	p.TargetID = val
}
func (p *CreateExperimentRequest) SetTargetFieldMapping(val *expt.TargetFieldMapping) {
	p.TargetFieldMapping = val
}
func (p *CreateExperimentRequest) SetEvaluatorFieldMapping(val []*expt.EvaluatorFieldMapping) {
	p.EvaluatorFieldMapping = val
}
func (p *CreateExperimentRequest) SetItemConcurNum(val *int32) {
	p.ItemConcurNum = val
}
func (p *CreateExperimentRequest) SetEvaluatorsConcurNum(val *int32) {
	p.EvaluatorsConcurNum = val
}
func (p *CreateExperimentRequest) SetCreateEvalTargetParam(val *eval_target.CreateEvalTargetParam) {
	p.CreateEvalTargetParam = val
}
func (p *CreateExperimentRequest) SetExptType(val *expt.ExptType) {
	p.ExptType = val
}
func (p *CreateExperimentRequest) SetMaxAliveTime(val *int64) {
	p.MaxAliveTime = val
}
func (p *CreateExperimentRequest) SetSourceType(val *expt.SourceType) {
	p.SourceType = val
}
func (p *CreateExperimentRequest) SetSourceID(val *string) {
	p.SourceID = val
}
func (p *CreateExperimentRequest) SetSession(val *common.Session) {
	p.Session = val
}
func (p *CreateExperimentRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_CreateExperimentRequest = map[int16]string{
	1:   "workspace_id",
	2:   "eval_set_version_id",
	3:   "target_version_id",
	4:   "evaluator_version_ids",
	5:   "name",
	6:   "desc",
	7:   "eval_set_id",
	8:   "target_id",
	20:  "target_field_mapping",
	21:  "evaluator_field_mapping",
	22:  "item_concur_num",
	23:  "evaluators_concur_num",
	24:  "create_eval_target_param",
	30:  "expt_type",
	31:  "max_alive_time",
	32:  "source_type",
	33:  "source_id",
	200: "session",
	255: "Base",
}

func (p *CreateExperimentRequest) IsSetEvalSetVersionID() bool {
	return p.EvalSetVersionID != nil
}

func (p *CreateExperimentRequest) IsSetTargetVersionID() bool {
	return p.TargetVersionID != nil
}

func (p *CreateExperimentRequest) IsSetEvaluatorVersionIds() bool {
	return p.EvaluatorVersionIds != nil
}

func (p *CreateExperimentRequest) IsSetName() bool {
	return p.Name != nil
}

func (p *CreateExperimentRequest) IsSetDesc() bool {
	return p.Desc != nil
}

func (p *CreateExperimentRequest) IsSetEvalSetID() bool {
	return p.EvalSetID != nil
}

func (p *CreateExperimentRequest) IsSetTargetID() bool {
	return p.TargetID != nil
}

func (p *CreateExperimentRequest) IsSetTargetFieldMapping() bool {
	return p.TargetFieldMapping != nil
}

func (p *CreateExperimentRequest) IsSetEvaluatorFieldMapping() bool {
	return p.EvaluatorFieldMapping != nil
}

func (p *CreateExperimentRequest) IsSetItemConcurNum() bool {
	return p.ItemConcurNum != nil
}

func (p *CreateExperimentRequest) IsSetEvaluatorsConcurNum() bool {
	return p.EvaluatorsConcurNum != nil
}

func (p *CreateExperimentRequest) IsSetCreateEvalTargetParam() bool {
	return p.CreateEvalTargetParam != nil
}

func (p *CreateExperimentRequest) IsSetExptType() bool {
	return p.ExptType != nil
}

func (p *CreateExperimentRequest) IsSetMaxAliveTime() bool {
	return p.MaxAliveTime != nil
}

func (p *CreateExperimentRequest) IsSetSourceType() bool {
	return p.SourceType != nil
}

func (p *CreateExperimentRequest) IsSetSourceID() bool {
	return p.SourceID != nil
}

func (p *CreateExperimentRequest) IsSetSession() bool {
	return p.Session != nil
}

func (p *CreateExperimentRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateExperimentRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 22:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 23:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField23(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 24:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField24(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 30:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField30(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 31:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField31(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 32:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField32(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 33:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField33(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 200:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField200(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateExperimentRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CreateExperimentRequest[fieldId]))
}

func (p *CreateExperimentRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *CreateExperimentRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvalSetVersionID = _field
	return nil
}
func (p *CreateExperimentRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TargetVersionID = _field
	return nil
}
func (p *CreateExperimentRequest) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.EvaluatorVersionIds = _field
	return nil
}
func (p *CreateExperimentRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *CreateExperimentRequest) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Desc = _field
	return nil
}
func (p *CreateExperimentRequest) ReadField7(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvalSetID = _field
	return nil
}
func (p *CreateExperimentRequest) ReadField8(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TargetID = _field
	return nil
}
func (p *CreateExperimentRequest) ReadField20(iprot thrift.TProtocol) error {
	_field := expt.NewTargetFieldMapping()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.TargetFieldMapping = _field
	return nil
}
func (p *CreateExperimentRequest) ReadField21(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*expt.EvaluatorFieldMapping, 0, size)
	values := make([]expt.EvaluatorFieldMapping, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.EvaluatorFieldMapping = _field
	return nil
}
func (p *CreateExperimentRequest) ReadField22(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ItemConcurNum = _field
	return nil
}
func (p *CreateExperimentRequest) ReadField23(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvaluatorsConcurNum = _field
	return nil
}
func (p *CreateExperimentRequest) ReadField24(iprot thrift.TProtocol) error {
	_field := eval_target.NewCreateEvalTargetParam()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.CreateEvalTargetParam = _field
	return nil
}
func (p *CreateExperimentRequest) ReadField30(iprot thrift.TProtocol) error {

	var _field *expt.ExptType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := expt.ExptType(v)
		_field = &tmp
	}
	p.ExptType = _field
	return nil
}
func (p *CreateExperimentRequest) ReadField31(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MaxAliveTime = _field
	return nil
}
func (p *CreateExperimentRequest) ReadField32(iprot thrift.TProtocol) error {

	var _field *expt.SourceType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := expt.SourceType(v)
		_field = &tmp
	}
	p.SourceType = _field
	return nil
}
func (p *CreateExperimentRequest) ReadField33(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SourceID = _field
	return nil
}
func (p *CreateExperimentRequest) ReadField200(iprot thrift.TProtocol) error {
	_field := common.NewSession()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Session = _field
	return nil
}
func (p *CreateExperimentRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *CreateExperimentRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateExperimentRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
		if err = p.writeField23(oprot); err != nil {
			fieldId = 23
			goto WriteFieldError
		}
		if err = p.writeField24(oprot); err != nil {
			fieldId = 24
			goto WriteFieldError
		}
		if err = p.writeField30(oprot); err != nil {
			fieldId = 30
			goto WriteFieldError
		}
		if err = p.writeField31(oprot); err != nil {
			fieldId = 31
			goto WriteFieldError
		}
		if err = p.writeField32(oprot); err != nil {
			fieldId = 32
			goto WriteFieldError
		}
		if err = p.writeField33(oprot); err != nil {
			fieldId = 33
			goto WriteFieldError
		}
		if err = p.writeField200(oprot); err != nil {
			fieldId = 200
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateExperimentRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CreateExperimentRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvalSetVersionID() {
		if err = oprot.WriteFieldBegin("eval_set_version_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.EvalSetVersionID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *CreateExperimentRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTargetVersionID() {
		if err = oprot.WriteFieldBegin("target_version_id", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TargetVersionID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *CreateExperimentRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorVersionIds() {
		if err = oprot.WriteFieldBegin("evaluator_version_ids", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.EvaluatorVersionIds)); err != nil {
			return err
		}
		for _, v := range p.EvaluatorVersionIds {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *CreateExperimentRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *CreateExperimentRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetDesc() {
		if err = oprot.WriteFieldBegin("desc", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Desc); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *CreateExperimentRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvalSetID() {
		if err = oprot.WriteFieldBegin("eval_set_id", thrift.I64, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.EvalSetID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}
func (p *CreateExperimentRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetTargetID() {
		if err = oprot.WriteFieldBegin("target_id", thrift.I64, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TargetID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}
func (p *CreateExperimentRequest) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetTargetFieldMapping() {
		if err = oprot.WriteFieldBegin("target_field_mapping", thrift.STRUCT, 20); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.TargetFieldMapping.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}
func (p *CreateExperimentRequest) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorFieldMapping() {
		if err = oprot.WriteFieldBegin("evaluator_field_mapping", thrift.LIST, 21); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EvaluatorFieldMapping)); err != nil {
			return err
		}
		for _, v := range p.EvaluatorFieldMapping {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}
func (p *CreateExperimentRequest) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetItemConcurNum() {
		if err = oprot.WriteFieldBegin("item_concur_num", thrift.I32, 22); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.ItemConcurNum); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}
func (p *CreateExperimentRequest) writeField23(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorsConcurNum() {
		if err = oprot.WriteFieldBegin("evaluators_concur_num", thrift.I32, 23); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.EvaluatorsConcurNum); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 end error: ", p), err)
}
func (p *CreateExperimentRequest) writeField24(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreateEvalTargetParam() {
		if err = oprot.WriteFieldBegin("create_eval_target_param", thrift.STRUCT, 24); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.CreateEvalTargetParam.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 end error: ", p), err)
}
func (p *CreateExperimentRequest) writeField30(oprot thrift.TProtocol) (err error) {
	if p.IsSetExptType() {
		if err = oprot.WriteFieldBegin("expt_type", thrift.I32, 30); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.ExptType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 30 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 30 end error: ", p), err)
}
func (p *CreateExperimentRequest) writeField31(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxAliveTime() {
		if err = oprot.WriteFieldBegin("max_alive_time", thrift.I64, 31); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.MaxAliveTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 31 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 31 end error: ", p), err)
}
func (p *CreateExperimentRequest) writeField32(oprot thrift.TProtocol) (err error) {
	if p.IsSetSourceType() {
		if err = oprot.WriteFieldBegin("source_type", thrift.I32, 32); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.SourceType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 32 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 32 end error: ", p), err)
}
func (p *CreateExperimentRequest) writeField33(oprot thrift.TProtocol) (err error) {
	if p.IsSetSourceID() {
		if err = oprot.WriteFieldBegin("source_id", thrift.STRING, 33); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.SourceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 33 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 33 end error: ", p), err)
}
func (p *CreateExperimentRequest) writeField200(oprot thrift.TProtocol) (err error) {
	if p.IsSetSession() {
		if err = oprot.WriteFieldBegin("session", thrift.STRUCT, 200); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Session.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 200 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 200 end error: ", p), err)
}
func (p *CreateExperimentRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateExperimentRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateExperimentRequest(%+v)", *p)

}

func (p *CreateExperimentRequest) DeepEqual(ano *CreateExperimentRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvalSetVersionID) {
		return false
	}
	if !p.Field3DeepEqual(ano.TargetVersionID) {
		return false
	}
	if !p.Field4DeepEqual(ano.EvaluatorVersionIds) {
		return false
	}
	if !p.Field5DeepEqual(ano.Name) {
		return false
	}
	if !p.Field6DeepEqual(ano.Desc) {
		return false
	}
	if !p.Field7DeepEqual(ano.EvalSetID) {
		return false
	}
	if !p.Field8DeepEqual(ano.TargetID) {
		return false
	}
	if !p.Field20DeepEqual(ano.TargetFieldMapping) {
		return false
	}
	if !p.Field21DeepEqual(ano.EvaluatorFieldMapping) {
		return false
	}
	if !p.Field22DeepEqual(ano.ItemConcurNum) {
		return false
	}
	if !p.Field23DeepEqual(ano.EvaluatorsConcurNum) {
		return false
	}
	if !p.Field24DeepEqual(ano.CreateEvalTargetParam) {
		return false
	}
	if !p.Field30DeepEqual(ano.ExptType) {
		return false
	}
	if !p.Field31DeepEqual(ano.MaxAliveTime) {
		return false
	}
	if !p.Field32DeepEqual(ano.SourceType) {
		return false
	}
	if !p.Field33DeepEqual(ano.SourceID) {
		return false
	}
	if !p.Field200DeepEqual(ano.Session) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *CreateExperimentRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *CreateExperimentRequest) Field2DeepEqual(src *int64) bool {

	if p.EvalSetVersionID == src {
		return true
	} else if p.EvalSetVersionID == nil || src == nil {
		return false
	}
	if *p.EvalSetVersionID != *src {
		return false
	}
	return true
}
func (p *CreateExperimentRequest) Field3DeepEqual(src *int64) bool {

	if p.TargetVersionID == src {
		return true
	} else if p.TargetVersionID == nil || src == nil {
		return false
	}
	if *p.TargetVersionID != *src {
		return false
	}
	return true
}
func (p *CreateExperimentRequest) Field4DeepEqual(src []int64) bool {

	if len(p.EvaluatorVersionIds) != len(src) {
		return false
	}
	for i, v := range p.EvaluatorVersionIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *CreateExperimentRequest) Field5DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateExperimentRequest) Field6DeepEqual(src *string) bool {

	if p.Desc == src {
		return true
	} else if p.Desc == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Desc, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateExperimentRequest) Field7DeepEqual(src *int64) bool {

	if p.EvalSetID == src {
		return true
	} else if p.EvalSetID == nil || src == nil {
		return false
	}
	if *p.EvalSetID != *src {
		return false
	}
	return true
}
func (p *CreateExperimentRequest) Field8DeepEqual(src *int64) bool {

	if p.TargetID == src {
		return true
	} else if p.TargetID == nil || src == nil {
		return false
	}
	if *p.TargetID != *src {
		return false
	}
	return true
}
func (p *CreateExperimentRequest) Field20DeepEqual(src *expt.TargetFieldMapping) bool {

	if !p.TargetFieldMapping.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateExperimentRequest) Field21DeepEqual(src []*expt.EvaluatorFieldMapping) bool {

	if len(p.EvaluatorFieldMapping) != len(src) {
		return false
	}
	for i, v := range p.EvaluatorFieldMapping {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *CreateExperimentRequest) Field22DeepEqual(src *int32) bool {

	if p.ItemConcurNum == src {
		return true
	} else if p.ItemConcurNum == nil || src == nil {
		return false
	}
	if *p.ItemConcurNum != *src {
		return false
	}
	return true
}
func (p *CreateExperimentRequest) Field23DeepEqual(src *int32) bool {

	if p.EvaluatorsConcurNum == src {
		return true
	} else if p.EvaluatorsConcurNum == nil || src == nil {
		return false
	}
	if *p.EvaluatorsConcurNum != *src {
		return false
	}
	return true
}
func (p *CreateExperimentRequest) Field24DeepEqual(src *eval_target.CreateEvalTargetParam) bool {

	if !p.CreateEvalTargetParam.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateExperimentRequest) Field30DeepEqual(src *expt.ExptType) bool {

	if p.ExptType == src {
		return true
	} else if p.ExptType == nil || src == nil {
		return false
	}
	if *p.ExptType != *src {
		return false
	}
	return true
}
func (p *CreateExperimentRequest) Field31DeepEqual(src *int64) bool {

	if p.MaxAliveTime == src {
		return true
	} else if p.MaxAliveTime == nil || src == nil {
		return false
	}
	if *p.MaxAliveTime != *src {
		return false
	}
	return true
}
func (p *CreateExperimentRequest) Field32DeepEqual(src *expt.SourceType) bool {

	if p.SourceType == src {
		return true
	} else if p.SourceType == nil || src == nil {
		return false
	}
	if *p.SourceType != *src {
		return false
	}
	return true
}
func (p *CreateExperimentRequest) Field33DeepEqual(src *string) bool {

	if p.SourceID == src {
		return true
	} else if p.SourceID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.SourceID, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateExperimentRequest) Field200DeepEqual(src *common.Session) bool {

	if !p.Session.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateExperimentRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type CreateExperimentResponse struct {
	Experiment *expt.Experiment `thrift:"experiment,1,optional" frugal:"1,optional,expt.Experiment" form:"experiment" json:"experiment,omitempty" query:"experiment"`
	BaseResp   *base.BaseResp   `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewCreateExperimentResponse() *CreateExperimentResponse {
	return &CreateExperimentResponse{}
}

func (p *CreateExperimentResponse) InitDefault() {
}

var CreateExperimentResponse_Experiment_DEFAULT *expt.Experiment

func (p *CreateExperimentResponse) GetExperiment() (v *expt.Experiment) {
	if p == nil {
		return
	}
	if !p.IsSetExperiment() {
		return CreateExperimentResponse_Experiment_DEFAULT
	}
	return p.Experiment
}

var CreateExperimentResponse_BaseResp_DEFAULT *base.BaseResp

func (p *CreateExperimentResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return CreateExperimentResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CreateExperimentResponse) SetExperiment(val *expt.Experiment) {
	p.Experiment = val
}
func (p *CreateExperimentResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_CreateExperimentResponse = map[int16]string{
	1:   "experiment",
	255: "BaseResp",
}

func (p *CreateExperimentResponse) IsSetExperiment() bool {
	return p.Experiment != nil
}

func (p *CreateExperimentResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CreateExperimentResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateExperimentResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateExperimentResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := expt.NewExperiment()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Experiment = _field
	return nil
}
func (p *CreateExperimentResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *CreateExperimentResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateExperimentResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateExperimentResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetExperiment() {
		if err = oprot.WriteFieldBegin("experiment", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Experiment.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CreateExperimentResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateExperimentResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateExperimentResponse(%+v)", *p)

}

func (p *CreateExperimentResponse) DeepEqual(ano *CreateExperimentResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Experiment) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *CreateExperimentResponse) Field1DeepEqual(src *expt.Experiment) bool {

	if !p.Experiment.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateExperimentResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type SubmitExperimentRequest struct {
	WorkspaceID           int64                              `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" `
	EvalSetVersionID      *int64                             `thrift:"eval_set_version_id,2,optional" frugal:"2,optional,i64" json:"eval_set_version_id" form:"eval_set_version_id" `
	TargetVersionID       *int64                             `thrift:"target_version_id,3,optional" frugal:"3,optional,i64" json:"target_version_id" form:"target_version_id" `
	EvaluatorVersionIds   []int64                            `thrift:"evaluator_version_ids,4,optional" frugal:"4,optional,list<i64>" json:"evaluator_version_ids" form:"evaluator_version_ids" `
	Name                  *string                            `thrift:"name,5,optional" frugal:"5,optional,string" form:"name" json:"name,omitempty"`
	Desc                  *string                            `thrift:"desc,6,optional" frugal:"6,optional,string" form:"desc" json:"desc,omitempty"`
	EvalSetID             *int64                             `thrift:"eval_set_id,7,optional" frugal:"7,optional,i64" json:"eval_set_id" form:"eval_set_id" `
	TargetID              *int64                             `thrift:"target_id,8,optional" frugal:"8,optional,i64" json:"target_id" form:"target_id" `
	TargetFieldMapping    *expt.TargetFieldMapping           `thrift:"target_field_mapping,20,optional" frugal:"20,optional,expt.TargetFieldMapping" form:"target_field_mapping" json:"target_field_mapping,omitempty"`
	EvaluatorFieldMapping []*expt.EvaluatorFieldMapping      `thrift:"evaluator_field_mapping,21,optional" frugal:"21,optional,list<expt.EvaluatorFieldMapping>" form:"evaluator_field_mapping" json:"evaluator_field_mapping,omitempty"`
	ItemConcurNum         *int32                             `thrift:"item_concur_num,22,optional" frugal:"22,optional,i32" form:"item_concur_num" json:"item_concur_num,omitempty"`
	EvaluatorsConcurNum   *int32                             `thrift:"evaluators_concur_num,23,optional" frugal:"23,optional,i32" form:"evaluators_concur_num" json:"evaluators_concur_num,omitempty"`
	CreateEvalTargetParam *eval_target.CreateEvalTargetParam `thrift:"create_eval_target_param,24,optional" frugal:"24,optional,eval_target.CreateEvalTargetParam" form:"create_eval_target_param" json:"create_eval_target_param,omitempty"`
	ExptType              *expt.ExptType                     `thrift:"expt_type,30,optional" frugal:"30,optional,ExptType" form:"expt_type" json:"expt_type,omitempty"`
	MaxAliveTime          *int64                             `thrift:"max_alive_time,31,optional" frugal:"31,optional,i64" form:"max_alive_time" json:"max_alive_time,omitempty"`
	SourceType            *expt.SourceType                   `thrift:"source_type,32,optional" frugal:"32,optional,SourceType" form:"source_type" json:"source_type,omitempty"`
	SourceID              *string                            `thrift:"source_id,33,optional" frugal:"33,optional,string" form:"source_id" json:"source_id,omitempty"`
	Ext                   map[string]string                  `thrift:"ext,100,optional" frugal:"100,optional,map<string:string>" form:"ext" json:"ext,omitempty"`
	Session               *common.Session                    `thrift:"session,200,optional" frugal:"200,optional,common.Session" form:"session" json:"session,omitempty" query:"session"`
	Base                  *base.Base                         `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewSubmitExperimentRequest() *SubmitExperimentRequest {
	return &SubmitExperimentRequest{}
}

func (p *SubmitExperimentRequest) InitDefault() {
}

func (p *SubmitExperimentRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

var SubmitExperimentRequest_EvalSetVersionID_DEFAULT int64

func (p *SubmitExperimentRequest) GetEvalSetVersionID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetEvalSetVersionID() {
		return SubmitExperimentRequest_EvalSetVersionID_DEFAULT
	}
	return *p.EvalSetVersionID
}

var SubmitExperimentRequest_TargetVersionID_DEFAULT int64

func (p *SubmitExperimentRequest) GetTargetVersionID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTargetVersionID() {
		return SubmitExperimentRequest_TargetVersionID_DEFAULT
	}
	return *p.TargetVersionID
}

var SubmitExperimentRequest_EvaluatorVersionIds_DEFAULT []int64

func (p *SubmitExperimentRequest) GetEvaluatorVersionIds() (v []int64) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorVersionIds() {
		return SubmitExperimentRequest_EvaluatorVersionIds_DEFAULT
	}
	return p.EvaluatorVersionIds
}

var SubmitExperimentRequest_Name_DEFAULT string

func (p *SubmitExperimentRequest) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return SubmitExperimentRequest_Name_DEFAULT
	}
	return *p.Name
}

var SubmitExperimentRequest_Desc_DEFAULT string

func (p *SubmitExperimentRequest) GetDesc() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDesc() {
		return SubmitExperimentRequest_Desc_DEFAULT
	}
	return *p.Desc
}

var SubmitExperimentRequest_EvalSetID_DEFAULT int64

func (p *SubmitExperimentRequest) GetEvalSetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetEvalSetID() {
		return SubmitExperimentRequest_EvalSetID_DEFAULT
	}
	return *p.EvalSetID
}

var SubmitExperimentRequest_TargetID_DEFAULT int64

func (p *SubmitExperimentRequest) GetTargetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTargetID() {
		return SubmitExperimentRequest_TargetID_DEFAULT
	}
	return *p.TargetID
}

var SubmitExperimentRequest_TargetFieldMapping_DEFAULT *expt.TargetFieldMapping

func (p *SubmitExperimentRequest) GetTargetFieldMapping() (v *expt.TargetFieldMapping) {
	if p == nil {
		return
	}
	if !p.IsSetTargetFieldMapping() {
		return SubmitExperimentRequest_TargetFieldMapping_DEFAULT
	}
	return p.TargetFieldMapping
}

var SubmitExperimentRequest_EvaluatorFieldMapping_DEFAULT []*expt.EvaluatorFieldMapping

func (p *SubmitExperimentRequest) GetEvaluatorFieldMapping() (v []*expt.EvaluatorFieldMapping) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorFieldMapping() {
		return SubmitExperimentRequest_EvaluatorFieldMapping_DEFAULT
	}
	return p.EvaluatorFieldMapping
}

var SubmitExperimentRequest_ItemConcurNum_DEFAULT int32

func (p *SubmitExperimentRequest) GetItemConcurNum() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetItemConcurNum() {
		return SubmitExperimentRequest_ItemConcurNum_DEFAULT
	}
	return *p.ItemConcurNum
}

var SubmitExperimentRequest_EvaluatorsConcurNum_DEFAULT int32

func (p *SubmitExperimentRequest) GetEvaluatorsConcurNum() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorsConcurNum() {
		return SubmitExperimentRequest_EvaluatorsConcurNum_DEFAULT
	}
	return *p.EvaluatorsConcurNum
}

var SubmitExperimentRequest_CreateEvalTargetParam_DEFAULT *eval_target.CreateEvalTargetParam

func (p *SubmitExperimentRequest) GetCreateEvalTargetParam() (v *eval_target.CreateEvalTargetParam) {
	if p == nil {
		return
	}
	if !p.IsSetCreateEvalTargetParam() {
		return SubmitExperimentRequest_CreateEvalTargetParam_DEFAULT
	}
	return p.CreateEvalTargetParam
}

var SubmitExperimentRequest_ExptType_DEFAULT expt.ExptType

func (p *SubmitExperimentRequest) GetExptType() (v expt.ExptType) {
	if p == nil {
		return
	}
	if !p.IsSetExptType() {
		return SubmitExperimentRequest_ExptType_DEFAULT
	}
	return *p.ExptType
}

var SubmitExperimentRequest_MaxAliveTime_DEFAULT int64

func (p *SubmitExperimentRequest) GetMaxAliveTime() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetMaxAliveTime() {
		return SubmitExperimentRequest_MaxAliveTime_DEFAULT
	}
	return *p.MaxAliveTime
}

var SubmitExperimentRequest_SourceType_DEFAULT expt.SourceType

func (p *SubmitExperimentRequest) GetSourceType() (v expt.SourceType) {
	if p == nil {
		return
	}
	if !p.IsSetSourceType() {
		return SubmitExperimentRequest_SourceType_DEFAULT
	}
	return *p.SourceType
}

var SubmitExperimentRequest_SourceID_DEFAULT string

func (p *SubmitExperimentRequest) GetSourceID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetSourceID() {
		return SubmitExperimentRequest_SourceID_DEFAULT
	}
	return *p.SourceID
}

var SubmitExperimentRequest_Ext_DEFAULT map[string]string

func (p *SubmitExperimentRequest) GetExt() (v map[string]string) {
	if p == nil {
		return
	}
	if !p.IsSetExt() {
		return SubmitExperimentRequest_Ext_DEFAULT
	}
	return p.Ext
}

var SubmitExperimentRequest_Session_DEFAULT *common.Session

func (p *SubmitExperimentRequest) GetSession() (v *common.Session) {
	if p == nil {
		return
	}
	if !p.IsSetSession() {
		return SubmitExperimentRequest_Session_DEFAULT
	}
	return p.Session
}

var SubmitExperimentRequest_Base_DEFAULT *base.Base

func (p *SubmitExperimentRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return SubmitExperimentRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *SubmitExperimentRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *SubmitExperimentRequest) SetEvalSetVersionID(val *int64) {
	p.EvalSetVersionID = val
}
func (p *SubmitExperimentRequest) SetTargetVersionID(val *int64) {
	p.TargetVersionID = val
}
func (p *SubmitExperimentRequest) SetEvaluatorVersionIds(val []int64) {
	p.EvaluatorVersionIds = val
}
func (p *SubmitExperimentRequest) SetName(val *string) {
	p.Name = val
}
func (p *SubmitExperimentRequest) SetDesc(val *string) {
	p.Desc = val
}
func (p *SubmitExperimentRequest) SetEvalSetID(val *int64) {
	p.EvalSetID = val
}
func (p *SubmitExperimentRequest) SetTargetID(val *int64) {
	p.TargetID = val
}
func (p *SubmitExperimentRequest) SetTargetFieldMapping(val *expt.TargetFieldMapping) {
	p.TargetFieldMapping = val
}
func (p *SubmitExperimentRequest) SetEvaluatorFieldMapping(val []*expt.EvaluatorFieldMapping) {
	p.EvaluatorFieldMapping = val
}
func (p *SubmitExperimentRequest) SetItemConcurNum(val *int32) {
	p.ItemConcurNum = val
}
func (p *SubmitExperimentRequest) SetEvaluatorsConcurNum(val *int32) {
	p.EvaluatorsConcurNum = val
}
func (p *SubmitExperimentRequest) SetCreateEvalTargetParam(val *eval_target.CreateEvalTargetParam) {
	p.CreateEvalTargetParam = val
}
func (p *SubmitExperimentRequest) SetExptType(val *expt.ExptType) {
	p.ExptType = val
}
func (p *SubmitExperimentRequest) SetMaxAliveTime(val *int64) {
	p.MaxAliveTime = val
}
func (p *SubmitExperimentRequest) SetSourceType(val *expt.SourceType) {
	p.SourceType = val
}
func (p *SubmitExperimentRequest) SetSourceID(val *string) {
	p.SourceID = val
}
func (p *SubmitExperimentRequest) SetExt(val map[string]string) {
	p.Ext = val
}
func (p *SubmitExperimentRequest) SetSession(val *common.Session) {
	p.Session = val
}
func (p *SubmitExperimentRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_SubmitExperimentRequest = map[int16]string{
	1:   "workspace_id",
	2:   "eval_set_version_id",
	3:   "target_version_id",
	4:   "evaluator_version_ids",
	5:   "name",
	6:   "desc",
	7:   "eval_set_id",
	8:   "target_id",
	20:  "target_field_mapping",
	21:  "evaluator_field_mapping",
	22:  "item_concur_num",
	23:  "evaluators_concur_num",
	24:  "create_eval_target_param",
	30:  "expt_type",
	31:  "max_alive_time",
	32:  "source_type",
	33:  "source_id",
	100: "ext",
	200: "session",
	255: "Base",
}

func (p *SubmitExperimentRequest) IsSetEvalSetVersionID() bool {
	return p.EvalSetVersionID != nil
}

func (p *SubmitExperimentRequest) IsSetTargetVersionID() bool {
	return p.TargetVersionID != nil
}

func (p *SubmitExperimentRequest) IsSetEvaluatorVersionIds() bool {
	return p.EvaluatorVersionIds != nil
}

func (p *SubmitExperimentRequest) IsSetName() bool {
	return p.Name != nil
}

func (p *SubmitExperimentRequest) IsSetDesc() bool {
	return p.Desc != nil
}

func (p *SubmitExperimentRequest) IsSetEvalSetID() bool {
	return p.EvalSetID != nil
}

func (p *SubmitExperimentRequest) IsSetTargetID() bool {
	return p.TargetID != nil
}

func (p *SubmitExperimentRequest) IsSetTargetFieldMapping() bool {
	return p.TargetFieldMapping != nil
}

func (p *SubmitExperimentRequest) IsSetEvaluatorFieldMapping() bool {
	return p.EvaluatorFieldMapping != nil
}

func (p *SubmitExperimentRequest) IsSetItemConcurNum() bool {
	return p.ItemConcurNum != nil
}

func (p *SubmitExperimentRequest) IsSetEvaluatorsConcurNum() bool {
	return p.EvaluatorsConcurNum != nil
}

func (p *SubmitExperimentRequest) IsSetCreateEvalTargetParam() bool {
	return p.CreateEvalTargetParam != nil
}

func (p *SubmitExperimentRequest) IsSetExptType() bool {
	return p.ExptType != nil
}

func (p *SubmitExperimentRequest) IsSetMaxAliveTime() bool {
	return p.MaxAliveTime != nil
}

func (p *SubmitExperimentRequest) IsSetSourceType() bool {
	return p.SourceType != nil
}

func (p *SubmitExperimentRequest) IsSetSourceID() bool {
	return p.SourceID != nil
}

func (p *SubmitExperimentRequest) IsSetExt() bool {
	return p.Ext != nil
}

func (p *SubmitExperimentRequest) IsSetSession() bool {
	return p.Session != nil
}

func (p *SubmitExperimentRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *SubmitExperimentRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 22:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 23:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField23(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 24:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField24(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 30:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField30(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 31:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField31(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 32:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField32(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 33:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField33(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 200:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField200(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SubmitExperimentRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_SubmitExperimentRequest[fieldId]))
}

func (p *SubmitExperimentRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *SubmitExperimentRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvalSetVersionID = _field
	return nil
}
func (p *SubmitExperimentRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TargetVersionID = _field
	return nil
}
func (p *SubmitExperimentRequest) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.EvaluatorVersionIds = _field
	return nil
}
func (p *SubmitExperimentRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *SubmitExperimentRequest) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Desc = _field
	return nil
}
func (p *SubmitExperimentRequest) ReadField7(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvalSetID = _field
	return nil
}
func (p *SubmitExperimentRequest) ReadField8(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TargetID = _field
	return nil
}
func (p *SubmitExperimentRequest) ReadField20(iprot thrift.TProtocol) error {
	_field := expt.NewTargetFieldMapping()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.TargetFieldMapping = _field
	return nil
}
func (p *SubmitExperimentRequest) ReadField21(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*expt.EvaluatorFieldMapping, 0, size)
	values := make([]expt.EvaluatorFieldMapping, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.EvaluatorFieldMapping = _field
	return nil
}
func (p *SubmitExperimentRequest) ReadField22(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ItemConcurNum = _field
	return nil
}
func (p *SubmitExperimentRequest) ReadField23(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvaluatorsConcurNum = _field
	return nil
}
func (p *SubmitExperimentRequest) ReadField24(iprot thrift.TProtocol) error {
	_field := eval_target.NewCreateEvalTargetParam()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.CreateEvalTargetParam = _field
	return nil
}
func (p *SubmitExperimentRequest) ReadField30(iprot thrift.TProtocol) error {

	var _field *expt.ExptType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := expt.ExptType(v)
		_field = &tmp
	}
	p.ExptType = _field
	return nil
}
func (p *SubmitExperimentRequest) ReadField31(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MaxAliveTime = _field
	return nil
}
func (p *SubmitExperimentRequest) ReadField32(iprot thrift.TProtocol) error {

	var _field *expt.SourceType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := expt.SourceType(v)
		_field = &tmp
	}
	p.SourceType = _field
	return nil
}
func (p *SubmitExperimentRequest) ReadField33(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SourceID = _field
	return nil
}
func (p *SubmitExperimentRequest) ReadField100(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.Ext = _field
	return nil
}
func (p *SubmitExperimentRequest) ReadField200(iprot thrift.TProtocol) error {
	_field := common.NewSession()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Session = _field
	return nil
}
func (p *SubmitExperimentRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *SubmitExperimentRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SubmitExperimentRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
		if err = p.writeField23(oprot); err != nil {
			fieldId = 23
			goto WriteFieldError
		}
		if err = p.writeField24(oprot); err != nil {
			fieldId = 24
			goto WriteFieldError
		}
		if err = p.writeField30(oprot); err != nil {
			fieldId = 30
			goto WriteFieldError
		}
		if err = p.writeField31(oprot); err != nil {
			fieldId = 31
			goto WriteFieldError
		}
		if err = p.writeField32(oprot); err != nil {
			fieldId = 32
			goto WriteFieldError
		}
		if err = p.writeField33(oprot); err != nil {
			fieldId = 33
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField200(oprot); err != nil {
			fieldId = 200
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SubmitExperimentRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *SubmitExperimentRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvalSetVersionID() {
		if err = oprot.WriteFieldBegin("eval_set_version_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.EvalSetVersionID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *SubmitExperimentRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTargetVersionID() {
		if err = oprot.WriteFieldBegin("target_version_id", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TargetVersionID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *SubmitExperimentRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorVersionIds() {
		if err = oprot.WriteFieldBegin("evaluator_version_ids", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.EvaluatorVersionIds)); err != nil {
			return err
		}
		for _, v := range p.EvaluatorVersionIds {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *SubmitExperimentRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *SubmitExperimentRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetDesc() {
		if err = oprot.WriteFieldBegin("desc", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Desc); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *SubmitExperimentRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvalSetID() {
		if err = oprot.WriteFieldBegin("eval_set_id", thrift.I64, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.EvalSetID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}
func (p *SubmitExperimentRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetTargetID() {
		if err = oprot.WriteFieldBegin("target_id", thrift.I64, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TargetID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}
func (p *SubmitExperimentRequest) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetTargetFieldMapping() {
		if err = oprot.WriteFieldBegin("target_field_mapping", thrift.STRUCT, 20); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.TargetFieldMapping.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}
func (p *SubmitExperimentRequest) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorFieldMapping() {
		if err = oprot.WriteFieldBegin("evaluator_field_mapping", thrift.LIST, 21); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EvaluatorFieldMapping)); err != nil {
			return err
		}
		for _, v := range p.EvaluatorFieldMapping {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}
func (p *SubmitExperimentRequest) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetItemConcurNum() {
		if err = oprot.WriteFieldBegin("item_concur_num", thrift.I32, 22); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.ItemConcurNum); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}
func (p *SubmitExperimentRequest) writeField23(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorsConcurNum() {
		if err = oprot.WriteFieldBegin("evaluators_concur_num", thrift.I32, 23); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.EvaluatorsConcurNum); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 end error: ", p), err)
}
func (p *SubmitExperimentRequest) writeField24(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreateEvalTargetParam() {
		if err = oprot.WriteFieldBegin("create_eval_target_param", thrift.STRUCT, 24); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.CreateEvalTargetParam.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 end error: ", p), err)
}
func (p *SubmitExperimentRequest) writeField30(oprot thrift.TProtocol) (err error) {
	if p.IsSetExptType() {
		if err = oprot.WriteFieldBegin("expt_type", thrift.I32, 30); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.ExptType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 30 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 30 end error: ", p), err)
}
func (p *SubmitExperimentRequest) writeField31(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxAliveTime() {
		if err = oprot.WriteFieldBegin("max_alive_time", thrift.I64, 31); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.MaxAliveTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 31 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 31 end error: ", p), err)
}
func (p *SubmitExperimentRequest) writeField32(oprot thrift.TProtocol) (err error) {
	if p.IsSetSourceType() {
		if err = oprot.WriteFieldBegin("source_type", thrift.I32, 32); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.SourceType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 32 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 32 end error: ", p), err)
}
func (p *SubmitExperimentRequest) writeField33(oprot thrift.TProtocol) (err error) {
	if p.IsSetSourceID() {
		if err = oprot.WriteFieldBegin("source_id", thrift.STRING, 33); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.SourceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 33 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 33 end error: ", p), err)
}
func (p *SubmitExperimentRequest) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetExt() {
		if err = oprot.WriteFieldBegin("ext", thrift.MAP, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Ext)); err != nil {
			return err
		}
		for k, v := range p.Ext {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}
func (p *SubmitExperimentRequest) writeField200(oprot thrift.TProtocol) (err error) {
	if p.IsSetSession() {
		if err = oprot.WriteFieldBegin("session", thrift.STRUCT, 200); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Session.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 200 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 200 end error: ", p), err)
}
func (p *SubmitExperimentRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *SubmitExperimentRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubmitExperimentRequest(%+v)", *p)

}

func (p *SubmitExperimentRequest) DeepEqual(ano *SubmitExperimentRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvalSetVersionID) {
		return false
	}
	if !p.Field3DeepEqual(ano.TargetVersionID) {
		return false
	}
	if !p.Field4DeepEqual(ano.EvaluatorVersionIds) {
		return false
	}
	if !p.Field5DeepEqual(ano.Name) {
		return false
	}
	if !p.Field6DeepEqual(ano.Desc) {
		return false
	}
	if !p.Field7DeepEqual(ano.EvalSetID) {
		return false
	}
	if !p.Field8DeepEqual(ano.TargetID) {
		return false
	}
	if !p.Field20DeepEqual(ano.TargetFieldMapping) {
		return false
	}
	if !p.Field21DeepEqual(ano.EvaluatorFieldMapping) {
		return false
	}
	if !p.Field22DeepEqual(ano.ItemConcurNum) {
		return false
	}
	if !p.Field23DeepEqual(ano.EvaluatorsConcurNum) {
		return false
	}
	if !p.Field24DeepEqual(ano.CreateEvalTargetParam) {
		return false
	}
	if !p.Field30DeepEqual(ano.ExptType) {
		return false
	}
	if !p.Field31DeepEqual(ano.MaxAliveTime) {
		return false
	}
	if !p.Field32DeepEqual(ano.SourceType) {
		return false
	}
	if !p.Field33DeepEqual(ano.SourceID) {
		return false
	}
	if !p.Field100DeepEqual(ano.Ext) {
		return false
	}
	if !p.Field200DeepEqual(ano.Session) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *SubmitExperimentRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *SubmitExperimentRequest) Field2DeepEqual(src *int64) bool {

	if p.EvalSetVersionID == src {
		return true
	} else if p.EvalSetVersionID == nil || src == nil {
		return false
	}
	if *p.EvalSetVersionID != *src {
		return false
	}
	return true
}
func (p *SubmitExperimentRequest) Field3DeepEqual(src *int64) bool {

	if p.TargetVersionID == src {
		return true
	} else if p.TargetVersionID == nil || src == nil {
		return false
	}
	if *p.TargetVersionID != *src {
		return false
	}
	return true
}
func (p *SubmitExperimentRequest) Field4DeepEqual(src []int64) bool {

	if len(p.EvaluatorVersionIds) != len(src) {
		return false
	}
	for i, v := range p.EvaluatorVersionIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *SubmitExperimentRequest) Field5DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *SubmitExperimentRequest) Field6DeepEqual(src *string) bool {

	if p.Desc == src {
		return true
	} else if p.Desc == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Desc, *src) != 0 {
		return false
	}
	return true
}
func (p *SubmitExperimentRequest) Field7DeepEqual(src *int64) bool {

	if p.EvalSetID == src {
		return true
	} else if p.EvalSetID == nil || src == nil {
		return false
	}
	if *p.EvalSetID != *src {
		return false
	}
	return true
}
func (p *SubmitExperimentRequest) Field8DeepEqual(src *int64) bool {

	if p.TargetID == src {
		return true
	} else if p.TargetID == nil || src == nil {
		return false
	}
	if *p.TargetID != *src {
		return false
	}
	return true
}
func (p *SubmitExperimentRequest) Field20DeepEqual(src *expt.TargetFieldMapping) bool {

	if !p.TargetFieldMapping.DeepEqual(src) {
		return false
	}
	return true
}
func (p *SubmitExperimentRequest) Field21DeepEqual(src []*expt.EvaluatorFieldMapping) bool {

	if len(p.EvaluatorFieldMapping) != len(src) {
		return false
	}
	for i, v := range p.EvaluatorFieldMapping {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *SubmitExperimentRequest) Field22DeepEqual(src *int32) bool {

	if p.ItemConcurNum == src {
		return true
	} else if p.ItemConcurNum == nil || src == nil {
		return false
	}
	if *p.ItemConcurNum != *src {
		return false
	}
	return true
}
func (p *SubmitExperimentRequest) Field23DeepEqual(src *int32) bool {

	if p.EvaluatorsConcurNum == src {
		return true
	} else if p.EvaluatorsConcurNum == nil || src == nil {
		return false
	}
	if *p.EvaluatorsConcurNum != *src {
		return false
	}
	return true
}
func (p *SubmitExperimentRequest) Field24DeepEqual(src *eval_target.CreateEvalTargetParam) bool {

	if !p.CreateEvalTargetParam.DeepEqual(src) {
		return false
	}
	return true
}
func (p *SubmitExperimentRequest) Field30DeepEqual(src *expt.ExptType) bool {

	if p.ExptType == src {
		return true
	} else if p.ExptType == nil || src == nil {
		return false
	}
	if *p.ExptType != *src {
		return false
	}
	return true
}
func (p *SubmitExperimentRequest) Field31DeepEqual(src *int64) bool {

	if p.MaxAliveTime == src {
		return true
	} else if p.MaxAliveTime == nil || src == nil {
		return false
	}
	if *p.MaxAliveTime != *src {
		return false
	}
	return true
}
func (p *SubmitExperimentRequest) Field32DeepEqual(src *expt.SourceType) bool {

	if p.SourceType == src {
		return true
	} else if p.SourceType == nil || src == nil {
		return false
	}
	if *p.SourceType != *src {
		return false
	}
	return true
}
func (p *SubmitExperimentRequest) Field33DeepEqual(src *string) bool {

	if p.SourceID == src {
		return true
	} else if p.SourceID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.SourceID, *src) != 0 {
		return false
	}
	return true
}
func (p *SubmitExperimentRequest) Field100DeepEqual(src map[string]string) bool {

	if len(p.Ext) != len(src) {
		return false
	}
	for k, v := range p.Ext {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *SubmitExperimentRequest) Field200DeepEqual(src *common.Session) bool {

	if !p.Session.DeepEqual(src) {
		return false
	}
	return true
}
func (p *SubmitExperimentRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type SubmitExperimentResponse struct {
	Experiment *expt.Experiment `thrift:"experiment,1,optional" frugal:"1,optional,expt.Experiment" form:"experiment" json:"experiment,omitempty"`
	RunID      *int64           `thrift:"run_id,2,optional" frugal:"2,optional,i64" json:"run_id" form:"run_id" `
	BaseResp   *base.BaseResp   `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewSubmitExperimentResponse() *SubmitExperimentResponse {
	return &SubmitExperimentResponse{}
}

func (p *SubmitExperimentResponse) InitDefault() {
}

var SubmitExperimentResponse_Experiment_DEFAULT *expt.Experiment

func (p *SubmitExperimentResponse) GetExperiment() (v *expt.Experiment) {
	if p == nil {
		return
	}
	if !p.IsSetExperiment() {
		return SubmitExperimentResponse_Experiment_DEFAULT
	}
	return p.Experiment
}

var SubmitExperimentResponse_RunID_DEFAULT int64

func (p *SubmitExperimentResponse) GetRunID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetRunID() {
		return SubmitExperimentResponse_RunID_DEFAULT
	}
	return *p.RunID
}

var SubmitExperimentResponse_BaseResp_DEFAULT *base.BaseResp

func (p *SubmitExperimentResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return SubmitExperimentResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *SubmitExperimentResponse) SetExperiment(val *expt.Experiment) {
	p.Experiment = val
}
func (p *SubmitExperimentResponse) SetRunID(val *int64) {
	p.RunID = val
}
func (p *SubmitExperimentResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_SubmitExperimentResponse = map[int16]string{
	1:   "experiment",
	2:   "run_id",
	255: "BaseResp",
}

func (p *SubmitExperimentResponse) IsSetExperiment() bool {
	return p.Experiment != nil
}

func (p *SubmitExperimentResponse) IsSetRunID() bool {
	return p.RunID != nil
}

func (p *SubmitExperimentResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *SubmitExperimentResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SubmitExperimentResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SubmitExperimentResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := expt.NewExperiment()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Experiment = _field
	return nil
}
func (p *SubmitExperimentResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.RunID = _field
	return nil
}
func (p *SubmitExperimentResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *SubmitExperimentResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SubmitExperimentResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SubmitExperimentResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetExperiment() {
		if err = oprot.WriteFieldBegin("experiment", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Experiment.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *SubmitExperimentResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRunID() {
		if err = oprot.WriteFieldBegin("run_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.RunID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *SubmitExperimentResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *SubmitExperimentResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubmitExperimentResponse(%+v)", *p)

}

func (p *SubmitExperimentResponse) DeepEqual(ano *SubmitExperimentResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Experiment) {
		return false
	}
	if !p.Field2DeepEqual(ano.RunID) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *SubmitExperimentResponse) Field1DeepEqual(src *expt.Experiment) bool {

	if !p.Experiment.DeepEqual(src) {
		return false
	}
	return true
}
func (p *SubmitExperimentResponse) Field2DeepEqual(src *int64) bool {

	if p.RunID == src {
		return true
	} else if p.RunID == nil || src == nil {
		return false
	}
	if *p.RunID != *src {
		return false
	}
	return true
}
func (p *SubmitExperimentResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type ListExperimentsRequest struct {
	WorkspaceID  int64                  `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" `
	PageNumber   *int32                 `thrift:"page_number,2,optional" frugal:"2,optional,i32" form:"page_number" json:"page_number,omitempty"`
	PageSize     *int32                 `thrift:"page_size,3,optional" frugal:"3,optional,i32" form:"page_size" json:"page_size,omitempty"`
	FilterOption *expt.ExptFilterOption `thrift:"filter_option,20,optional" frugal:"20,optional,expt.ExptFilterOption" form:"filter_option" json:"filter_option,omitempty"`
	OrderBys     []*common.OrderBy      `thrift:"order_bys,21,optional" frugal:"21,optional,list<common.OrderBy>" form:"order_bys" json:"order_bys,omitempty"`
	Base         *base.Base             `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewListExperimentsRequest() *ListExperimentsRequest {
	return &ListExperimentsRequest{}
}

func (p *ListExperimentsRequest) InitDefault() {
}

func (p *ListExperimentsRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

var ListExperimentsRequest_PageNumber_DEFAULT int32

func (p *ListExperimentsRequest) GetPageNumber() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageNumber() {
		return ListExperimentsRequest_PageNumber_DEFAULT
	}
	return *p.PageNumber
}

var ListExperimentsRequest_PageSize_DEFAULT int32

func (p *ListExperimentsRequest) GetPageSize() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageSize() {
		return ListExperimentsRequest_PageSize_DEFAULT
	}
	return *p.PageSize
}

var ListExperimentsRequest_FilterOption_DEFAULT *expt.ExptFilterOption

func (p *ListExperimentsRequest) GetFilterOption() (v *expt.ExptFilterOption) {
	if p == nil {
		return
	}
	if !p.IsSetFilterOption() {
		return ListExperimentsRequest_FilterOption_DEFAULT
	}
	return p.FilterOption
}

var ListExperimentsRequest_OrderBys_DEFAULT []*common.OrderBy

func (p *ListExperimentsRequest) GetOrderBys() (v []*common.OrderBy) {
	if p == nil {
		return
	}
	if !p.IsSetOrderBys() {
		return ListExperimentsRequest_OrderBys_DEFAULT
	}
	return p.OrderBys
}

var ListExperimentsRequest_Base_DEFAULT *base.Base

func (p *ListExperimentsRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return ListExperimentsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ListExperimentsRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *ListExperimentsRequest) SetPageNumber(val *int32) {
	p.PageNumber = val
}
func (p *ListExperimentsRequest) SetPageSize(val *int32) {
	p.PageSize = val
}
func (p *ListExperimentsRequest) SetFilterOption(val *expt.ExptFilterOption) {
	p.FilterOption = val
}
func (p *ListExperimentsRequest) SetOrderBys(val []*common.OrderBy) {
	p.OrderBys = val
}
func (p *ListExperimentsRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListExperimentsRequest = map[int16]string{
	1:   "workspace_id",
	2:   "page_number",
	3:   "page_size",
	20:  "filter_option",
	21:  "order_bys",
	255: "Base",
}

func (p *ListExperimentsRequest) IsSetPageNumber() bool {
	return p.PageNumber != nil
}

func (p *ListExperimentsRequest) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *ListExperimentsRequest) IsSetFilterOption() bool {
	return p.FilterOption != nil
}

func (p *ListExperimentsRequest) IsSetOrderBys() bool {
	return p.OrderBys != nil
}

func (p *ListExperimentsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListExperimentsRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListExperimentsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ListExperimentsRequest[fieldId]))
}

func (p *ListExperimentsRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *ListExperimentsRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageNumber = _field
	return nil
}
func (p *ListExperimentsRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageSize = _field
	return nil
}
func (p *ListExperimentsRequest) ReadField20(iprot thrift.TProtocol) error {
	_field := expt.NewExptFilterOption()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.FilterOption = _field
	return nil
}
func (p *ListExperimentsRequest) ReadField21(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*common.OrderBy, 0, size)
	values := make([]common.OrderBy, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.OrderBys = _field
	return nil
}
func (p *ListExperimentsRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *ListExperimentsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListExperimentsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListExperimentsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListExperimentsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageNumber() {
		if err = oprot.WriteFieldBegin("page_number", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageNumber); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ListExperimentsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("page_size", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ListExperimentsRequest) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetFilterOption() {
		if err = oprot.WriteFieldBegin("filter_option", thrift.STRUCT, 20); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.FilterOption.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}
func (p *ListExperimentsRequest) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrderBys() {
		if err = oprot.WriteFieldBegin("order_bys", thrift.LIST, 21); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.OrderBys)); err != nil {
			return err
		}
		for _, v := range p.OrderBys {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}
func (p *ListExperimentsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListExperimentsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListExperimentsRequest(%+v)", *p)

}

func (p *ListExperimentsRequest) DeepEqual(ano *ListExperimentsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageNumber) {
		return false
	}
	if !p.Field3DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field20DeepEqual(ano.FilterOption) {
		return false
	}
	if !p.Field21DeepEqual(ano.OrderBys) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListExperimentsRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *ListExperimentsRequest) Field2DeepEqual(src *int32) bool {

	if p.PageNumber == src {
		return true
	} else if p.PageNumber == nil || src == nil {
		return false
	}
	if *p.PageNumber != *src {
		return false
	}
	return true
}
func (p *ListExperimentsRequest) Field3DeepEqual(src *int32) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}
func (p *ListExperimentsRequest) Field20DeepEqual(src *expt.ExptFilterOption) bool {

	if !p.FilterOption.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ListExperimentsRequest) Field21DeepEqual(src []*common.OrderBy) bool {

	if len(p.OrderBys) != len(src) {
		return false
	}
	for i, v := range p.OrderBys {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListExperimentsRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ListExperimentsResponse struct {
	Experiments []*expt.Experiment `thrift:"experiments,1,optional" frugal:"1,optional,list<expt.Experiment>" form:"experiments" json:"experiments,omitempty"`
	Total       *int32             `thrift:"total,2,optional" frugal:"2,optional,i32" form:"total" json:"total,omitempty"`
	BaseResp    *base.BaseResp     `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewListExperimentsResponse() *ListExperimentsResponse {
	return &ListExperimentsResponse{}
}

func (p *ListExperimentsResponse) InitDefault() {
}

var ListExperimentsResponse_Experiments_DEFAULT []*expt.Experiment

func (p *ListExperimentsResponse) GetExperiments() (v []*expt.Experiment) {
	if p == nil {
		return
	}
	if !p.IsSetExperiments() {
		return ListExperimentsResponse_Experiments_DEFAULT
	}
	return p.Experiments
}

var ListExperimentsResponse_Total_DEFAULT int32

func (p *ListExperimentsResponse) GetTotal() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetTotal() {
		return ListExperimentsResponse_Total_DEFAULT
	}
	return *p.Total
}

var ListExperimentsResponse_BaseResp_DEFAULT *base.BaseResp

func (p *ListExperimentsResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return ListExperimentsResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ListExperimentsResponse) SetExperiments(val []*expt.Experiment) {
	p.Experiments = val
}
func (p *ListExperimentsResponse) SetTotal(val *int32) {
	p.Total = val
}
func (p *ListExperimentsResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_ListExperimentsResponse = map[int16]string{
	1:   "experiments",
	2:   "total",
	255: "BaseResp",
}

func (p *ListExperimentsResponse) IsSetExperiments() bool {
	return p.Experiments != nil
}

func (p *ListExperimentsResponse) IsSetTotal() bool {
	return p.Total != nil
}

func (p *ListExperimentsResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ListExperimentsResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListExperimentsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListExperimentsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*expt.Experiment, 0, size)
	values := make([]expt.Experiment, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Experiments = _field
	return nil
}
func (p *ListExperimentsResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Total = _field
	return nil
}
func (p *ListExperimentsResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *ListExperimentsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListExperimentsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListExperimentsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetExperiments() {
		if err = oprot.WriteFieldBegin("experiments", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Experiments)); err != nil {
			return err
		}
		for _, v := range p.Experiments {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListExperimentsResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotal() {
		if err = oprot.WriteFieldBegin("total", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Total); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ListExperimentsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListExperimentsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListExperimentsResponse(%+v)", *p)

}

func (p *ListExperimentsResponse) DeepEqual(ano *ListExperimentsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Experiments) {
		return false
	}
	if !p.Field2DeepEqual(ano.Total) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *ListExperimentsResponse) Field1DeepEqual(src []*expt.Experiment) bool {

	if len(p.Experiments) != len(src) {
		return false
	}
	for i, v := range p.Experiments {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListExperimentsResponse) Field2DeepEqual(src *int32) bool {

	if p.Total == src {
		return true
	} else if p.Total == nil || src == nil {
		return false
	}
	if *p.Total != *src {
		return false
	}
	return true
}
func (p *ListExperimentsResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type BatchGetExperimentsRequest struct {
	WorkspaceID int64      `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" `
	ExptIds     []int64    `thrift:"expt_ids,2,required" frugal:"2,required,list<i64>" json:"expt_ids" form:"expt_ids,required" `
	Base        *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewBatchGetExperimentsRequest() *BatchGetExperimentsRequest {
	return &BatchGetExperimentsRequest{}
}

func (p *BatchGetExperimentsRequest) InitDefault() {
}

func (p *BatchGetExperimentsRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *BatchGetExperimentsRequest) GetExptIds() (v []int64) {
	if p != nil {
		return p.ExptIds
	}
	return
}

var BatchGetExperimentsRequest_Base_DEFAULT *base.Base

func (p *BatchGetExperimentsRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return BatchGetExperimentsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *BatchGetExperimentsRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *BatchGetExperimentsRequest) SetExptIds(val []int64) {
	p.ExptIds = val
}
func (p *BatchGetExperimentsRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_BatchGetExperimentsRequest = map[int16]string{
	1:   "workspace_id",
	2:   "expt_ids",
	255: "Base",
}

func (p *BatchGetExperimentsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *BatchGetExperimentsRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetExptIds bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetExptIds = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetExptIds {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchGetExperimentsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_BatchGetExperimentsRequest[fieldId]))
}

func (p *BatchGetExperimentsRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *BatchGetExperimentsRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ExptIds = _field
	return nil
}
func (p *BatchGetExperimentsRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *BatchGetExperimentsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetExperimentsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchGetExperimentsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchGetExperimentsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("expt_ids", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.ExptIds)); err != nil {
		return err
	}
	for _, v := range p.ExptIds {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BatchGetExperimentsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchGetExperimentsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchGetExperimentsRequest(%+v)", *p)

}

func (p *BatchGetExperimentsRequest) DeepEqual(ano *BatchGetExperimentsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.ExptIds) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *BatchGetExperimentsRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *BatchGetExperimentsRequest) Field2DeepEqual(src []int64) bool {

	if len(p.ExptIds) != len(src) {
		return false
	}
	for i, v := range p.ExptIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *BatchGetExperimentsRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type BatchGetExperimentsResponse struct {
	Experiments []*expt.Experiment `thrift:"experiments,1,optional" frugal:"1,optional,list<expt.Experiment>" form:"experiments" json:"experiments,omitempty"`
	BaseResp    *base.BaseResp     `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewBatchGetExperimentsResponse() *BatchGetExperimentsResponse {
	return &BatchGetExperimentsResponse{}
}

func (p *BatchGetExperimentsResponse) InitDefault() {
}

var BatchGetExperimentsResponse_Experiments_DEFAULT []*expt.Experiment

func (p *BatchGetExperimentsResponse) GetExperiments() (v []*expt.Experiment) {
	if p == nil {
		return
	}
	if !p.IsSetExperiments() {
		return BatchGetExperimentsResponse_Experiments_DEFAULT
	}
	return p.Experiments
}

var BatchGetExperimentsResponse_BaseResp_DEFAULT *base.BaseResp

func (p *BatchGetExperimentsResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return BatchGetExperimentsResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *BatchGetExperimentsResponse) SetExperiments(val []*expt.Experiment) {
	p.Experiments = val
}
func (p *BatchGetExperimentsResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_BatchGetExperimentsResponse = map[int16]string{
	1:   "experiments",
	255: "BaseResp",
}

func (p *BatchGetExperimentsResponse) IsSetExperiments() bool {
	return p.Experiments != nil
}

func (p *BatchGetExperimentsResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *BatchGetExperimentsResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchGetExperimentsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchGetExperimentsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*expt.Experiment, 0, size)
	values := make([]expt.Experiment, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Experiments = _field
	return nil
}
func (p *BatchGetExperimentsResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *BatchGetExperimentsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetExperimentsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchGetExperimentsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetExperiments() {
		if err = oprot.WriteFieldBegin("experiments", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Experiments)); err != nil {
			return err
		}
		for _, v := range p.Experiments {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchGetExperimentsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchGetExperimentsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchGetExperimentsResponse(%+v)", *p)

}

func (p *BatchGetExperimentsResponse) DeepEqual(ano *BatchGetExperimentsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Experiments) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *BatchGetExperimentsResponse) Field1DeepEqual(src []*expt.Experiment) bool {

	if len(p.Experiments) != len(src) {
		return false
	}
	for i, v := range p.Experiments {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *BatchGetExperimentsResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateExperimentRequest struct {
	WorkspaceID int64      `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" `
	ExptID      int64      `thrift:"expt_id,2,required" frugal:"2,required,i64" json:"expt_id" path:"expt_id,required" `
	Name        *string    `thrift:"name,3,optional" frugal:"3,optional,string" form:"name" json:"name,omitempty"`
	Desc        *string    `thrift:"desc,4,optional" frugal:"4,optional,string" form:"desc" json:"desc,omitempty"`
	Base        *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewUpdateExperimentRequest() *UpdateExperimentRequest {
	return &UpdateExperimentRequest{}
}

func (p *UpdateExperimentRequest) InitDefault() {
}

func (p *UpdateExperimentRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *UpdateExperimentRequest) GetExptID() (v int64) {
	if p != nil {
		return p.ExptID
	}
	return
}

var UpdateExperimentRequest_Name_DEFAULT string

func (p *UpdateExperimentRequest) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return UpdateExperimentRequest_Name_DEFAULT
	}
	return *p.Name
}

var UpdateExperimentRequest_Desc_DEFAULT string

func (p *UpdateExperimentRequest) GetDesc() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDesc() {
		return UpdateExperimentRequest_Desc_DEFAULT
	}
	return *p.Desc
}

var UpdateExperimentRequest_Base_DEFAULT *base.Base

func (p *UpdateExperimentRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return UpdateExperimentRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *UpdateExperimentRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *UpdateExperimentRequest) SetExptID(val int64) {
	p.ExptID = val
}
func (p *UpdateExperimentRequest) SetName(val *string) {
	p.Name = val
}
func (p *UpdateExperimentRequest) SetDesc(val *string) {
	p.Desc = val
}
func (p *UpdateExperimentRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_UpdateExperimentRequest = map[int16]string{
	1:   "workspace_id",
	2:   "expt_id",
	3:   "name",
	4:   "desc",
	255: "Base",
}

func (p *UpdateExperimentRequest) IsSetName() bool {
	return p.Name != nil
}

func (p *UpdateExperimentRequest) IsSetDesc() bool {
	return p.Desc != nil
}

func (p *UpdateExperimentRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateExperimentRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetExptID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetExptID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetExptID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateExperimentRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_UpdateExperimentRequest[fieldId]))
}

func (p *UpdateExperimentRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *UpdateExperimentRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ExptID = _field
	return nil
}
func (p *UpdateExperimentRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *UpdateExperimentRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Desc = _field
	return nil
}
func (p *UpdateExperimentRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *UpdateExperimentRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateExperimentRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateExperimentRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *UpdateExperimentRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("expt_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ExptID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *UpdateExperimentRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *UpdateExperimentRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDesc() {
		if err = oprot.WriteFieldBegin("desc", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Desc); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *UpdateExperimentRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpdateExperimentRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateExperimentRequest(%+v)", *p)

}

func (p *UpdateExperimentRequest) DeepEqual(ano *UpdateExperimentRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.ExptID) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field4DeepEqual(ano.Desc) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *UpdateExperimentRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *UpdateExperimentRequest) Field2DeepEqual(src int64) bool {

	if p.ExptID != src {
		return false
	}
	return true
}
func (p *UpdateExperimentRequest) Field3DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *UpdateExperimentRequest) Field4DeepEqual(src *string) bool {

	if p.Desc == src {
		return true
	} else if p.Desc == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Desc, *src) != 0 {
		return false
	}
	return true
}
func (p *UpdateExperimentRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateExperimentResponse struct {
	Experiment *expt.Experiment `thrift:"experiment,1,optional" frugal:"1,optional,expt.Experiment" form:"experiment" json:"experiment,omitempty"`
	BaseResp   *base.BaseResp   `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewUpdateExperimentResponse() *UpdateExperimentResponse {
	return &UpdateExperimentResponse{}
}

func (p *UpdateExperimentResponse) InitDefault() {
}

var UpdateExperimentResponse_Experiment_DEFAULT *expt.Experiment

func (p *UpdateExperimentResponse) GetExperiment() (v *expt.Experiment) {
	if p == nil {
		return
	}
	if !p.IsSetExperiment() {
		return UpdateExperimentResponse_Experiment_DEFAULT
	}
	return p.Experiment
}

var UpdateExperimentResponse_BaseResp_DEFAULT *base.BaseResp

func (p *UpdateExperimentResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return UpdateExperimentResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *UpdateExperimentResponse) SetExperiment(val *expt.Experiment) {
	p.Experiment = val
}
func (p *UpdateExperimentResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_UpdateExperimentResponse = map[int16]string{
	1:   "experiment",
	255: "BaseResp",
}

func (p *UpdateExperimentResponse) IsSetExperiment() bool {
	return p.Experiment != nil
}

func (p *UpdateExperimentResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *UpdateExperimentResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateExperimentResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateExperimentResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := expt.NewExperiment()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Experiment = _field
	return nil
}
func (p *UpdateExperimentResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *UpdateExperimentResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateExperimentResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateExperimentResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetExperiment() {
		if err = oprot.WriteFieldBegin("experiment", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Experiment.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *UpdateExperimentResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpdateExperimentResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateExperimentResponse(%+v)", *p)

}

func (p *UpdateExperimentResponse) DeepEqual(ano *UpdateExperimentResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Experiment) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *UpdateExperimentResponse) Field1DeepEqual(src *expt.Experiment) bool {

	if !p.Experiment.DeepEqual(src) {
		return false
	}
	return true
}
func (p *UpdateExperimentResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type DeleteExperimentRequest struct {
	WorkspaceID int64      `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" `
	ExptID      int64      `thrift:"expt_id,2,required" frugal:"2,required,i64" json:"expt_id" path:"expt_id,required" `
	Base        *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewDeleteExperimentRequest() *DeleteExperimentRequest {
	return &DeleteExperimentRequest{}
}

func (p *DeleteExperimentRequest) InitDefault() {
}

func (p *DeleteExperimentRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *DeleteExperimentRequest) GetExptID() (v int64) {
	if p != nil {
		return p.ExptID
	}
	return
}

var DeleteExperimentRequest_Base_DEFAULT *base.Base

func (p *DeleteExperimentRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return DeleteExperimentRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *DeleteExperimentRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *DeleteExperimentRequest) SetExptID(val int64) {
	p.ExptID = val
}
func (p *DeleteExperimentRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_DeleteExperimentRequest = map[int16]string{
	1:   "workspace_id",
	2:   "expt_id",
	255: "Base",
}

func (p *DeleteExperimentRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *DeleteExperimentRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetExptID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetExptID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetExptID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteExperimentRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_DeleteExperimentRequest[fieldId]))
}

func (p *DeleteExperimentRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *DeleteExperimentRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ExptID = _field
	return nil
}
func (p *DeleteExperimentRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *DeleteExperimentRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteExperimentRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteExperimentRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *DeleteExperimentRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("expt_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ExptID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *DeleteExperimentRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *DeleteExperimentRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteExperimentRequest(%+v)", *p)

}

func (p *DeleteExperimentRequest) DeepEqual(ano *DeleteExperimentRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.ExptID) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *DeleteExperimentRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *DeleteExperimentRequest) Field2DeepEqual(src int64) bool {

	if p.ExptID != src {
		return false
	}
	return true
}
func (p *DeleteExperimentRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type DeleteExperimentResponse struct {
	BaseResp *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewDeleteExperimentResponse() *DeleteExperimentResponse {
	return &DeleteExperimentResponse{}
}

func (p *DeleteExperimentResponse) InitDefault() {
}

var DeleteExperimentResponse_BaseResp_DEFAULT *base.BaseResp

func (p *DeleteExperimentResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return DeleteExperimentResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *DeleteExperimentResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_DeleteExperimentResponse = map[int16]string{
	255: "BaseResp",
}

func (p *DeleteExperimentResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *DeleteExperimentResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteExperimentResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteExperimentResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *DeleteExperimentResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteExperimentResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteExperimentResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *DeleteExperimentResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteExperimentResponse(%+v)", *p)

}

func (p *DeleteExperimentResponse) DeepEqual(ano *DeleteExperimentResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *DeleteExperimentResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type BatchDeleteExperimentsRequest struct {
	WorkspaceID int64      `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" `
	ExptIds     []int64    `thrift:"expt_ids,2,required" frugal:"2,required,list<i64>" json:"expt_ids" form:"expt_ids,required" `
	Base        *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewBatchDeleteExperimentsRequest() *BatchDeleteExperimentsRequest {
	return &BatchDeleteExperimentsRequest{}
}

func (p *BatchDeleteExperimentsRequest) InitDefault() {
}

func (p *BatchDeleteExperimentsRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *BatchDeleteExperimentsRequest) GetExptIds() (v []int64) {
	if p != nil {
		return p.ExptIds
	}
	return
}

var BatchDeleteExperimentsRequest_Base_DEFAULT *base.Base

func (p *BatchDeleteExperimentsRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return BatchDeleteExperimentsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *BatchDeleteExperimentsRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *BatchDeleteExperimentsRequest) SetExptIds(val []int64) {
	p.ExptIds = val
}
func (p *BatchDeleteExperimentsRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_BatchDeleteExperimentsRequest = map[int16]string{
	1:   "workspace_id",
	2:   "expt_ids",
	255: "Base",
}

func (p *BatchDeleteExperimentsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *BatchDeleteExperimentsRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetExptIds bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetExptIds = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetExptIds {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchDeleteExperimentsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_BatchDeleteExperimentsRequest[fieldId]))
}

func (p *BatchDeleteExperimentsRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *BatchDeleteExperimentsRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ExptIds = _field
	return nil
}
func (p *BatchDeleteExperimentsRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *BatchDeleteExperimentsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchDeleteExperimentsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchDeleteExperimentsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchDeleteExperimentsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("expt_ids", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.ExptIds)); err != nil {
		return err
	}
	for _, v := range p.ExptIds {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BatchDeleteExperimentsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchDeleteExperimentsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchDeleteExperimentsRequest(%+v)", *p)

}

func (p *BatchDeleteExperimentsRequest) DeepEqual(ano *BatchDeleteExperimentsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.ExptIds) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *BatchDeleteExperimentsRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *BatchDeleteExperimentsRequest) Field2DeepEqual(src []int64) bool {

	if len(p.ExptIds) != len(src) {
		return false
	}
	for i, v := range p.ExptIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *BatchDeleteExperimentsRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type BatchDeleteExperimentsResponse struct {
	BaseResp *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewBatchDeleteExperimentsResponse() *BatchDeleteExperimentsResponse {
	return &BatchDeleteExperimentsResponse{}
}

func (p *BatchDeleteExperimentsResponse) InitDefault() {
}

var BatchDeleteExperimentsResponse_BaseResp_DEFAULT *base.BaseResp

func (p *BatchDeleteExperimentsResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return BatchDeleteExperimentsResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *BatchDeleteExperimentsResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_BatchDeleteExperimentsResponse = map[int16]string{
	255: "BaseResp",
}

func (p *BatchDeleteExperimentsResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *BatchDeleteExperimentsResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchDeleteExperimentsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchDeleteExperimentsResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *BatchDeleteExperimentsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchDeleteExperimentsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchDeleteExperimentsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchDeleteExperimentsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchDeleteExperimentsResponse(%+v)", *p)

}

func (p *BatchDeleteExperimentsResponse) DeepEqual(ano *BatchDeleteExperimentsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *BatchDeleteExperimentsResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type RunExperimentRequest struct {
	WorkspaceID *int64            `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" form:"workspace_id" `
	ExptID      *int64            `thrift:"expt_id,2,optional" frugal:"2,optional,i64" json:"expt_id" form:"expt_id" `
	ItemIds     []int64           `thrift:"item_ids,3,optional" frugal:"3,optional,list<i64>" json:"item_ids" form:"item_ids" `
	ExptType    *expt.ExptType    `thrift:"expt_type,10,optional" frugal:"10,optional,ExptType" form:"expt_type" json:"expt_type,omitempty"`
	Ext         map[string]string `thrift:"ext,100,optional" frugal:"100,optional,map<string:string>" form:"ext" json:"ext,omitempty"`
	Session     *common.Session   `thrift:"session,200,optional" frugal:"200,optional,common.Session" form:"session" json:"session,omitempty" query:"session"`
	Base        *base.Base        `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewRunExperimentRequest() *RunExperimentRequest {
	return &RunExperimentRequest{}
}

func (p *RunExperimentRequest) InitDefault() {
}

var RunExperimentRequest_WorkspaceID_DEFAULT int64

func (p *RunExperimentRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return RunExperimentRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var RunExperimentRequest_ExptID_DEFAULT int64

func (p *RunExperimentRequest) GetExptID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetExptID() {
		return RunExperimentRequest_ExptID_DEFAULT
	}
	return *p.ExptID
}

var RunExperimentRequest_ItemIds_DEFAULT []int64

func (p *RunExperimentRequest) GetItemIds() (v []int64) {
	if p == nil {
		return
	}
	if !p.IsSetItemIds() {
		return RunExperimentRequest_ItemIds_DEFAULT
	}
	return p.ItemIds
}

var RunExperimentRequest_ExptType_DEFAULT expt.ExptType

func (p *RunExperimentRequest) GetExptType() (v expt.ExptType) {
	if p == nil {
		return
	}
	if !p.IsSetExptType() {
		return RunExperimentRequest_ExptType_DEFAULT
	}
	return *p.ExptType
}

var RunExperimentRequest_Ext_DEFAULT map[string]string

func (p *RunExperimentRequest) GetExt() (v map[string]string) {
	if p == nil {
		return
	}
	if !p.IsSetExt() {
		return RunExperimentRequest_Ext_DEFAULT
	}
	return p.Ext
}

var RunExperimentRequest_Session_DEFAULT *common.Session

func (p *RunExperimentRequest) GetSession() (v *common.Session) {
	if p == nil {
		return
	}
	if !p.IsSetSession() {
		return RunExperimentRequest_Session_DEFAULT
	}
	return p.Session
}

var RunExperimentRequest_Base_DEFAULT *base.Base

func (p *RunExperimentRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return RunExperimentRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *RunExperimentRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *RunExperimentRequest) SetExptID(val *int64) {
	p.ExptID = val
}
func (p *RunExperimentRequest) SetItemIds(val []int64) {
	p.ItemIds = val
}
func (p *RunExperimentRequest) SetExptType(val *expt.ExptType) {
	p.ExptType = val
}
func (p *RunExperimentRequest) SetExt(val map[string]string) {
	p.Ext = val
}
func (p *RunExperimentRequest) SetSession(val *common.Session) {
	p.Session = val
}
func (p *RunExperimentRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_RunExperimentRequest = map[int16]string{
	1:   "workspace_id",
	2:   "expt_id",
	3:   "item_ids",
	10:  "expt_type",
	100: "ext",
	200: "session",
	255: "Base",
}

func (p *RunExperimentRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *RunExperimentRequest) IsSetExptID() bool {
	return p.ExptID != nil
}

func (p *RunExperimentRequest) IsSetItemIds() bool {
	return p.ItemIds != nil
}

func (p *RunExperimentRequest) IsSetExptType() bool {
	return p.ExptType != nil
}

func (p *RunExperimentRequest) IsSetExt() bool {
	return p.Ext != nil
}

func (p *RunExperimentRequest) IsSetSession() bool {
	return p.Session != nil
}

func (p *RunExperimentRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *RunExperimentRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 200:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField200(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RunExperimentRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RunExperimentRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *RunExperimentRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ExptID = _field
	return nil
}
func (p *RunExperimentRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ItemIds = _field
	return nil
}
func (p *RunExperimentRequest) ReadField10(iprot thrift.TProtocol) error {

	var _field *expt.ExptType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := expt.ExptType(v)
		_field = &tmp
	}
	p.ExptType = _field
	return nil
}
func (p *RunExperimentRequest) ReadField100(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.Ext = _field
	return nil
}
func (p *RunExperimentRequest) ReadField200(iprot thrift.TProtocol) error {
	_field := common.NewSession()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Session = _field
	return nil
}
func (p *RunExperimentRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *RunExperimentRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RunExperimentRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField200(oprot); err != nil {
			fieldId = 200
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RunExperimentRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *RunExperimentRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetExptID() {
		if err = oprot.WriteFieldBegin("expt_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ExptID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *RunExperimentRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetItemIds() {
		if err = oprot.WriteFieldBegin("item_ids", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.ItemIds)); err != nil {
			return err
		}
		for _, v := range p.ItemIds {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *RunExperimentRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetExptType() {
		if err = oprot.WriteFieldBegin("expt_type", thrift.I32, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.ExptType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}
func (p *RunExperimentRequest) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetExt() {
		if err = oprot.WriteFieldBegin("ext", thrift.MAP, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Ext)); err != nil {
			return err
		}
		for k, v := range p.Ext {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}
func (p *RunExperimentRequest) writeField200(oprot thrift.TProtocol) (err error) {
	if p.IsSetSession() {
		if err = oprot.WriteFieldBegin("session", thrift.STRUCT, 200); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Session.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 200 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 200 end error: ", p), err)
}
func (p *RunExperimentRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *RunExperimentRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RunExperimentRequest(%+v)", *p)

}

func (p *RunExperimentRequest) DeepEqual(ano *RunExperimentRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.ExptID) {
		return false
	}
	if !p.Field3DeepEqual(ano.ItemIds) {
		return false
	}
	if !p.Field10DeepEqual(ano.ExptType) {
		return false
	}
	if !p.Field100DeepEqual(ano.Ext) {
		return false
	}
	if !p.Field200DeepEqual(ano.Session) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *RunExperimentRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *RunExperimentRequest) Field2DeepEqual(src *int64) bool {

	if p.ExptID == src {
		return true
	} else if p.ExptID == nil || src == nil {
		return false
	}
	if *p.ExptID != *src {
		return false
	}
	return true
}
func (p *RunExperimentRequest) Field3DeepEqual(src []int64) bool {

	if len(p.ItemIds) != len(src) {
		return false
	}
	for i, v := range p.ItemIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *RunExperimentRequest) Field10DeepEqual(src *expt.ExptType) bool {

	if p.ExptType == src {
		return true
	} else if p.ExptType == nil || src == nil {
		return false
	}
	if *p.ExptType != *src {
		return false
	}
	return true
}
func (p *RunExperimentRequest) Field100DeepEqual(src map[string]string) bool {

	if len(p.Ext) != len(src) {
		return false
	}
	for k, v := range p.Ext {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *RunExperimentRequest) Field200DeepEqual(src *common.Session) bool {

	if !p.Session.DeepEqual(src) {
		return false
	}
	return true
}
func (p *RunExperimentRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type RunExperimentResponse struct {
	RunID    *int64         `thrift:"run_id,1,optional" frugal:"1,optional,i64" json:"run_id" form:"run_id" `
	BaseResp *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewRunExperimentResponse() *RunExperimentResponse {
	return &RunExperimentResponse{}
}

func (p *RunExperimentResponse) InitDefault() {
}

var RunExperimentResponse_RunID_DEFAULT int64

func (p *RunExperimentResponse) GetRunID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetRunID() {
		return RunExperimentResponse_RunID_DEFAULT
	}
	return *p.RunID
}

var RunExperimentResponse_BaseResp_DEFAULT *base.BaseResp

func (p *RunExperimentResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return RunExperimentResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *RunExperimentResponse) SetRunID(val *int64) {
	p.RunID = val
}
func (p *RunExperimentResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_RunExperimentResponse = map[int16]string{
	1:   "run_id",
	255: "BaseResp",
}

func (p *RunExperimentResponse) IsSetRunID() bool {
	return p.RunID != nil
}

func (p *RunExperimentResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *RunExperimentResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RunExperimentResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RunExperimentResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.RunID = _field
	return nil
}
func (p *RunExperimentResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *RunExperimentResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RunExperimentResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RunExperimentResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRunID() {
		if err = oprot.WriteFieldBegin("run_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.RunID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *RunExperimentResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *RunExperimentResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RunExperimentResponse(%+v)", *p)

}

func (p *RunExperimentResponse) DeepEqual(ano *RunExperimentResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.RunID) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *RunExperimentResponse) Field1DeepEqual(src *int64) bool {

	if p.RunID == src {
		return true
	} else if p.RunID == nil || src == nil {
		return false
	}
	if *p.RunID != *src {
		return false
	}
	return true
}
func (p *RunExperimentResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type RetryExperimentRequest struct {
	RetryMode   *expt.ExptRetryMode `thrift:"retry_mode,1,optional" frugal:"1,optional,ExptRetryMode" form:"retry_mode" json:"retry_mode,omitempty"`
	WorkspaceID *int64              `thrift:"workspace_id,2,optional" frugal:"2,optional,i64" json:"workspace_id" form:"workspace_id" `
	ExptID      *int64              `thrift:"expt_id,3,optional" frugal:"3,optional,i64" json:"expt_id" path:"expt_id" `
	ItemIds     []int64             `thrift:"item_ids,4,optional" frugal:"4,optional,list<i64>" json:"item_ids" form:"item_ids" `
	Ext         map[string]string   `thrift:"ext,100,optional" frugal:"100,optional,map<string:string>" form:"ext" json:"ext,omitempty"`
	Base        *base.Base          `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewRetryExperimentRequest() *RetryExperimentRequest {
	return &RetryExperimentRequest{}
}

func (p *RetryExperimentRequest) InitDefault() {
}

var RetryExperimentRequest_RetryMode_DEFAULT expt.ExptRetryMode

func (p *RetryExperimentRequest) GetRetryMode() (v expt.ExptRetryMode) {
	if p == nil {
		return
	}
	if !p.IsSetRetryMode() {
		return RetryExperimentRequest_RetryMode_DEFAULT
	}
	return *p.RetryMode
}

var RetryExperimentRequest_WorkspaceID_DEFAULT int64

func (p *RetryExperimentRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return RetryExperimentRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var RetryExperimentRequest_ExptID_DEFAULT int64

func (p *RetryExperimentRequest) GetExptID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetExptID() {
		return RetryExperimentRequest_ExptID_DEFAULT
	}
	return *p.ExptID
}

var RetryExperimentRequest_ItemIds_DEFAULT []int64

func (p *RetryExperimentRequest) GetItemIds() (v []int64) {
	if p == nil {
		return
	}
	if !p.IsSetItemIds() {
		return RetryExperimentRequest_ItemIds_DEFAULT
	}
	return p.ItemIds
}

var RetryExperimentRequest_Ext_DEFAULT map[string]string

func (p *RetryExperimentRequest) GetExt() (v map[string]string) {
	if p == nil {
		return
	}
	if !p.IsSetExt() {
		return RetryExperimentRequest_Ext_DEFAULT
	}
	return p.Ext
}

var RetryExperimentRequest_Base_DEFAULT *base.Base

func (p *RetryExperimentRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return RetryExperimentRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *RetryExperimentRequest) SetRetryMode(val *expt.ExptRetryMode) {
	p.RetryMode = val
}
func (p *RetryExperimentRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *RetryExperimentRequest) SetExptID(val *int64) {
	p.ExptID = val
}
func (p *RetryExperimentRequest) SetItemIds(val []int64) {
	p.ItemIds = val
}
func (p *RetryExperimentRequest) SetExt(val map[string]string) {
	p.Ext = val
}
func (p *RetryExperimentRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_RetryExperimentRequest = map[int16]string{
	1:   "retry_mode",
	2:   "workspace_id",
	3:   "expt_id",
	4:   "item_ids",
	100: "ext",
	255: "Base",
}

func (p *RetryExperimentRequest) IsSetRetryMode() bool {
	return p.RetryMode != nil
}

func (p *RetryExperimentRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *RetryExperimentRequest) IsSetExptID() bool {
	return p.ExptID != nil
}

func (p *RetryExperimentRequest) IsSetItemIds() bool {
	return p.ItemIds != nil
}

func (p *RetryExperimentRequest) IsSetExt() bool {
	return p.Ext != nil
}

func (p *RetryExperimentRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *RetryExperimentRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RetryExperimentRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RetryExperimentRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *expt.ExptRetryMode
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := expt.ExptRetryMode(v)
		_field = &tmp
	}
	p.RetryMode = _field
	return nil
}
func (p *RetryExperimentRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *RetryExperimentRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ExptID = _field
	return nil
}
func (p *RetryExperimentRequest) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ItemIds = _field
	return nil
}
func (p *RetryExperimentRequest) ReadField100(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.Ext = _field
	return nil
}
func (p *RetryExperimentRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *RetryExperimentRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RetryExperimentRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RetryExperimentRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRetryMode() {
		if err = oprot.WriteFieldBegin("retry_mode", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.RetryMode)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *RetryExperimentRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *RetryExperimentRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetExptID() {
		if err = oprot.WriteFieldBegin("expt_id", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ExptID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *RetryExperimentRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetItemIds() {
		if err = oprot.WriteFieldBegin("item_ids", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.ItemIds)); err != nil {
			return err
		}
		for _, v := range p.ItemIds {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *RetryExperimentRequest) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetExt() {
		if err = oprot.WriteFieldBegin("ext", thrift.MAP, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Ext)); err != nil {
			return err
		}
		for k, v := range p.Ext {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}
func (p *RetryExperimentRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *RetryExperimentRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RetryExperimentRequest(%+v)", *p)

}

func (p *RetryExperimentRequest) DeepEqual(ano *RetryExperimentRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.RetryMode) {
		return false
	}
	if !p.Field2DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field3DeepEqual(ano.ExptID) {
		return false
	}
	if !p.Field4DeepEqual(ano.ItemIds) {
		return false
	}
	if !p.Field100DeepEqual(ano.Ext) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *RetryExperimentRequest) Field1DeepEqual(src *expt.ExptRetryMode) bool {

	if p.RetryMode == src {
		return true
	} else if p.RetryMode == nil || src == nil {
		return false
	}
	if *p.RetryMode != *src {
		return false
	}
	return true
}
func (p *RetryExperimentRequest) Field2DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *RetryExperimentRequest) Field3DeepEqual(src *int64) bool {

	if p.ExptID == src {
		return true
	} else if p.ExptID == nil || src == nil {
		return false
	}
	if *p.ExptID != *src {
		return false
	}
	return true
}
func (p *RetryExperimentRequest) Field4DeepEqual(src []int64) bool {

	if len(p.ItemIds) != len(src) {
		return false
	}
	for i, v := range p.ItemIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *RetryExperimentRequest) Field100DeepEqual(src map[string]string) bool {

	if len(p.Ext) != len(src) {
		return false
	}
	for k, v := range p.Ext {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *RetryExperimentRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type RetryExperimentResponse struct {
	RunID    *int64         `thrift:"run_id,1,optional" frugal:"1,optional,i64" json:"run_id" form:"run_id" `
	BaseResp *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewRetryExperimentResponse() *RetryExperimentResponse {
	return &RetryExperimentResponse{}
}

func (p *RetryExperimentResponse) InitDefault() {
}

var RetryExperimentResponse_RunID_DEFAULT int64

func (p *RetryExperimentResponse) GetRunID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetRunID() {
		return RetryExperimentResponse_RunID_DEFAULT
	}
	return *p.RunID
}

var RetryExperimentResponse_BaseResp_DEFAULT *base.BaseResp

func (p *RetryExperimentResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return RetryExperimentResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *RetryExperimentResponse) SetRunID(val *int64) {
	p.RunID = val
}
func (p *RetryExperimentResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_RetryExperimentResponse = map[int16]string{
	1:   "run_id",
	255: "BaseResp",
}

func (p *RetryExperimentResponse) IsSetRunID() bool {
	return p.RunID != nil
}

func (p *RetryExperimentResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *RetryExperimentResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RetryExperimentResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RetryExperimentResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.RunID = _field
	return nil
}
func (p *RetryExperimentResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *RetryExperimentResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RetryExperimentResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RetryExperimentResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRunID() {
		if err = oprot.WriteFieldBegin("run_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.RunID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *RetryExperimentResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *RetryExperimentResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RetryExperimentResponse(%+v)", *p)

}

func (p *RetryExperimentResponse) DeepEqual(ano *RetryExperimentResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.RunID) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *RetryExperimentResponse) Field1DeepEqual(src *int64) bool {

	if p.RunID == src {
		return true
	} else if p.RunID == nil || src == nil {
		return false
	}
	if *p.RunID != *src {
		return false
	}
	return true
}
func (p *RetryExperimentResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type KillExperimentRequest struct {
	ExptID      *int64     `thrift:"expt_id,1,optional" frugal:"1,optional,i64" json:"expt_id" path:"expt_id" `
	WorkspaceID *int64     `thrift:"workspace_id,2,optional" frugal:"2,optional,i64" json:"workspace_id" form:"workspace_id" `
	Base        *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewKillExperimentRequest() *KillExperimentRequest {
	return &KillExperimentRequest{}
}

func (p *KillExperimentRequest) InitDefault() {
}

var KillExperimentRequest_ExptID_DEFAULT int64

func (p *KillExperimentRequest) GetExptID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetExptID() {
		return KillExperimentRequest_ExptID_DEFAULT
	}
	return *p.ExptID
}

var KillExperimentRequest_WorkspaceID_DEFAULT int64

func (p *KillExperimentRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return KillExperimentRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var KillExperimentRequest_Base_DEFAULT *base.Base

func (p *KillExperimentRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return KillExperimentRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *KillExperimentRequest) SetExptID(val *int64) {
	p.ExptID = val
}
func (p *KillExperimentRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *KillExperimentRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_KillExperimentRequest = map[int16]string{
	1:   "expt_id",
	2:   "workspace_id",
	255: "Base",
}

func (p *KillExperimentRequest) IsSetExptID() bool {
	return p.ExptID != nil
}

func (p *KillExperimentRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *KillExperimentRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *KillExperimentRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_KillExperimentRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *KillExperimentRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ExptID = _field
	return nil
}
func (p *KillExperimentRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *KillExperimentRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *KillExperimentRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("KillExperimentRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *KillExperimentRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetExptID() {
		if err = oprot.WriteFieldBegin("expt_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ExptID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *KillExperimentRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *KillExperimentRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *KillExperimentRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KillExperimentRequest(%+v)", *p)

}

func (p *KillExperimentRequest) DeepEqual(ano *KillExperimentRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ExptID) {
		return false
	}
	if !p.Field2DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *KillExperimentRequest) Field1DeepEqual(src *int64) bool {

	if p.ExptID == src {
		return true
	} else if p.ExptID == nil || src == nil {
		return false
	}
	if *p.ExptID != *src {
		return false
	}
	return true
}
func (p *KillExperimentRequest) Field2DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *KillExperimentRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type KillExperimentResponse struct {
	BaseResp *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewKillExperimentResponse() *KillExperimentResponse {
	return &KillExperimentResponse{}
}

func (p *KillExperimentResponse) InitDefault() {
}

var KillExperimentResponse_BaseResp_DEFAULT *base.BaseResp

func (p *KillExperimentResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return KillExperimentResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *KillExperimentResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_KillExperimentResponse = map[int16]string{
	255: "BaseResp",
}

func (p *KillExperimentResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *KillExperimentResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_KillExperimentResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *KillExperimentResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *KillExperimentResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("KillExperimentResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *KillExperimentResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *KillExperimentResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KillExperimentResponse(%+v)", *p)

}

func (p *KillExperimentResponse) DeepEqual(ano *KillExperimentResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *KillExperimentResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type CloneExperimentRequest struct {
	ExptID      *int64     `thrift:"expt_id,1,optional" frugal:"1,optional,i64" json:"expt_id" path:"expt_id" `
	WorkspaceID *int64     `thrift:"workspace_id,2,optional" frugal:"2,optional,i64" json:"workspace_id" form:"workspace_id" `
	Base        *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewCloneExperimentRequest() *CloneExperimentRequest {
	return &CloneExperimentRequest{}
}

func (p *CloneExperimentRequest) InitDefault() {
}

var CloneExperimentRequest_ExptID_DEFAULT int64

func (p *CloneExperimentRequest) GetExptID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetExptID() {
		return CloneExperimentRequest_ExptID_DEFAULT
	}
	return *p.ExptID
}

var CloneExperimentRequest_WorkspaceID_DEFAULT int64

func (p *CloneExperimentRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return CloneExperimentRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var CloneExperimentRequest_Base_DEFAULT *base.Base

func (p *CloneExperimentRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return CloneExperimentRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *CloneExperimentRequest) SetExptID(val *int64) {
	p.ExptID = val
}
func (p *CloneExperimentRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *CloneExperimentRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_CloneExperimentRequest = map[int16]string{
	1:   "expt_id",
	2:   "workspace_id",
	255: "Base",
}

func (p *CloneExperimentRequest) IsSetExptID() bool {
	return p.ExptID != nil
}

func (p *CloneExperimentRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *CloneExperimentRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *CloneExperimentRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CloneExperimentRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CloneExperimentRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ExptID = _field
	return nil
}
func (p *CloneExperimentRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *CloneExperimentRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *CloneExperimentRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CloneExperimentRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CloneExperimentRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetExptID() {
		if err = oprot.WriteFieldBegin("expt_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ExptID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CloneExperimentRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *CloneExperimentRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CloneExperimentRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CloneExperimentRequest(%+v)", *p)

}

func (p *CloneExperimentRequest) DeepEqual(ano *CloneExperimentRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ExptID) {
		return false
	}
	if !p.Field2DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *CloneExperimentRequest) Field1DeepEqual(src *int64) bool {

	if p.ExptID == src {
		return true
	} else if p.ExptID == nil || src == nil {
		return false
	}
	if *p.ExptID != *src {
		return false
	}
	return true
}
func (p *CloneExperimentRequest) Field2DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *CloneExperimentRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type CloneExperimentResponse struct {
	Experiment *expt.Experiment `thrift:"experiment,1,optional" frugal:"1,optional,expt.Experiment" form:"experiment" json:"experiment,omitempty"`
	BaseResp   *base.BaseResp   `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewCloneExperimentResponse() *CloneExperimentResponse {
	return &CloneExperimentResponse{}
}

func (p *CloneExperimentResponse) InitDefault() {
}

var CloneExperimentResponse_Experiment_DEFAULT *expt.Experiment

func (p *CloneExperimentResponse) GetExperiment() (v *expt.Experiment) {
	if p == nil {
		return
	}
	if !p.IsSetExperiment() {
		return CloneExperimentResponse_Experiment_DEFAULT
	}
	return p.Experiment
}

var CloneExperimentResponse_BaseResp_DEFAULT *base.BaseResp

func (p *CloneExperimentResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return CloneExperimentResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CloneExperimentResponse) SetExperiment(val *expt.Experiment) {
	p.Experiment = val
}
func (p *CloneExperimentResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_CloneExperimentResponse = map[int16]string{
	1:   "experiment",
	255: "BaseResp",
}

func (p *CloneExperimentResponse) IsSetExperiment() bool {
	return p.Experiment != nil
}

func (p *CloneExperimentResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CloneExperimentResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CloneExperimentResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CloneExperimentResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := expt.NewExperiment()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Experiment = _field
	return nil
}
func (p *CloneExperimentResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *CloneExperimentResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CloneExperimentResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CloneExperimentResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetExperiment() {
		if err = oprot.WriteFieldBegin("experiment", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Experiment.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CloneExperimentResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CloneExperimentResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CloneExperimentResponse(%+v)", *p)

}

func (p *CloneExperimentResponse) DeepEqual(ano *CloneExperimentResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Experiment) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *CloneExperimentResponse) Field1DeepEqual(src *expt.Experiment) bool {

	if !p.Experiment.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CloneExperimentResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type BatchGetExperimentResultRequest struct {
	WorkspaceID   int64   `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" query:"workspace_id,required" `
	ExperimentIds []int64 `thrift:"experiment_ids,2,required" frugal:"2,required,list<i64>" json:"experiment_ids" form:"experiment_ids,required" `
	// Baseline experiment ID for experiment comparison
	BaselineExperimentID *int64 `thrift:"baseline_experiment_id,3,optional" frugal:"3,optional,i64" json:"baseline_experiment_id" form:"baseline_experiment_id" `
	// key: experiment_id
	Filters    map[int64]*expt.ExperimentFilter `thrift:"filters,10,optional" frugal:"10,optional,map<i64:expt.ExperimentFilter>" json:"filters" form:"filters" `
	PageNumber *int32                           `thrift:"page_number,20,optional" frugal:"20,optional,i32" json:"page_number" query:"page_number" `
	PageSize   *int32                           `thrift:"page_size,21,optional" frugal:"21,optional,i32" json:"page_size" query:"page_size" `
	Base       *base.Base                       `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewBatchGetExperimentResultRequest() *BatchGetExperimentResultRequest {
	return &BatchGetExperimentResultRequest{}
}

func (p *BatchGetExperimentResultRequest) InitDefault() {
}

func (p *BatchGetExperimentResultRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *BatchGetExperimentResultRequest) GetExperimentIds() (v []int64) {
	if p != nil {
		return p.ExperimentIds
	}
	return
}

var BatchGetExperimentResultRequest_BaselineExperimentID_DEFAULT int64

func (p *BatchGetExperimentResultRequest) GetBaselineExperimentID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetBaselineExperimentID() {
		return BatchGetExperimentResultRequest_BaselineExperimentID_DEFAULT
	}
	return *p.BaselineExperimentID
}

var BatchGetExperimentResultRequest_Filters_DEFAULT map[int64]*expt.ExperimentFilter

func (p *BatchGetExperimentResultRequest) GetFilters() (v map[int64]*expt.ExperimentFilter) {
	if p == nil {
		return
	}
	if !p.IsSetFilters() {
		return BatchGetExperimentResultRequest_Filters_DEFAULT
	}
	return p.Filters
}

var BatchGetExperimentResultRequest_PageNumber_DEFAULT int32

func (p *BatchGetExperimentResultRequest) GetPageNumber() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageNumber() {
		return BatchGetExperimentResultRequest_PageNumber_DEFAULT
	}
	return *p.PageNumber
}

var BatchGetExperimentResultRequest_PageSize_DEFAULT int32

func (p *BatchGetExperimentResultRequest) GetPageSize() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageSize() {
		return BatchGetExperimentResultRequest_PageSize_DEFAULT
	}
	return *p.PageSize
}

var BatchGetExperimentResultRequest_Base_DEFAULT *base.Base

func (p *BatchGetExperimentResultRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return BatchGetExperimentResultRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *BatchGetExperimentResultRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *BatchGetExperimentResultRequest) SetExperimentIds(val []int64) {
	p.ExperimentIds = val
}
func (p *BatchGetExperimentResultRequest) SetBaselineExperimentID(val *int64) {
	p.BaselineExperimentID = val
}
func (p *BatchGetExperimentResultRequest) SetFilters(val map[int64]*expt.ExperimentFilter) {
	p.Filters = val
}
func (p *BatchGetExperimentResultRequest) SetPageNumber(val *int32) {
	p.PageNumber = val
}
func (p *BatchGetExperimentResultRequest) SetPageSize(val *int32) {
	p.PageSize = val
}
func (p *BatchGetExperimentResultRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_BatchGetExperimentResultRequest = map[int16]string{
	1:   "workspace_id",
	2:   "experiment_ids",
	3:   "baseline_experiment_id",
	10:  "filters",
	20:  "page_number",
	21:  "page_size",
	255: "Base",
}

func (p *BatchGetExperimentResultRequest) IsSetBaselineExperimentID() bool {
	return p.BaselineExperimentID != nil
}

func (p *BatchGetExperimentResultRequest) IsSetFilters() bool {
	return p.Filters != nil
}

func (p *BatchGetExperimentResultRequest) IsSetPageNumber() bool {
	return p.PageNumber != nil
}

func (p *BatchGetExperimentResultRequest) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *BatchGetExperimentResultRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *BatchGetExperimentResultRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetExperimentIds bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetExperimentIds = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetExperimentIds {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchGetExperimentResultRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_BatchGetExperimentResultRequest[fieldId]))
}

func (p *BatchGetExperimentResultRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *BatchGetExperimentResultRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ExperimentIds = _field
	return nil
}
func (p *BatchGetExperimentResultRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BaselineExperimentID = _field
	return nil
}
func (p *BatchGetExperimentResultRequest) ReadField10(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[int64]*expt.ExperimentFilter, size)
	values := make([]expt.ExperimentFilter, size)
	for i := 0; i < size; i++ {
		var _key int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_key = v
		}

		_val := &values[i]
		_val.InitDefault()
		if err := _val.Read(iprot); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.Filters = _field
	return nil
}
func (p *BatchGetExperimentResultRequest) ReadField20(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageNumber = _field
	return nil
}
func (p *BatchGetExperimentResultRequest) ReadField21(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageSize = _field
	return nil
}
func (p *BatchGetExperimentResultRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *BatchGetExperimentResultRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetExperimentResultRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchGetExperimentResultRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchGetExperimentResultRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("experiment_ids", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.ExperimentIds)); err != nil {
		return err
	}
	for _, v := range p.ExperimentIds {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BatchGetExperimentResultRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaselineExperimentID() {
		if err = oprot.WriteFieldBegin("baseline_experiment_id", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.BaselineExperimentID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *BatchGetExperimentResultRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetFilters() {
		if err = oprot.WriteFieldBegin("filters", thrift.MAP, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.I64, thrift.STRUCT, len(p.Filters)); err != nil {
			return err
		}
		for k, v := range p.Filters {
			if err := oprot.WriteI64(k); err != nil {
				return err
			}
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}
func (p *BatchGetExperimentResultRequest) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageNumber() {
		if err = oprot.WriteFieldBegin("page_number", thrift.I32, 20); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageNumber); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}
func (p *BatchGetExperimentResultRequest) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("page_size", thrift.I32, 21); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}
func (p *BatchGetExperimentResultRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchGetExperimentResultRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchGetExperimentResultRequest(%+v)", *p)

}

func (p *BatchGetExperimentResultRequest) DeepEqual(ano *BatchGetExperimentResultRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.ExperimentIds) {
		return false
	}
	if !p.Field3DeepEqual(ano.BaselineExperimentID) {
		return false
	}
	if !p.Field10DeepEqual(ano.Filters) {
		return false
	}
	if !p.Field20DeepEqual(ano.PageNumber) {
		return false
	}
	if !p.Field21DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *BatchGetExperimentResultRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *BatchGetExperimentResultRequest) Field2DeepEqual(src []int64) bool {

	if len(p.ExperimentIds) != len(src) {
		return false
	}
	for i, v := range p.ExperimentIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *BatchGetExperimentResultRequest) Field3DeepEqual(src *int64) bool {

	if p.BaselineExperimentID == src {
		return true
	} else if p.BaselineExperimentID == nil || src == nil {
		return false
	}
	if *p.BaselineExperimentID != *src {
		return false
	}
	return true
}
func (p *BatchGetExperimentResultRequest) Field10DeepEqual(src map[int64]*expt.ExperimentFilter) bool {

	if len(p.Filters) != len(src) {
		return false
	}
	for k, v := range p.Filters {
		_src := src[k]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *BatchGetExperimentResultRequest) Field20DeepEqual(src *int32) bool {

	if p.PageNumber == src {
		return true
	} else if p.PageNumber == nil || src == nil {
		return false
	}
	if *p.PageNumber != *src {
		return false
	}
	return true
}
func (p *BatchGetExperimentResultRequest) Field21DeepEqual(src *int32) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}
func (p *BatchGetExperimentResultRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type BatchGetExperimentResultResponse struct {
	// 数据集表头信息
	ColumnEvalSetFields []*expt.ColumnEvalSetField `thrift:"column_eval_set_fields,1,required" frugal:"1,required,list<expt.ColumnEvalSetField>" form:"column_eval_set_fields,required" json:"column_eval_set_fields,required"`
	// 评估器表头信息
	ColumnEvaluators []*expt.ColumnEvaluator `thrift:"column_evaluators,2,optional" frugal:"2,optional,list<expt.ColumnEvaluator>" form:"column_evaluators" json:"column_evaluators,omitempty"`
	// item粒度实验结果详情
	ItemResults []*expt.ItemResult_ `thrift:"item_results,10,optional" frugal:"10,optional,list<expt.ItemResult_>" form:"item_results" json:"item_results,omitempty"`
	Total       *int64              `thrift:"total,20,optional" frugal:"20,optional,i64" json:"total" form:"total" `
	BaseResp    *base.BaseResp      `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewBatchGetExperimentResultResponse() *BatchGetExperimentResultResponse {
	return &BatchGetExperimentResultResponse{}
}

func (p *BatchGetExperimentResultResponse) InitDefault() {
}

func (p *BatchGetExperimentResultResponse) GetColumnEvalSetFields() (v []*expt.ColumnEvalSetField) {
	if p != nil {
		return p.ColumnEvalSetFields
	}
	return
}

var BatchGetExperimentResultResponse_ColumnEvaluators_DEFAULT []*expt.ColumnEvaluator

func (p *BatchGetExperimentResultResponse) GetColumnEvaluators() (v []*expt.ColumnEvaluator) {
	if p == nil {
		return
	}
	if !p.IsSetColumnEvaluators() {
		return BatchGetExperimentResultResponse_ColumnEvaluators_DEFAULT
	}
	return p.ColumnEvaluators
}

var BatchGetExperimentResultResponse_ItemResults_DEFAULT []*expt.ItemResult_

func (p *BatchGetExperimentResultResponse) GetItemResults() (v []*expt.ItemResult_) {
	if p == nil {
		return
	}
	if !p.IsSetItemResults() {
		return BatchGetExperimentResultResponse_ItemResults_DEFAULT
	}
	return p.ItemResults
}

var BatchGetExperimentResultResponse_Total_DEFAULT int64

func (p *BatchGetExperimentResultResponse) GetTotal() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTotal() {
		return BatchGetExperimentResultResponse_Total_DEFAULT
	}
	return *p.Total
}

var BatchGetExperimentResultResponse_BaseResp_DEFAULT *base.BaseResp

func (p *BatchGetExperimentResultResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return BatchGetExperimentResultResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *BatchGetExperimentResultResponse) SetColumnEvalSetFields(val []*expt.ColumnEvalSetField) {
	p.ColumnEvalSetFields = val
}
func (p *BatchGetExperimentResultResponse) SetColumnEvaluators(val []*expt.ColumnEvaluator) {
	p.ColumnEvaluators = val
}
func (p *BatchGetExperimentResultResponse) SetItemResults(val []*expt.ItemResult_) {
	p.ItemResults = val
}
func (p *BatchGetExperimentResultResponse) SetTotal(val *int64) {
	p.Total = val
}
func (p *BatchGetExperimentResultResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_BatchGetExperimentResultResponse = map[int16]string{
	1:   "column_eval_set_fields",
	2:   "column_evaluators",
	10:  "item_results",
	20:  "total",
	255: "BaseResp",
}

func (p *BatchGetExperimentResultResponse) IsSetColumnEvaluators() bool {
	return p.ColumnEvaluators != nil
}

func (p *BatchGetExperimentResultResponse) IsSetItemResults() bool {
	return p.ItemResults != nil
}

func (p *BatchGetExperimentResultResponse) IsSetTotal() bool {
	return p.Total != nil
}

func (p *BatchGetExperimentResultResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *BatchGetExperimentResultResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetColumnEvalSetFields bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetColumnEvalSetFields = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetColumnEvalSetFields {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchGetExperimentResultResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_BatchGetExperimentResultResponse[fieldId]))
}

func (p *BatchGetExperimentResultResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*expt.ColumnEvalSetField, 0, size)
	values := make([]expt.ColumnEvalSetField, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ColumnEvalSetFields = _field
	return nil
}
func (p *BatchGetExperimentResultResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*expt.ColumnEvaluator, 0, size)
	values := make([]expt.ColumnEvaluator, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ColumnEvaluators = _field
	return nil
}
func (p *BatchGetExperimentResultResponse) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*expt.ItemResult_, 0, size)
	values := make([]expt.ItemResult_, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ItemResults = _field
	return nil
}
func (p *BatchGetExperimentResultResponse) ReadField20(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Total = _field
	return nil
}
func (p *BatchGetExperimentResultResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *BatchGetExperimentResultResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetExperimentResultResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchGetExperimentResultResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("column_eval_set_fields", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ColumnEvalSetFields)); err != nil {
		return err
	}
	for _, v := range p.ColumnEvalSetFields {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchGetExperimentResultResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumnEvaluators() {
		if err = oprot.WriteFieldBegin("column_evaluators", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ColumnEvaluators)); err != nil {
			return err
		}
		for _, v := range p.ColumnEvaluators {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BatchGetExperimentResultResponse) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetItemResults() {
		if err = oprot.WriteFieldBegin("item_results", thrift.LIST, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ItemResults)); err != nil {
			return err
		}
		for _, v := range p.ItemResults {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}
func (p *BatchGetExperimentResultResponse) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotal() {
		if err = oprot.WriteFieldBegin("total", thrift.I64, 20); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Total); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}
func (p *BatchGetExperimentResultResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchGetExperimentResultResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchGetExperimentResultResponse(%+v)", *p)

}

func (p *BatchGetExperimentResultResponse) DeepEqual(ano *BatchGetExperimentResultResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ColumnEvalSetFields) {
		return false
	}
	if !p.Field2DeepEqual(ano.ColumnEvaluators) {
		return false
	}
	if !p.Field10DeepEqual(ano.ItemResults) {
		return false
	}
	if !p.Field20DeepEqual(ano.Total) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *BatchGetExperimentResultResponse) Field1DeepEqual(src []*expt.ColumnEvalSetField) bool {

	if len(p.ColumnEvalSetFields) != len(src) {
		return false
	}
	for i, v := range p.ColumnEvalSetFields {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *BatchGetExperimentResultResponse) Field2DeepEqual(src []*expt.ColumnEvaluator) bool {

	if len(p.ColumnEvaluators) != len(src) {
		return false
	}
	for i, v := range p.ColumnEvaluators {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *BatchGetExperimentResultResponse) Field10DeepEqual(src []*expt.ItemResult_) bool {

	if len(p.ItemResults) != len(src) {
		return false
	}
	for i, v := range p.ItemResults {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *BatchGetExperimentResultResponse) Field20DeepEqual(src *int64) bool {

	if p.Total == src {
		return true
	} else if p.Total == nil || src == nil {
		return false
	}
	if *p.Total != *src {
		return false
	}
	return true
}
func (p *BatchGetExperimentResultResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type BatchGetExperimentAggrResultRequest struct {
	WorkspaceID   int64      `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" query:"workspace_id,required" `
	ExperimentIds []int64    `thrift:"experiment_ids,2,required" frugal:"2,required,list<i64>" json:"experiment_ids" form:"experiment_ids,required" `
	Base          *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewBatchGetExperimentAggrResultRequest() *BatchGetExperimentAggrResultRequest {
	return &BatchGetExperimentAggrResultRequest{}
}

func (p *BatchGetExperimentAggrResultRequest) InitDefault() {
}

func (p *BatchGetExperimentAggrResultRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *BatchGetExperimentAggrResultRequest) GetExperimentIds() (v []int64) {
	if p != nil {
		return p.ExperimentIds
	}
	return
}

var BatchGetExperimentAggrResultRequest_Base_DEFAULT *base.Base

func (p *BatchGetExperimentAggrResultRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return BatchGetExperimentAggrResultRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *BatchGetExperimentAggrResultRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *BatchGetExperimentAggrResultRequest) SetExperimentIds(val []int64) {
	p.ExperimentIds = val
}
func (p *BatchGetExperimentAggrResultRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_BatchGetExperimentAggrResultRequest = map[int16]string{
	1:   "workspace_id",
	2:   "experiment_ids",
	255: "Base",
}

func (p *BatchGetExperimentAggrResultRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *BatchGetExperimentAggrResultRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetExperimentIds bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetExperimentIds = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetExperimentIds {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchGetExperimentAggrResultRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_BatchGetExperimentAggrResultRequest[fieldId]))
}

func (p *BatchGetExperimentAggrResultRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *BatchGetExperimentAggrResultRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ExperimentIds = _field
	return nil
}
func (p *BatchGetExperimentAggrResultRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *BatchGetExperimentAggrResultRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetExperimentAggrResultRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchGetExperimentAggrResultRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchGetExperimentAggrResultRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("experiment_ids", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.ExperimentIds)); err != nil {
		return err
	}
	for _, v := range p.ExperimentIds {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BatchGetExperimentAggrResultRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchGetExperimentAggrResultRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchGetExperimentAggrResultRequest(%+v)", *p)

}

func (p *BatchGetExperimentAggrResultRequest) DeepEqual(ano *BatchGetExperimentAggrResultRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.ExperimentIds) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *BatchGetExperimentAggrResultRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *BatchGetExperimentAggrResultRequest) Field2DeepEqual(src []int64) bool {

	if len(p.ExperimentIds) != len(src) {
		return false
	}
	for i, v := range p.ExperimentIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *BatchGetExperimentAggrResultRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type BatchGetExperimentAggrResultResponse struct {
	ExptAggregateResults []*expt.ExptAggregateResult_ `thrift:"expt_aggregate_results,1,optional" frugal:"1,optional,list<expt.ExptAggregateResult_>" form:"expt_aggregate_result" json:"expt_aggregate_result,omitempty"`
	BaseResp             *base.BaseResp               `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewBatchGetExperimentAggrResultResponse() *BatchGetExperimentAggrResultResponse {
	return &BatchGetExperimentAggrResultResponse{}
}

func (p *BatchGetExperimentAggrResultResponse) InitDefault() {
}

var BatchGetExperimentAggrResultResponse_ExptAggregateResults_DEFAULT []*expt.ExptAggregateResult_

func (p *BatchGetExperimentAggrResultResponse) GetExptAggregateResults() (v []*expt.ExptAggregateResult_) {
	if p == nil {
		return
	}
	if !p.IsSetExptAggregateResults() {
		return BatchGetExperimentAggrResultResponse_ExptAggregateResults_DEFAULT
	}
	return p.ExptAggregateResults
}

var BatchGetExperimentAggrResultResponse_BaseResp_DEFAULT *base.BaseResp

func (p *BatchGetExperimentAggrResultResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return BatchGetExperimentAggrResultResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *BatchGetExperimentAggrResultResponse) SetExptAggregateResults(val []*expt.ExptAggregateResult_) {
	p.ExptAggregateResults = val
}
func (p *BatchGetExperimentAggrResultResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_BatchGetExperimentAggrResultResponse = map[int16]string{
	1:   "expt_aggregate_results",
	255: "BaseResp",
}

func (p *BatchGetExperimentAggrResultResponse) IsSetExptAggregateResults() bool {
	return p.ExptAggregateResults != nil
}

func (p *BatchGetExperimentAggrResultResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *BatchGetExperimentAggrResultResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchGetExperimentAggrResultResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchGetExperimentAggrResultResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*expt.ExptAggregateResult_, 0, size)
	values := make([]expt.ExptAggregateResult_, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ExptAggregateResults = _field
	return nil
}
func (p *BatchGetExperimentAggrResultResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *BatchGetExperimentAggrResultResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetExperimentAggrResultResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchGetExperimentAggrResultResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetExptAggregateResults() {
		if err = oprot.WriteFieldBegin("expt_aggregate_results", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ExptAggregateResults)); err != nil {
			return err
		}
		for _, v := range p.ExptAggregateResults {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchGetExperimentAggrResultResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchGetExperimentAggrResultResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchGetExperimentAggrResultResponse(%+v)", *p)

}

func (p *BatchGetExperimentAggrResultResponse) DeepEqual(ano *BatchGetExperimentAggrResultResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ExptAggregateResults) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *BatchGetExperimentAggrResultResponse) Field1DeepEqual(src []*expt.ExptAggregateResult_) bool {

	if len(p.ExptAggregateResults) != len(src) {
		return false
	}
	for i, v := range p.ExptAggregateResults {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *BatchGetExperimentAggrResultResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type CheckExperimentNameRequest struct {
	WorkspaceID int64      `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" `
	Name        *string    `thrift:"name,2,optional" frugal:"2,optional,string" form:"name" json:"name,omitempty"`
	Base        *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewCheckExperimentNameRequest() *CheckExperimentNameRequest {
	return &CheckExperimentNameRequest{}
}

func (p *CheckExperimentNameRequest) InitDefault() {
}

func (p *CheckExperimentNameRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

var CheckExperimentNameRequest_Name_DEFAULT string

func (p *CheckExperimentNameRequest) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return CheckExperimentNameRequest_Name_DEFAULT
	}
	return *p.Name
}

var CheckExperimentNameRequest_Base_DEFAULT *base.Base

func (p *CheckExperimentNameRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return CheckExperimentNameRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *CheckExperimentNameRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *CheckExperimentNameRequest) SetName(val *string) {
	p.Name = val
}
func (p *CheckExperimentNameRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_CheckExperimentNameRequest = map[int16]string{
	1:   "workspace_id",
	2:   "name",
	255: "Base",
}

func (p *CheckExperimentNameRequest) IsSetName() bool {
	return p.Name != nil
}

func (p *CheckExperimentNameRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *CheckExperimentNameRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CheckExperimentNameRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CheckExperimentNameRequest[fieldId]))
}

func (p *CheckExperimentNameRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *CheckExperimentNameRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *CheckExperimentNameRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *CheckExperimentNameRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CheckExperimentNameRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CheckExperimentNameRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CheckExperimentNameRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *CheckExperimentNameRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CheckExperimentNameRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckExperimentNameRequest(%+v)", *p)

}

func (p *CheckExperimentNameRequest) DeepEqual(ano *CheckExperimentNameRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *CheckExperimentNameRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *CheckExperimentNameRequest) Field2DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *CheckExperimentNameRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type CheckExperimentNameResponse struct {
	Pass     *bool          `thrift:"pass,1,optional" frugal:"1,optional,bool" form:"pass" json:"pass,omitempty"`
	Message  *string        `thrift:"message,2,optional" frugal:"2,optional,string" form:"message" json:"message,omitempty"`
	BaseResp *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewCheckExperimentNameResponse() *CheckExperimentNameResponse {
	return &CheckExperimentNameResponse{}
}

func (p *CheckExperimentNameResponse) InitDefault() {
}

var CheckExperimentNameResponse_Pass_DEFAULT bool

func (p *CheckExperimentNameResponse) GetPass() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetPass() {
		return CheckExperimentNameResponse_Pass_DEFAULT
	}
	return *p.Pass
}

var CheckExperimentNameResponse_Message_DEFAULT string

func (p *CheckExperimentNameResponse) GetMessage() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMessage() {
		return CheckExperimentNameResponse_Message_DEFAULT
	}
	return *p.Message
}

var CheckExperimentNameResponse_BaseResp_DEFAULT *base.BaseResp

func (p *CheckExperimentNameResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return CheckExperimentNameResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CheckExperimentNameResponse) SetPass(val *bool) {
	p.Pass = val
}
func (p *CheckExperimentNameResponse) SetMessage(val *string) {
	p.Message = val
}
func (p *CheckExperimentNameResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_CheckExperimentNameResponse = map[int16]string{
	1:   "pass",
	2:   "message",
	255: "BaseResp",
}

func (p *CheckExperimentNameResponse) IsSetPass() bool {
	return p.Pass != nil
}

func (p *CheckExperimentNameResponse) IsSetMessage() bool {
	return p.Message != nil
}

func (p *CheckExperimentNameResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CheckExperimentNameResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CheckExperimentNameResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CheckExperimentNameResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Pass = _field
	return nil
}
func (p *CheckExperimentNameResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Message = _field
	return nil
}
func (p *CheckExperimentNameResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *CheckExperimentNameResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CheckExperimentNameResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CheckExperimentNameResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPass() {
		if err = oprot.WriteFieldBegin("pass", thrift.BOOL, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.Pass); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CheckExperimentNameResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err = oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Message); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *CheckExperimentNameResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CheckExperimentNameResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CheckExperimentNameResponse(%+v)", *p)

}

func (p *CheckExperimentNameResponse) DeepEqual(ano *CheckExperimentNameResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Pass) {
		return false
	}
	if !p.Field2DeepEqual(ano.Message) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *CheckExperimentNameResponse) Field1DeepEqual(src *bool) bool {

	if p.Pass == src {
		return true
	} else if p.Pass == nil || src == nil {
		return false
	}
	if *p.Pass != *src {
		return false
	}
	return true
}
func (p *CheckExperimentNameResponse) Field2DeepEqual(src *string) bool {

	if p.Message == src {
		return true
	} else if p.Message == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Message, *src) != 0 {
		return false
	}
	return true
}
func (p *CheckExperimentNameResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type InvokeExperimentRequest struct {
	WorkspaceID     int64                         `thrift:"workspace_id,1,required" frugal:"1,required,i64" form:"workspace_id,required" json:"workspace_id,required" query:"workspace_id,required"`
	EvaluationSetID int64                         `thrift:"evaluation_set_id,2,required" frugal:"2,required,i64" form:"evaluation_set_id,required" json:"evaluation_set_id,required" query:"evaluation_set_id,required"`
	Items           []*eval_set.EvaluationSetItem `thrift:"items,3,optional" frugal:"3,optional,list<eval_set.EvaluationSetItem>" form:"items" json:"items,omitempty" query:"items"`
	// items 中存在无效数据时，默认不会写入任何数据；设置 skipInvalidItems=true 会跳过无效数据，写入有效数据
	SkipInvalidItems *bool `thrift:"skip_invalid_items,10,optional" frugal:"10,optional,bool" form:"skip_invalid_items" json:"skip_invalid_items,omitempty" query:"skip_invalid_items"`
	// 批量写入 items 如果超出数据集容量限制，默认不会写入任何数据；设置 partialAdd=true 会写入不超出容量限制的前 N 条
	AllowPartialAdd *bool             `thrift:"allow_partial_add,11,optional" frugal:"11,optional,bool" form:"allow_partial_add" json:"allow_partial_add,omitempty" query:"allow_partial_add"`
	ExperimentID    *int64            `thrift:"experiment_id,20,optional" frugal:"20,optional,i64" form:"experiment_id" json:"experiment_id,omitempty" query:"experiment_id"`
	ExperimentRunID *int64            `thrift:"experiment_run_id,21,optional" frugal:"21,optional,i64" form:"experiment_run_id" json:"experiment_run_id,omitempty" query:"experiment_run_id"`
	Ext             map[string]string `thrift:"ext,100,optional" frugal:"100,optional,map<string:string>" form:"ext" json:"ext,omitempty" query:"ext"`
	Session         *common.Session   `thrift:"session,200,optional" frugal:"200,optional,common.Session" form:"session" json:"session,omitempty" query:"session"`
	Base            *base.Base        `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewInvokeExperimentRequest() *InvokeExperimentRequest {
	return &InvokeExperimentRequest{}
}

func (p *InvokeExperimentRequest) InitDefault() {
}

func (p *InvokeExperimentRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *InvokeExperimentRequest) GetEvaluationSetID() (v int64) {
	if p != nil {
		return p.EvaluationSetID
	}
	return
}

var InvokeExperimentRequest_Items_DEFAULT []*eval_set.EvaluationSetItem

func (p *InvokeExperimentRequest) GetItems() (v []*eval_set.EvaluationSetItem) {
	if p == nil {
		return
	}
	if !p.IsSetItems() {
		return InvokeExperimentRequest_Items_DEFAULT
	}
	return p.Items
}

var InvokeExperimentRequest_SkipInvalidItems_DEFAULT bool

func (p *InvokeExperimentRequest) GetSkipInvalidItems() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetSkipInvalidItems() {
		return InvokeExperimentRequest_SkipInvalidItems_DEFAULT
	}
	return *p.SkipInvalidItems
}

var InvokeExperimentRequest_AllowPartialAdd_DEFAULT bool

func (p *InvokeExperimentRequest) GetAllowPartialAdd() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetAllowPartialAdd() {
		return InvokeExperimentRequest_AllowPartialAdd_DEFAULT
	}
	return *p.AllowPartialAdd
}

var InvokeExperimentRequest_ExperimentID_DEFAULT int64

func (p *InvokeExperimentRequest) GetExperimentID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetExperimentID() {
		return InvokeExperimentRequest_ExperimentID_DEFAULT
	}
	return *p.ExperimentID
}

var InvokeExperimentRequest_ExperimentRunID_DEFAULT int64

func (p *InvokeExperimentRequest) GetExperimentRunID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetExperimentRunID() {
		return InvokeExperimentRequest_ExperimentRunID_DEFAULT
	}
	return *p.ExperimentRunID
}

var InvokeExperimentRequest_Ext_DEFAULT map[string]string

func (p *InvokeExperimentRequest) GetExt() (v map[string]string) {
	if p == nil {
		return
	}
	if !p.IsSetExt() {
		return InvokeExperimentRequest_Ext_DEFAULT
	}
	return p.Ext
}

var InvokeExperimentRequest_Session_DEFAULT *common.Session

func (p *InvokeExperimentRequest) GetSession() (v *common.Session) {
	if p == nil {
		return
	}
	if !p.IsSetSession() {
		return InvokeExperimentRequest_Session_DEFAULT
	}
	return p.Session
}

var InvokeExperimentRequest_Base_DEFAULT *base.Base

func (p *InvokeExperimentRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return InvokeExperimentRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *InvokeExperimentRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *InvokeExperimentRequest) SetEvaluationSetID(val int64) {
	p.EvaluationSetID = val
}
func (p *InvokeExperimentRequest) SetItems(val []*eval_set.EvaluationSetItem) {
	p.Items = val
}
func (p *InvokeExperimentRequest) SetSkipInvalidItems(val *bool) {
	p.SkipInvalidItems = val
}
func (p *InvokeExperimentRequest) SetAllowPartialAdd(val *bool) {
	p.AllowPartialAdd = val
}
func (p *InvokeExperimentRequest) SetExperimentID(val *int64) {
	p.ExperimentID = val
}
func (p *InvokeExperimentRequest) SetExperimentRunID(val *int64) {
	p.ExperimentRunID = val
}
func (p *InvokeExperimentRequest) SetExt(val map[string]string) {
	p.Ext = val
}
func (p *InvokeExperimentRequest) SetSession(val *common.Session) {
	p.Session = val
}
func (p *InvokeExperimentRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_InvokeExperimentRequest = map[int16]string{
	1:   "workspace_id",
	2:   "evaluation_set_id",
	3:   "items",
	10:  "skip_invalid_items",
	11:  "allow_partial_add",
	20:  "experiment_id",
	21:  "experiment_run_id",
	100: "ext",
	200: "session",
	255: "Base",
}

func (p *InvokeExperimentRequest) IsSetItems() bool {
	return p.Items != nil
}

func (p *InvokeExperimentRequest) IsSetSkipInvalidItems() bool {
	return p.SkipInvalidItems != nil
}

func (p *InvokeExperimentRequest) IsSetAllowPartialAdd() bool {
	return p.AllowPartialAdd != nil
}

func (p *InvokeExperimentRequest) IsSetExperimentID() bool {
	return p.ExperimentID != nil
}

func (p *InvokeExperimentRequest) IsSetExperimentRunID() bool {
	return p.ExperimentRunID != nil
}

func (p *InvokeExperimentRequest) IsSetExt() bool {
	return p.Ext != nil
}

func (p *InvokeExperimentRequest) IsSetSession() bool {
	return p.Session != nil
}

func (p *InvokeExperimentRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *InvokeExperimentRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetEvaluationSetID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluationSetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 200:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField200(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEvaluationSetID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_InvokeExperimentRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_InvokeExperimentRequest[fieldId]))
}

func (p *InvokeExperimentRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *InvokeExperimentRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluationSetID = _field
	return nil
}
func (p *InvokeExperimentRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*eval_set.EvaluationSetItem, 0, size)
	values := make([]eval_set.EvaluationSetItem, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Items = _field
	return nil
}
func (p *InvokeExperimentRequest) ReadField10(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SkipInvalidItems = _field
	return nil
}
func (p *InvokeExperimentRequest) ReadField11(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AllowPartialAdd = _field
	return nil
}
func (p *InvokeExperimentRequest) ReadField20(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ExperimentID = _field
	return nil
}
func (p *InvokeExperimentRequest) ReadField21(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ExperimentRunID = _field
	return nil
}
func (p *InvokeExperimentRequest) ReadField100(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.Ext = _field
	return nil
}
func (p *InvokeExperimentRequest) ReadField200(iprot thrift.TProtocol) error {
	_field := common.NewSession()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Session = _field
	return nil
}
func (p *InvokeExperimentRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *InvokeExperimentRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("InvokeExperimentRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField200(oprot); err != nil {
			fieldId = 200
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *InvokeExperimentRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *InvokeExperimentRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluation_set_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EvaluationSetID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *InvokeExperimentRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetItems() {
		if err = oprot.WriteFieldBegin("items", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
			return err
		}
		for _, v := range p.Items {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *InvokeExperimentRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetSkipInvalidItems() {
		if err = oprot.WriteFieldBegin("skip_invalid_items", thrift.BOOL, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.SkipInvalidItems); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}
func (p *InvokeExperimentRequest) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetAllowPartialAdd() {
		if err = oprot.WriteFieldBegin("allow_partial_add", thrift.BOOL, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.AllowPartialAdd); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}
func (p *InvokeExperimentRequest) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetExperimentID() {
		if err = oprot.WriteFieldBegin("experiment_id", thrift.I64, 20); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ExperimentID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}
func (p *InvokeExperimentRequest) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetExperimentRunID() {
		if err = oprot.WriteFieldBegin("experiment_run_id", thrift.I64, 21); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ExperimentRunID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}
func (p *InvokeExperimentRequest) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetExt() {
		if err = oprot.WriteFieldBegin("ext", thrift.MAP, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Ext)); err != nil {
			return err
		}
		for k, v := range p.Ext {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}
func (p *InvokeExperimentRequest) writeField200(oprot thrift.TProtocol) (err error) {
	if p.IsSetSession() {
		if err = oprot.WriteFieldBegin("session", thrift.STRUCT, 200); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Session.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 200 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 200 end error: ", p), err)
}
func (p *InvokeExperimentRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *InvokeExperimentRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InvokeExperimentRequest(%+v)", *p)

}

func (p *InvokeExperimentRequest) DeepEqual(ano *InvokeExperimentRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluationSetID) {
		return false
	}
	if !p.Field3DeepEqual(ano.Items) {
		return false
	}
	if !p.Field10DeepEqual(ano.SkipInvalidItems) {
		return false
	}
	if !p.Field11DeepEqual(ano.AllowPartialAdd) {
		return false
	}
	if !p.Field20DeepEqual(ano.ExperimentID) {
		return false
	}
	if !p.Field21DeepEqual(ano.ExperimentRunID) {
		return false
	}
	if !p.Field100DeepEqual(ano.Ext) {
		return false
	}
	if !p.Field200DeepEqual(ano.Session) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *InvokeExperimentRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *InvokeExperimentRequest) Field2DeepEqual(src int64) bool {

	if p.EvaluationSetID != src {
		return false
	}
	return true
}
func (p *InvokeExperimentRequest) Field3DeepEqual(src []*eval_set.EvaluationSetItem) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *InvokeExperimentRequest) Field10DeepEqual(src *bool) bool {

	if p.SkipInvalidItems == src {
		return true
	} else if p.SkipInvalidItems == nil || src == nil {
		return false
	}
	if *p.SkipInvalidItems != *src {
		return false
	}
	return true
}
func (p *InvokeExperimentRequest) Field11DeepEqual(src *bool) bool {

	if p.AllowPartialAdd == src {
		return true
	} else if p.AllowPartialAdd == nil || src == nil {
		return false
	}
	if *p.AllowPartialAdd != *src {
		return false
	}
	return true
}
func (p *InvokeExperimentRequest) Field20DeepEqual(src *int64) bool {

	if p.ExperimentID == src {
		return true
	} else if p.ExperimentID == nil || src == nil {
		return false
	}
	if *p.ExperimentID != *src {
		return false
	}
	return true
}
func (p *InvokeExperimentRequest) Field21DeepEqual(src *int64) bool {

	if p.ExperimentRunID == src {
		return true
	} else if p.ExperimentRunID == nil || src == nil {
		return false
	}
	if *p.ExperimentRunID != *src {
		return false
	}
	return true
}
func (p *InvokeExperimentRequest) Field100DeepEqual(src map[string]string) bool {

	if len(p.Ext) != len(src) {
		return false
	}
	for k, v := range p.Ext {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *InvokeExperimentRequest) Field200DeepEqual(src *common.Session) bool {

	if !p.Session.DeepEqual(src) {
		return false
	}
	return true
}
func (p *InvokeExperimentRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type InvokeExperimentResponse struct {
	// key: item 在 items 中的索引
	AddedItems map[int64]int64           `thrift:"added_items,1,optional" frugal:"1,optional,map<i64:i64>" form:"added_items" json:"added_items,omitempty" query:"added_items"`
	Errors     []*dataset.ItemErrorGroup `thrift:"errors,2,optional" frugal:"2,optional,list<dataset.ItemErrorGroup>" form:"errors" json:"errors,omitempty" query:"errors"`
	BaseResp   *base.BaseResp            `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewInvokeExperimentResponse() *InvokeExperimentResponse {
	return &InvokeExperimentResponse{}
}

func (p *InvokeExperimentResponse) InitDefault() {
}

var InvokeExperimentResponse_AddedItems_DEFAULT map[int64]int64

func (p *InvokeExperimentResponse) GetAddedItems() (v map[int64]int64) {
	if p == nil {
		return
	}
	if !p.IsSetAddedItems() {
		return InvokeExperimentResponse_AddedItems_DEFAULT
	}
	return p.AddedItems
}

var InvokeExperimentResponse_Errors_DEFAULT []*dataset.ItemErrorGroup

func (p *InvokeExperimentResponse) GetErrors() (v []*dataset.ItemErrorGroup) {
	if p == nil {
		return
	}
	if !p.IsSetErrors() {
		return InvokeExperimentResponse_Errors_DEFAULT
	}
	return p.Errors
}

var InvokeExperimentResponse_BaseResp_DEFAULT *base.BaseResp

func (p *InvokeExperimentResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return InvokeExperimentResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *InvokeExperimentResponse) SetAddedItems(val map[int64]int64) {
	p.AddedItems = val
}
func (p *InvokeExperimentResponse) SetErrors(val []*dataset.ItemErrorGroup) {
	p.Errors = val
}
func (p *InvokeExperimentResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_InvokeExperimentResponse = map[int16]string{
	1:   "added_items",
	2:   "errors",
	255: "BaseResp",
}

func (p *InvokeExperimentResponse) IsSetAddedItems() bool {
	return p.AddedItems != nil
}

func (p *InvokeExperimentResponse) IsSetErrors() bool {
	return p.Errors != nil
}

func (p *InvokeExperimentResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *InvokeExperimentResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_InvokeExperimentResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *InvokeExperimentResponse) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[int64]int64, size)
	for i := 0; i < size; i++ {
		var _key int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.AddedItems = _field
	return nil
}
func (p *InvokeExperimentResponse) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*dataset.ItemErrorGroup, 0, size)
	values := make([]dataset.ItemErrorGroup, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Errors = _field
	return nil
}
func (p *InvokeExperimentResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *InvokeExperimentResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("InvokeExperimentResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *InvokeExperimentResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAddedItems() {
		if err = oprot.WriteFieldBegin("added_items", thrift.MAP, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.I64, thrift.I64, len(p.AddedItems)); err != nil {
			return err
		}
		for k, v := range p.AddedItems {
			if err := oprot.WriteI64(k); err != nil {
				return err
			}
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *InvokeExperimentResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrors() {
		if err = oprot.WriteFieldBegin("errors", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Errors)); err != nil {
			return err
		}
		for _, v := range p.Errors {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *InvokeExperimentResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *InvokeExperimentResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InvokeExperimentResponse(%+v)", *p)

}

func (p *InvokeExperimentResponse) DeepEqual(ano *InvokeExperimentResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AddedItems) {
		return false
	}
	if !p.Field2DeepEqual(ano.Errors) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *InvokeExperimentResponse) Field1DeepEqual(src map[int64]int64) bool {

	if len(p.AddedItems) != len(src) {
		return false
	}
	for k, v := range p.AddedItems {
		_src := src[k]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *InvokeExperimentResponse) Field2DeepEqual(src []*dataset.ItemErrorGroup) bool {

	if len(p.Errors) != len(src) {
		return false
	}
	for i, v := range p.Errors {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *InvokeExperimentResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type FinishExperimentRequest struct {
	WorkspaceID     *int64          `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" form:"workspace_id" json:"workspace_id,omitempty" query:"workspace_id"`
	ExperimentID    *int64          `thrift:"experiment_id,2,optional" frugal:"2,optional,i64" form:"experiment_id" json:"experiment_id,omitempty" query:"experiment_id"`
	ExperimentRunID *int64          `thrift:"experiment_run_id,3,optional" frugal:"3,optional,i64" form:"experiment_run_id" json:"experiment_run_id,omitempty" query:"experiment_run_id"`
	Cid             *string         `thrift:"cid,100,optional" frugal:"100,optional,string" form:"cid" json:"cid,omitempty" query:"cid"`
	Session         *common.Session `thrift:"session,200,optional" frugal:"200,optional,common.Session" form:"session" json:"session,omitempty" query:"session"`
	Base            *base.Base      `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewFinishExperimentRequest() *FinishExperimentRequest {
	return &FinishExperimentRequest{}
}

func (p *FinishExperimentRequest) InitDefault() {
}

var FinishExperimentRequest_WorkspaceID_DEFAULT int64

func (p *FinishExperimentRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return FinishExperimentRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var FinishExperimentRequest_ExperimentID_DEFAULT int64

func (p *FinishExperimentRequest) GetExperimentID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetExperimentID() {
		return FinishExperimentRequest_ExperimentID_DEFAULT
	}
	return *p.ExperimentID
}

var FinishExperimentRequest_ExperimentRunID_DEFAULT int64

func (p *FinishExperimentRequest) GetExperimentRunID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetExperimentRunID() {
		return FinishExperimentRequest_ExperimentRunID_DEFAULT
	}
	return *p.ExperimentRunID
}

var FinishExperimentRequest_Cid_DEFAULT string

func (p *FinishExperimentRequest) GetCid() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetCid() {
		return FinishExperimentRequest_Cid_DEFAULT
	}
	return *p.Cid
}

var FinishExperimentRequest_Session_DEFAULT *common.Session

func (p *FinishExperimentRequest) GetSession() (v *common.Session) {
	if p == nil {
		return
	}
	if !p.IsSetSession() {
		return FinishExperimentRequest_Session_DEFAULT
	}
	return p.Session
}

var FinishExperimentRequest_Base_DEFAULT *base.Base

func (p *FinishExperimentRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return FinishExperimentRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *FinishExperimentRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *FinishExperimentRequest) SetExperimentID(val *int64) {
	p.ExperimentID = val
}
func (p *FinishExperimentRequest) SetExperimentRunID(val *int64) {
	p.ExperimentRunID = val
}
func (p *FinishExperimentRequest) SetCid(val *string) {
	p.Cid = val
}
func (p *FinishExperimentRequest) SetSession(val *common.Session) {
	p.Session = val
}
func (p *FinishExperimentRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_FinishExperimentRequest = map[int16]string{
	1:   "workspace_id",
	2:   "experiment_id",
	3:   "experiment_run_id",
	100: "cid",
	200: "session",
	255: "Base",
}

func (p *FinishExperimentRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *FinishExperimentRequest) IsSetExperimentID() bool {
	return p.ExperimentID != nil
}

func (p *FinishExperimentRequest) IsSetExperimentRunID() bool {
	return p.ExperimentRunID != nil
}

func (p *FinishExperimentRequest) IsSetCid() bool {
	return p.Cid != nil
}

func (p *FinishExperimentRequest) IsSetSession() bool {
	return p.Session != nil
}

func (p *FinishExperimentRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *FinishExperimentRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 200:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField200(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FinishExperimentRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FinishExperimentRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *FinishExperimentRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ExperimentID = _field
	return nil
}
func (p *FinishExperimentRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ExperimentRunID = _field
	return nil
}
func (p *FinishExperimentRequest) ReadField100(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Cid = _field
	return nil
}
func (p *FinishExperimentRequest) ReadField200(iprot thrift.TProtocol) error {
	_field := common.NewSession()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Session = _field
	return nil
}
func (p *FinishExperimentRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *FinishExperimentRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FinishExperimentRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField200(oprot); err != nil {
			fieldId = 200
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FinishExperimentRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *FinishExperimentRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetExperimentID() {
		if err = oprot.WriteFieldBegin("experiment_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ExperimentID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *FinishExperimentRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetExperimentRunID() {
		if err = oprot.WriteFieldBegin("experiment_run_id", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ExperimentRunID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *FinishExperimentRequest) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetCid() {
		if err = oprot.WriteFieldBegin("cid", thrift.STRING, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Cid); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}
func (p *FinishExperimentRequest) writeField200(oprot thrift.TProtocol) (err error) {
	if p.IsSetSession() {
		if err = oprot.WriteFieldBegin("session", thrift.STRUCT, 200); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Session.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 200 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 200 end error: ", p), err)
}
func (p *FinishExperimentRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *FinishExperimentRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FinishExperimentRequest(%+v)", *p)

}

func (p *FinishExperimentRequest) DeepEqual(ano *FinishExperimentRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.ExperimentID) {
		return false
	}
	if !p.Field3DeepEqual(ano.ExperimentRunID) {
		return false
	}
	if !p.Field100DeepEqual(ano.Cid) {
		return false
	}
	if !p.Field200DeepEqual(ano.Session) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *FinishExperimentRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *FinishExperimentRequest) Field2DeepEqual(src *int64) bool {

	if p.ExperimentID == src {
		return true
	} else if p.ExperimentID == nil || src == nil {
		return false
	}
	if *p.ExperimentID != *src {
		return false
	}
	return true
}
func (p *FinishExperimentRequest) Field3DeepEqual(src *int64) bool {

	if p.ExperimentRunID == src {
		return true
	} else if p.ExperimentRunID == nil || src == nil {
		return false
	}
	if *p.ExperimentRunID != *src {
		return false
	}
	return true
}
func (p *FinishExperimentRequest) Field100DeepEqual(src *string) bool {

	if p.Cid == src {
		return true
	} else if p.Cid == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Cid, *src) != 0 {
		return false
	}
	return true
}
func (p *FinishExperimentRequest) Field200DeepEqual(src *common.Session) bool {

	if !p.Session.DeepEqual(src) {
		return false
	}
	return true
}
func (p *FinishExperimentRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type FinishExperimentResponse struct {
	BaseResp *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewFinishExperimentResponse() *FinishExperimentResponse {
	return &FinishExperimentResponse{}
}

func (p *FinishExperimentResponse) InitDefault() {
}

var FinishExperimentResponse_BaseResp_DEFAULT *base.BaseResp

func (p *FinishExperimentResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return FinishExperimentResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *FinishExperimentResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_FinishExperimentResponse = map[int16]string{
	255: "BaseResp",
}

func (p *FinishExperimentResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *FinishExperimentResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FinishExperimentResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FinishExperimentResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *FinishExperimentResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FinishExperimentResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FinishExperimentResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *FinishExperimentResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FinishExperimentResponse(%+v)", *p)

}

func (p *FinishExperimentResponse) DeepEqual(ano *FinishExperimentResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *FinishExperimentResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type ListExperimentStatsRequest struct {
	WorkspaceID  int64                  `thrift:"workspace_id,1,required" frugal:"1,required,i64" form:"workspace_id,required" json:"workspace_id,required" query:"workspace_id,required"`
	PageNumber   *int32                 `thrift:"page_number,2,optional" frugal:"2,optional,i32" form:"page_number" json:"page_number,omitempty" query:"page_number"`
	PageSize     *int32                 `thrift:"page_size,3,optional" frugal:"3,optional,i32" form:"page_size" json:"page_size,omitempty" query:"page_size"`
	FilterOption *expt.ExptFilterOption `thrift:"filter_option,20,optional" frugal:"20,optional,expt.ExptFilterOption" form:"filter_option" json:"filter_option,omitempty" query:"filter_option"`
	Session      *common.Session        `thrift:"session,300,optional" frugal:"300,optional,common.Session" form:"session" json:"session,omitempty" query:"session"`
	Base         *base.Base             `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewListExperimentStatsRequest() *ListExperimentStatsRequest {
	return &ListExperimentStatsRequest{}
}

func (p *ListExperimentStatsRequest) InitDefault() {
}

func (p *ListExperimentStatsRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

var ListExperimentStatsRequest_PageNumber_DEFAULT int32

func (p *ListExperimentStatsRequest) GetPageNumber() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageNumber() {
		return ListExperimentStatsRequest_PageNumber_DEFAULT
	}
	return *p.PageNumber
}

var ListExperimentStatsRequest_PageSize_DEFAULT int32

func (p *ListExperimentStatsRequest) GetPageSize() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageSize() {
		return ListExperimentStatsRequest_PageSize_DEFAULT
	}
	return *p.PageSize
}

var ListExperimentStatsRequest_FilterOption_DEFAULT *expt.ExptFilterOption

func (p *ListExperimentStatsRequest) GetFilterOption() (v *expt.ExptFilterOption) {
	if p == nil {
		return
	}
	if !p.IsSetFilterOption() {
		return ListExperimentStatsRequest_FilterOption_DEFAULT
	}
	return p.FilterOption
}

var ListExperimentStatsRequest_Session_DEFAULT *common.Session

func (p *ListExperimentStatsRequest) GetSession() (v *common.Session) {
	if p == nil {
		return
	}
	if !p.IsSetSession() {
		return ListExperimentStatsRequest_Session_DEFAULT
	}
	return p.Session
}

var ListExperimentStatsRequest_Base_DEFAULT *base.Base

func (p *ListExperimentStatsRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return ListExperimentStatsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ListExperimentStatsRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *ListExperimentStatsRequest) SetPageNumber(val *int32) {
	p.PageNumber = val
}
func (p *ListExperimentStatsRequest) SetPageSize(val *int32) {
	p.PageSize = val
}
func (p *ListExperimentStatsRequest) SetFilterOption(val *expt.ExptFilterOption) {
	p.FilterOption = val
}
func (p *ListExperimentStatsRequest) SetSession(val *common.Session) {
	p.Session = val
}
func (p *ListExperimentStatsRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListExperimentStatsRequest = map[int16]string{
	1:   "workspace_id",
	2:   "page_number",
	3:   "page_size",
	20:  "filter_option",
	300: "session",
	255: "Base",
}

func (p *ListExperimentStatsRequest) IsSetPageNumber() bool {
	return p.PageNumber != nil
}

func (p *ListExperimentStatsRequest) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *ListExperimentStatsRequest) IsSetFilterOption() bool {
	return p.FilterOption != nil
}

func (p *ListExperimentStatsRequest) IsSetSession() bool {
	return p.Session != nil
}

func (p *ListExperimentStatsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListExperimentStatsRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 300:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField300(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListExperimentStatsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ListExperimentStatsRequest[fieldId]))
}

func (p *ListExperimentStatsRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *ListExperimentStatsRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageNumber = _field
	return nil
}
func (p *ListExperimentStatsRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageSize = _field
	return nil
}
func (p *ListExperimentStatsRequest) ReadField20(iprot thrift.TProtocol) error {
	_field := expt.NewExptFilterOption()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.FilterOption = _field
	return nil
}
func (p *ListExperimentStatsRequest) ReadField300(iprot thrift.TProtocol) error {
	_field := common.NewSession()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Session = _field
	return nil
}
func (p *ListExperimentStatsRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *ListExperimentStatsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListExperimentStatsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField300(oprot); err != nil {
			fieldId = 300
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListExperimentStatsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListExperimentStatsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageNumber() {
		if err = oprot.WriteFieldBegin("page_number", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageNumber); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ListExperimentStatsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("page_size", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ListExperimentStatsRequest) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetFilterOption() {
		if err = oprot.WriteFieldBegin("filter_option", thrift.STRUCT, 20); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.FilterOption.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}
func (p *ListExperimentStatsRequest) writeField300(oprot thrift.TProtocol) (err error) {
	if p.IsSetSession() {
		if err = oprot.WriteFieldBegin("session", thrift.STRUCT, 300); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Session.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 300 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 300 end error: ", p), err)
}
func (p *ListExperimentStatsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListExperimentStatsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListExperimentStatsRequest(%+v)", *p)

}

func (p *ListExperimentStatsRequest) DeepEqual(ano *ListExperimentStatsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.PageNumber) {
		return false
	}
	if !p.Field3DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field20DeepEqual(ano.FilterOption) {
		return false
	}
	if !p.Field300DeepEqual(ano.Session) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListExperimentStatsRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *ListExperimentStatsRequest) Field2DeepEqual(src *int32) bool {

	if p.PageNumber == src {
		return true
	} else if p.PageNumber == nil || src == nil {
		return false
	}
	if *p.PageNumber != *src {
		return false
	}
	return true
}
func (p *ListExperimentStatsRequest) Field3DeepEqual(src *int32) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}
func (p *ListExperimentStatsRequest) Field20DeepEqual(src *expt.ExptFilterOption) bool {

	if !p.FilterOption.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ListExperimentStatsRequest) Field300DeepEqual(src *common.Session) bool {

	if !p.Session.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ListExperimentStatsRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ListExperimentStatsResponse struct {
	ExptStatsInfos []*expt.ExptStatsInfo `thrift:"expt_stats_infos,1,optional" frugal:"1,optional,list<expt.ExptStatsInfo>" form:"expt_stats_infos" json:"expt_stats_infos,omitempty" query:"expt_stats_infos"`
	Total          *int32                `thrift:"total,2,optional" frugal:"2,optional,i32" form:"total" json:"total,omitempty" query:"total"`
	BaseResp       *base.BaseResp        `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewListExperimentStatsResponse() *ListExperimentStatsResponse {
	return &ListExperimentStatsResponse{}
}

func (p *ListExperimentStatsResponse) InitDefault() {
}

var ListExperimentStatsResponse_ExptStatsInfos_DEFAULT []*expt.ExptStatsInfo

func (p *ListExperimentStatsResponse) GetExptStatsInfos() (v []*expt.ExptStatsInfo) {
	if p == nil {
		return
	}
	if !p.IsSetExptStatsInfos() {
		return ListExperimentStatsResponse_ExptStatsInfos_DEFAULT
	}
	return p.ExptStatsInfos
}

var ListExperimentStatsResponse_Total_DEFAULT int32

func (p *ListExperimentStatsResponse) GetTotal() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetTotal() {
		return ListExperimentStatsResponse_Total_DEFAULT
	}
	return *p.Total
}

var ListExperimentStatsResponse_BaseResp_DEFAULT *base.BaseResp

func (p *ListExperimentStatsResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return ListExperimentStatsResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ListExperimentStatsResponse) SetExptStatsInfos(val []*expt.ExptStatsInfo) {
	p.ExptStatsInfos = val
}
func (p *ListExperimentStatsResponse) SetTotal(val *int32) {
	p.Total = val
}
func (p *ListExperimentStatsResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_ListExperimentStatsResponse = map[int16]string{
	1:   "expt_stats_infos",
	2:   "total",
	255: "BaseResp",
}

func (p *ListExperimentStatsResponse) IsSetExptStatsInfos() bool {
	return p.ExptStatsInfos != nil
}

func (p *ListExperimentStatsResponse) IsSetTotal() bool {
	return p.Total != nil
}

func (p *ListExperimentStatsResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ListExperimentStatsResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListExperimentStatsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListExperimentStatsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*expt.ExptStatsInfo, 0, size)
	values := make([]expt.ExptStatsInfo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ExptStatsInfos = _field
	return nil
}
func (p *ListExperimentStatsResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Total = _field
	return nil
}
func (p *ListExperimentStatsResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *ListExperimentStatsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListExperimentStatsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListExperimentStatsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetExptStatsInfos() {
		if err = oprot.WriteFieldBegin("expt_stats_infos", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ExptStatsInfos)); err != nil {
			return err
		}
		for _, v := range p.ExptStatsInfos {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListExperimentStatsResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotal() {
		if err = oprot.WriteFieldBegin("total", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Total); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ListExperimentStatsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListExperimentStatsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListExperimentStatsResponse(%+v)", *p)

}

func (p *ListExperimentStatsResponse) DeepEqual(ano *ListExperimentStatsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ExptStatsInfos) {
		return false
	}
	if !p.Field2DeepEqual(ano.Total) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *ListExperimentStatsResponse) Field1DeepEqual(src []*expt.ExptStatsInfo) bool {

	if len(p.ExptStatsInfos) != len(src) {
		return false
	}
	for i, v := range p.ExptStatsInfos {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListExperimentStatsResponse) Field2DeepEqual(src *int32) bool {

	if p.Total == src {
		return true
	} else if p.Total == nil || src == nil {
		return false
	}
	if *p.Total != *src {
		return false
	}
	return true
}
func (p *ListExperimentStatsResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type ExperimentService interface {
	CheckExperimentName(ctx context.Context, req *CheckExperimentNameRequest) (r *CheckExperimentNameResponse, err error)
	// CreateExperiment 只创建，不提交运行
	CreateExperiment(ctx context.Context, req *CreateExperimentRequest) (r *CreateExperimentResponse, err error)
	// SubmitExperiment 创建并提交运行
	SubmitExperiment(ctx context.Context, req *SubmitExperimentRequest) (r *SubmitExperimentResponse, err error)

	BatchGetExperiments(ctx context.Context, req *BatchGetExperimentsRequest) (r *BatchGetExperimentsResponse, err error)

	ListExperiments(ctx context.Context, req *ListExperimentsRequest) (r *ListExperimentsResponse, err error)

	UpdateExperiment(ctx context.Context, req *UpdateExperimentRequest) (r *UpdateExperimentResponse, err error)

	DeleteExperiment(ctx context.Context, req *DeleteExperimentRequest) (r *DeleteExperimentResponse, err error)

	BatchDeleteExperiments(ctx context.Context, req *BatchDeleteExperimentsRequest) (r *BatchDeleteExperimentsResponse, err error)

	CloneExperiment(ctx context.Context, req *CloneExperimentRequest) (r *CloneExperimentResponse, err error)
	// RunExperiment 运行已创建的实验
	RunExperiment(ctx context.Context, req *RunExperimentRequest) (r *RunExperimentResponse, err error)

	RetryExperiment(ctx context.Context, req *RetryExperimentRequest) (r *RetryExperimentResponse, err error)

	KillExperiment(ctx context.Context, req *KillExperimentRequest) (r *KillExperimentResponse, err error)
	// MGetExperimentResult 获取实验结果
	BatchGetExperimentResult_(ctx context.Context, req *BatchGetExperimentResultRequest) (r *BatchGetExperimentResultResponse, err error)

	BatchGetExperimentAggrResult_(ctx context.Context, req *BatchGetExperimentAggrResultRequest) (r *BatchGetExperimentAggrResultResponse, err error)
	// 在线实验
	InvokeExperiment(ctx context.Context, req *InvokeExperimentRequest) (r *InvokeExperimentResponse, err error)

	FinishExperiment(ctx context.Context, req *FinishExperimentRequest) (r *FinishExperimentResponse, err error)

	ListExperimentStats(ctx context.Context, req *ListExperimentStatsRequest) (r *ListExperimentStatsResponse, err error)
}

type ExperimentServiceClient struct {
	c thrift.TClient
}

func NewExperimentServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ExperimentServiceClient {
	return &ExperimentServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewExperimentServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ExperimentServiceClient {
	return &ExperimentServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewExperimentServiceClient(c thrift.TClient) *ExperimentServiceClient {
	return &ExperimentServiceClient{
		c: c,
	}
}

func (p *ExperimentServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *ExperimentServiceClient) CheckExperimentName(ctx context.Context, req *CheckExperimentNameRequest) (r *CheckExperimentNameResponse, err error) {
	var _args ExperimentServiceCheckExperimentNameArgs
	_args.Req = req
	var _result ExperimentServiceCheckExperimentNameResult
	if err = p.Client_().Call(ctx, "CheckExperimentName", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ExperimentServiceClient) CreateExperiment(ctx context.Context, req *CreateExperimentRequest) (r *CreateExperimentResponse, err error) {
	var _args ExperimentServiceCreateExperimentArgs
	_args.Req = req
	var _result ExperimentServiceCreateExperimentResult
	if err = p.Client_().Call(ctx, "CreateExperiment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ExperimentServiceClient) SubmitExperiment(ctx context.Context, req *SubmitExperimentRequest) (r *SubmitExperimentResponse, err error) {
	var _args ExperimentServiceSubmitExperimentArgs
	_args.Req = req
	var _result ExperimentServiceSubmitExperimentResult
	if err = p.Client_().Call(ctx, "SubmitExperiment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ExperimentServiceClient) BatchGetExperiments(ctx context.Context, req *BatchGetExperimentsRequest) (r *BatchGetExperimentsResponse, err error) {
	var _args ExperimentServiceBatchGetExperimentsArgs
	_args.Req = req
	var _result ExperimentServiceBatchGetExperimentsResult
	if err = p.Client_().Call(ctx, "BatchGetExperiments", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ExperimentServiceClient) ListExperiments(ctx context.Context, req *ListExperimentsRequest) (r *ListExperimentsResponse, err error) {
	var _args ExperimentServiceListExperimentsArgs
	_args.Req = req
	var _result ExperimentServiceListExperimentsResult
	if err = p.Client_().Call(ctx, "ListExperiments", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ExperimentServiceClient) UpdateExperiment(ctx context.Context, req *UpdateExperimentRequest) (r *UpdateExperimentResponse, err error) {
	var _args ExperimentServiceUpdateExperimentArgs
	_args.Req = req
	var _result ExperimentServiceUpdateExperimentResult
	if err = p.Client_().Call(ctx, "UpdateExperiment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ExperimentServiceClient) DeleteExperiment(ctx context.Context, req *DeleteExperimentRequest) (r *DeleteExperimentResponse, err error) {
	var _args ExperimentServiceDeleteExperimentArgs
	_args.Req = req
	var _result ExperimentServiceDeleteExperimentResult
	if err = p.Client_().Call(ctx, "DeleteExperiment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ExperimentServiceClient) BatchDeleteExperiments(ctx context.Context, req *BatchDeleteExperimentsRequest) (r *BatchDeleteExperimentsResponse, err error) {
	var _args ExperimentServiceBatchDeleteExperimentsArgs
	_args.Req = req
	var _result ExperimentServiceBatchDeleteExperimentsResult
	if err = p.Client_().Call(ctx, "BatchDeleteExperiments", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ExperimentServiceClient) CloneExperiment(ctx context.Context, req *CloneExperimentRequest) (r *CloneExperimentResponse, err error) {
	var _args ExperimentServiceCloneExperimentArgs
	_args.Req = req
	var _result ExperimentServiceCloneExperimentResult
	if err = p.Client_().Call(ctx, "CloneExperiment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ExperimentServiceClient) RunExperiment(ctx context.Context, req *RunExperimentRequest) (r *RunExperimentResponse, err error) {
	var _args ExperimentServiceRunExperimentArgs
	_args.Req = req
	var _result ExperimentServiceRunExperimentResult
	if err = p.Client_().Call(ctx, "RunExperiment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ExperimentServiceClient) RetryExperiment(ctx context.Context, req *RetryExperimentRequest) (r *RetryExperimentResponse, err error) {
	var _args ExperimentServiceRetryExperimentArgs
	_args.Req = req
	var _result ExperimentServiceRetryExperimentResult
	if err = p.Client_().Call(ctx, "RetryExperiment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ExperimentServiceClient) KillExperiment(ctx context.Context, req *KillExperimentRequest) (r *KillExperimentResponse, err error) {
	var _args ExperimentServiceKillExperimentArgs
	_args.Req = req
	var _result ExperimentServiceKillExperimentResult
	if err = p.Client_().Call(ctx, "KillExperiment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ExperimentServiceClient) BatchGetExperimentResult_(ctx context.Context, req *BatchGetExperimentResultRequest) (r *BatchGetExperimentResultResponse, err error) {
	var _args ExperimentServiceBatchGetExperimentResultArgs
	_args.Req = req
	var _result ExperimentServiceBatchGetExperimentResultResult
	if err = p.Client_().Call(ctx, "BatchGetExperimentResult", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ExperimentServiceClient) BatchGetExperimentAggrResult_(ctx context.Context, req *BatchGetExperimentAggrResultRequest) (r *BatchGetExperimentAggrResultResponse, err error) {
	var _args ExperimentServiceBatchGetExperimentAggrResultArgs
	_args.Req = req
	var _result ExperimentServiceBatchGetExperimentAggrResultResult
	if err = p.Client_().Call(ctx, "BatchGetExperimentAggrResult", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ExperimentServiceClient) InvokeExperiment(ctx context.Context, req *InvokeExperimentRequest) (r *InvokeExperimentResponse, err error) {
	var _args ExperimentServiceInvokeExperimentArgs
	_args.Req = req
	var _result ExperimentServiceInvokeExperimentResult
	if err = p.Client_().Call(ctx, "InvokeExperiment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ExperimentServiceClient) FinishExperiment(ctx context.Context, req *FinishExperimentRequest) (r *FinishExperimentResponse, err error) {
	var _args ExperimentServiceFinishExperimentArgs
	_args.Req = req
	var _result ExperimentServiceFinishExperimentResult
	if err = p.Client_().Call(ctx, "FinishExperiment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ExperimentServiceClient) ListExperimentStats(ctx context.Context, req *ListExperimentStatsRequest) (r *ListExperimentStatsResponse, err error) {
	var _args ExperimentServiceListExperimentStatsArgs
	_args.Req = req
	var _result ExperimentServiceListExperimentStatsResult
	if err = p.Client_().Call(ctx, "ListExperimentStats", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type ExperimentServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      ExperimentService
}

func (p *ExperimentServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *ExperimentServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *ExperimentServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewExperimentServiceProcessor(handler ExperimentService) *ExperimentServiceProcessor {
	self := &ExperimentServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("CheckExperimentName", &experimentServiceProcessorCheckExperimentName{handler: handler})
	self.AddToProcessorMap("CreateExperiment", &experimentServiceProcessorCreateExperiment{handler: handler})
	self.AddToProcessorMap("SubmitExperiment", &experimentServiceProcessorSubmitExperiment{handler: handler})
	self.AddToProcessorMap("BatchGetExperiments", &experimentServiceProcessorBatchGetExperiments{handler: handler})
	self.AddToProcessorMap("ListExperiments", &experimentServiceProcessorListExperiments{handler: handler})
	self.AddToProcessorMap("UpdateExperiment", &experimentServiceProcessorUpdateExperiment{handler: handler})
	self.AddToProcessorMap("DeleteExperiment", &experimentServiceProcessorDeleteExperiment{handler: handler})
	self.AddToProcessorMap("BatchDeleteExperiments", &experimentServiceProcessorBatchDeleteExperiments{handler: handler})
	self.AddToProcessorMap("CloneExperiment", &experimentServiceProcessorCloneExperiment{handler: handler})
	self.AddToProcessorMap("RunExperiment", &experimentServiceProcessorRunExperiment{handler: handler})
	self.AddToProcessorMap("RetryExperiment", &experimentServiceProcessorRetryExperiment{handler: handler})
	self.AddToProcessorMap("KillExperiment", &experimentServiceProcessorKillExperiment{handler: handler})
	self.AddToProcessorMap("BatchGetExperimentResult", &experimentServiceProcessorBatchGetExperimentResult_{handler: handler})
	self.AddToProcessorMap("BatchGetExperimentAggrResult", &experimentServiceProcessorBatchGetExperimentAggrResult_{handler: handler})
	self.AddToProcessorMap("InvokeExperiment", &experimentServiceProcessorInvokeExperiment{handler: handler})
	self.AddToProcessorMap("FinishExperiment", &experimentServiceProcessorFinishExperiment{handler: handler})
	self.AddToProcessorMap("ListExperimentStats", &experimentServiceProcessorListExperimentStats{handler: handler})
	return self
}
func (p *ExperimentServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type experimentServiceProcessorCheckExperimentName struct {
	handler ExperimentService
}

func (p *experimentServiceProcessorCheckExperimentName) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ExperimentServiceCheckExperimentNameArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CheckExperimentName", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ExperimentServiceCheckExperimentNameResult{}
	var retval *CheckExperimentNameResponse
	if retval, err2 = p.handler.CheckExperimentName(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CheckExperimentName: "+err2.Error())
		oprot.WriteMessageBegin("CheckExperimentName", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CheckExperimentName", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type experimentServiceProcessorCreateExperiment struct {
	handler ExperimentService
}

func (p *experimentServiceProcessorCreateExperiment) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ExperimentServiceCreateExperimentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateExperiment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ExperimentServiceCreateExperimentResult{}
	var retval *CreateExperimentResponse
	if retval, err2 = p.handler.CreateExperiment(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateExperiment: "+err2.Error())
		oprot.WriteMessageBegin("CreateExperiment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateExperiment", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type experimentServiceProcessorSubmitExperiment struct {
	handler ExperimentService
}

func (p *experimentServiceProcessorSubmitExperiment) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ExperimentServiceSubmitExperimentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SubmitExperiment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ExperimentServiceSubmitExperimentResult{}
	var retval *SubmitExperimentResponse
	if retval, err2 = p.handler.SubmitExperiment(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SubmitExperiment: "+err2.Error())
		oprot.WriteMessageBegin("SubmitExperiment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("SubmitExperiment", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type experimentServiceProcessorBatchGetExperiments struct {
	handler ExperimentService
}

func (p *experimentServiceProcessorBatchGetExperiments) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ExperimentServiceBatchGetExperimentsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BatchGetExperiments", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ExperimentServiceBatchGetExperimentsResult{}
	var retval *BatchGetExperimentsResponse
	if retval, err2 = p.handler.BatchGetExperiments(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BatchGetExperiments: "+err2.Error())
		oprot.WriteMessageBegin("BatchGetExperiments", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BatchGetExperiments", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type experimentServiceProcessorListExperiments struct {
	handler ExperimentService
}

func (p *experimentServiceProcessorListExperiments) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ExperimentServiceListExperimentsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListExperiments", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ExperimentServiceListExperimentsResult{}
	var retval *ListExperimentsResponse
	if retval, err2 = p.handler.ListExperiments(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListExperiments: "+err2.Error())
		oprot.WriteMessageBegin("ListExperiments", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListExperiments", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type experimentServiceProcessorUpdateExperiment struct {
	handler ExperimentService
}

func (p *experimentServiceProcessorUpdateExperiment) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ExperimentServiceUpdateExperimentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateExperiment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ExperimentServiceUpdateExperimentResult{}
	var retval *UpdateExperimentResponse
	if retval, err2 = p.handler.UpdateExperiment(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateExperiment: "+err2.Error())
		oprot.WriteMessageBegin("UpdateExperiment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateExperiment", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type experimentServiceProcessorDeleteExperiment struct {
	handler ExperimentService
}

func (p *experimentServiceProcessorDeleteExperiment) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ExperimentServiceDeleteExperimentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteExperiment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ExperimentServiceDeleteExperimentResult{}
	var retval *DeleteExperimentResponse
	if retval, err2 = p.handler.DeleteExperiment(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteExperiment: "+err2.Error())
		oprot.WriteMessageBegin("DeleteExperiment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteExperiment", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type experimentServiceProcessorBatchDeleteExperiments struct {
	handler ExperimentService
}

func (p *experimentServiceProcessorBatchDeleteExperiments) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ExperimentServiceBatchDeleteExperimentsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BatchDeleteExperiments", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ExperimentServiceBatchDeleteExperimentsResult{}
	var retval *BatchDeleteExperimentsResponse
	if retval, err2 = p.handler.BatchDeleteExperiments(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BatchDeleteExperiments: "+err2.Error())
		oprot.WriteMessageBegin("BatchDeleteExperiments", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BatchDeleteExperiments", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type experimentServiceProcessorCloneExperiment struct {
	handler ExperimentService
}

func (p *experimentServiceProcessorCloneExperiment) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ExperimentServiceCloneExperimentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CloneExperiment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ExperimentServiceCloneExperimentResult{}
	var retval *CloneExperimentResponse
	if retval, err2 = p.handler.CloneExperiment(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CloneExperiment: "+err2.Error())
		oprot.WriteMessageBegin("CloneExperiment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CloneExperiment", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type experimentServiceProcessorRunExperiment struct {
	handler ExperimentService
}

func (p *experimentServiceProcessorRunExperiment) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ExperimentServiceRunExperimentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("RunExperiment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ExperimentServiceRunExperimentResult{}
	var retval *RunExperimentResponse
	if retval, err2 = p.handler.RunExperiment(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RunExperiment: "+err2.Error())
		oprot.WriteMessageBegin("RunExperiment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("RunExperiment", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type experimentServiceProcessorRetryExperiment struct {
	handler ExperimentService
}

func (p *experimentServiceProcessorRetryExperiment) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ExperimentServiceRetryExperimentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("RetryExperiment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ExperimentServiceRetryExperimentResult{}
	var retval *RetryExperimentResponse
	if retval, err2 = p.handler.RetryExperiment(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RetryExperiment: "+err2.Error())
		oprot.WriteMessageBegin("RetryExperiment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("RetryExperiment", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type experimentServiceProcessorKillExperiment struct {
	handler ExperimentService
}

func (p *experimentServiceProcessorKillExperiment) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ExperimentServiceKillExperimentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("KillExperiment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ExperimentServiceKillExperimentResult{}
	var retval *KillExperimentResponse
	if retval, err2 = p.handler.KillExperiment(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing KillExperiment: "+err2.Error())
		oprot.WriteMessageBegin("KillExperiment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("KillExperiment", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type experimentServiceProcessorBatchGetExperimentResult_ struct {
	handler ExperimentService
}

func (p *experimentServiceProcessorBatchGetExperimentResult_) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ExperimentServiceBatchGetExperimentResultArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BatchGetExperimentResult", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ExperimentServiceBatchGetExperimentResultResult{}
	var retval *BatchGetExperimentResultResponse
	if retval, err2 = p.handler.BatchGetExperimentResult_(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BatchGetExperimentResult: "+err2.Error())
		oprot.WriteMessageBegin("BatchGetExperimentResult", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BatchGetExperimentResult", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type experimentServiceProcessorBatchGetExperimentAggrResult_ struct {
	handler ExperimentService
}

func (p *experimentServiceProcessorBatchGetExperimentAggrResult_) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ExperimentServiceBatchGetExperimentAggrResultArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BatchGetExperimentAggrResult", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ExperimentServiceBatchGetExperimentAggrResultResult{}
	var retval *BatchGetExperimentAggrResultResponse
	if retval, err2 = p.handler.BatchGetExperimentAggrResult_(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BatchGetExperimentAggrResult: "+err2.Error())
		oprot.WriteMessageBegin("BatchGetExperimentAggrResult", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BatchGetExperimentAggrResult", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type experimentServiceProcessorInvokeExperiment struct {
	handler ExperimentService
}

func (p *experimentServiceProcessorInvokeExperiment) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ExperimentServiceInvokeExperimentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("InvokeExperiment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ExperimentServiceInvokeExperimentResult{}
	var retval *InvokeExperimentResponse
	if retval, err2 = p.handler.InvokeExperiment(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing InvokeExperiment: "+err2.Error())
		oprot.WriteMessageBegin("InvokeExperiment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("InvokeExperiment", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type experimentServiceProcessorFinishExperiment struct {
	handler ExperimentService
}

func (p *experimentServiceProcessorFinishExperiment) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ExperimentServiceFinishExperimentArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("FinishExperiment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ExperimentServiceFinishExperimentResult{}
	var retval *FinishExperimentResponse
	if retval, err2 = p.handler.FinishExperiment(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing FinishExperiment: "+err2.Error())
		oprot.WriteMessageBegin("FinishExperiment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("FinishExperiment", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type experimentServiceProcessorListExperimentStats struct {
	handler ExperimentService
}

func (p *experimentServiceProcessorListExperimentStats) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ExperimentServiceListExperimentStatsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListExperimentStats", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ExperimentServiceListExperimentStatsResult{}
	var retval *ListExperimentStatsResponse
	if retval, err2 = p.handler.ListExperimentStats(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListExperimentStats: "+err2.Error())
		oprot.WriteMessageBegin("ListExperimentStats", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListExperimentStats", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type ExperimentServiceCheckExperimentNameArgs struct {
	Req *CheckExperimentNameRequest `thrift:"req,1" frugal:"1,default,CheckExperimentNameRequest"`
}

func NewExperimentServiceCheckExperimentNameArgs() *ExperimentServiceCheckExperimentNameArgs {
	return &ExperimentServiceCheckExperimentNameArgs{}
}

func (p *ExperimentServiceCheckExperimentNameArgs) InitDefault() {
}

var ExperimentServiceCheckExperimentNameArgs_Req_DEFAULT *CheckExperimentNameRequest

func (p *ExperimentServiceCheckExperimentNameArgs) GetReq() (v *CheckExperimentNameRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return ExperimentServiceCheckExperimentNameArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ExperimentServiceCheckExperimentNameArgs) SetReq(val *CheckExperimentNameRequest) {
	p.Req = val
}

var fieldIDToName_ExperimentServiceCheckExperimentNameArgs = map[int16]string{
	1: "req",
}

func (p *ExperimentServiceCheckExperimentNameArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ExperimentServiceCheckExperimentNameArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExperimentServiceCheckExperimentNameArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExperimentServiceCheckExperimentNameArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCheckExperimentNameRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ExperimentServiceCheckExperimentNameArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CheckExperimentName_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExperimentServiceCheckExperimentNameArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ExperimentServiceCheckExperimentNameArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExperimentServiceCheckExperimentNameArgs(%+v)", *p)

}

func (p *ExperimentServiceCheckExperimentNameArgs) DeepEqual(ano *ExperimentServiceCheckExperimentNameArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ExperimentServiceCheckExperimentNameArgs) Field1DeepEqual(src *CheckExperimentNameRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ExperimentServiceCheckExperimentNameResult struct {
	Success *CheckExperimentNameResponse `thrift:"success,0,optional" frugal:"0,optional,CheckExperimentNameResponse"`
}

func NewExperimentServiceCheckExperimentNameResult() *ExperimentServiceCheckExperimentNameResult {
	return &ExperimentServiceCheckExperimentNameResult{}
}

func (p *ExperimentServiceCheckExperimentNameResult) InitDefault() {
}

var ExperimentServiceCheckExperimentNameResult_Success_DEFAULT *CheckExperimentNameResponse

func (p *ExperimentServiceCheckExperimentNameResult) GetSuccess() (v *CheckExperimentNameResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return ExperimentServiceCheckExperimentNameResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ExperimentServiceCheckExperimentNameResult) SetSuccess(x interface{}) {
	p.Success = x.(*CheckExperimentNameResponse)
}

var fieldIDToName_ExperimentServiceCheckExperimentNameResult = map[int16]string{
	0: "success",
}

func (p *ExperimentServiceCheckExperimentNameResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ExperimentServiceCheckExperimentNameResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExperimentServiceCheckExperimentNameResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExperimentServiceCheckExperimentNameResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCheckExperimentNameResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ExperimentServiceCheckExperimentNameResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CheckExperimentName_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExperimentServiceCheckExperimentNameResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ExperimentServiceCheckExperimentNameResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExperimentServiceCheckExperimentNameResult(%+v)", *p)

}

func (p *ExperimentServiceCheckExperimentNameResult) DeepEqual(ano *ExperimentServiceCheckExperimentNameResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ExperimentServiceCheckExperimentNameResult) Field0DeepEqual(src *CheckExperimentNameResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ExperimentServiceCreateExperimentArgs struct {
	Req *CreateExperimentRequest `thrift:"req,1" frugal:"1,default,CreateExperimentRequest"`
}

func NewExperimentServiceCreateExperimentArgs() *ExperimentServiceCreateExperimentArgs {
	return &ExperimentServiceCreateExperimentArgs{}
}

func (p *ExperimentServiceCreateExperimentArgs) InitDefault() {
}

var ExperimentServiceCreateExperimentArgs_Req_DEFAULT *CreateExperimentRequest

func (p *ExperimentServiceCreateExperimentArgs) GetReq() (v *CreateExperimentRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return ExperimentServiceCreateExperimentArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ExperimentServiceCreateExperimentArgs) SetReq(val *CreateExperimentRequest) {
	p.Req = val
}

var fieldIDToName_ExperimentServiceCreateExperimentArgs = map[int16]string{
	1: "req",
}

func (p *ExperimentServiceCreateExperimentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ExperimentServiceCreateExperimentArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExperimentServiceCreateExperimentArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExperimentServiceCreateExperimentArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateExperimentRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ExperimentServiceCreateExperimentArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateExperiment_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExperimentServiceCreateExperimentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ExperimentServiceCreateExperimentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExperimentServiceCreateExperimentArgs(%+v)", *p)

}

func (p *ExperimentServiceCreateExperimentArgs) DeepEqual(ano *ExperimentServiceCreateExperimentArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ExperimentServiceCreateExperimentArgs) Field1DeepEqual(src *CreateExperimentRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ExperimentServiceCreateExperimentResult struct {
	Success *CreateExperimentResponse `thrift:"success,0,optional" frugal:"0,optional,CreateExperimentResponse"`
}

func NewExperimentServiceCreateExperimentResult() *ExperimentServiceCreateExperimentResult {
	return &ExperimentServiceCreateExperimentResult{}
}

func (p *ExperimentServiceCreateExperimentResult) InitDefault() {
}

var ExperimentServiceCreateExperimentResult_Success_DEFAULT *CreateExperimentResponse

func (p *ExperimentServiceCreateExperimentResult) GetSuccess() (v *CreateExperimentResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return ExperimentServiceCreateExperimentResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ExperimentServiceCreateExperimentResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateExperimentResponse)
}

var fieldIDToName_ExperimentServiceCreateExperimentResult = map[int16]string{
	0: "success",
}

func (p *ExperimentServiceCreateExperimentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ExperimentServiceCreateExperimentResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExperimentServiceCreateExperimentResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExperimentServiceCreateExperimentResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreateExperimentResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ExperimentServiceCreateExperimentResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateExperiment_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExperimentServiceCreateExperimentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ExperimentServiceCreateExperimentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExperimentServiceCreateExperimentResult(%+v)", *p)

}

func (p *ExperimentServiceCreateExperimentResult) DeepEqual(ano *ExperimentServiceCreateExperimentResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ExperimentServiceCreateExperimentResult) Field0DeepEqual(src *CreateExperimentResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ExperimentServiceSubmitExperimentArgs struct {
	Req *SubmitExperimentRequest `thrift:"req,1" frugal:"1,default,SubmitExperimentRequest"`
}

func NewExperimentServiceSubmitExperimentArgs() *ExperimentServiceSubmitExperimentArgs {
	return &ExperimentServiceSubmitExperimentArgs{}
}

func (p *ExperimentServiceSubmitExperimentArgs) InitDefault() {
}

var ExperimentServiceSubmitExperimentArgs_Req_DEFAULT *SubmitExperimentRequest

func (p *ExperimentServiceSubmitExperimentArgs) GetReq() (v *SubmitExperimentRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return ExperimentServiceSubmitExperimentArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ExperimentServiceSubmitExperimentArgs) SetReq(val *SubmitExperimentRequest) {
	p.Req = val
}

var fieldIDToName_ExperimentServiceSubmitExperimentArgs = map[int16]string{
	1: "req",
}

func (p *ExperimentServiceSubmitExperimentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ExperimentServiceSubmitExperimentArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExperimentServiceSubmitExperimentArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExperimentServiceSubmitExperimentArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewSubmitExperimentRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ExperimentServiceSubmitExperimentArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SubmitExperiment_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExperimentServiceSubmitExperimentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ExperimentServiceSubmitExperimentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExperimentServiceSubmitExperimentArgs(%+v)", *p)

}

func (p *ExperimentServiceSubmitExperimentArgs) DeepEqual(ano *ExperimentServiceSubmitExperimentArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ExperimentServiceSubmitExperimentArgs) Field1DeepEqual(src *SubmitExperimentRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ExperimentServiceSubmitExperimentResult struct {
	Success *SubmitExperimentResponse `thrift:"success,0,optional" frugal:"0,optional,SubmitExperimentResponse"`
}

func NewExperimentServiceSubmitExperimentResult() *ExperimentServiceSubmitExperimentResult {
	return &ExperimentServiceSubmitExperimentResult{}
}

func (p *ExperimentServiceSubmitExperimentResult) InitDefault() {
}

var ExperimentServiceSubmitExperimentResult_Success_DEFAULT *SubmitExperimentResponse

func (p *ExperimentServiceSubmitExperimentResult) GetSuccess() (v *SubmitExperimentResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return ExperimentServiceSubmitExperimentResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ExperimentServiceSubmitExperimentResult) SetSuccess(x interface{}) {
	p.Success = x.(*SubmitExperimentResponse)
}

var fieldIDToName_ExperimentServiceSubmitExperimentResult = map[int16]string{
	0: "success",
}

func (p *ExperimentServiceSubmitExperimentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ExperimentServiceSubmitExperimentResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExperimentServiceSubmitExperimentResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExperimentServiceSubmitExperimentResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewSubmitExperimentResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ExperimentServiceSubmitExperimentResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SubmitExperiment_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExperimentServiceSubmitExperimentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ExperimentServiceSubmitExperimentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExperimentServiceSubmitExperimentResult(%+v)", *p)

}

func (p *ExperimentServiceSubmitExperimentResult) DeepEqual(ano *ExperimentServiceSubmitExperimentResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ExperimentServiceSubmitExperimentResult) Field0DeepEqual(src *SubmitExperimentResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ExperimentServiceBatchGetExperimentsArgs struct {
	Req *BatchGetExperimentsRequest `thrift:"req,1" frugal:"1,default,BatchGetExperimentsRequest"`
}

func NewExperimentServiceBatchGetExperimentsArgs() *ExperimentServiceBatchGetExperimentsArgs {
	return &ExperimentServiceBatchGetExperimentsArgs{}
}

func (p *ExperimentServiceBatchGetExperimentsArgs) InitDefault() {
}

var ExperimentServiceBatchGetExperimentsArgs_Req_DEFAULT *BatchGetExperimentsRequest

func (p *ExperimentServiceBatchGetExperimentsArgs) GetReq() (v *BatchGetExperimentsRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return ExperimentServiceBatchGetExperimentsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ExperimentServiceBatchGetExperimentsArgs) SetReq(val *BatchGetExperimentsRequest) {
	p.Req = val
}

var fieldIDToName_ExperimentServiceBatchGetExperimentsArgs = map[int16]string{
	1: "req",
}

func (p *ExperimentServiceBatchGetExperimentsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ExperimentServiceBatchGetExperimentsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExperimentServiceBatchGetExperimentsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExperimentServiceBatchGetExperimentsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewBatchGetExperimentsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ExperimentServiceBatchGetExperimentsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetExperiments_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExperimentServiceBatchGetExperimentsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ExperimentServiceBatchGetExperimentsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExperimentServiceBatchGetExperimentsArgs(%+v)", *p)

}

func (p *ExperimentServiceBatchGetExperimentsArgs) DeepEqual(ano *ExperimentServiceBatchGetExperimentsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ExperimentServiceBatchGetExperimentsArgs) Field1DeepEqual(src *BatchGetExperimentsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ExperimentServiceBatchGetExperimentsResult struct {
	Success *BatchGetExperimentsResponse `thrift:"success,0,optional" frugal:"0,optional,BatchGetExperimentsResponse"`
}

func NewExperimentServiceBatchGetExperimentsResult() *ExperimentServiceBatchGetExperimentsResult {
	return &ExperimentServiceBatchGetExperimentsResult{}
}

func (p *ExperimentServiceBatchGetExperimentsResult) InitDefault() {
}

var ExperimentServiceBatchGetExperimentsResult_Success_DEFAULT *BatchGetExperimentsResponse

func (p *ExperimentServiceBatchGetExperimentsResult) GetSuccess() (v *BatchGetExperimentsResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return ExperimentServiceBatchGetExperimentsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ExperimentServiceBatchGetExperimentsResult) SetSuccess(x interface{}) {
	p.Success = x.(*BatchGetExperimentsResponse)
}

var fieldIDToName_ExperimentServiceBatchGetExperimentsResult = map[int16]string{
	0: "success",
}

func (p *ExperimentServiceBatchGetExperimentsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ExperimentServiceBatchGetExperimentsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExperimentServiceBatchGetExperimentsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExperimentServiceBatchGetExperimentsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewBatchGetExperimentsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ExperimentServiceBatchGetExperimentsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetExperiments_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExperimentServiceBatchGetExperimentsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ExperimentServiceBatchGetExperimentsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExperimentServiceBatchGetExperimentsResult(%+v)", *p)

}

func (p *ExperimentServiceBatchGetExperimentsResult) DeepEqual(ano *ExperimentServiceBatchGetExperimentsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ExperimentServiceBatchGetExperimentsResult) Field0DeepEqual(src *BatchGetExperimentsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ExperimentServiceListExperimentsArgs struct {
	Req *ListExperimentsRequest `thrift:"req,1" frugal:"1,default,ListExperimentsRequest"`
}

func NewExperimentServiceListExperimentsArgs() *ExperimentServiceListExperimentsArgs {
	return &ExperimentServiceListExperimentsArgs{}
}

func (p *ExperimentServiceListExperimentsArgs) InitDefault() {
}

var ExperimentServiceListExperimentsArgs_Req_DEFAULT *ListExperimentsRequest

func (p *ExperimentServiceListExperimentsArgs) GetReq() (v *ListExperimentsRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return ExperimentServiceListExperimentsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ExperimentServiceListExperimentsArgs) SetReq(val *ListExperimentsRequest) {
	p.Req = val
}

var fieldIDToName_ExperimentServiceListExperimentsArgs = map[int16]string{
	1: "req",
}

func (p *ExperimentServiceListExperimentsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ExperimentServiceListExperimentsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExperimentServiceListExperimentsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExperimentServiceListExperimentsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewListExperimentsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ExperimentServiceListExperimentsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListExperiments_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExperimentServiceListExperimentsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ExperimentServiceListExperimentsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExperimentServiceListExperimentsArgs(%+v)", *p)

}

func (p *ExperimentServiceListExperimentsArgs) DeepEqual(ano *ExperimentServiceListExperimentsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ExperimentServiceListExperimentsArgs) Field1DeepEqual(src *ListExperimentsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ExperimentServiceListExperimentsResult struct {
	Success *ListExperimentsResponse `thrift:"success,0,optional" frugal:"0,optional,ListExperimentsResponse"`
}

func NewExperimentServiceListExperimentsResult() *ExperimentServiceListExperimentsResult {
	return &ExperimentServiceListExperimentsResult{}
}

func (p *ExperimentServiceListExperimentsResult) InitDefault() {
}

var ExperimentServiceListExperimentsResult_Success_DEFAULT *ListExperimentsResponse

func (p *ExperimentServiceListExperimentsResult) GetSuccess() (v *ListExperimentsResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return ExperimentServiceListExperimentsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ExperimentServiceListExperimentsResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListExperimentsResponse)
}

var fieldIDToName_ExperimentServiceListExperimentsResult = map[int16]string{
	0: "success",
}

func (p *ExperimentServiceListExperimentsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ExperimentServiceListExperimentsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExperimentServiceListExperimentsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExperimentServiceListExperimentsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewListExperimentsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ExperimentServiceListExperimentsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListExperiments_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExperimentServiceListExperimentsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ExperimentServiceListExperimentsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExperimentServiceListExperimentsResult(%+v)", *p)

}

func (p *ExperimentServiceListExperimentsResult) DeepEqual(ano *ExperimentServiceListExperimentsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ExperimentServiceListExperimentsResult) Field0DeepEqual(src *ListExperimentsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ExperimentServiceUpdateExperimentArgs struct {
	Req *UpdateExperimentRequest `thrift:"req,1" frugal:"1,default,UpdateExperimentRequest"`
}

func NewExperimentServiceUpdateExperimentArgs() *ExperimentServiceUpdateExperimentArgs {
	return &ExperimentServiceUpdateExperimentArgs{}
}

func (p *ExperimentServiceUpdateExperimentArgs) InitDefault() {
}

var ExperimentServiceUpdateExperimentArgs_Req_DEFAULT *UpdateExperimentRequest

func (p *ExperimentServiceUpdateExperimentArgs) GetReq() (v *UpdateExperimentRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return ExperimentServiceUpdateExperimentArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ExperimentServiceUpdateExperimentArgs) SetReq(val *UpdateExperimentRequest) {
	p.Req = val
}

var fieldIDToName_ExperimentServiceUpdateExperimentArgs = map[int16]string{
	1: "req",
}

func (p *ExperimentServiceUpdateExperimentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ExperimentServiceUpdateExperimentArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExperimentServiceUpdateExperimentArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExperimentServiceUpdateExperimentArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUpdateExperimentRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ExperimentServiceUpdateExperimentArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateExperiment_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExperimentServiceUpdateExperimentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ExperimentServiceUpdateExperimentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExperimentServiceUpdateExperimentArgs(%+v)", *p)

}

func (p *ExperimentServiceUpdateExperimentArgs) DeepEqual(ano *ExperimentServiceUpdateExperimentArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ExperimentServiceUpdateExperimentArgs) Field1DeepEqual(src *UpdateExperimentRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ExperimentServiceUpdateExperimentResult struct {
	Success *UpdateExperimentResponse `thrift:"success,0,optional" frugal:"0,optional,UpdateExperimentResponse"`
}

func NewExperimentServiceUpdateExperimentResult() *ExperimentServiceUpdateExperimentResult {
	return &ExperimentServiceUpdateExperimentResult{}
}

func (p *ExperimentServiceUpdateExperimentResult) InitDefault() {
}

var ExperimentServiceUpdateExperimentResult_Success_DEFAULT *UpdateExperimentResponse

func (p *ExperimentServiceUpdateExperimentResult) GetSuccess() (v *UpdateExperimentResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return ExperimentServiceUpdateExperimentResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ExperimentServiceUpdateExperimentResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateExperimentResponse)
}

var fieldIDToName_ExperimentServiceUpdateExperimentResult = map[int16]string{
	0: "success",
}

func (p *ExperimentServiceUpdateExperimentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ExperimentServiceUpdateExperimentResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExperimentServiceUpdateExperimentResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExperimentServiceUpdateExperimentResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewUpdateExperimentResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ExperimentServiceUpdateExperimentResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateExperiment_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExperimentServiceUpdateExperimentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ExperimentServiceUpdateExperimentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExperimentServiceUpdateExperimentResult(%+v)", *p)

}

func (p *ExperimentServiceUpdateExperimentResult) DeepEqual(ano *ExperimentServiceUpdateExperimentResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ExperimentServiceUpdateExperimentResult) Field0DeepEqual(src *UpdateExperimentResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ExperimentServiceDeleteExperimentArgs struct {
	Req *DeleteExperimentRequest `thrift:"req,1" frugal:"1,default,DeleteExperimentRequest"`
}

func NewExperimentServiceDeleteExperimentArgs() *ExperimentServiceDeleteExperimentArgs {
	return &ExperimentServiceDeleteExperimentArgs{}
}

func (p *ExperimentServiceDeleteExperimentArgs) InitDefault() {
}

var ExperimentServiceDeleteExperimentArgs_Req_DEFAULT *DeleteExperimentRequest

func (p *ExperimentServiceDeleteExperimentArgs) GetReq() (v *DeleteExperimentRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return ExperimentServiceDeleteExperimentArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ExperimentServiceDeleteExperimentArgs) SetReq(val *DeleteExperimentRequest) {
	p.Req = val
}

var fieldIDToName_ExperimentServiceDeleteExperimentArgs = map[int16]string{
	1: "req",
}

func (p *ExperimentServiceDeleteExperimentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ExperimentServiceDeleteExperimentArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExperimentServiceDeleteExperimentArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExperimentServiceDeleteExperimentArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewDeleteExperimentRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ExperimentServiceDeleteExperimentArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteExperiment_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExperimentServiceDeleteExperimentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ExperimentServiceDeleteExperimentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExperimentServiceDeleteExperimentArgs(%+v)", *p)

}

func (p *ExperimentServiceDeleteExperimentArgs) DeepEqual(ano *ExperimentServiceDeleteExperimentArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ExperimentServiceDeleteExperimentArgs) Field1DeepEqual(src *DeleteExperimentRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ExperimentServiceDeleteExperimentResult struct {
	Success *DeleteExperimentResponse `thrift:"success,0,optional" frugal:"0,optional,DeleteExperimentResponse"`
}

func NewExperimentServiceDeleteExperimentResult() *ExperimentServiceDeleteExperimentResult {
	return &ExperimentServiceDeleteExperimentResult{}
}

func (p *ExperimentServiceDeleteExperimentResult) InitDefault() {
}

var ExperimentServiceDeleteExperimentResult_Success_DEFAULT *DeleteExperimentResponse

func (p *ExperimentServiceDeleteExperimentResult) GetSuccess() (v *DeleteExperimentResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return ExperimentServiceDeleteExperimentResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ExperimentServiceDeleteExperimentResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteExperimentResponse)
}

var fieldIDToName_ExperimentServiceDeleteExperimentResult = map[int16]string{
	0: "success",
}

func (p *ExperimentServiceDeleteExperimentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ExperimentServiceDeleteExperimentResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExperimentServiceDeleteExperimentResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExperimentServiceDeleteExperimentResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewDeleteExperimentResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ExperimentServiceDeleteExperimentResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteExperiment_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExperimentServiceDeleteExperimentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ExperimentServiceDeleteExperimentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExperimentServiceDeleteExperimentResult(%+v)", *p)

}

func (p *ExperimentServiceDeleteExperimentResult) DeepEqual(ano *ExperimentServiceDeleteExperimentResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ExperimentServiceDeleteExperimentResult) Field0DeepEqual(src *DeleteExperimentResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ExperimentServiceBatchDeleteExperimentsArgs struct {
	Req *BatchDeleteExperimentsRequest `thrift:"req,1" frugal:"1,default,BatchDeleteExperimentsRequest"`
}

func NewExperimentServiceBatchDeleteExperimentsArgs() *ExperimentServiceBatchDeleteExperimentsArgs {
	return &ExperimentServiceBatchDeleteExperimentsArgs{}
}

func (p *ExperimentServiceBatchDeleteExperimentsArgs) InitDefault() {
}

var ExperimentServiceBatchDeleteExperimentsArgs_Req_DEFAULT *BatchDeleteExperimentsRequest

func (p *ExperimentServiceBatchDeleteExperimentsArgs) GetReq() (v *BatchDeleteExperimentsRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return ExperimentServiceBatchDeleteExperimentsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ExperimentServiceBatchDeleteExperimentsArgs) SetReq(val *BatchDeleteExperimentsRequest) {
	p.Req = val
}

var fieldIDToName_ExperimentServiceBatchDeleteExperimentsArgs = map[int16]string{
	1: "req",
}

func (p *ExperimentServiceBatchDeleteExperimentsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ExperimentServiceBatchDeleteExperimentsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExperimentServiceBatchDeleteExperimentsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExperimentServiceBatchDeleteExperimentsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewBatchDeleteExperimentsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ExperimentServiceBatchDeleteExperimentsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchDeleteExperiments_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExperimentServiceBatchDeleteExperimentsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ExperimentServiceBatchDeleteExperimentsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExperimentServiceBatchDeleteExperimentsArgs(%+v)", *p)

}

func (p *ExperimentServiceBatchDeleteExperimentsArgs) DeepEqual(ano *ExperimentServiceBatchDeleteExperimentsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ExperimentServiceBatchDeleteExperimentsArgs) Field1DeepEqual(src *BatchDeleteExperimentsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ExperimentServiceBatchDeleteExperimentsResult struct {
	Success *BatchDeleteExperimentsResponse `thrift:"success,0,optional" frugal:"0,optional,BatchDeleteExperimentsResponse"`
}

func NewExperimentServiceBatchDeleteExperimentsResult() *ExperimentServiceBatchDeleteExperimentsResult {
	return &ExperimentServiceBatchDeleteExperimentsResult{}
}

func (p *ExperimentServiceBatchDeleteExperimentsResult) InitDefault() {
}

var ExperimentServiceBatchDeleteExperimentsResult_Success_DEFAULT *BatchDeleteExperimentsResponse

func (p *ExperimentServiceBatchDeleteExperimentsResult) GetSuccess() (v *BatchDeleteExperimentsResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return ExperimentServiceBatchDeleteExperimentsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ExperimentServiceBatchDeleteExperimentsResult) SetSuccess(x interface{}) {
	p.Success = x.(*BatchDeleteExperimentsResponse)
}

var fieldIDToName_ExperimentServiceBatchDeleteExperimentsResult = map[int16]string{
	0: "success",
}

func (p *ExperimentServiceBatchDeleteExperimentsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ExperimentServiceBatchDeleteExperimentsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExperimentServiceBatchDeleteExperimentsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExperimentServiceBatchDeleteExperimentsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewBatchDeleteExperimentsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ExperimentServiceBatchDeleteExperimentsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchDeleteExperiments_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExperimentServiceBatchDeleteExperimentsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ExperimentServiceBatchDeleteExperimentsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExperimentServiceBatchDeleteExperimentsResult(%+v)", *p)

}

func (p *ExperimentServiceBatchDeleteExperimentsResult) DeepEqual(ano *ExperimentServiceBatchDeleteExperimentsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ExperimentServiceBatchDeleteExperimentsResult) Field0DeepEqual(src *BatchDeleteExperimentsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ExperimentServiceCloneExperimentArgs struct {
	Req *CloneExperimentRequest `thrift:"req,1" frugal:"1,default,CloneExperimentRequest"`
}

func NewExperimentServiceCloneExperimentArgs() *ExperimentServiceCloneExperimentArgs {
	return &ExperimentServiceCloneExperimentArgs{}
}

func (p *ExperimentServiceCloneExperimentArgs) InitDefault() {
}

var ExperimentServiceCloneExperimentArgs_Req_DEFAULT *CloneExperimentRequest

func (p *ExperimentServiceCloneExperimentArgs) GetReq() (v *CloneExperimentRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return ExperimentServiceCloneExperimentArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ExperimentServiceCloneExperimentArgs) SetReq(val *CloneExperimentRequest) {
	p.Req = val
}

var fieldIDToName_ExperimentServiceCloneExperimentArgs = map[int16]string{
	1: "req",
}

func (p *ExperimentServiceCloneExperimentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ExperimentServiceCloneExperimentArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExperimentServiceCloneExperimentArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExperimentServiceCloneExperimentArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCloneExperimentRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ExperimentServiceCloneExperimentArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CloneExperiment_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExperimentServiceCloneExperimentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ExperimentServiceCloneExperimentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExperimentServiceCloneExperimentArgs(%+v)", *p)

}

func (p *ExperimentServiceCloneExperimentArgs) DeepEqual(ano *ExperimentServiceCloneExperimentArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ExperimentServiceCloneExperimentArgs) Field1DeepEqual(src *CloneExperimentRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ExperimentServiceCloneExperimentResult struct {
	Success *CloneExperimentResponse `thrift:"success,0,optional" frugal:"0,optional,CloneExperimentResponse"`
}

func NewExperimentServiceCloneExperimentResult() *ExperimentServiceCloneExperimentResult {
	return &ExperimentServiceCloneExperimentResult{}
}

func (p *ExperimentServiceCloneExperimentResult) InitDefault() {
}

var ExperimentServiceCloneExperimentResult_Success_DEFAULT *CloneExperimentResponse

func (p *ExperimentServiceCloneExperimentResult) GetSuccess() (v *CloneExperimentResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return ExperimentServiceCloneExperimentResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ExperimentServiceCloneExperimentResult) SetSuccess(x interface{}) {
	p.Success = x.(*CloneExperimentResponse)
}

var fieldIDToName_ExperimentServiceCloneExperimentResult = map[int16]string{
	0: "success",
}

func (p *ExperimentServiceCloneExperimentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ExperimentServiceCloneExperimentResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExperimentServiceCloneExperimentResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExperimentServiceCloneExperimentResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCloneExperimentResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ExperimentServiceCloneExperimentResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CloneExperiment_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExperimentServiceCloneExperimentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ExperimentServiceCloneExperimentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExperimentServiceCloneExperimentResult(%+v)", *p)

}

func (p *ExperimentServiceCloneExperimentResult) DeepEqual(ano *ExperimentServiceCloneExperimentResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ExperimentServiceCloneExperimentResult) Field0DeepEqual(src *CloneExperimentResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ExperimentServiceRunExperimentArgs struct {
	Req *RunExperimentRequest `thrift:"req,1" frugal:"1,default,RunExperimentRequest"`
}

func NewExperimentServiceRunExperimentArgs() *ExperimentServiceRunExperimentArgs {
	return &ExperimentServiceRunExperimentArgs{}
}

func (p *ExperimentServiceRunExperimentArgs) InitDefault() {
}

var ExperimentServiceRunExperimentArgs_Req_DEFAULT *RunExperimentRequest

func (p *ExperimentServiceRunExperimentArgs) GetReq() (v *RunExperimentRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return ExperimentServiceRunExperimentArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ExperimentServiceRunExperimentArgs) SetReq(val *RunExperimentRequest) {
	p.Req = val
}

var fieldIDToName_ExperimentServiceRunExperimentArgs = map[int16]string{
	1: "req",
}

func (p *ExperimentServiceRunExperimentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ExperimentServiceRunExperimentArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExperimentServiceRunExperimentArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExperimentServiceRunExperimentArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewRunExperimentRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ExperimentServiceRunExperimentArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RunExperiment_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExperimentServiceRunExperimentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ExperimentServiceRunExperimentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExperimentServiceRunExperimentArgs(%+v)", *p)

}

func (p *ExperimentServiceRunExperimentArgs) DeepEqual(ano *ExperimentServiceRunExperimentArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ExperimentServiceRunExperimentArgs) Field1DeepEqual(src *RunExperimentRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ExperimentServiceRunExperimentResult struct {
	Success *RunExperimentResponse `thrift:"success,0,optional" frugal:"0,optional,RunExperimentResponse"`
}

func NewExperimentServiceRunExperimentResult() *ExperimentServiceRunExperimentResult {
	return &ExperimentServiceRunExperimentResult{}
}

func (p *ExperimentServiceRunExperimentResult) InitDefault() {
}

var ExperimentServiceRunExperimentResult_Success_DEFAULT *RunExperimentResponse

func (p *ExperimentServiceRunExperimentResult) GetSuccess() (v *RunExperimentResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return ExperimentServiceRunExperimentResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ExperimentServiceRunExperimentResult) SetSuccess(x interface{}) {
	p.Success = x.(*RunExperimentResponse)
}

var fieldIDToName_ExperimentServiceRunExperimentResult = map[int16]string{
	0: "success",
}

func (p *ExperimentServiceRunExperimentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ExperimentServiceRunExperimentResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExperimentServiceRunExperimentResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExperimentServiceRunExperimentResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewRunExperimentResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ExperimentServiceRunExperimentResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RunExperiment_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExperimentServiceRunExperimentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ExperimentServiceRunExperimentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExperimentServiceRunExperimentResult(%+v)", *p)

}

func (p *ExperimentServiceRunExperimentResult) DeepEqual(ano *ExperimentServiceRunExperimentResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ExperimentServiceRunExperimentResult) Field0DeepEqual(src *RunExperimentResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ExperimentServiceRetryExperimentArgs struct {
	Req *RetryExperimentRequest `thrift:"req,1" frugal:"1,default,RetryExperimentRequest"`
}

func NewExperimentServiceRetryExperimentArgs() *ExperimentServiceRetryExperimentArgs {
	return &ExperimentServiceRetryExperimentArgs{}
}

func (p *ExperimentServiceRetryExperimentArgs) InitDefault() {
}

var ExperimentServiceRetryExperimentArgs_Req_DEFAULT *RetryExperimentRequest

func (p *ExperimentServiceRetryExperimentArgs) GetReq() (v *RetryExperimentRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return ExperimentServiceRetryExperimentArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ExperimentServiceRetryExperimentArgs) SetReq(val *RetryExperimentRequest) {
	p.Req = val
}

var fieldIDToName_ExperimentServiceRetryExperimentArgs = map[int16]string{
	1: "req",
}

func (p *ExperimentServiceRetryExperimentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ExperimentServiceRetryExperimentArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExperimentServiceRetryExperimentArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExperimentServiceRetryExperimentArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewRetryExperimentRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ExperimentServiceRetryExperimentArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RetryExperiment_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExperimentServiceRetryExperimentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ExperimentServiceRetryExperimentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExperimentServiceRetryExperimentArgs(%+v)", *p)

}

func (p *ExperimentServiceRetryExperimentArgs) DeepEqual(ano *ExperimentServiceRetryExperimentArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ExperimentServiceRetryExperimentArgs) Field1DeepEqual(src *RetryExperimentRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ExperimentServiceRetryExperimentResult struct {
	Success *RetryExperimentResponse `thrift:"success,0,optional" frugal:"0,optional,RetryExperimentResponse"`
}

func NewExperimentServiceRetryExperimentResult() *ExperimentServiceRetryExperimentResult {
	return &ExperimentServiceRetryExperimentResult{}
}

func (p *ExperimentServiceRetryExperimentResult) InitDefault() {
}

var ExperimentServiceRetryExperimentResult_Success_DEFAULT *RetryExperimentResponse

func (p *ExperimentServiceRetryExperimentResult) GetSuccess() (v *RetryExperimentResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return ExperimentServiceRetryExperimentResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ExperimentServiceRetryExperimentResult) SetSuccess(x interface{}) {
	p.Success = x.(*RetryExperimentResponse)
}

var fieldIDToName_ExperimentServiceRetryExperimentResult = map[int16]string{
	0: "success",
}

func (p *ExperimentServiceRetryExperimentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ExperimentServiceRetryExperimentResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExperimentServiceRetryExperimentResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExperimentServiceRetryExperimentResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewRetryExperimentResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ExperimentServiceRetryExperimentResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RetryExperiment_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExperimentServiceRetryExperimentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ExperimentServiceRetryExperimentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExperimentServiceRetryExperimentResult(%+v)", *p)

}

func (p *ExperimentServiceRetryExperimentResult) DeepEqual(ano *ExperimentServiceRetryExperimentResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ExperimentServiceRetryExperimentResult) Field0DeepEqual(src *RetryExperimentResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ExperimentServiceKillExperimentArgs struct {
	Req *KillExperimentRequest `thrift:"req,1" frugal:"1,default,KillExperimentRequest"`
}

func NewExperimentServiceKillExperimentArgs() *ExperimentServiceKillExperimentArgs {
	return &ExperimentServiceKillExperimentArgs{}
}

func (p *ExperimentServiceKillExperimentArgs) InitDefault() {
}

var ExperimentServiceKillExperimentArgs_Req_DEFAULT *KillExperimentRequest

func (p *ExperimentServiceKillExperimentArgs) GetReq() (v *KillExperimentRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return ExperimentServiceKillExperimentArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ExperimentServiceKillExperimentArgs) SetReq(val *KillExperimentRequest) {
	p.Req = val
}

var fieldIDToName_ExperimentServiceKillExperimentArgs = map[int16]string{
	1: "req",
}

func (p *ExperimentServiceKillExperimentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ExperimentServiceKillExperimentArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExperimentServiceKillExperimentArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExperimentServiceKillExperimentArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewKillExperimentRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ExperimentServiceKillExperimentArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("KillExperiment_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExperimentServiceKillExperimentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ExperimentServiceKillExperimentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExperimentServiceKillExperimentArgs(%+v)", *p)

}

func (p *ExperimentServiceKillExperimentArgs) DeepEqual(ano *ExperimentServiceKillExperimentArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ExperimentServiceKillExperimentArgs) Field1DeepEqual(src *KillExperimentRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ExperimentServiceKillExperimentResult struct {
	Success *KillExperimentResponse `thrift:"success,0,optional" frugal:"0,optional,KillExperimentResponse"`
}

func NewExperimentServiceKillExperimentResult() *ExperimentServiceKillExperimentResult {
	return &ExperimentServiceKillExperimentResult{}
}

func (p *ExperimentServiceKillExperimentResult) InitDefault() {
}

var ExperimentServiceKillExperimentResult_Success_DEFAULT *KillExperimentResponse

func (p *ExperimentServiceKillExperimentResult) GetSuccess() (v *KillExperimentResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return ExperimentServiceKillExperimentResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ExperimentServiceKillExperimentResult) SetSuccess(x interface{}) {
	p.Success = x.(*KillExperimentResponse)
}

var fieldIDToName_ExperimentServiceKillExperimentResult = map[int16]string{
	0: "success",
}

func (p *ExperimentServiceKillExperimentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ExperimentServiceKillExperimentResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExperimentServiceKillExperimentResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExperimentServiceKillExperimentResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewKillExperimentResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ExperimentServiceKillExperimentResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("KillExperiment_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExperimentServiceKillExperimentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ExperimentServiceKillExperimentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExperimentServiceKillExperimentResult(%+v)", *p)

}

func (p *ExperimentServiceKillExperimentResult) DeepEqual(ano *ExperimentServiceKillExperimentResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ExperimentServiceKillExperimentResult) Field0DeepEqual(src *KillExperimentResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ExperimentServiceBatchGetExperimentResultArgs struct {
	Req *BatchGetExperimentResultRequest `thrift:"req,1" frugal:"1,default,BatchGetExperimentResultRequest"`
}

func NewExperimentServiceBatchGetExperimentResultArgs() *ExperimentServiceBatchGetExperimentResultArgs {
	return &ExperimentServiceBatchGetExperimentResultArgs{}
}

func (p *ExperimentServiceBatchGetExperimentResultArgs) InitDefault() {
}

var ExperimentServiceBatchGetExperimentResultArgs_Req_DEFAULT *BatchGetExperimentResultRequest

func (p *ExperimentServiceBatchGetExperimentResultArgs) GetReq() (v *BatchGetExperimentResultRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return ExperimentServiceBatchGetExperimentResultArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ExperimentServiceBatchGetExperimentResultArgs) SetReq(val *BatchGetExperimentResultRequest) {
	p.Req = val
}

var fieldIDToName_ExperimentServiceBatchGetExperimentResultArgs = map[int16]string{
	1: "req",
}

func (p *ExperimentServiceBatchGetExperimentResultArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ExperimentServiceBatchGetExperimentResultArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExperimentServiceBatchGetExperimentResultArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExperimentServiceBatchGetExperimentResultArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewBatchGetExperimentResultRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ExperimentServiceBatchGetExperimentResultArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetExperimentResult_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExperimentServiceBatchGetExperimentResultArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ExperimentServiceBatchGetExperimentResultArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExperimentServiceBatchGetExperimentResultArgs(%+v)", *p)

}

func (p *ExperimentServiceBatchGetExperimentResultArgs) DeepEqual(ano *ExperimentServiceBatchGetExperimentResultArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ExperimentServiceBatchGetExperimentResultArgs) Field1DeepEqual(src *BatchGetExperimentResultRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ExperimentServiceBatchGetExperimentResultResult struct {
	Success *BatchGetExperimentResultResponse `thrift:"success,0,optional" frugal:"0,optional,BatchGetExperimentResultResponse"`
}

func NewExperimentServiceBatchGetExperimentResultResult() *ExperimentServiceBatchGetExperimentResultResult {
	return &ExperimentServiceBatchGetExperimentResultResult{}
}

func (p *ExperimentServiceBatchGetExperimentResultResult) InitDefault() {
}

var ExperimentServiceBatchGetExperimentResultResult_Success_DEFAULT *BatchGetExperimentResultResponse

func (p *ExperimentServiceBatchGetExperimentResultResult) GetSuccess() (v *BatchGetExperimentResultResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return ExperimentServiceBatchGetExperimentResultResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ExperimentServiceBatchGetExperimentResultResult) SetSuccess(x interface{}) {
	p.Success = x.(*BatchGetExperimentResultResponse)
}

var fieldIDToName_ExperimentServiceBatchGetExperimentResultResult = map[int16]string{
	0: "success",
}

func (p *ExperimentServiceBatchGetExperimentResultResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ExperimentServiceBatchGetExperimentResultResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExperimentServiceBatchGetExperimentResultResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExperimentServiceBatchGetExperimentResultResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewBatchGetExperimentResultResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ExperimentServiceBatchGetExperimentResultResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetExperimentResult_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExperimentServiceBatchGetExperimentResultResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ExperimentServiceBatchGetExperimentResultResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExperimentServiceBatchGetExperimentResultResult(%+v)", *p)

}

func (p *ExperimentServiceBatchGetExperimentResultResult) DeepEqual(ano *ExperimentServiceBatchGetExperimentResultResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ExperimentServiceBatchGetExperimentResultResult) Field0DeepEqual(src *BatchGetExperimentResultResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ExperimentServiceBatchGetExperimentAggrResultArgs struct {
	Req *BatchGetExperimentAggrResultRequest `thrift:"req,1" frugal:"1,default,BatchGetExperimentAggrResultRequest"`
}

func NewExperimentServiceBatchGetExperimentAggrResultArgs() *ExperimentServiceBatchGetExperimentAggrResultArgs {
	return &ExperimentServiceBatchGetExperimentAggrResultArgs{}
}

func (p *ExperimentServiceBatchGetExperimentAggrResultArgs) InitDefault() {
}

var ExperimentServiceBatchGetExperimentAggrResultArgs_Req_DEFAULT *BatchGetExperimentAggrResultRequest

func (p *ExperimentServiceBatchGetExperimentAggrResultArgs) GetReq() (v *BatchGetExperimentAggrResultRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return ExperimentServiceBatchGetExperimentAggrResultArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ExperimentServiceBatchGetExperimentAggrResultArgs) SetReq(val *BatchGetExperimentAggrResultRequest) {
	p.Req = val
}

var fieldIDToName_ExperimentServiceBatchGetExperimentAggrResultArgs = map[int16]string{
	1: "req",
}

func (p *ExperimentServiceBatchGetExperimentAggrResultArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ExperimentServiceBatchGetExperimentAggrResultArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExperimentServiceBatchGetExperimentAggrResultArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExperimentServiceBatchGetExperimentAggrResultArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewBatchGetExperimentAggrResultRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ExperimentServiceBatchGetExperimentAggrResultArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetExperimentAggrResult_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExperimentServiceBatchGetExperimentAggrResultArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ExperimentServiceBatchGetExperimentAggrResultArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExperimentServiceBatchGetExperimentAggrResultArgs(%+v)", *p)

}

func (p *ExperimentServiceBatchGetExperimentAggrResultArgs) DeepEqual(ano *ExperimentServiceBatchGetExperimentAggrResultArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ExperimentServiceBatchGetExperimentAggrResultArgs) Field1DeepEqual(src *BatchGetExperimentAggrResultRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ExperimentServiceBatchGetExperimentAggrResultResult struct {
	Success *BatchGetExperimentAggrResultResponse `thrift:"success,0,optional" frugal:"0,optional,BatchGetExperimentAggrResultResponse"`
}

func NewExperimentServiceBatchGetExperimentAggrResultResult() *ExperimentServiceBatchGetExperimentAggrResultResult {
	return &ExperimentServiceBatchGetExperimentAggrResultResult{}
}

func (p *ExperimentServiceBatchGetExperimentAggrResultResult) InitDefault() {
}

var ExperimentServiceBatchGetExperimentAggrResultResult_Success_DEFAULT *BatchGetExperimentAggrResultResponse

func (p *ExperimentServiceBatchGetExperimentAggrResultResult) GetSuccess() (v *BatchGetExperimentAggrResultResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return ExperimentServiceBatchGetExperimentAggrResultResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ExperimentServiceBatchGetExperimentAggrResultResult) SetSuccess(x interface{}) {
	p.Success = x.(*BatchGetExperimentAggrResultResponse)
}

var fieldIDToName_ExperimentServiceBatchGetExperimentAggrResultResult = map[int16]string{
	0: "success",
}

func (p *ExperimentServiceBatchGetExperimentAggrResultResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ExperimentServiceBatchGetExperimentAggrResultResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExperimentServiceBatchGetExperimentAggrResultResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExperimentServiceBatchGetExperimentAggrResultResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewBatchGetExperimentAggrResultResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ExperimentServiceBatchGetExperimentAggrResultResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetExperimentAggrResult_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExperimentServiceBatchGetExperimentAggrResultResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ExperimentServiceBatchGetExperimentAggrResultResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExperimentServiceBatchGetExperimentAggrResultResult(%+v)", *p)

}

func (p *ExperimentServiceBatchGetExperimentAggrResultResult) DeepEqual(ano *ExperimentServiceBatchGetExperimentAggrResultResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ExperimentServiceBatchGetExperimentAggrResultResult) Field0DeepEqual(src *BatchGetExperimentAggrResultResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ExperimentServiceInvokeExperimentArgs struct {
	Req *InvokeExperimentRequest `thrift:"req,1" frugal:"1,default,InvokeExperimentRequest"`
}

func NewExperimentServiceInvokeExperimentArgs() *ExperimentServiceInvokeExperimentArgs {
	return &ExperimentServiceInvokeExperimentArgs{}
}

func (p *ExperimentServiceInvokeExperimentArgs) InitDefault() {
}

var ExperimentServiceInvokeExperimentArgs_Req_DEFAULT *InvokeExperimentRequest

func (p *ExperimentServiceInvokeExperimentArgs) GetReq() (v *InvokeExperimentRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return ExperimentServiceInvokeExperimentArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ExperimentServiceInvokeExperimentArgs) SetReq(val *InvokeExperimentRequest) {
	p.Req = val
}

var fieldIDToName_ExperimentServiceInvokeExperimentArgs = map[int16]string{
	1: "req",
}

func (p *ExperimentServiceInvokeExperimentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ExperimentServiceInvokeExperimentArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExperimentServiceInvokeExperimentArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExperimentServiceInvokeExperimentArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewInvokeExperimentRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ExperimentServiceInvokeExperimentArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("InvokeExperiment_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExperimentServiceInvokeExperimentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ExperimentServiceInvokeExperimentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExperimentServiceInvokeExperimentArgs(%+v)", *p)

}

func (p *ExperimentServiceInvokeExperimentArgs) DeepEqual(ano *ExperimentServiceInvokeExperimentArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ExperimentServiceInvokeExperimentArgs) Field1DeepEqual(src *InvokeExperimentRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ExperimentServiceInvokeExperimentResult struct {
	Success *InvokeExperimentResponse `thrift:"success,0,optional" frugal:"0,optional,InvokeExperimentResponse"`
}

func NewExperimentServiceInvokeExperimentResult() *ExperimentServiceInvokeExperimentResult {
	return &ExperimentServiceInvokeExperimentResult{}
}

func (p *ExperimentServiceInvokeExperimentResult) InitDefault() {
}

var ExperimentServiceInvokeExperimentResult_Success_DEFAULT *InvokeExperimentResponse

func (p *ExperimentServiceInvokeExperimentResult) GetSuccess() (v *InvokeExperimentResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return ExperimentServiceInvokeExperimentResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ExperimentServiceInvokeExperimentResult) SetSuccess(x interface{}) {
	p.Success = x.(*InvokeExperimentResponse)
}

var fieldIDToName_ExperimentServiceInvokeExperimentResult = map[int16]string{
	0: "success",
}

func (p *ExperimentServiceInvokeExperimentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ExperimentServiceInvokeExperimentResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExperimentServiceInvokeExperimentResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExperimentServiceInvokeExperimentResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewInvokeExperimentResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ExperimentServiceInvokeExperimentResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("InvokeExperiment_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExperimentServiceInvokeExperimentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ExperimentServiceInvokeExperimentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExperimentServiceInvokeExperimentResult(%+v)", *p)

}

func (p *ExperimentServiceInvokeExperimentResult) DeepEqual(ano *ExperimentServiceInvokeExperimentResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ExperimentServiceInvokeExperimentResult) Field0DeepEqual(src *InvokeExperimentResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ExperimentServiceFinishExperimentArgs struct {
	Req *FinishExperimentRequest `thrift:"req,1" frugal:"1,default,FinishExperimentRequest"`
}

func NewExperimentServiceFinishExperimentArgs() *ExperimentServiceFinishExperimentArgs {
	return &ExperimentServiceFinishExperimentArgs{}
}

func (p *ExperimentServiceFinishExperimentArgs) InitDefault() {
}

var ExperimentServiceFinishExperimentArgs_Req_DEFAULT *FinishExperimentRequest

func (p *ExperimentServiceFinishExperimentArgs) GetReq() (v *FinishExperimentRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return ExperimentServiceFinishExperimentArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ExperimentServiceFinishExperimentArgs) SetReq(val *FinishExperimentRequest) {
	p.Req = val
}

var fieldIDToName_ExperimentServiceFinishExperimentArgs = map[int16]string{
	1: "req",
}

func (p *ExperimentServiceFinishExperimentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ExperimentServiceFinishExperimentArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExperimentServiceFinishExperimentArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExperimentServiceFinishExperimentArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewFinishExperimentRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ExperimentServiceFinishExperimentArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FinishExperiment_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExperimentServiceFinishExperimentArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ExperimentServiceFinishExperimentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExperimentServiceFinishExperimentArgs(%+v)", *p)

}

func (p *ExperimentServiceFinishExperimentArgs) DeepEqual(ano *ExperimentServiceFinishExperimentArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ExperimentServiceFinishExperimentArgs) Field1DeepEqual(src *FinishExperimentRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ExperimentServiceFinishExperimentResult struct {
	Success *FinishExperimentResponse `thrift:"success,0,optional" frugal:"0,optional,FinishExperimentResponse"`
}

func NewExperimentServiceFinishExperimentResult() *ExperimentServiceFinishExperimentResult {
	return &ExperimentServiceFinishExperimentResult{}
}

func (p *ExperimentServiceFinishExperimentResult) InitDefault() {
}

var ExperimentServiceFinishExperimentResult_Success_DEFAULT *FinishExperimentResponse

func (p *ExperimentServiceFinishExperimentResult) GetSuccess() (v *FinishExperimentResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return ExperimentServiceFinishExperimentResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ExperimentServiceFinishExperimentResult) SetSuccess(x interface{}) {
	p.Success = x.(*FinishExperimentResponse)
}

var fieldIDToName_ExperimentServiceFinishExperimentResult = map[int16]string{
	0: "success",
}

func (p *ExperimentServiceFinishExperimentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ExperimentServiceFinishExperimentResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExperimentServiceFinishExperimentResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExperimentServiceFinishExperimentResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewFinishExperimentResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ExperimentServiceFinishExperimentResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FinishExperiment_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExperimentServiceFinishExperimentResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ExperimentServiceFinishExperimentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExperimentServiceFinishExperimentResult(%+v)", *p)

}

func (p *ExperimentServiceFinishExperimentResult) DeepEqual(ano *ExperimentServiceFinishExperimentResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ExperimentServiceFinishExperimentResult) Field0DeepEqual(src *FinishExperimentResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ExperimentServiceListExperimentStatsArgs struct {
	Req *ListExperimentStatsRequest `thrift:"req,1" frugal:"1,default,ListExperimentStatsRequest"`
}

func NewExperimentServiceListExperimentStatsArgs() *ExperimentServiceListExperimentStatsArgs {
	return &ExperimentServiceListExperimentStatsArgs{}
}

func (p *ExperimentServiceListExperimentStatsArgs) InitDefault() {
}

var ExperimentServiceListExperimentStatsArgs_Req_DEFAULT *ListExperimentStatsRequest

func (p *ExperimentServiceListExperimentStatsArgs) GetReq() (v *ListExperimentStatsRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return ExperimentServiceListExperimentStatsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *ExperimentServiceListExperimentStatsArgs) SetReq(val *ListExperimentStatsRequest) {
	p.Req = val
}

var fieldIDToName_ExperimentServiceListExperimentStatsArgs = map[int16]string{
	1: "req",
}

func (p *ExperimentServiceListExperimentStatsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ExperimentServiceListExperimentStatsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExperimentServiceListExperimentStatsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExperimentServiceListExperimentStatsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewListExperimentStatsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *ExperimentServiceListExperimentStatsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListExperimentStats_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExperimentServiceListExperimentStatsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ExperimentServiceListExperimentStatsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExperimentServiceListExperimentStatsArgs(%+v)", *p)

}

func (p *ExperimentServiceListExperimentStatsArgs) DeepEqual(ano *ExperimentServiceListExperimentStatsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *ExperimentServiceListExperimentStatsArgs) Field1DeepEqual(src *ListExperimentStatsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type ExperimentServiceListExperimentStatsResult struct {
	Success *ListExperimentStatsResponse `thrift:"success,0,optional" frugal:"0,optional,ListExperimentStatsResponse"`
}

func NewExperimentServiceListExperimentStatsResult() *ExperimentServiceListExperimentStatsResult {
	return &ExperimentServiceListExperimentStatsResult{}
}

func (p *ExperimentServiceListExperimentStatsResult) InitDefault() {
}

var ExperimentServiceListExperimentStatsResult_Success_DEFAULT *ListExperimentStatsResponse

func (p *ExperimentServiceListExperimentStatsResult) GetSuccess() (v *ListExperimentStatsResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return ExperimentServiceListExperimentStatsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ExperimentServiceListExperimentStatsResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListExperimentStatsResponse)
}

var fieldIDToName_ExperimentServiceListExperimentStatsResult = map[int16]string{
	0: "success",
}

func (p *ExperimentServiceListExperimentStatsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ExperimentServiceListExperimentStatsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExperimentServiceListExperimentStatsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExperimentServiceListExperimentStatsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewListExperimentStatsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *ExperimentServiceListExperimentStatsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListExperimentStats_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExperimentServiceListExperimentStatsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ExperimentServiceListExperimentStatsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExperimentServiceListExperimentStatsResult(%+v)", *p)

}

func (p *ExperimentServiceListExperimentStatsResult) DeepEqual(ano *ExperimentServiceListExperimentStatsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ExperimentServiceListExperimentStatsResult) Field0DeepEqual(src *ListExperimentStatsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
