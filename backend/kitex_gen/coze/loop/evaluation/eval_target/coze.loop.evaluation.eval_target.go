// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package eval_target

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/base"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/domain/eval_target"
	"strings"
)

type CreateEvalTargetRequest struct {
	WorkspaceID int64                  `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" query:"workspace_id,required"`
	Param       *CreateEvalTargetParam `thrift:"param,2,optional" frugal:"2,optional,CreateEvalTargetParam" form:"param" json:"param,omitempty" query:"param"`
	Base        *base.Base             `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewCreateEvalTargetRequest() *CreateEvalTargetRequest {
	return &CreateEvalTargetRequest{}
}

func (p *CreateEvalTargetRequest) InitDefault() {
}

func (p *CreateEvalTargetRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

var CreateEvalTargetRequest_Param_DEFAULT *CreateEvalTargetParam

func (p *CreateEvalTargetRequest) GetParam() (v *CreateEvalTargetParam) {
	if p == nil {
		return
	}
	if !p.IsSetParam() {
		return CreateEvalTargetRequest_Param_DEFAULT
	}
	return p.Param
}

var CreateEvalTargetRequest_Base_DEFAULT *base.Base

func (p *CreateEvalTargetRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return CreateEvalTargetRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *CreateEvalTargetRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *CreateEvalTargetRequest) SetParam(val *CreateEvalTargetParam) {
	p.Param = val
}
func (p *CreateEvalTargetRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_CreateEvalTargetRequest = map[int16]string{
	1:   "workspace_id",
	2:   "param",
	255: "Base",
}

func (p *CreateEvalTargetRequest) IsSetParam() bool {
	return p.Param != nil
}

func (p *CreateEvalTargetRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateEvalTargetRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateEvalTargetRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CreateEvalTargetRequest[fieldId]))
}

func (p *CreateEvalTargetRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *CreateEvalTargetRequest) ReadField2(iprot thrift.TProtocol) error {
	_field := NewCreateEvalTargetParam()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Param = _field
	return nil
}
func (p *CreateEvalTargetRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *CreateEvalTargetRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvalTargetRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateEvalTargetRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CreateEvalTargetRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetParam() {
		if err = oprot.WriteFieldBegin("param", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Param.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *CreateEvalTargetRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateEvalTargetRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEvalTargetRequest(%+v)", *p)

}

func (p *CreateEvalTargetRequest) DeepEqual(ano *CreateEvalTargetRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Param) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *CreateEvalTargetRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *CreateEvalTargetRequest) Field2DeepEqual(src *CreateEvalTargetParam) bool {

	if !p.Param.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateEvalTargetRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type CreateEvalTargetParam struct {
	SourceTargetID      *string                      `thrift:"source_target_id,1,optional" frugal:"1,optional,string" form:"source_target_id" json:"source_target_id,omitempty" query:"source_target_id"`
	SourceTargetVersion *string                      `thrift:"source_target_version,2,optional" frugal:"2,optional,string" form:"source_target_version" json:"source_target_version,omitempty" query:"source_target_version"`
	EvalTargetType      *eval_target.EvalTargetType  `thrift:"eval_target_type,3,optional" frugal:"3,optional,EvalTargetType" form:"eval_target_type" json:"eval_target_type,omitempty" query:"eval_target_type"`
	BotInfoType         *eval_target.CozeBotInfoType `thrift:"bot_info_type,4,optional" frugal:"4,optional,CozeBotInfoType" form:"bot_info_type" json:"bot_info_type,omitempty" query:"bot_info_type"`
	// 如果是发布版本则需要填充这个字段
	BotPublishVersion *string `thrift:"bot_publish_version,5,optional" frugal:"5,optional,string" form:"bot_publish_version" json:"bot_publish_version,omitempty" query:"bot_publish_version"`
}

func NewCreateEvalTargetParam() *CreateEvalTargetParam {
	return &CreateEvalTargetParam{}
}

func (p *CreateEvalTargetParam) InitDefault() {
}

var CreateEvalTargetParam_SourceTargetID_DEFAULT string

func (p *CreateEvalTargetParam) GetSourceTargetID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetSourceTargetID() {
		return CreateEvalTargetParam_SourceTargetID_DEFAULT
	}
	return *p.SourceTargetID
}

var CreateEvalTargetParam_SourceTargetVersion_DEFAULT string

func (p *CreateEvalTargetParam) GetSourceTargetVersion() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetSourceTargetVersion() {
		return CreateEvalTargetParam_SourceTargetVersion_DEFAULT
	}
	return *p.SourceTargetVersion
}

var CreateEvalTargetParam_EvalTargetType_DEFAULT eval_target.EvalTargetType

func (p *CreateEvalTargetParam) GetEvalTargetType() (v eval_target.EvalTargetType) {
	if p == nil {
		return
	}
	if !p.IsSetEvalTargetType() {
		return CreateEvalTargetParam_EvalTargetType_DEFAULT
	}
	return *p.EvalTargetType
}

var CreateEvalTargetParam_BotInfoType_DEFAULT eval_target.CozeBotInfoType

func (p *CreateEvalTargetParam) GetBotInfoType() (v eval_target.CozeBotInfoType) {
	if p == nil {
		return
	}
	if !p.IsSetBotInfoType() {
		return CreateEvalTargetParam_BotInfoType_DEFAULT
	}
	return *p.BotInfoType
}

var CreateEvalTargetParam_BotPublishVersion_DEFAULT string

func (p *CreateEvalTargetParam) GetBotPublishVersion() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetBotPublishVersion() {
		return CreateEvalTargetParam_BotPublishVersion_DEFAULT
	}
	return *p.BotPublishVersion
}
func (p *CreateEvalTargetParam) SetSourceTargetID(val *string) {
	p.SourceTargetID = val
}
func (p *CreateEvalTargetParam) SetSourceTargetVersion(val *string) {
	p.SourceTargetVersion = val
}
func (p *CreateEvalTargetParam) SetEvalTargetType(val *eval_target.EvalTargetType) {
	p.EvalTargetType = val
}
func (p *CreateEvalTargetParam) SetBotInfoType(val *eval_target.CozeBotInfoType) {
	p.BotInfoType = val
}
func (p *CreateEvalTargetParam) SetBotPublishVersion(val *string) {
	p.BotPublishVersion = val
}

var fieldIDToName_CreateEvalTargetParam = map[int16]string{
	1: "source_target_id",
	2: "source_target_version",
	3: "eval_target_type",
	4: "bot_info_type",
	5: "bot_publish_version",
}

func (p *CreateEvalTargetParam) IsSetSourceTargetID() bool {
	return p.SourceTargetID != nil
}

func (p *CreateEvalTargetParam) IsSetSourceTargetVersion() bool {
	return p.SourceTargetVersion != nil
}

func (p *CreateEvalTargetParam) IsSetEvalTargetType() bool {
	return p.EvalTargetType != nil
}

func (p *CreateEvalTargetParam) IsSetBotInfoType() bool {
	return p.BotInfoType != nil
}

func (p *CreateEvalTargetParam) IsSetBotPublishVersion() bool {
	return p.BotPublishVersion != nil
}

func (p *CreateEvalTargetParam) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateEvalTargetParam[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateEvalTargetParam) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SourceTargetID = _field
	return nil
}
func (p *CreateEvalTargetParam) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SourceTargetVersion = _field
	return nil
}
func (p *CreateEvalTargetParam) ReadField3(iprot thrift.TProtocol) error {

	var _field *eval_target.EvalTargetType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := eval_target.EvalTargetType(v)
		_field = &tmp
	}
	p.EvalTargetType = _field
	return nil
}
func (p *CreateEvalTargetParam) ReadField4(iprot thrift.TProtocol) error {

	var _field *eval_target.CozeBotInfoType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := eval_target.CozeBotInfoType(v)
		_field = &tmp
	}
	p.BotInfoType = _field
	return nil
}
func (p *CreateEvalTargetParam) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BotPublishVersion = _field
	return nil
}

func (p *CreateEvalTargetParam) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvalTargetParam"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateEvalTargetParam) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSourceTargetID() {
		if err = oprot.WriteFieldBegin("source_target_id", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.SourceTargetID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CreateEvalTargetParam) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSourceTargetVersion() {
		if err = oprot.WriteFieldBegin("source_target_version", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.SourceTargetVersion); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *CreateEvalTargetParam) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvalTargetType() {
		if err = oprot.WriteFieldBegin("eval_target_type", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.EvalTargetType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *CreateEvalTargetParam) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetBotInfoType() {
		if err = oprot.WriteFieldBegin("bot_info_type", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.BotInfoType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *CreateEvalTargetParam) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetBotPublishVersion() {
		if err = oprot.WriteFieldBegin("bot_publish_version", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.BotPublishVersion); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CreateEvalTargetParam) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEvalTargetParam(%+v)", *p)

}

func (p *CreateEvalTargetParam) DeepEqual(ano *CreateEvalTargetParam) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SourceTargetID) {
		return false
	}
	if !p.Field2DeepEqual(ano.SourceTargetVersion) {
		return false
	}
	if !p.Field3DeepEqual(ano.EvalTargetType) {
		return false
	}
	if !p.Field4DeepEqual(ano.BotInfoType) {
		return false
	}
	if !p.Field5DeepEqual(ano.BotPublishVersion) {
		return false
	}
	return true
}

func (p *CreateEvalTargetParam) Field1DeepEqual(src *string) bool {

	if p.SourceTargetID == src {
		return true
	} else if p.SourceTargetID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.SourceTargetID, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateEvalTargetParam) Field2DeepEqual(src *string) bool {

	if p.SourceTargetVersion == src {
		return true
	} else if p.SourceTargetVersion == nil || src == nil {
		return false
	}
	if strings.Compare(*p.SourceTargetVersion, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateEvalTargetParam) Field3DeepEqual(src *eval_target.EvalTargetType) bool {

	if p.EvalTargetType == src {
		return true
	} else if p.EvalTargetType == nil || src == nil {
		return false
	}
	if *p.EvalTargetType != *src {
		return false
	}
	return true
}
func (p *CreateEvalTargetParam) Field4DeepEqual(src *eval_target.CozeBotInfoType) bool {

	if p.BotInfoType == src {
		return true
	} else if p.BotInfoType == nil || src == nil {
		return false
	}
	if *p.BotInfoType != *src {
		return false
	}
	return true
}
func (p *CreateEvalTargetParam) Field5DeepEqual(src *string) bool {

	if p.BotPublishVersion == src {
		return true
	} else if p.BotPublishVersion == nil || src == nil {
		return false
	}
	if strings.Compare(*p.BotPublishVersion, *src) != 0 {
		return false
	}
	return true
}

type CreateEvalTargetResponse struct {
	ID        *int64         `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id" form:"id" query:"id"`
	VersionID *int64         `thrift:"version_id,2,optional" frugal:"2,optional,i64" json:"version_id" form:"version_id" query:"version_id"`
	BaseResp  *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewCreateEvalTargetResponse() *CreateEvalTargetResponse {
	return &CreateEvalTargetResponse{}
}

func (p *CreateEvalTargetResponse) InitDefault() {
}

var CreateEvalTargetResponse_ID_DEFAULT int64

func (p *CreateEvalTargetResponse) GetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetID() {
		return CreateEvalTargetResponse_ID_DEFAULT
	}
	return *p.ID
}

var CreateEvalTargetResponse_VersionID_DEFAULT int64

func (p *CreateEvalTargetResponse) GetVersionID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetVersionID() {
		return CreateEvalTargetResponse_VersionID_DEFAULT
	}
	return *p.VersionID
}

var CreateEvalTargetResponse_BaseResp_DEFAULT *base.BaseResp

func (p *CreateEvalTargetResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return CreateEvalTargetResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CreateEvalTargetResponse) SetID(val *int64) {
	p.ID = val
}
func (p *CreateEvalTargetResponse) SetVersionID(val *int64) {
	p.VersionID = val
}
func (p *CreateEvalTargetResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_CreateEvalTargetResponse = map[int16]string{
	1:   "id",
	2:   "version_id",
	255: "BaseResp",
}

func (p *CreateEvalTargetResponse) IsSetID() bool {
	return p.ID != nil
}

func (p *CreateEvalTargetResponse) IsSetVersionID() bool {
	return p.VersionID != nil
}

func (p *CreateEvalTargetResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CreateEvalTargetResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateEvalTargetResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateEvalTargetResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ID = _field
	return nil
}
func (p *CreateEvalTargetResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.VersionID = _field
	return nil
}
func (p *CreateEvalTargetResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *CreateEvalTargetResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvalTargetResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateEvalTargetResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CreateEvalTargetResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersionID() {
		if err = oprot.WriteFieldBegin("version_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.VersionID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *CreateEvalTargetResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateEvalTargetResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateEvalTargetResponse(%+v)", *p)

}

func (p *CreateEvalTargetResponse) DeepEqual(ano *CreateEvalTargetResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field2DeepEqual(ano.VersionID) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *CreateEvalTargetResponse) Field1DeepEqual(src *int64) bool {

	if p.ID == src {
		return true
	} else if p.ID == nil || src == nil {
		return false
	}
	if *p.ID != *src {
		return false
	}
	return true
}
func (p *CreateEvalTargetResponse) Field2DeepEqual(src *int64) bool {

	if p.VersionID == src {
		return true
	} else if p.VersionID == nil || src == nil {
		return false
	}
	if *p.VersionID != *src {
		return false
	}
	return true
}
func (p *CreateEvalTargetResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type GetEvalTargetVersionRequest struct {
	WorkspaceID         int64      `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" query:"workspace_id,required" `
	EvalTargetVersionID *int64     `thrift:"eval_target_version_id,2,optional" frugal:"2,optional,i64" json:"eval_target_version_id" path:"eval_target_version_id" `
	Base                *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewGetEvalTargetVersionRequest() *GetEvalTargetVersionRequest {
	return &GetEvalTargetVersionRequest{}
}

func (p *GetEvalTargetVersionRequest) InitDefault() {
}

func (p *GetEvalTargetVersionRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

var GetEvalTargetVersionRequest_EvalTargetVersionID_DEFAULT int64

func (p *GetEvalTargetVersionRequest) GetEvalTargetVersionID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetEvalTargetVersionID() {
		return GetEvalTargetVersionRequest_EvalTargetVersionID_DEFAULT
	}
	return *p.EvalTargetVersionID
}

var GetEvalTargetVersionRequest_Base_DEFAULT *base.Base

func (p *GetEvalTargetVersionRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return GetEvalTargetVersionRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetEvalTargetVersionRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *GetEvalTargetVersionRequest) SetEvalTargetVersionID(val *int64) {
	p.EvalTargetVersionID = val
}
func (p *GetEvalTargetVersionRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetEvalTargetVersionRequest = map[int16]string{
	1:   "workspace_id",
	2:   "eval_target_version_id",
	255: "Base",
}

func (p *GetEvalTargetVersionRequest) IsSetEvalTargetVersionID() bool {
	return p.EvalTargetVersionID != nil
}

func (p *GetEvalTargetVersionRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetEvalTargetVersionRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetEvalTargetVersionRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetEvalTargetVersionRequest[fieldId]))
}

func (p *GetEvalTargetVersionRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *GetEvalTargetVersionRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvalTargetVersionID = _field
	return nil
}
func (p *GetEvalTargetVersionRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *GetEvalTargetVersionRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvalTargetVersionRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetEvalTargetVersionRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetEvalTargetVersionRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvalTargetVersionID() {
		if err = oprot.WriteFieldBegin("eval_target_version_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.EvalTargetVersionID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetEvalTargetVersionRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetEvalTargetVersionRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetEvalTargetVersionRequest(%+v)", *p)

}

func (p *GetEvalTargetVersionRequest) DeepEqual(ano *GetEvalTargetVersionRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvalTargetVersionID) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetEvalTargetVersionRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *GetEvalTargetVersionRequest) Field2DeepEqual(src *int64) bool {

	if p.EvalTargetVersionID == src {
		return true
	} else if p.EvalTargetVersionID == nil || src == nil {
		return false
	}
	if *p.EvalTargetVersionID != *src {
		return false
	}
	return true
}
func (p *GetEvalTargetVersionRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetEvalTargetVersionResponse struct {
	EvalTarget *eval_target.EvalTarget `thrift:"eval_target,1,optional" frugal:"1,optional,eval_target.EvalTarget" form:"eval_target" json:"eval_target,omitempty" query:"eval_target"`
	BaseResp   *base.BaseResp          `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewGetEvalTargetVersionResponse() *GetEvalTargetVersionResponse {
	return &GetEvalTargetVersionResponse{}
}

func (p *GetEvalTargetVersionResponse) InitDefault() {
}

var GetEvalTargetVersionResponse_EvalTarget_DEFAULT *eval_target.EvalTarget

func (p *GetEvalTargetVersionResponse) GetEvalTarget() (v *eval_target.EvalTarget) {
	if p == nil {
		return
	}
	if !p.IsSetEvalTarget() {
		return GetEvalTargetVersionResponse_EvalTarget_DEFAULT
	}
	return p.EvalTarget
}

var GetEvalTargetVersionResponse_BaseResp_DEFAULT *base.BaseResp

func (p *GetEvalTargetVersionResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return GetEvalTargetVersionResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetEvalTargetVersionResponse) SetEvalTarget(val *eval_target.EvalTarget) {
	p.EvalTarget = val
}
func (p *GetEvalTargetVersionResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_GetEvalTargetVersionResponse = map[int16]string{
	1:   "eval_target",
	255: "BaseResp",
}

func (p *GetEvalTargetVersionResponse) IsSetEvalTarget() bool {
	return p.EvalTarget != nil
}

func (p *GetEvalTargetVersionResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetEvalTargetVersionResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetEvalTargetVersionResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetEvalTargetVersionResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := eval_target.NewEvalTarget()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvalTarget = _field
	return nil
}
func (p *GetEvalTargetVersionResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *GetEvalTargetVersionResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvalTargetVersionResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetEvalTargetVersionResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvalTarget() {
		if err = oprot.WriteFieldBegin("eval_target", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.EvalTarget.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetEvalTargetVersionResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetEvalTargetVersionResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetEvalTargetVersionResponse(%+v)", *p)

}

func (p *GetEvalTargetVersionResponse) DeepEqual(ano *GetEvalTargetVersionResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvalTarget) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *GetEvalTargetVersionResponse) Field1DeepEqual(src *eval_target.EvalTarget) bool {

	if !p.EvalTarget.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetEvalTargetVersionResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type BatchGetEvalTargetVersionsRequest struct {
	WorkspaceID          int64      `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" query:"workspace_id,required"`
	EvalTargetVersionIds []int64    `thrift:"eval_target_version_ids,2,optional" frugal:"2,optional,list<i64>" json:"eval_target_version_ids" form:"eval_target_version_ids" query:"eval_target_version_ids"`
	NeedSourceInfo       *bool      `thrift:"need_source_info,3,optional" frugal:"3,optional,bool" form:"need_source_info" json:"need_source_info,omitempty" query:"need_source_info"`
	Base                 *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewBatchGetEvalTargetVersionsRequest() *BatchGetEvalTargetVersionsRequest {
	return &BatchGetEvalTargetVersionsRequest{}
}

func (p *BatchGetEvalTargetVersionsRequest) InitDefault() {
}

func (p *BatchGetEvalTargetVersionsRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

var BatchGetEvalTargetVersionsRequest_EvalTargetVersionIds_DEFAULT []int64

func (p *BatchGetEvalTargetVersionsRequest) GetEvalTargetVersionIds() (v []int64) {
	if p == nil {
		return
	}
	if !p.IsSetEvalTargetVersionIds() {
		return BatchGetEvalTargetVersionsRequest_EvalTargetVersionIds_DEFAULT
	}
	return p.EvalTargetVersionIds
}

var BatchGetEvalTargetVersionsRequest_NeedSourceInfo_DEFAULT bool

func (p *BatchGetEvalTargetVersionsRequest) GetNeedSourceInfo() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetNeedSourceInfo() {
		return BatchGetEvalTargetVersionsRequest_NeedSourceInfo_DEFAULT
	}
	return *p.NeedSourceInfo
}

var BatchGetEvalTargetVersionsRequest_Base_DEFAULT *base.Base

func (p *BatchGetEvalTargetVersionsRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return BatchGetEvalTargetVersionsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *BatchGetEvalTargetVersionsRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *BatchGetEvalTargetVersionsRequest) SetEvalTargetVersionIds(val []int64) {
	p.EvalTargetVersionIds = val
}
func (p *BatchGetEvalTargetVersionsRequest) SetNeedSourceInfo(val *bool) {
	p.NeedSourceInfo = val
}
func (p *BatchGetEvalTargetVersionsRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_BatchGetEvalTargetVersionsRequest = map[int16]string{
	1:   "workspace_id",
	2:   "eval_target_version_ids",
	3:   "need_source_info",
	255: "Base",
}

func (p *BatchGetEvalTargetVersionsRequest) IsSetEvalTargetVersionIds() bool {
	return p.EvalTargetVersionIds != nil
}

func (p *BatchGetEvalTargetVersionsRequest) IsSetNeedSourceInfo() bool {
	return p.NeedSourceInfo != nil
}

func (p *BatchGetEvalTargetVersionsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *BatchGetEvalTargetVersionsRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchGetEvalTargetVersionsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_BatchGetEvalTargetVersionsRequest[fieldId]))
}

func (p *BatchGetEvalTargetVersionsRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *BatchGetEvalTargetVersionsRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.EvalTargetVersionIds = _field
	return nil
}
func (p *BatchGetEvalTargetVersionsRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NeedSourceInfo = _field
	return nil
}
func (p *BatchGetEvalTargetVersionsRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *BatchGetEvalTargetVersionsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetEvalTargetVersionsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchGetEvalTargetVersionsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchGetEvalTargetVersionsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvalTargetVersionIds() {
		if err = oprot.WriteFieldBegin("eval_target_version_ids", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.EvalTargetVersionIds)); err != nil {
			return err
		}
		for _, v := range p.EvalTargetVersionIds {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BatchGetEvalTargetVersionsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetNeedSourceInfo() {
		if err = oprot.WriteFieldBegin("need_source_info", thrift.BOOL, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.NeedSourceInfo); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *BatchGetEvalTargetVersionsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchGetEvalTargetVersionsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchGetEvalTargetVersionsRequest(%+v)", *p)

}

func (p *BatchGetEvalTargetVersionsRequest) DeepEqual(ano *BatchGetEvalTargetVersionsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvalTargetVersionIds) {
		return false
	}
	if !p.Field3DeepEqual(ano.NeedSourceInfo) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *BatchGetEvalTargetVersionsRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *BatchGetEvalTargetVersionsRequest) Field2DeepEqual(src []int64) bool {

	if len(p.EvalTargetVersionIds) != len(src) {
		return false
	}
	for i, v := range p.EvalTargetVersionIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *BatchGetEvalTargetVersionsRequest) Field3DeepEqual(src *bool) bool {

	if p.NeedSourceInfo == src {
		return true
	} else if p.NeedSourceInfo == nil || src == nil {
		return false
	}
	if *p.NeedSourceInfo != *src {
		return false
	}
	return true
}
func (p *BatchGetEvalTargetVersionsRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type BatchGetEvalTargetVersionsResponse struct {
	EvalTargets []*eval_target.EvalTarget `thrift:"eval_targets,1,optional" frugal:"1,optional,list<eval_target.EvalTarget>" form:"eval_targets" json:"eval_targets,omitempty" query:"eval_targets"`
	BaseResp    *base.BaseResp            `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewBatchGetEvalTargetVersionsResponse() *BatchGetEvalTargetVersionsResponse {
	return &BatchGetEvalTargetVersionsResponse{}
}

func (p *BatchGetEvalTargetVersionsResponse) InitDefault() {
}

var BatchGetEvalTargetVersionsResponse_EvalTargets_DEFAULT []*eval_target.EvalTarget

func (p *BatchGetEvalTargetVersionsResponse) GetEvalTargets() (v []*eval_target.EvalTarget) {
	if p == nil {
		return
	}
	if !p.IsSetEvalTargets() {
		return BatchGetEvalTargetVersionsResponse_EvalTargets_DEFAULT
	}
	return p.EvalTargets
}

var BatchGetEvalTargetVersionsResponse_BaseResp_DEFAULT *base.BaseResp

func (p *BatchGetEvalTargetVersionsResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return BatchGetEvalTargetVersionsResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *BatchGetEvalTargetVersionsResponse) SetEvalTargets(val []*eval_target.EvalTarget) {
	p.EvalTargets = val
}
func (p *BatchGetEvalTargetVersionsResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_BatchGetEvalTargetVersionsResponse = map[int16]string{
	1:   "eval_targets",
	255: "BaseResp",
}

func (p *BatchGetEvalTargetVersionsResponse) IsSetEvalTargets() bool {
	return p.EvalTargets != nil
}

func (p *BatchGetEvalTargetVersionsResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *BatchGetEvalTargetVersionsResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchGetEvalTargetVersionsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchGetEvalTargetVersionsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*eval_target.EvalTarget, 0, size)
	values := make([]eval_target.EvalTarget, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.EvalTargets = _field
	return nil
}
func (p *BatchGetEvalTargetVersionsResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *BatchGetEvalTargetVersionsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetEvalTargetVersionsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchGetEvalTargetVersionsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvalTargets() {
		if err = oprot.WriteFieldBegin("eval_targets", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EvalTargets)); err != nil {
			return err
		}
		for _, v := range p.EvalTargets {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchGetEvalTargetVersionsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchGetEvalTargetVersionsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchGetEvalTargetVersionsResponse(%+v)", *p)

}

func (p *BatchGetEvalTargetVersionsResponse) DeepEqual(ano *BatchGetEvalTargetVersionsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvalTargets) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *BatchGetEvalTargetVersionsResponse) Field1DeepEqual(src []*eval_target.EvalTarget) bool {

	if len(p.EvalTargets) != len(src) {
		return false
	}
	for i, v := range p.EvalTargets {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *BatchGetEvalTargetVersionsResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type BatchGetEvalTargetsBySourceRequest struct {
	WorkspaceID     int64                       `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" query:"workspace_id,required"`
	SourceTargetIds []string                    `thrift:"source_target_ids,2,optional" frugal:"2,optional,list<string>" form:"source_target_ids" json:"source_target_ids,omitempty" query:"source_target_ids"`
	EvalTargetType  *eval_target.EvalTargetType `thrift:"eval_target_type,3,optional" frugal:"3,optional,EvalTargetType" form:"eval_target_type" json:"eval_target_type,omitempty" query:"eval_target_type"`
	NeedSourceInfo  *bool                       `thrift:"need_source_info,4,optional" frugal:"4,optional,bool" form:"need_source_info" json:"need_source_info,omitempty" query:"need_source_info"`
	Base            *base.Base                  `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewBatchGetEvalTargetsBySourceRequest() *BatchGetEvalTargetsBySourceRequest {
	return &BatchGetEvalTargetsBySourceRequest{}
}

func (p *BatchGetEvalTargetsBySourceRequest) InitDefault() {
}

func (p *BatchGetEvalTargetsBySourceRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

var BatchGetEvalTargetsBySourceRequest_SourceTargetIds_DEFAULT []string

func (p *BatchGetEvalTargetsBySourceRequest) GetSourceTargetIds() (v []string) {
	if p == nil {
		return
	}
	if !p.IsSetSourceTargetIds() {
		return BatchGetEvalTargetsBySourceRequest_SourceTargetIds_DEFAULT
	}
	return p.SourceTargetIds
}

var BatchGetEvalTargetsBySourceRequest_EvalTargetType_DEFAULT eval_target.EvalTargetType

func (p *BatchGetEvalTargetsBySourceRequest) GetEvalTargetType() (v eval_target.EvalTargetType) {
	if p == nil {
		return
	}
	if !p.IsSetEvalTargetType() {
		return BatchGetEvalTargetsBySourceRequest_EvalTargetType_DEFAULT
	}
	return *p.EvalTargetType
}

var BatchGetEvalTargetsBySourceRequest_NeedSourceInfo_DEFAULT bool

func (p *BatchGetEvalTargetsBySourceRequest) GetNeedSourceInfo() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetNeedSourceInfo() {
		return BatchGetEvalTargetsBySourceRequest_NeedSourceInfo_DEFAULT
	}
	return *p.NeedSourceInfo
}

var BatchGetEvalTargetsBySourceRequest_Base_DEFAULT *base.Base

func (p *BatchGetEvalTargetsBySourceRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return BatchGetEvalTargetsBySourceRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *BatchGetEvalTargetsBySourceRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *BatchGetEvalTargetsBySourceRequest) SetSourceTargetIds(val []string) {
	p.SourceTargetIds = val
}
func (p *BatchGetEvalTargetsBySourceRequest) SetEvalTargetType(val *eval_target.EvalTargetType) {
	p.EvalTargetType = val
}
func (p *BatchGetEvalTargetsBySourceRequest) SetNeedSourceInfo(val *bool) {
	p.NeedSourceInfo = val
}
func (p *BatchGetEvalTargetsBySourceRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_BatchGetEvalTargetsBySourceRequest = map[int16]string{
	1:   "workspace_id",
	2:   "source_target_ids",
	3:   "eval_target_type",
	4:   "need_source_info",
	255: "Base",
}

func (p *BatchGetEvalTargetsBySourceRequest) IsSetSourceTargetIds() bool {
	return p.SourceTargetIds != nil
}

func (p *BatchGetEvalTargetsBySourceRequest) IsSetEvalTargetType() bool {
	return p.EvalTargetType != nil
}

func (p *BatchGetEvalTargetsBySourceRequest) IsSetNeedSourceInfo() bool {
	return p.NeedSourceInfo != nil
}

func (p *BatchGetEvalTargetsBySourceRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *BatchGetEvalTargetsBySourceRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchGetEvalTargetsBySourceRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_BatchGetEvalTargetsBySourceRequest[fieldId]))
}

func (p *BatchGetEvalTargetsBySourceRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *BatchGetEvalTargetsBySourceRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.SourceTargetIds = _field
	return nil
}
func (p *BatchGetEvalTargetsBySourceRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *eval_target.EvalTargetType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := eval_target.EvalTargetType(v)
		_field = &tmp
	}
	p.EvalTargetType = _field
	return nil
}
func (p *BatchGetEvalTargetsBySourceRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NeedSourceInfo = _field
	return nil
}
func (p *BatchGetEvalTargetsBySourceRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *BatchGetEvalTargetsBySourceRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetEvalTargetsBySourceRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchGetEvalTargetsBySourceRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchGetEvalTargetsBySourceRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSourceTargetIds() {
		if err = oprot.WriteFieldBegin("source_target_ids", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.SourceTargetIds)); err != nil {
			return err
		}
		for _, v := range p.SourceTargetIds {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BatchGetEvalTargetsBySourceRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvalTargetType() {
		if err = oprot.WriteFieldBegin("eval_target_type", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.EvalTargetType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *BatchGetEvalTargetsBySourceRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetNeedSourceInfo() {
		if err = oprot.WriteFieldBegin("need_source_info", thrift.BOOL, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.NeedSourceInfo); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *BatchGetEvalTargetsBySourceRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchGetEvalTargetsBySourceRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchGetEvalTargetsBySourceRequest(%+v)", *p)

}

func (p *BatchGetEvalTargetsBySourceRequest) DeepEqual(ano *BatchGetEvalTargetsBySourceRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.SourceTargetIds) {
		return false
	}
	if !p.Field3DeepEqual(ano.EvalTargetType) {
		return false
	}
	if !p.Field4DeepEqual(ano.NeedSourceInfo) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *BatchGetEvalTargetsBySourceRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *BatchGetEvalTargetsBySourceRequest) Field2DeepEqual(src []string) bool {

	if len(p.SourceTargetIds) != len(src) {
		return false
	}
	for i, v := range p.SourceTargetIds {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *BatchGetEvalTargetsBySourceRequest) Field3DeepEqual(src *eval_target.EvalTargetType) bool {

	if p.EvalTargetType == src {
		return true
	} else if p.EvalTargetType == nil || src == nil {
		return false
	}
	if *p.EvalTargetType != *src {
		return false
	}
	return true
}
func (p *BatchGetEvalTargetsBySourceRequest) Field4DeepEqual(src *bool) bool {

	if p.NeedSourceInfo == src {
		return true
	} else if p.NeedSourceInfo == nil || src == nil {
		return false
	}
	if *p.NeedSourceInfo != *src {
		return false
	}
	return true
}
func (p *BatchGetEvalTargetsBySourceRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type BatchGetEvalTargetsBySourceResponse struct {
	EvalTargets []*eval_target.EvalTarget `thrift:"eval_targets,1,optional" frugal:"1,optional,list<eval_target.EvalTarget>" form:"eval_targets" json:"eval_targets,omitempty" query:"eval_targets"`
	BaseResp    *base.BaseResp            `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewBatchGetEvalTargetsBySourceResponse() *BatchGetEvalTargetsBySourceResponse {
	return &BatchGetEvalTargetsBySourceResponse{}
}

func (p *BatchGetEvalTargetsBySourceResponse) InitDefault() {
}

var BatchGetEvalTargetsBySourceResponse_EvalTargets_DEFAULT []*eval_target.EvalTarget

func (p *BatchGetEvalTargetsBySourceResponse) GetEvalTargets() (v []*eval_target.EvalTarget) {
	if p == nil {
		return
	}
	if !p.IsSetEvalTargets() {
		return BatchGetEvalTargetsBySourceResponse_EvalTargets_DEFAULT
	}
	return p.EvalTargets
}

var BatchGetEvalTargetsBySourceResponse_BaseResp_DEFAULT *base.BaseResp

func (p *BatchGetEvalTargetsBySourceResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return BatchGetEvalTargetsBySourceResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *BatchGetEvalTargetsBySourceResponse) SetEvalTargets(val []*eval_target.EvalTarget) {
	p.EvalTargets = val
}
func (p *BatchGetEvalTargetsBySourceResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_BatchGetEvalTargetsBySourceResponse = map[int16]string{
	1:   "eval_targets",
	255: "BaseResp",
}

func (p *BatchGetEvalTargetsBySourceResponse) IsSetEvalTargets() bool {
	return p.EvalTargets != nil
}

func (p *BatchGetEvalTargetsBySourceResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *BatchGetEvalTargetsBySourceResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchGetEvalTargetsBySourceResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchGetEvalTargetsBySourceResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*eval_target.EvalTarget, 0, size)
	values := make([]eval_target.EvalTarget, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.EvalTargets = _field
	return nil
}
func (p *BatchGetEvalTargetsBySourceResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *BatchGetEvalTargetsBySourceResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetEvalTargetsBySourceResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchGetEvalTargetsBySourceResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvalTargets() {
		if err = oprot.WriteFieldBegin("eval_targets", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EvalTargets)); err != nil {
			return err
		}
		for _, v := range p.EvalTargets {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchGetEvalTargetsBySourceResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchGetEvalTargetsBySourceResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchGetEvalTargetsBySourceResponse(%+v)", *p)

}

func (p *BatchGetEvalTargetsBySourceResponse) DeepEqual(ano *BatchGetEvalTargetsBySourceResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvalTargets) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *BatchGetEvalTargetsBySourceResponse) Field1DeepEqual(src []*eval_target.EvalTarget) bool {

	if len(p.EvalTargets) != len(src) {
		return false
	}
	for i, v := range p.EvalTargets {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *BatchGetEvalTargetsBySourceResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type ExecuteEvalTargetRequest struct {
	WorkspaceID         int64                            `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" query:"workspace_id,required"`
	EvalTargetID        int64                            `thrift:"eval_target_id,2,required" frugal:"2,required,i64" json:"eval_target_id" path:"eval_target_id,required" `
	EvalTargetVersionID int64                            `thrift:"eval_target_version_id,3,required" frugal:"3,required,i64" json:"eval_target_version_id" path:"eval_target_version_id,required" `
	InputData           *eval_target.EvalTargetInputData `thrift:"input_data,4,required" frugal:"4,required,eval_target.EvalTargetInputData" form:"input_data,required" json:"input_data,required" query:"input_data,required"`
	ExperimentRunID     *int64                           `thrift:"experiment_run_id,5,optional" frugal:"5,optional,i64" json:"experiment_run_id" form:"experiment_run_id" query:"experiment_run_id"`
	Base                *base.Base                       `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewExecuteEvalTargetRequest() *ExecuteEvalTargetRequest {
	return &ExecuteEvalTargetRequest{}
}

func (p *ExecuteEvalTargetRequest) InitDefault() {
}

func (p *ExecuteEvalTargetRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *ExecuteEvalTargetRequest) GetEvalTargetID() (v int64) {
	if p != nil {
		return p.EvalTargetID
	}
	return
}

func (p *ExecuteEvalTargetRequest) GetEvalTargetVersionID() (v int64) {
	if p != nil {
		return p.EvalTargetVersionID
	}
	return
}

var ExecuteEvalTargetRequest_InputData_DEFAULT *eval_target.EvalTargetInputData

func (p *ExecuteEvalTargetRequest) GetInputData() (v *eval_target.EvalTargetInputData) {
	if p == nil {
		return
	}
	if !p.IsSetInputData() {
		return ExecuteEvalTargetRequest_InputData_DEFAULT
	}
	return p.InputData
}

var ExecuteEvalTargetRequest_ExperimentRunID_DEFAULT int64

func (p *ExecuteEvalTargetRequest) GetExperimentRunID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetExperimentRunID() {
		return ExecuteEvalTargetRequest_ExperimentRunID_DEFAULT
	}
	return *p.ExperimentRunID
}

var ExecuteEvalTargetRequest_Base_DEFAULT *base.Base

func (p *ExecuteEvalTargetRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return ExecuteEvalTargetRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ExecuteEvalTargetRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *ExecuteEvalTargetRequest) SetEvalTargetID(val int64) {
	p.EvalTargetID = val
}
func (p *ExecuteEvalTargetRequest) SetEvalTargetVersionID(val int64) {
	p.EvalTargetVersionID = val
}
func (p *ExecuteEvalTargetRequest) SetInputData(val *eval_target.EvalTargetInputData) {
	p.InputData = val
}
func (p *ExecuteEvalTargetRequest) SetExperimentRunID(val *int64) {
	p.ExperimentRunID = val
}
func (p *ExecuteEvalTargetRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ExecuteEvalTargetRequest = map[int16]string{
	1:   "workspace_id",
	2:   "eval_target_id",
	3:   "eval_target_version_id",
	4:   "input_data",
	5:   "experiment_run_id",
	255: "Base",
}

func (p *ExecuteEvalTargetRequest) IsSetInputData() bool {
	return p.InputData != nil
}

func (p *ExecuteEvalTargetRequest) IsSetExperimentRunID() bool {
	return p.ExperimentRunID != nil
}

func (p *ExecuteEvalTargetRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ExecuteEvalTargetRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetEvalTargetID bool = false
	var issetEvalTargetVersionID bool = false
	var issetInputData bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvalTargetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvalTargetVersionID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetInputData = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEvalTargetID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetEvalTargetVersionID {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetInputData {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExecuteEvalTargetRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ExecuteEvalTargetRequest[fieldId]))
}

func (p *ExecuteEvalTargetRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *ExecuteEvalTargetRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvalTargetID = _field
	return nil
}
func (p *ExecuteEvalTargetRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvalTargetVersionID = _field
	return nil
}
func (p *ExecuteEvalTargetRequest) ReadField4(iprot thrift.TProtocol) error {
	_field := eval_target.NewEvalTargetInputData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.InputData = _field
	return nil
}
func (p *ExecuteEvalTargetRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ExperimentRunID = _field
	return nil
}
func (p *ExecuteEvalTargetRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *ExecuteEvalTargetRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ExecuteEvalTargetRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExecuteEvalTargetRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ExecuteEvalTargetRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("eval_target_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EvalTargetID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ExecuteEvalTargetRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("eval_target_version_id", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EvalTargetVersionID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ExecuteEvalTargetRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("input_data", thrift.STRUCT, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.InputData.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *ExecuteEvalTargetRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetExperimentRunID() {
		if err = oprot.WriteFieldBegin("experiment_run_id", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ExperimentRunID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *ExecuteEvalTargetRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ExecuteEvalTargetRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExecuteEvalTargetRequest(%+v)", *p)

}

func (p *ExecuteEvalTargetRequest) DeepEqual(ano *ExecuteEvalTargetRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvalTargetID) {
		return false
	}
	if !p.Field3DeepEqual(ano.EvalTargetVersionID) {
		return false
	}
	if !p.Field4DeepEqual(ano.InputData) {
		return false
	}
	if !p.Field5DeepEqual(ano.ExperimentRunID) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ExecuteEvalTargetRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *ExecuteEvalTargetRequest) Field2DeepEqual(src int64) bool {

	if p.EvalTargetID != src {
		return false
	}
	return true
}
func (p *ExecuteEvalTargetRequest) Field3DeepEqual(src int64) bool {

	if p.EvalTargetVersionID != src {
		return false
	}
	return true
}
func (p *ExecuteEvalTargetRequest) Field4DeepEqual(src *eval_target.EvalTargetInputData) bool {

	if !p.InputData.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ExecuteEvalTargetRequest) Field5DeepEqual(src *int64) bool {

	if p.ExperimentRunID == src {
		return true
	} else if p.ExperimentRunID == nil || src == nil {
		return false
	}
	if *p.ExperimentRunID != *src {
		return false
	}
	return true
}
func (p *ExecuteEvalTargetRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ExecuteEvalTargetResponse struct {
	EvalTargetRecord *eval_target.EvalTargetRecord `thrift:"eval_target_record,1,required" frugal:"1,required,eval_target.EvalTargetRecord" form:"eval_target_record,required" json:"eval_target_record,required" query:"eval_target_record,required"`
	BaseResp         *base.BaseResp                `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewExecuteEvalTargetResponse() *ExecuteEvalTargetResponse {
	return &ExecuteEvalTargetResponse{}
}

func (p *ExecuteEvalTargetResponse) InitDefault() {
}

var ExecuteEvalTargetResponse_EvalTargetRecord_DEFAULT *eval_target.EvalTargetRecord

func (p *ExecuteEvalTargetResponse) GetEvalTargetRecord() (v *eval_target.EvalTargetRecord) {
	if p == nil {
		return
	}
	if !p.IsSetEvalTargetRecord() {
		return ExecuteEvalTargetResponse_EvalTargetRecord_DEFAULT
	}
	return p.EvalTargetRecord
}

var ExecuteEvalTargetResponse_BaseResp_DEFAULT *base.BaseResp

func (p *ExecuteEvalTargetResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return ExecuteEvalTargetResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ExecuteEvalTargetResponse) SetEvalTargetRecord(val *eval_target.EvalTargetRecord) {
	p.EvalTargetRecord = val
}
func (p *ExecuteEvalTargetResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_ExecuteEvalTargetResponse = map[int16]string{
	1:   "eval_target_record",
	255: "BaseResp",
}

func (p *ExecuteEvalTargetResponse) IsSetEvalTargetRecord() bool {
	return p.EvalTargetRecord != nil
}

func (p *ExecuteEvalTargetResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ExecuteEvalTargetResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetEvalTargetRecord bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvalTargetRecord = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetEvalTargetRecord {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExecuteEvalTargetResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ExecuteEvalTargetResponse[fieldId]))
}

func (p *ExecuteEvalTargetResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := eval_target.NewEvalTargetRecord()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvalTargetRecord = _field
	return nil
}
func (p *ExecuteEvalTargetResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *ExecuteEvalTargetResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ExecuteEvalTargetResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExecuteEvalTargetResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("eval_target_record", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.EvalTargetRecord.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ExecuteEvalTargetResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ExecuteEvalTargetResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExecuteEvalTargetResponse(%+v)", *p)

}

func (p *ExecuteEvalTargetResponse) DeepEqual(ano *ExecuteEvalTargetResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvalTargetRecord) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *ExecuteEvalTargetResponse) Field1DeepEqual(src *eval_target.EvalTargetRecord) bool {

	if !p.EvalTargetRecord.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ExecuteEvalTargetResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type ListEvalTargetRecordRequest struct {
	WorkspaceID      int64      `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" query:"workspace_id,required"`
	EvalTargetID     int64      `thrift:"eval_target_id,2,required" frugal:"2,required,i64" json:"eval_target_id" form:"eval_target_id,required" query:"eval_target_id,required"`
	ExperimentRunIds []int64    `thrift:"experiment_run_ids,3,optional" frugal:"3,optional,list<i64>" json:"experiment_run_ids" form:"experiment_run_ids" query:"experiment_run_ids"`
	Base             *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewListEvalTargetRecordRequest() *ListEvalTargetRecordRequest {
	return &ListEvalTargetRecordRequest{}
}

func (p *ListEvalTargetRecordRequest) InitDefault() {
}

func (p *ListEvalTargetRecordRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *ListEvalTargetRecordRequest) GetEvalTargetID() (v int64) {
	if p != nil {
		return p.EvalTargetID
	}
	return
}

var ListEvalTargetRecordRequest_ExperimentRunIds_DEFAULT []int64

func (p *ListEvalTargetRecordRequest) GetExperimentRunIds() (v []int64) {
	if p == nil {
		return
	}
	if !p.IsSetExperimentRunIds() {
		return ListEvalTargetRecordRequest_ExperimentRunIds_DEFAULT
	}
	return p.ExperimentRunIds
}

var ListEvalTargetRecordRequest_Base_DEFAULT *base.Base

func (p *ListEvalTargetRecordRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return ListEvalTargetRecordRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ListEvalTargetRecordRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *ListEvalTargetRecordRequest) SetEvalTargetID(val int64) {
	p.EvalTargetID = val
}
func (p *ListEvalTargetRecordRequest) SetExperimentRunIds(val []int64) {
	p.ExperimentRunIds = val
}
func (p *ListEvalTargetRecordRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListEvalTargetRecordRequest = map[int16]string{
	1:   "workspace_id",
	2:   "eval_target_id",
	3:   "experiment_run_ids",
	255: "Base",
}

func (p *ListEvalTargetRecordRequest) IsSetExperimentRunIds() bool {
	return p.ExperimentRunIds != nil
}

func (p *ListEvalTargetRecordRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListEvalTargetRecordRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetEvalTargetID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvalTargetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEvalTargetID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListEvalTargetRecordRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ListEvalTargetRecordRequest[fieldId]))
}

func (p *ListEvalTargetRecordRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *ListEvalTargetRecordRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvalTargetID = _field
	return nil
}
func (p *ListEvalTargetRecordRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ExperimentRunIds = _field
	return nil
}
func (p *ListEvalTargetRecordRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *ListEvalTargetRecordRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvalTargetRecordRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListEvalTargetRecordRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListEvalTargetRecordRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("eval_target_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EvalTargetID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ListEvalTargetRecordRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetExperimentRunIds() {
		if err = oprot.WriteFieldBegin("experiment_run_ids", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.ExperimentRunIds)); err != nil {
			return err
		}
		for _, v := range p.ExperimentRunIds {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ListEvalTargetRecordRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListEvalTargetRecordRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListEvalTargetRecordRequest(%+v)", *p)

}

func (p *ListEvalTargetRecordRequest) DeepEqual(ano *ListEvalTargetRecordRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvalTargetID) {
		return false
	}
	if !p.Field3DeepEqual(ano.ExperimentRunIds) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListEvalTargetRecordRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *ListEvalTargetRecordRequest) Field2DeepEqual(src int64) bool {

	if p.EvalTargetID != src {
		return false
	}
	return true
}
func (p *ListEvalTargetRecordRequest) Field3DeepEqual(src []int64) bool {

	if len(p.ExperimentRunIds) != len(src) {
		return false
	}
	for i, v := range p.ExperimentRunIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *ListEvalTargetRecordRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ListEvalTargetRecordResponse struct {
	EvalTargetRecords []*eval_target.EvalTargetRecord `thrift:"eval_target_records,1,required" frugal:"1,required,list<eval_target.EvalTargetRecord>" form:"eval_target_records,required" json:"eval_target_records,required" query:"eval_target_records,required"`
	BaseResp          *base.BaseResp                  `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewListEvalTargetRecordResponse() *ListEvalTargetRecordResponse {
	return &ListEvalTargetRecordResponse{}
}

func (p *ListEvalTargetRecordResponse) InitDefault() {
}

func (p *ListEvalTargetRecordResponse) GetEvalTargetRecords() (v []*eval_target.EvalTargetRecord) {
	if p != nil {
		return p.EvalTargetRecords
	}
	return
}

var ListEvalTargetRecordResponse_BaseResp_DEFAULT *base.BaseResp

func (p *ListEvalTargetRecordResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return ListEvalTargetRecordResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ListEvalTargetRecordResponse) SetEvalTargetRecords(val []*eval_target.EvalTargetRecord) {
	p.EvalTargetRecords = val
}
func (p *ListEvalTargetRecordResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_ListEvalTargetRecordResponse = map[int16]string{
	1:   "eval_target_records",
	255: "BaseResp",
}

func (p *ListEvalTargetRecordResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ListEvalTargetRecordResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetEvalTargetRecords bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvalTargetRecords = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetEvalTargetRecords {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListEvalTargetRecordResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ListEvalTargetRecordResponse[fieldId]))
}

func (p *ListEvalTargetRecordResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*eval_target.EvalTargetRecord, 0, size)
	values := make([]eval_target.EvalTargetRecord, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.EvalTargetRecords = _field
	return nil
}
func (p *ListEvalTargetRecordResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *ListEvalTargetRecordResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListEvalTargetRecordResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListEvalTargetRecordResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("eval_target_records", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EvalTargetRecords)); err != nil {
		return err
	}
	for _, v := range p.EvalTargetRecords {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListEvalTargetRecordResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListEvalTargetRecordResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListEvalTargetRecordResponse(%+v)", *p)

}

func (p *ListEvalTargetRecordResponse) DeepEqual(ano *ListEvalTargetRecordResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvalTargetRecords) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *ListEvalTargetRecordResponse) Field1DeepEqual(src []*eval_target.EvalTargetRecord) bool {

	if len(p.EvalTargetRecords) != len(src) {
		return false
	}
	for i, v := range p.EvalTargetRecords {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListEvalTargetRecordResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type GetEvalTargetRecordRequest struct {
	WorkspaceID        int64      `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" query:"workspace_id,required" `
	EvalTargetRecordID int64      `thrift:"eval_target_record_id,2,required" frugal:"2,required,i64" json:"eval_target_record_id" path:"eval_target_record_id,required" `
	Base               *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewGetEvalTargetRecordRequest() *GetEvalTargetRecordRequest {
	return &GetEvalTargetRecordRequest{}
}

func (p *GetEvalTargetRecordRequest) InitDefault() {
}

func (p *GetEvalTargetRecordRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *GetEvalTargetRecordRequest) GetEvalTargetRecordID() (v int64) {
	if p != nil {
		return p.EvalTargetRecordID
	}
	return
}

var GetEvalTargetRecordRequest_Base_DEFAULT *base.Base

func (p *GetEvalTargetRecordRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return GetEvalTargetRecordRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetEvalTargetRecordRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *GetEvalTargetRecordRequest) SetEvalTargetRecordID(val int64) {
	p.EvalTargetRecordID = val
}
func (p *GetEvalTargetRecordRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetEvalTargetRecordRequest = map[int16]string{
	1:   "workspace_id",
	2:   "eval_target_record_id",
	255: "Base",
}

func (p *GetEvalTargetRecordRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetEvalTargetRecordRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetEvalTargetRecordID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvalTargetRecordID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEvalTargetRecordID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetEvalTargetRecordRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetEvalTargetRecordRequest[fieldId]))
}

func (p *GetEvalTargetRecordRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *GetEvalTargetRecordRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvalTargetRecordID = _field
	return nil
}
func (p *GetEvalTargetRecordRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *GetEvalTargetRecordRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvalTargetRecordRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetEvalTargetRecordRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetEvalTargetRecordRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("eval_target_record_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EvalTargetRecordID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetEvalTargetRecordRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetEvalTargetRecordRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetEvalTargetRecordRequest(%+v)", *p)

}

func (p *GetEvalTargetRecordRequest) DeepEqual(ano *GetEvalTargetRecordRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvalTargetRecordID) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetEvalTargetRecordRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *GetEvalTargetRecordRequest) Field2DeepEqual(src int64) bool {

	if p.EvalTargetRecordID != src {
		return false
	}
	return true
}
func (p *GetEvalTargetRecordRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetEvalTargetRecordResponse struct {
	EvalTargetRecord *eval_target.EvalTargetRecord `thrift:"eval_target_record,1,optional" frugal:"1,optional,eval_target.EvalTargetRecord" form:"eval_target_record" json:"eval_target_record,omitempty" query:"eval_target_record"`
	BaseResp         *base.BaseResp                `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewGetEvalTargetRecordResponse() *GetEvalTargetRecordResponse {
	return &GetEvalTargetRecordResponse{}
}

func (p *GetEvalTargetRecordResponse) InitDefault() {
}

var GetEvalTargetRecordResponse_EvalTargetRecord_DEFAULT *eval_target.EvalTargetRecord

func (p *GetEvalTargetRecordResponse) GetEvalTargetRecord() (v *eval_target.EvalTargetRecord) {
	if p == nil {
		return
	}
	if !p.IsSetEvalTargetRecord() {
		return GetEvalTargetRecordResponse_EvalTargetRecord_DEFAULT
	}
	return p.EvalTargetRecord
}

var GetEvalTargetRecordResponse_BaseResp_DEFAULT *base.BaseResp

func (p *GetEvalTargetRecordResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return GetEvalTargetRecordResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetEvalTargetRecordResponse) SetEvalTargetRecord(val *eval_target.EvalTargetRecord) {
	p.EvalTargetRecord = val
}
func (p *GetEvalTargetRecordResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_GetEvalTargetRecordResponse = map[int16]string{
	1:   "eval_target_record",
	255: "BaseResp",
}

func (p *GetEvalTargetRecordResponse) IsSetEvalTargetRecord() bool {
	return p.EvalTargetRecord != nil
}

func (p *GetEvalTargetRecordResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetEvalTargetRecordResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetEvalTargetRecordResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetEvalTargetRecordResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := eval_target.NewEvalTargetRecord()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvalTargetRecord = _field
	return nil
}
func (p *GetEvalTargetRecordResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *GetEvalTargetRecordResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvalTargetRecordResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetEvalTargetRecordResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvalTargetRecord() {
		if err = oprot.WriteFieldBegin("eval_target_record", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.EvalTargetRecord.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetEvalTargetRecordResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetEvalTargetRecordResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetEvalTargetRecordResponse(%+v)", *p)

}

func (p *GetEvalTargetRecordResponse) DeepEqual(ano *GetEvalTargetRecordResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvalTargetRecord) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *GetEvalTargetRecordResponse) Field1DeepEqual(src *eval_target.EvalTargetRecord) bool {

	if !p.EvalTargetRecord.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetEvalTargetRecordResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type BatchGetEvalTargetRecordsRequest struct {
	WorkspaceID         int64      `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" query:"workspace_id,required"`
	EvalTargetRecordIds []int64    `thrift:"eval_target_record_ids,2,optional" frugal:"2,optional,list<i64>" json:"eval_target_record_ids" form:"eval_target_record_ids" query:"eval_target_record_ids"`
	Base                *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewBatchGetEvalTargetRecordsRequest() *BatchGetEvalTargetRecordsRequest {
	return &BatchGetEvalTargetRecordsRequest{}
}

func (p *BatchGetEvalTargetRecordsRequest) InitDefault() {
}

func (p *BatchGetEvalTargetRecordsRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

var BatchGetEvalTargetRecordsRequest_EvalTargetRecordIds_DEFAULT []int64

func (p *BatchGetEvalTargetRecordsRequest) GetEvalTargetRecordIds() (v []int64) {
	if p == nil {
		return
	}
	if !p.IsSetEvalTargetRecordIds() {
		return BatchGetEvalTargetRecordsRequest_EvalTargetRecordIds_DEFAULT
	}
	return p.EvalTargetRecordIds
}

var BatchGetEvalTargetRecordsRequest_Base_DEFAULT *base.Base

func (p *BatchGetEvalTargetRecordsRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return BatchGetEvalTargetRecordsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *BatchGetEvalTargetRecordsRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *BatchGetEvalTargetRecordsRequest) SetEvalTargetRecordIds(val []int64) {
	p.EvalTargetRecordIds = val
}
func (p *BatchGetEvalTargetRecordsRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_BatchGetEvalTargetRecordsRequest = map[int16]string{
	1:   "workspace_id",
	2:   "eval_target_record_ids",
	255: "Base",
}

func (p *BatchGetEvalTargetRecordsRequest) IsSetEvalTargetRecordIds() bool {
	return p.EvalTargetRecordIds != nil
}

func (p *BatchGetEvalTargetRecordsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *BatchGetEvalTargetRecordsRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchGetEvalTargetRecordsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_BatchGetEvalTargetRecordsRequest[fieldId]))
}

func (p *BatchGetEvalTargetRecordsRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *BatchGetEvalTargetRecordsRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.EvalTargetRecordIds = _field
	return nil
}
func (p *BatchGetEvalTargetRecordsRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *BatchGetEvalTargetRecordsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetEvalTargetRecordsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchGetEvalTargetRecordsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchGetEvalTargetRecordsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvalTargetRecordIds() {
		if err = oprot.WriteFieldBegin("eval_target_record_ids", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.EvalTargetRecordIds)); err != nil {
			return err
		}
		for _, v := range p.EvalTargetRecordIds {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BatchGetEvalTargetRecordsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchGetEvalTargetRecordsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchGetEvalTargetRecordsRequest(%+v)", *p)

}

func (p *BatchGetEvalTargetRecordsRequest) DeepEqual(ano *BatchGetEvalTargetRecordsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvalTargetRecordIds) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *BatchGetEvalTargetRecordsRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *BatchGetEvalTargetRecordsRequest) Field2DeepEqual(src []int64) bool {

	if len(p.EvalTargetRecordIds) != len(src) {
		return false
	}
	for i, v := range p.EvalTargetRecordIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *BatchGetEvalTargetRecordsRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type BatchGetEvalTargetRecordsResponse struct {
	EvalTargetRecords []*eval_target.EvalTargetRecord `thrift:"eval_target_records,1,required" frugal:"1,required,list<eval_target.EvalTargetRecord>" form:"eval_target_records,required" json:"eval_target_records,required" query:"eval_target_records,required"`
	BaseResp          *base.BaseResp                  `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewBatchGetEvalTargetRecordsResponse() *BatchGetEvalTargetRecordsResponse {
	return &BatchGetEvalTargetRecordsResponse{}
}

func (p *BatchGetEvalTargetRecordsResponse) InitDefault() {
}

func (p *BatchGetEvalTargetRecordsResponse) GetEvalTargetRecords() (v []*eval_target.EvalTargetRecord) {
	if p != nil {
		return p.EvalTargetRecords
	}
	return
}

var BatchGetEvalTargetRecordsResponse_BaseResp_DEFAULT *base.BaseResp

func (p *BatchGetEvalTargetRecordsResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return BatchGetEvalTargetRecordsResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *BatchGetEvalTargetRecordsResponse) SetEvalTargetRecords(val []*eval_target.EvalTargetRecord) {
	p.EvalTargetRecords = val
}
func (p *BatchGetEvalTargetRecordsResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_BatchGetEvalTargetRecordsResponse = map[int16]string{
	1:   "eval_target_records",
	255: "BaseResp",
}

func (p *BatchGetEvalTargetRecordsResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *BatchGetEvalTargetRecordsResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetEvalTargetRecords bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvalTargetRecords = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetEvalTargetRecords {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchGetEvalTargetRecordsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_BatchGetEvalTargetRecordsResponse[fieldId]))
}

func (p *BatchGetEvalTargetRecordsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*eval_target.EvalTargetRecord, 0, size)
	values := make([]eval_target.EvalTargetRecord, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.EvalTargetRecords = _field
	return nil
}
func (p *BatchGetEvalTargetRecordsResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *BatchGetEvalTargetRecordsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetEvalTargetRecordsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchGetEvalTargetRecordsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("eval_target_records", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EvalTargetRecords)); err != nil {
		return err
	}
	for _, v := range p.EvalTargetRecords {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchGetEvalTargetRecordsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchGetEvalTargetRecordsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchGetEvalTargetRecordsResponse(%+v)", *p)

}

func (p *BatchGetEvalTargetRecordsResponse) DeepEqual(ano *BatchGetEvalTargetRecordsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvalTargetRecords) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *BatchGetEvalTargetRecordsResponse) Field1DeepEqual(src []*eval_target.EvalTargetRecord) bool {

	if len(p.EvalTargetRecords) != len(src) {
		return false
	}
	for i, v := range p.EvalTargetRecords {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *BatchGetEvalTargetRecordsResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type ListSourceEvalTargetsRequest struct {
	WorkspaceID int64                       `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" query:"workspace_id,required"`
	TargetType  *eval_target.EvalTargetType `thrift:"target_type,2,optional" frugal:"2,optional,EvalTargetType" form:"target_type" json:"target_type,omitempty" query:"target_type"`
	// 用户模糊搜索bot名称、promptkey
	Name      *string    `thrift:"name,3,optional" frugal:"3,optional,string" form:"name" json:"name,omitempty" query:"name"`
	PageSize  *int32     `thrift:"page_size,100,optional" frugal:"100,optional,i32" form:"page_size" json:"page_size,omitempty" query:"page_size"`
	PageToken *string    `thrift:"page_token,101,optional" frugal:"101,optional,string" form:"page_token" json:"page_token,omitempty" query:"page_token"`
	Base      *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewListSourceEvalTargetsRequest() *ListSourceEvalTargetsRequest {
	return &ListSourceEvalTargetsRequest{}
}

func (p *ListSourceEvalTargetsRequest) InitDefault() {
}

func (p *ListSourceEvalTargetsRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

var ListSourceEvalTargetsRequest_TargetType_DEFAULT eval_target.EvalTargetType

func (p *ListSourceEvalTargetsRequest) GetTargetType() (v eval_target.EvalTargetType) {
	if p == nil {
		return
	}
	if !p.IsSetTargetType() {
		return ListSourceEvalTargetsRequest_TargetType_DEFAULT
	}
	return *p.TargetType
}

var ListSourceEvalTargetsRequest_Name_DEFAULT string

func (p *ListSourceEvalTargetsRequest) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return ListSourceEvalTargetsRequest_Name_DEFAULT
	}
	return *p.Name
}

var ListSourceEvalTargetsRequest_PageSize_DEFAULT int32

func (p *ListSourceEvalTargetsRequest) GetPageSize() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageSize() {
		return ListSourceEvalTargetsRequest_PageSize_DEFAULT
	}
	return *p.PageSize
}

var ListSourceEvalTargetsRequest_PageToken_DEFAULT string

func (p *ListSourceEvalTargetsRequest) GetPageToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetPageToken() {
		return ListSourceEvalTargetsRequest_PageToken_DEFAULT
	}
	return *p.PageToken
}

var ListSourceEvalTargetsRequest_Base_DEFAULT *base.Base

func (p *ListSourceEvalTargetsRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return ListSourceEvalTargetsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ListSourceEvalTargetsRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *ListSourceEvalTargetsRequest) SetTargetType(val *eval_target.EvalTargetType) {
	p.TargetType = val
}
func (p *ListSourceEvalTargetsRequest) SetName(val *string) {
	p.Name = val
}
func (p *ListSourceEvalTargetsRequest) SetPageSize(val *int32) {
	p.PageSize = val
}
func (p *ListSourceEvalTargetsRequest) SetPageToken(val *string) {
	p.PageToken = val
}
func (p *ListSourceEvalTargetsRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListSourceEvalTargetsRequest = map[int16]string{
	1:   "workspace_id",
	2:   "target_type",
	3:   "name",
	100: "page_size",
	101: "page_token",
	255: "Base",
}

func (p *ListSourceEvalTargetsRequest) IsSetTargetType() bool {
	return p.TargetType != nil
}

func (p *ListSourceEvalTargetsRequest) IsSetName() bool {
	return p.Name != nil
}

func (p *ListSourceEvalTargetsRequest) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *ListSourceEvalTargetsRequest) IsSetPageToken() bool {
	return p.PageToken != nil
}

func (p *ListSourceEvalTargetsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListSourceEvalTargetsRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListSourceEvalTargetsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ListSourceEvalTargetsRequest[fieldId]))
}

func (p *ListSourceEvalTargetsRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *ListSourceEvalTargetsRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *eval_target.EvalTargetType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := eval_target.EvalTargetType(v)
		_field = &tmp
	}
	p.TargetType = _field
	return nil
}
func (p *ListSourceEvalTargetsRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *ListSourceEvalTargetsRequest) ReadField100(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageSize = _field
	return nil
}
func (p *ListSourceEvalTargetsRequest) ReadField101(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageToken = _field
	return nil
}
func (p *ListSourceEvalTargetsRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *ListSourceEvalTargetsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListSourceEvalTargetsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListSourceEvalTargetsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListSourceEvalTargetsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTargetType() {
		if err = oprot.WriteFieldBegin("target_type", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.TargetType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ListSourceEvalTargetsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ListSourceEvalTargetsRequest) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("page_size", thrift.I32, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}
func (p *ListSourceEvalTargetsRequest) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageToken() {
		if err = oprot.WriteFieldBegin("page_token", thrift.STRING, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PageToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}
func (p *ListSourceEvalTargetsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListSourceEvalTargetsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListSourceEvalTargetsRequest(%+v)", *p)

}

func (p *ListSourceEvalTargetsRequest) DeepEqual(ano *ListSourceEvalTargetsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.TargetType) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field100DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field101DeepEqual(ano.PageToken) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListSourceEvalTargetsRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *ListSourceEvalTargetsRequest) Field2DeepEqual(src *eval_target.EvalTargetType) bool {

	if p.TargetType == src {
		return true
	} else if p.TargetType == nil || src == nil {
		return false
	}
	if *p.TargetType != *src {
		return false
	}
	return true
}
func (p *ListSourceEvalTargetsRequest) Field3DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *ListSourceEvalTargetsRequest) Field100DeepEqual(src *int32) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}
func (p *ListSourceEvalTargetsRequest) Field101DeepEqual(src *string) bool {

	if p.PageToken == src {
		return true
	} else if p.PageToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PageToken, *src) != 0 {
		return false
	}
	return true
}
func (p *ListSourceEvalTargetsRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ListSourceEvalTargetsResponse struct {
	EvalTargets   []*eval_target.EvalTarget `thrift:"eval_targets,1,optional" frugal:"1,optional,list<eval_target.EvalTarget>" form:"eval_targets" json:"eval_targets,omitempty" query:"eval_targets"`
	NextPageToken *string                   `thrift:"next_page_token,100,optional" frugal:"100,optional,string" form:"next_page_token" json:"next_page_token,omitempty" query:"next_page_token"`
	HasMore       *bool                     `thrift:"has_more,101,optional" frugal:"101,optional,bool" form:"has_more" json:"has_more,omitempty" query:"has_more"`
	BaseResp      *base.BaseResp            `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewListSourceEvalTargetsResponse() *ListSourceEvalTargetsResponse {
	return &ListSourceEvalTargetsResponse{}
}

func (p *ListSourceEvalTargetsResponse) InitDefault() {
}

var ListSourceEvalTargetsResponse_EvalTargets_DEFAULT []*eval_target.EvalTarget

func (p *ListSourceEvalTargetsResponse) GetEvalTargets() (v []*eval_target.EvalTarget) {
	if p == nil {
		return
	}
	if !p.IsSetEvalTargets() {
		return ListSourceEvalTargetsResponse_EvalTargets_DEFAULT
	}
	return p.EvalTargets
}

var ListSourceEvalTargetsResponse_NextPageToken_DEFAULT string

func (p *ListSourceEvalTargetsResponse) GetNextPageToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetNextPageToken() {
		return ListSourceEvalTargetsResponse_NextPageToken_DEFAULT
	}
	return *p.NextPageToken
}

var ListSourceEvalTargetsResponse_HasMore_DEFAULT bool

func (p *ListSourceEvalTargetsResponse) GetHasMore() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetHasMore() {
		return ListSourceEvalTargetsResponse_HasMore_DEFAULT
	}
	return *p.HasMore
}

var ListSourceEvalTargetsResponse_BaseResp_DEFAULT *base.BaseResp

func (p *ListSourceEvalTargetsResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return ListSourceEvalTargetsResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ListSourceEvalTargetsResponse) SetEvalTargets(val []*eval_target.EvalTarget) {
	p.EvalTargets = val
}
func (p *ListSourceEvalTargetsResponse) SetNextPageToken(val *string) {
	p.NextPageToken = val
}
func (p *ListSourceEvalTargetsResponse) SetHasMore(val *bool) {
	p.HasMore = val
}
func (p *ListSourceEvalTargetsResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_ListSourceEvalTargetsResponse = map[int16]string{
	1:   "eval_targets",
	100: "next_page_token",
	101: "has_more",
	255: "BaseResp",
}

func (p *ListSourceEvalTargetsResponse) IsSetEvalTargets() bool {
	return p.EvalTargets != nil
}

func (p *ListSourceEvalTargetsResponse) IsSetNextPageToken() bool {
	return p.NextPageToken != nil
}

func (p *ListSourceEvalTargetsResponse) IsSetHasMore() bool {
	return p.HasMore != nil
}

func (p *ListSourceEvalTargetsResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ListSourceEvalTargetsResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListSourceEvalTargetsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListSourceEvalTargetsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*eval_target.EvalTarget, 0, size)
	values := make([]eval_target.EvalTarget, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.EvalTargets = _field
	return nil
}
func (p *ListSourceEvalTargetsResponse) ReadField100(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NextPageToken = _field
	return nil
}
func (p *ListSourceEvalTargetsResponse) ReadField101(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.HasMore = _field
	return nil
}
func (p *ListSourceEvalTargetsResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *ListSourceEvalTargetsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListSourceEvalTargetsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListSourceEvalTargetsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvalTargets() {
		if err = oprot.WriteFieldBegin("eval_targets", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EvalTargets)); err != nil {
			return err
		}
		for _, v := range p.EvalTargets {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListSourceEvalTargetsResponse) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetNextPageToken() {
		if err = oprot.WriteFieldBegin("next_page_token", thrift.STRING, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.NextPageToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}
func (p *ListSourceEvalTargetsResponse) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetHasMore() {
		if err = oprot.WriteFieldBegin("has_more", thrift.BOOL, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.HasMore); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}
func (p *ListSourceEvalTargetsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListSourceEvalTargetsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListSourceEvalTargetsResponse(%+v)", *p)

}

func (p *ListSourceEvalTargetsResponse) DeepEqual(ano *ListSourceEvalTargetsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvalTargets) {
		return false
	}
	if !p.Field100DeepEqual(ano.NextPageToken) {
		return false
	}
	if !p.Field101DeepEqual(ano.HasMore) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *ListSourceEvalTargetsResponse) Field1DeepEqual(src []*eval_target.EvalTarget) bool {

	if len(p.EvalTargets) != len(src) {
		return false
	}
	for i, v := range p.EvalTargets {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListSourceEvalTargetsResponse) Field100DeepEqual(src *string) bool {

	if p.NextPageToken == src {
		return true
	} else if p.NextPageToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.NextPageToken, *src) != 0 {
		return false
	}
	return true
}
func (p *ListSourceEvalTargetsResponse) Field101DeepEqual(src *bool) bool {

	if p.HasMore == src {
		return true
	} else if p.HasMore == nil || src == nil {
		return false
	}
	if *p.HasMore != *src {
		return false
	}
	return true
}
func (p *ListSourceEvalTargetsResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type BatchGetSourceEvalTargetsRequest struct {
	WorkspaceID     int64                       `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" query:"workspace_id,required"`
	SourceTargetIds []string                    `thrift:"source_target_ids,2,optional" frugal:"2,optional,list<string>" form:"source_target_ids" json:"source_target_ids,omitempty" query:"source_target_ids"`
	TargetType      *eval_target.EvalTargetType `thrift:"target_type,3,optional" frugal:"3,optional,EvalTargetType" form:"target_type" json:"target_type,omitempty" query:"target_type"`
	Base            *base.Base                  `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewBatchGetSourceEvalTargetsRequest() *BatchGetSourceEvalTargetsRequest {
	return &BatchGetSourceEvalTargetsRequest{}
}

func (p *BatchGetSourceEvalTargetsRequest) InitDefault() {
}

func (p *BatchGetSourceEvalTargetsRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

var BatchGetSourceEvalTargetsRequest_SourceTargetIds_DEFAULT []string

func (p *BatchGetSourceEvalTargetsRequest) GetSourceTargetIds() (v []string) {
	if p == nil {
		return
	}
	if !p.IsSetSourceTargetIds() {
		return BatchGetSourceEvalTargetsRequest_SourceTargetIds_DEFAULT
	}
	return p.SourceTargetIds
}

var BatchGetSourceEvalTargetsRequest_TargetType_DEFAULT eval_target.EvalTargetType

func (p *BatchGetSourceEvalTargetsRequest) GetTargetType() (v eval_target.EvalTargetType) {
	if p == nil {
		return
	}
	if !p.IsSetTargetType() {
		return BatchGetSourceEvalTargetsRequest_TargetType_DEFAULT
	}
	return *p.TargetType
}

var BatchGetSourceEvalTargetsRequest_Base_DEFAULT *base.Base

func (p *BatchGetSourceEvalTargetsRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return BatchGetSourceEvalTargetsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *BatchGetSourceEvalTargetsRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *BatchGetSourceEvalTargetsRequest) SetSourceTargetIds(val []string) {
	p.SourceTargetIds = val
}
func (p *BatchGetSourceEvalTargetsRequest) SetTargetType(val *eval_target.EvalTargetType) {
	p.TargetType = val
}
func (p *BatchGetSourceEvalTargetsRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_BatchGetSourceEvalTargetsRequest = map[int16]string{
	1:   "workspace_id",
	2:   "source_target_ids",
	3:   "target_type",
	255: "Base",
}

func (p *BatchGetSourceEvalTargetsRequest) IsSetSourceTargetIds() bool {
	return p.SourceTargetIds != nil
}

func (p *BatchGetSourceEvalTargetsRequest) IsSetTargetType() bool {
	return p.TargetType != nil
}

func (p *BatchGetSourceEvalTargetsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *BatchGetSourceEvalTargetsRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchGetSourceEvalTargetsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_BatchGetSourceEvalTargetsRequest[fieldId]))
}

func (p *BatchGetSourceEvalTargetsRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *BatchGetSourceEvalTargetsRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.SourceTargetIds = _field
	return nil
}
func (p *BatchGetSourceEvalTargetsRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *eval_target.EvalTargetType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := eval_target.EvalTargetType(v)
		_field = &tmp
	}
	p.TargetType = _field
	return nil
}
func (p *BatchGetSourceEvalTargetsRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *BatchGetSourceEvalTargetsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetSourceEvalTargetsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchGetSourceEvalTargetsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchGetSourceEvalTargetsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSourceTargetIds() {
		if err = oprot.WriteFieldBegin("source_target_ids", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.SourceTargetIds)); err != nil {
			return err
		}
		for _, v := range p.SourceTargetIds {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BatchGetSourceEvalTargetsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTargetType() {
		if err = oprot.WriteFieldBegin("target_type", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.TargetType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *BatchGetSourceEvalTargetsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchGetSourceEvalTargetsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchGetSourceEvalTargetsRequest(%+v)", *p)

}

func (p *BatchGetSourceEvalTargetsRequest) DeepEqual(ano *BatchGetSourceEvalTargetsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.SourceTargetIds) {
		return false
	}
	if !p.Field3DeepEqual(ano.TargetType) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *BatchGetSourceEvalTargetsRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *BatchGetSourceEvalTargetsRequest) Field2DeepEqual(src []string) bool {

	if len(p.SourceTargetIds) != len(src) {
		return false
	}
	for i, v := range p.SourceTargetIds {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *BatchGetSourceEvalTargetsRequest) Field3DeepEqual(src *eval_target.EvalTargetType) bool {

	if p.TargetType == src {
		return true
	} else if p.TargetType == nil || src == nil {
		return false
	}
	if *p.TargetType != *src {
		return false
	}
	return true
}
func (p *BatchGetSourceEvalTargetsRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type BatchGetSourceEvalTargetsResponse struct {
	EvalTargets []*eval_target.EvalTarget `thrift:"eval_targets,1,optional" frugal:"1,optional,list<eval_target.EvalTarget>" form:"eval_targets" json:"eval_targets,omitempty" query:"eval_targets"`
	BaseResp    *base.BaseResp            `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewBatchGetSourceEvalTargetsResponse() *BatchGetSourceEvalTargetsResponse {
	return &BatchGetSourceEvalTargetsResponse{}
}

func (p *BatchGetSourceEvalTargetsResponse) InitDefault() {
}

var BatchGetSourceEvalTargetsResponse_EvalTargets_DEFAULT []*eval_target.EvalTarget

func (p *BatchGetSourceEvalTargetsResponse) GetEvalTargets() (v []*eval_target.EvalTarget) {
	if p == nil {
		return
	}
	if !p.IsSetEvalTargets() {
		return BatchGetSourceEvalTargetsResponse_EvalTargets_DEFAULT
	}
	return p.EvalTargets
}

var BatchGetSourceEvalTargetsResponse_BaseResp_DEFAULT *base.BaseResp

func (p *BatchGetSourceEvalTargetsResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return BatchGetSourceEvalTargetsResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *BatchGetSourceEvalTargetsResponse) SetEvalTargets(val []*eval_target.EvalTarget) {
	p.EvalTargets = val
}
func (p *BatchGetSourceEvalTargetsResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_BatchGetSourceEvalTargetsResponse = map[int16]string{
	1:   "eval_targets",
	255: "BaseResp",
}

func (p *BatchGetSourceEvalTargetsResponse) IsSetEvalTargets() bool {
	return p.EvalTargets != nil
}

func (p *BatchGetSourceEvalTargetsResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *BatchGetSourceEvalTargetsResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchGetSourceEvalTargetsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchGetSourceEvalTargetsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*eval_target.EvalTarget, 0, size)
	values := make([]eval_target.EvalTarget, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.EvalTargets = _field
	return nil
}
func (p *BatchGetSourceEvalTargetsResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *BatchGetSourceEvalTargetsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetSourceEvalTargetsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchGetSourceEvalTargetsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvalTargets() {
		if err = oprot.WriteFieldBegin("eval_targets", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EvalTargets)); err != nil {
			return err
		}
		for _, v := range p.EvalTargets {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchGetSourceEvalTargetsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchGetSourceEvalTargetsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchGetSourceEvalTargetsResponse(%+v)", *p)

}

func (p *BatchGetSourceEvalTargetsResponse) DeepEqual(ano *BatchGetSourceEvalTargetsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvalTargets) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *BatchGetSourceEvalTargetsResponse) Field1DeepEqual(src []*eval_target.EvalTarget) bool {

	if len(p.EvalTargets) != len(src) {
		return false
	}
	for i, v := range p.EvalTargets {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *BatchGetSourceEvalTargetsResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type ListSourceEvalTargetVersionsRequest struct {
	WorkspaceID    int64                       `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" query:"workspace_id,required"`
	SourceTargetID string                      `thrift:"source_target_id,2,required" frugal:"2,required,string" form:"source_target_id,required" json:"source_target_id,required" query:"source_target_id,required"`
	TargetType     *eval_target.EvalTargetType `thrift:"target_type,3,optional" frugal:"3,optional,EvalTargetType" form:"target_type" json:"target_type,omitempty" query:"target_type"`
	PageSize       *int32                      `thrift:"page_size,100,optional" frugal:"100,optional,i32" form:"page_size" json:"page_size,omitempty" query:"page_size"`
	PageToken      *string                     `thrift:"page_token,101,optional" frugal:"101,optional,string" form:"page_token" json:"page_token,omitempty" query:"page_token"`
	Base           *base.Base                  `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewListSourceEvalTargetVersionsRequest() *ListSourceEvalTargetVersionsRequest {
	return &ListSourceEvalTargetVersionsRequest{}
}

func (p *ListSourceEvalTargetVersionsRequest) InitDefault() {
}

func (p *ListSourceEvalTargetVersionsRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *ListSourceEvalTargetVersionsRequest) GetSourceTargetID() (v string) {
	if p != nil {
		return p.SourceTargetID
	}
	return
}

var ListSourceEvalTargetVersionsRequest_TargetType_DEFAULT eval_target.EvalTargetType

func (p *ListSourceEvalTargetVersionsRequest) GetTargetType() (v eval_target.EvalTargetType) {
	if p == nil {
		return
	}
	if !p.IsSetTargetType() {
		return ListSourceEvalTargetVersionsRequest_TargetType_DEFAULT
	}
	return *p.TargetType
}

var ListSourceEvalTargetVersionsRequest_PageSize_DEFAULT int32

func (p *ListSourceEvalTargetVersionsRequest) GetPageSize() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageSize() {
		return ListSourceEvalTargetVersionsRequest_PageSize_DEFAULT
	}
	return *p.PageSize
}

var ListSourceEvalTargetVersionsRequest_PageToken_DEFAULT string

func (p *ListSourceEvalTargetVersionsRequest) GetPageToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetPageToken() {
		return ListSourceEvalTargetVersionsRequest_PageToken_DEFAULT
	}
	return *p.PageToken
}

var ListSourceEvalTargetVersionsRequest_Base_DEFAULT *base.Base

func (p *ListSourceEvalTargetVersionsRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return ListSourceEvalTargetVersionsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ListSourceEvalTargetVersionsRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *ListSourceEvalTargetVersionsRequest) SetSourceTargetID(val string) {
	p.SourceTargetID = val
}
func (p *ListSourceEvalTargetVersionsRequest) SetTargetType(val *eval_target.EvalTargetType) {
	p.TargetType = val
}
func (p *ListSourceEvalTargetVersionsRequest) SetPageSize(val *int32) {
	p.PageSize = val
}
func (p *ListSourceEvalTargetVersionsRequest) SetPageToken(val *string) {
	p.PageToken = val
}
func (p *ListSourceEvalTargetVersionsRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListSourceEvalTargetVersionsRequest = map[int16]string{
	1:   "workspace_id",
	2:   "source_target_id",
	3:   "target_type",
	100: "page_size",
	101: "page_token",
	255: "Base",
}

func (p *ListSourceEvalTargetVersionsRequest) IsSetTargetType() bool {
	return p.TargetType != nil
}

func (p *ListSourceEvalTargetVersionsRequest) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *ListSourceEvalTargetVersionsRequest) IsSetPageToken() bool {
	return p.PageToken != nil
}

func (p *ListSourceEvalTargetVersionsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListSourceEvalTargetVersionsRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetSourceTargetID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetSourceTargetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetSourceTargetID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListSourceEvalTargetVersionsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ListSourceEvalTargetVersionsRequest[fieldId]))
}

func (p *ListSourceEvalTargetVersionsRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *ListSourceEvalTargetVersionsRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SourceTargetID = _field
	return nil
}
func (p *ListSourceEvalTargetVersionsRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *eval_target.EvalTargetType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := eval_target.EvalTargetType(v)
		_field = &tmp
	}
	p.TargetType = _field
	return nil
}
func (p *ListSourceEvalTargetVersionsRequest) ReadField100(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageSize = _field
	return nil
}
func (p *ListSourceEvalTargetVersionsRequest) ReadField101(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageToken = _field
	return nil
}
func (p *ListSourceEvalTargetVersionsRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *ListSourceEvalTargetVersionsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListSourceEvalTargetVersionsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListSourceEvalTargetVersionsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListSourceEvalTargetVersionsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("source_target_id", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.SourceTargetID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ListSourceEvalTargetVersionsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTargetType() {
		if err = oprot.WriteFieldBegin("target_type", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.TargetType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ListSourceEvalTargetVersionsRequest) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("page_size", thrift.I32, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}
func (p *ListSourceEvalTargetVersionsRequest) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageToken() {
		if err = oprot.WriteFieldBegin("page_token", thrift.STRING, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PageToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}
func (p *ListSourceEvalTargetVersionsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListSourceEvalTargetVersionsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListSourceEvalTargetVersionsRequest(%+v)", *p)

}

func (p *ListSourceEvalTargetVersionsRequest) DeepEqual(ano *ListSourceEvalTargetVersionsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.SourceTargetID) {
		return false
	}
	if !p.Field3DeepEqual(ano.TargetType) {
		return false
	}
	if !p.Field100DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field101DeepEqual(ano.PageToken) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListSourceEvalTargetVersionsRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *ListSourceEvalTargetVersionsRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.SourceTargetID, src) != 0 {
		return false
	}
	return true
}
func (p *ListSourceEvalTargetVersionsRequest) Field3DeepEqual(src *eval_target.EvalTargetType) bool {

	if p.TargetType == src {
		return true
	} else if p.TargetType == nil || src == nil {
		return false
	}
	if *p.TargetType != *src {
		return false
	}
	return true
}
func (p *ListSourceEvalTargetVersionsRequest) Field100DeepEqual(src *int32) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}
func (p *ListSourceEvalTargetVersionsRequest) Field101DeepEqual(src *string) bool {

	if p.PageToken == src {
		return true
	} else if p.PageToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PageToken, *src) != 0 {
		return false
	}
	return true
}
func (p *ListSourceEvalTargetVersionsRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ListSourceEvalTargetVersionsResponse struct {
	Versions      []*eval_target.EvalTargetVersion `thrift:"versions,1,optional" frugal:"1,optional,list<eval_target.EvalTargetVersion>" form:"versions" json:"versions,omitempty" query:"versions"`
	NextPageToken *string                          `thrift:"next_page_token,100,optional" frugal:"100,optional,string" form:"next_page_token" json:"next_page_token,omitempty" query:"next_page_token"`
	HasMore       *bool                            `thrift:"has_more,101,optional" frugal:"101,optional,bool" form:"has_more" json:"has_more,omitempty" query:"has_more"`
	BaseResp      *base.BaseResp                   `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewListSourceEvalTargetVersionsResponse() *ListSourceEvalTargetVersionsResponse {
	return &ListSourceEvalTargetVersionsResponse{}
}

func (p *ListSourceEvalTargetVersionsResponse) InitDefault() {
}

var ListSourceEvalTargetVersionsResponse_Versions_DEFAULT []*eval_target.EvalTargetVersion

func (p *ListSourceEvalTargetVersionsResponse) GetVersions() (v []*eval_target.EvalTargetVersion) {
	if p == nil {
		return
	}
	if !p.IsSetVersions() {
		return ListSourceEvalTargetVersionsResponse_Versions_DEFAULT
	}
	return p.Versions
}

var ListSourceEvalTargetVersionsResponse_NextPageToken_DEFAULT string

func (p *ListSourceEvalTargetVersionsResponse) GetNextPageToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetNextPageToken() {
		return ListSourceEvalTargetVersionsResponse_NextPageToken_DEFAULT
	}
	return *p.NextPageToken
}

var ListSourceEvalTargetVersionsResponse_HasMore_DEFAULT bool

func (p *ListSourceEvalTargetVersionsResponse) GetHasMore() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetHasMore() {
		return ListSourceEvalTargetVersionsResponse_HasMore_DEFAULT
	}
	return *p.HasMore
}

var ListSourceEvalTargetVersionsResponse_BaseResp_DEFAULT *base.BaseResp

func (p *ListSourceEvalTargetVersionsResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return ListSourceEvalTargetVersionsResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ListSourceEvalTargetVersionsResponse) SetVersions(val []*eval_target.EvalTargetVersion) {
	p.Versions = val
}
func (p *ListSourceEvalTargetVersionsResponse) SetNextPageToken(val *string) {
	p.NextPageToken = val
}
func (p *ListSourceEvalTargetVersionsResponse) SetHasMore(val *bool) {
	p.HasMore = val
}
func (p *ListSourceEvalTargetVersionsResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_ListSourceEvalTargetVersionsResponse = map[int16]string{
	1:   "versions",
	100: "next_page_token",
	101: "has_more",
	255: "BaseResp",
}

func (p *ListSourceEvalTargetVersionsResponse) IsSetVersions() bool {
	return p.Versions != nil
}

func (p *ListSourceEvalTargetVersionsResponse) IsSetNextPageToken() bool {
	return p.NextPageToken != nil
}

func (p *ListSourceEvalTargetVersionsResponse) IsSetHasMore() bool {
	return p.HasMore != nil
}

func (p *ListSourceEvalTargetVersionsResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ListSourceEvalTargetVersionsResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListSourceEvalTargetVersionsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListSourceEvalTargetVersionsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*eval_target.EvalTargetVersion, 0, size)
	values := make([]eval_target.EvalTargetVersion, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Versions = _field
	return nil
}
func (p *ListSourceEvalTargetVersionsResponse) ReadField100(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NextPageToken = _field
	return nil
}
func (p *ListSourceEvalTargetVersionsResponse) ReadField101(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.HasMore = _field
	return nil
}
func (p *ListSourceEvalTargetVersionsResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *ListSourceEvalTargetVersionsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListSourceEvalTargetVersionsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListSourceEvalTargetVersionsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersions() {
		if err = oprot.WriteFieldBegin("versions", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Versions)); err != nil {
			return err
		}
		for _, v := range p.Versions {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListSourceEvalTargetVersionsResponse) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetNextPageToken() {
		if err = oprot.WriteFieldBegin("next_page_token", thrift.STRING, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.NextPageToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}
func (p *ListSourceEvalTargetVersionsResponse) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetHasMore() {
		if err = oprot.WriteFieldBegin("has_more", thrift.BOOL, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.HasMore); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}
func (p *ListSourceEvalTargetVersionsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListSourceEvalTargetVersionsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListSourceEvalTargetVersionsResponse(%+v)", *p)

}

func (p *ListSourceEvalTargetVersionsResponse) DeepEqual(ano *ListSourceEvalTargetVersionsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Versions) {
		return false
	}
	if !p.Field100DeepEqual(ano.NextPageToken) {
		return false
	}
	if !p.Field101DeepEqual(ano.HasMore) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *ListSourceEvalTargetVersionsResponse) Field1DeepEqual(src []*eval_target.EvalTargetVersion) bool {

	if len(p.Versions) != len(src) {
		return false
	}
	for i, v := range p.Versions {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListSourceEvalTargetVersionsResponse) Field100DeepEqual(src *string) bool {

	if p.NextPageToken == src {
		return true
	} else if p.NextPageToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.NextPageToken, *src) != 0 {
		return false
	}
	return true
}
func (p *ListSourceEvalTargetVersionsResponse) Field101DeepEqual(src *bool) bool {

	if p.HasMore == src {
		return true
	} else if p.HasMore == nil || src == nil {
		return false
	}
	if *p.HasMore != *src {
		return false
	}
	return true
}
func (p *ListSourceEvalTargetVersionsResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type EvalTargetService interface {
	// 创建评测对象
	CreateEvalTarget(ctx context.Context, request *CreateEvalTargetRequest) (r *CreateEvalTargetResponse, err error)
	// 根据source target获取评测对象信息
	BatchGetEvalTargetsBySource(ctx context.Context, request *BatchGetEvalTargetsBySourceRequest) (r *BatchGetEvalTargetsBySourceResponse, err error)
	// 获取评测对象+版本
	GetEvalTargetVersion(ctx context.Context, request *GetEvalTargetVersionRequest) (r *GetEvalTargetVersionResponse, err error)
	// 批量获取+版本
	BatchGetEvalTargetVersions(ctx context.Context, request *BatchGetEvalTargetVersionsRequest) (r *BatchGetEvalTargetVersionsResponse, err error)
	// Source评测对象列表
	ListSourceEvalTargets(ctx context.Context, request *ListSourceEvalTargetsRequest) (r *ListSourceEvalTargetsResponse, err error)
	// Source评测对象版本列表
	ListSourceEvalTargetVersions(ctx context.Context, request *ListSourceEvalTargetVersionsRequest) (r *ListSourceEvalTargetVersionsResponse, err error)

	BatchGetSourceEvalTargets(ctx context.Context, request *BatchGetSourceEvalTargetsRequest) (r *BatchGetSourceEvalTargetsResponse, err error)
	// 执行
	ExecuteEvalTarget(ctx context.Context, request *ExecuteEvalTargetRequest) (r *ExecuteEvalTargetResponse, err error)

	GetEvalTargetRecord(ctx context.Context, request *GetEvalTargetRecordRequest) (r *GetEvalTargetRecordResponse, err error)

	BatchGetEvalTargetRecords(ctx context.Context, request *BatchGetEvalTargetRecordsRequest) (r *BatchGetEvalTargetRecordsResponse, err error)
}

type EvalTargetServiceClient struct {
	c thrift.TClient
}

func NewEvalTargetServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *EvalTargetServiceClient {
	return &EvalTargetServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewEvalTargetServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *EvalTargetServiceClient {
	return &EvalTargetServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewEvalTargetServiceClient(c thrift.TClient) *EvalTargetServiceClient {
	return &EvalTargetServiceClient{
		c: c,
	}
}

func (p *EvalTargetServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *EvalTargetServiceClient) CreateEvalTarget(ctx context.Context, request *CreateEvalTargetRequest) (r *CreateEvalTargetResponse, err error) {
	var _args EvalTargetServiceCreateEvalTargetArgs
	_args.Request = request
	var _result EvalTargetServiceCreateEvalTargetResult
	if err = p.Client_().Call(ctx, "CreateEvalTarget", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvalTargetServiceClient) BatchGetEvalTargetsBySource(ctx context.Context, request *BatchGetEvalTargetsBySourceRequest) (r *BatchGetEvalTargetsBySourceResponse, err error) {
	var _args EvalTargetServiceBatchGetEvalTargetsBySourceArgs
	_args.Request = request
	var _result EvalTargetServiceBatchGetEvalTargetsBySourceResult
	if err = p.Client_().Call(ctx, "BatchGetEvalTargetsBySource", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvalTargetServiceClient) GetEvalTargetVersion(ctx context.Context, request *GetEvalTargetVersionRequest) (r *GetEvalTargetVersionResponse, err error) {
	var _args EvalTargetServiceGetEvalTargetVersionArgs
	_args.Request = request
	var _result EvalTargetServiceGetEvalTargetVersionResult
	if err = p.Client_().Call(ctx, "GetEvalTargetVersion", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvalTargetServiceClient) BatchGetEvalTargetVersions(ctx context.Context, request *BatchGetEvalTargetVersionsRequest) (r *BatchGetEvalTargetVersionsResponse, err error) {
	var _args EvalTargetServiceBatchGetEvalTargetVersionsArgs
	_args.Request = request
	var _result EvalTargetServiceBatchGetEvalTargetVersionsResult
	if err = p.Client_().Call(ctx, "BatchGetEvalTargetVersions", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvalTargetServiceClient) ListSourceEvalTargets(ctx context.Context, request *ListSourceEvalTargetsRequest) (r *ListSourceEvalTargetsResponse, err error) {
	var _args EvalTargetServiceListSourceEvalTargetsArgs
	_args.Request = request
	var _result EvalTargetServiceListSourceEvalTargetsResult
	if err = p.Client_().Call(ctx, "ListSourceEvalTargets", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvalTargetServiceClient) ListSourceEvalTargetVersions(ctx context.Context, request *ListSourceEvalTargetVersionsRequest) (r *ListSourceEvalTargetVersionsResponse, err error) {
	var _args EvalTargetServiceListSourceEvalTargetVersionsArgs
	_args.Request = request
	var _result EvalTargetServiceListSourceEvalTargetVersionsResult
	if err = p.Client_().Call(ctx, "ListSourceEvalTargetVersions", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvalTargetServiceClient) BatchGetSourceEvalTargets(ctx context.Context, request *BatchGetSourceEvalTargetsRequest) (r *BatchGetSourceEvalTargetsResponse, err error) {
	var _args EvalTargetServiceBatchGetSourceEvalTargetsArgs
	_args.Request = request
	var _result EvalTargetServiceBatchGetSourceEvalTargetsResult
	if err = p.Client_().Call(ctx, "BatchGetSourceEvalTargets", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvalTargetServiceClient) ExecuteEvalTarget(ctx context.Context, request *ExecuteEvalTargetRequest) (r *ExecuteEvalTargetResponse, err error) {
	var _args EvalTargetServiceExecuteEvalTargetArgs
	_args.Request = request
	var _result EvalTargetServiceExecuteEvalTargetResult
	if err = p.Client_().Call(ctx, "ExecuteEvalTarget", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvalTargetServiceClient) GetEvalTargetRecord(ctx context.Context, request *GetEvalTargetRecordRequest) (r *GetEvalTargetRecordResponse, err error) {
	var _args EvalTargetServiceGetEvalTargetRecordArgs
	_args.Request = request
	var _result EvalTargetServiceGetEvalTargetRecordResult
	if err = p.Client_().Call(ctx, "GetEvalTargetRecord", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EvalTargetServiceClient) BatchGetEvalTargetRecords(ctx context.Context, request *BatchGetEvalTargetRecordsRequest) (r *BatchGetEvalTargetRecordsResponse, err error) {
	var _args EvalTargetServiceBatchGetEvalTargetRecordsArgs
	_args.Request = request
	var _result EvalTargetServiceBatchGetEvalTargetRecordsResult
	if err = p.Client_().Call(ctx, "BatchGetEvalTargetRecords", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type EvalTargetServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      EvalTargetService
}

func (p *EvalTargetServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *EvalTargetServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *EvalTargetServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewEvalTargetServiceProcessor(handler EvalTargetService) *EvalTargetServiceProcessor {
	self := &EvalTargetServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("CreateEvalTarget", &evalTargetServiceProcessorCreateEvalTarget{handler: handler})
	self.AddToProcessorMap("BatchGetEvalTargetsBySource", &evalTargetServiceProcessorBatchGetEvalTargetsBySource{handler: handler})
	self.AddToProcessorMap("GetEvalTargetVersion", &evalTargetServiceProcessorGetEvalTargetVersion{handler: handler})
	self.AddToProcessorMap("BatchGetEvalTargetVersions", &evalTargetServiceProcessorBatchGetEvalTargetVersions{handler: handler})
	self.AddToProcessorMap("ListSourceEvalTargets", &evalTargetServiceProcessorListSourceEvalTargets{handler: handler})
	self.AddToProcessorMap("ListSourceEvalTargetVersions", &evalTargetServiceProcessorListSourceEvalTargetVersions{handler: handler})
	self.AddToProcessorMap("BatchGetSourceEvalTargets", &evalTargetServiceProcessorBatchGetSourceEvalTargets{handler: handler})
	self.AddToProcessorMap("ExecuteEvalTarget", &evalTargetServiceProcessorExecuteEvalTarget{handler: handler})
	self.AddToProcessorMap("GetEvalTargetRecord", &evalTargetServiceProcessorGetEvalTargetRecord{handler: handler})
	self.AddToProcessorMap("BatchGetEvalTargetRecords", &evalTargetServiceProcessorBatchGetEvalTargetRecords{handler: handler})
	return self
}
func (p *EvalTargetServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type evalTargetServiceProcessorCreateEvalTarget struct {
	handler EvalTargetService
}

func (p *evalTargetServiceProcessorCreateEvalTarget) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvalTargetServiceCreateEvalTargetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateEvalTarget", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvalTargetServiceCreateEvalTargetResult{}
	var retval *CreateEvalTargetResponse
	if retval, err2 = p.handler.CreateEvalTarget(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateEvalTarget: "+err2.Error())
		oprot.WriteMessageBegin("CreateEvalTarget", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateEvalTarget", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evalTargetServiceProcessorBatchGetEvalTargetsBySource struct {
	handler EvalTargetService
}

func (p *evalTargetServiceProcessorBatchGetEvalTargetsBySource) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvalTargetServiceBatchGetEvalTargetsBySourceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BatchGetEvalTargetsBySource", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvalTargetServiceBatchGetEvalTargetsBySourceResult{}
	var retval *BatchGetEvalTargetsBySourceResponse
	if retval, err2 = p.handler.BatchGetEvalTargetsBySource(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BatchGetEvalTargetsBySource: "+err2.Error())
		oprot.WriteMessageBegin("BatchGetEvalTargetsBySource", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BatchGetEvalTargetsBySource", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evalTargetServiceProcessorGetEvalTargetVersion struct {
	handler EvalTargetService
}

func (p *evalTargetServiceProcessorGetEvalTargetVersion) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvalTargetServiceGetEvalTargetVersionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetEvalTargetVersion", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvalTargetServiceGetEvalTargetVersionResult{}
	var retval *GetEvalTargetVersionResponse
	if retval, err2 = p.handler.GetEvalTargetVersion(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetEvalTargetVersion: "+err2.Error())
		oprot.WriteMessageBegin("GetEvalTargetVersion", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetEvalTargetVersion", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evalTargetServiceProcessorBatchGetEvalTargetVersions struct {
	handler EvalTargetService
}

func (p *evalTargetServiceProcessorBatchGetEvalTargetVersions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvalTargetServiceBatchGetEvalTargetVersionsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BatchGetEvalTargetVersions", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvalTargetServiceBatchGetEvalTargetVersionsResult{}
	var retval *BatchGetEvalTargetVersionsResponse
	if retval, err2 = p.handler.BatchGetEvalTargetVersions(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BatchGetEvalTargetVersions: "+err2.Error())
		oprot.WriteMessageBegin("BatchGetEvalTargetVersions", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BatchGetEvalTargetVersions", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evalTargetServiceProcessorListSourceEvalTargets struct {
	handler EvalTargetService
}

func (p *evalTargetServiceProcessorListSourceEvalTargets) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvalTargetServiceListSourceEvalTargetsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListSourceEvalTargets", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvalTargetServiceListSourceEvalTargetsResult{}
	var retval *ListSourceEvalTargetsResponse
	if retval, err2 = p.handler.ListSourceEvalTargets(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListSourceEvalTargets: "+err2.Error())
		oprot.WriteMessageBegin("ListSourceEvalTargets", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListSourceEvalTargets", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evalTargetServiceProcessorListSourceEvalTargetVersions struct {
	handler EvalTargetService
}

func (p *evalTargetServiceProcessorListSourceEvalTargetVersions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvalTargetServiceListSourceEvalTargetVersionsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListSourceEvalTargetVersions", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvalTargetServiceListSourceEvalTargetVersionsResult{}
	var retval *ListSourceEvalTargetVersionsResponse
	if retval, err2 = p.handler.ListSourceEvalTargetVersions(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListSourceEvalTargetVersions: "+err2.Error())
		oprot.WriteMessageBegin("ListSourceEvalTargetVersions", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListSourceEvalTargetVersions", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evalTargetServiceProcessorBatchGetSourceEvalTargets struct {
	handler EvalTargetService
}

func (p *evalTargetServiceProcessorBatchGetSourceEvalTargets) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvalTargetServiceBatchGetSourceEvalTargetsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BatchGetSourceEvalTargets", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvalTargetServiceBatchGetSourceEvalTargetsResult{}
	var retval *BatchGetSourceEvalTargetsResponse
	if retval, err2 = p.handler.BatchGetSourceEvalTargets(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BatchGetSourceEvalTargets: "+err2.Error())
		oprot.WriteMessageBegin("BatchGetSourceEvalTargets", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BatchGetSourceEvalTargets", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evalTargetServiceProcessorExecuteEvalTarget struct {
	handler EvalTargetService
}

func (p *evalTargetServiceProcessorExecuteEvalTarget) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvalTargetServiceExecuteEvalTargetArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ExecuteEvalTarget", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvalTargetServiceExecuteEvalTargetResult{}
	var retval *ExecuteEvalTargetResponse
	if retval, err2 = p.handler.ExecuteEvalTarget(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ExecuteEvalTarget: "+err2.Error())
		oprot.WriteMessageBegin("ExecuteEvalTarget", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ExecuteEvalTarget", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evalTargetServiceProcessorGetEvalTargetRecord struct {
	handler EvalTargetService
}

func (p *evalTargetServiceProcessorGetEvalTargetRecord) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvalTargetServiceGetEvalTargetRecordArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetEvalTargetRecord", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvalTargetServiceGetEvalTargetRecordResult{}
	var retval *GetEvalTargetRecordResponse
	if retval, err2 = p.handler.GetEvalTargetRecord(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetEvalTargetRecord: "+err2.Error())
		oprot.WriteMessageBegin("GetEvalTargetRecord", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetEvalTargetRecord", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type evalTargetServiceProcessorBatchGetEvalTargetRecords struct {
	handler EvalTargetService
}

func (p *evalTargetServiceProcessorBatchGetEvalTargetRecords) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EvalTargetServiceBatchGetEvalTargetRecordsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BatchGetEvalTargetRecords", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EvalTargetServiceBatchGetEvalTargetRecordsResult{}
	var retval *BatchGetEvalTargetRecordsResponse
	if retval, err2 = p.handler.BatchGetEvalTargetRecords(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BatchGetEvalTargetRecords: "+err2.Error())
		oprot.WriteMessageBegin("BatchGetEvalTargetRecords", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BatchGetEvalTargetRecords", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type EvalTargetServiceCreateEvalTargetArgs struct {
	Request *CreateEvalTargetRequest `thrift:"request,1" frugal:"1,default,CreateEvalTargetRequest"`
}

func NewEvalTargetServiceCreateEvalTargetArgs() *EvalTargetServiceCreateEvalTargetArgs {
	return &EvalTargetServiceCreateEvalTargetArgs{}
}

func (p *EvalTargetServiceCreateEvalTargetArgs) InitDefault() {
}

var EvalTargetServiceCreateEvalTargetArgs_Request_DEFAULT *CreateEvalTargetRequest

func (p *EvalTargetServiceCreateEvalTargetArgs) GetRequest() (v *CreateEvalTargetRequest) {
	if p == nil {
		return
	}
	if !p.IsSetRequest() {
		return EvalTargetServiceCreateEvalTargetArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *EvalTargetServiceCreateEvalTargetArgs) SetRequest(val *CreateEvalTargetRequest) {
	p.Request = val
}

var fieldIDToName_EvalTargetServiceCreateEvalTargetArgs = map[int16]string{
	1: "request",
}

func (p *EvalTargetServiceCreateEvalTargetArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *EvalTargetServiceCreateEvalTargetArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvalTargetServiceCreateEvalTargetArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvalTargetServiceCreateEvalTargetArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateEvalTargetRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *EvalTargetServiceCreateEvalTargetArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvalTarget_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvalTargetServiceCreateEvalTargetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvalTargetServiceCreateEvalTargetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvalTargetServiceCreateEvalTargetArgs(%+v)", *p)

}

func (p *EvalTargetServiceCreateEvalTargetArgs) DeepEqual(ano *EvalTargetServiceCreateEvalTargetArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *EvalTargetServiceCreateEvalTargetArgs) Field1DeepEqual(src *CreateEvalTargetRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type EvalTargetServiceCreateEvalTargetResult struct {
	Success *CreateEvalTargetResponse `thrift:"success,0,optional" frugal:"0,optional,CreateEvalTargetResponse"`
}

func NewEvalTargetServiceCreateEvalTargetResult() *EvalTargetServiceCreateEvalTargetResult {
	return &EvalTargetServiceCreateEvalTargetResult{}
}

func (p *EvalTargetServiceCreateEvalTargetResult) InitDefault() {
}

var EvalTargetServiceCreateEvalTargetResult_Success_DEFAULT *CreateEvalTargetResponse

func (p *EvalTargetServiceCreateEvalTargetResult) GetSuccess() (v *CreateEvalTargetResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvalTargetServiceCreateEvalTargetResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvalTargetServiceCreateEvalTargetResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateEvalTargetResponse)
}

var fieldIDToName_EvalTargetServiceCreateEvalTargetResult = map[int16]string{
	0: "success",
}

func (p *EvalTargetServiceCreateEvalTargetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvalTargetServiceCreateEvalTargetResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvalTargetServiceCreateEvalTargetResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvalTargetServiceCreateEvalTargetResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreateEvalTargetResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvalTargetServiceCreateEvalTargetResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateEvalTarget_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvalTargetServiceCreateEvalTargetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvalTargetServiceCreateEvalTargetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvalTargetServiceCreateEvalTargetResult(%+v)", *p)

}

func (p *EvalTargetServiceCreateEvalTargetResult) DeepEqual(ano *EvalTargetServiceCreateEvalTargetResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvalTargetServiceCreateEvalTargetResult) Field0DeepEqual(src *CreateEvalTargetResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvalTargetServiceBatchGetEvalTargetsBySourceArgs struct {
	Request *BatchGetEvalTargetsBySourceRequest `thrift:"request,1" frugal:"1,default,BatchGetEvalTargetsBySourceRequest"`
}

func NewEvalTargetServiceBatchGetEvalTargetsBySourceArgs() *EvalTargetServiceBatchGetEvalTargetsBySourceArgs {
	return &EvalTargetServiceBatchGetEvalTargetsBySourceArgs{}
}

func (p *EvalTargetServiceBatchGetEvalTargetsBySourceArgs) InitDefault() {
}

var EvalTargetServiceBatchGetEvalTargetsBySourceArgs_Request_DEFAULT *BatchGetEvalTargetsBySourceRequest

func (p *EvalTargetServiceBatchGetEvalTargetsBySourceArgs) GetRequest() (v *BatchGetEvalTargetsBySourceRequest) {
	if p == nil {
		return
	}
	if !p.IsSetRequest() {
		return EvalTargetServiceBatchGetEvalTargetsBySourceArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *EvalTargetServiceBatchGetEvalTargetsBySourceArgs) SetRequest(val *BatchGetEvalTargetsBySourceRequest) {
	p.Request = val
}

var fieldIDToName_EvalTargetServiceBatchGetEvalTargetsBySourceArgs = map[int16]string{
	1: "request",
}

func (p *EvalTargetServiceBatchGetEvalTargetsBySourceArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *EvalTargetServiceBatchGetEvalTargetsBySourceArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvalTargetServiceBatchGetEvalTargetsBySourceArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvalTargetServiceBatchGetEvalTargetsBySourceArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewBatchGetEvalTargetsBySourceRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *EvalTargetServiceBatchGetEvalTargetsBySourceArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetEvalTargetsBySource_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvalTargetServiceBatchGetEvalTargetsBySourceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvalTargetServiceBatchGetEvalTargetsBySourceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvalTargetServiceBatchGetEvalTargetsBySourceArgs(%+v)", *p)

}

func (p *EvalTargetServiceBatchGetEvalTargetsBySourceArgs) DeepEqual(ano *EvalTargetServiceBatchGetEvalTargetsBySourceArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *EvalTargetServiceBatchGetEvalTargetsBySourceArgs) Field1DeepEqual(src *BatchGetEvalTargetsBySourceRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type EvalTargetServiceBatchGetEvalTargetsBySourceResult struct {
	Success *BatchGetEvalTargetsBySourceResponse `thrift:"success,0,optional" frugal:"0,optional,BatchGetEvalTargetsBySourceResponse"`
}

func NewEvalTargetServiceBatchGetEvalTargetsBySourceResult() *EvalTargetServiceBatchGetEvalTargetsBySourceResult {
	return &EvalTargetServiceBatchGetEvalTargetsBySourceResult{}
}

func (p *EvalTargetServiceBatchGetEvalTargetsBySourceResult) InitDefault() {
}

var EvalTargetServiceBatchGetEvalTargetsBySourceResult_Success_DEFAULT *BatchGetEvalTargetsBySourceResponse

func (p *EvalTargetServiceBatchGetEvalTargetsBySourceResult) GetSuccess() (v *BatchGetEvalTargetsBySourceResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvalTargetServiceBatchGetEvalTargetsBySourceResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvalTargetServiceBatchGetEvalTargetsBySourceResult) SetSuccess(x interface{}) {
	p.Success = x.(*BatchGetEvalTargetsBySourceResponse)
}

var fieldIDToName_EvalTargetServiceBatchGetEvalTargetsBySourceResult = map[int16]string{
	0: "success",
}

func (p *EvalTargetServiceBatchGetEvalTargetsBySourceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvalTargetServiceBatchGetEvalTargetsBySourceResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvalTargetServiceBatchGetEvalTargetsBySourceResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvalTargetServiceBatchGetEvalTargetsBySourceResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewBatchGetEvalTargetsBySourceResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvalTargetServiceBatchGetEvalTargetsBySourceResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetEvalTargetsBySource_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvalTargetServiceBatchGetEvalTargetsBySourceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvalTargetServiceBatchGetEvalTargetsBySourceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvalTargetServiceBatchGetEvalTargetsBySourceResult(%+v)", *p)

}

func (p *EvalTargetServiceBatchGetEvalTargetsBySourceResult) DeepEqual(ano *EvalTargetServiceBatchGetEvalTargetsBySourceResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvalTargetServiceBatchGetEvalTargetsBySourceResult) Field0DeepEqual(src *BatchGetEvalTargetsBySourceResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvalTargetServiceGetEvalTargetVersionArgs struct {
	Request *GetEvalTargetVersionRequest `thrift:"request,1" frugal:"1,default,GetEvalTargetVersionRequest"`
}

func NewEvalTargetServiceGetEvalTargetVersionArgs() *EvalTargetServiceGetEvalTargetVersionArgs {
	return &EvalTargetServiceGetEvalTargetVersionArgs{}
}

func (p *EvalTargetServiceGetEvalTargetVersionArgs) InitDefault() {
}

var EvalTargetServiceGetEvalTargetVersionArgs_Request_DEFAULT *GetEvalTargetVersionRequest

func (p *EvalTargetServiceGetEvalTargetVersionArgs) GetRequest() (v *GetEvalTargetVersionRequest) {
	if p == nil {
		return
	}
	if !p.IsSetRequest() {
		return EvalTargetServiceGetEvalTargetVersionArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *EvalTargetServiceGetEvalTargetVersionArgs) SetRequest(val *GetEvalTargetVersionRequest) {
	p.Request = val
}

var fieldIDToName_EvalTargetServiceGetEvalTargetVersionArgs = map[int16]string{
	1: "request",
}

func (p *EvalTargetServiceGetEvalTargetVersionArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *EvalTargetServiceGetEvalTargetVersionArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvalTargetServiceGetEvalTargetVersionArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvalTargetServiceGetEvalTargetVersionArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetEvalTargetVersionRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *EvalTargetServiceGetEvalTargetVersionArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvalTargetVersion_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvalTargetServiceGetEvalTargetVersionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvalTargetServiceGetEvalTargetVersionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvalTargetServiceGetEvalTargetVersionArgs(%+v)", *p)

}

func (p *EvalTargetServiceGetEvalTargetVersionArgs) DeepEqual(ano *EvalTargetServiceGetEvalTargetVersionArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *EvalTargetServiceGetEvalTargetVersionArgs) Field1DeepEqual(src *GetEvalTargetVersionRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type EvalTargetServiceGetEvalTargetVersionResult struct {
	Success *GetEvalTargetVersionResponse `thrift:"success,0,optional" frugal:"0,optional,GetEvalTargetVersionResponse"`
}

func NewEvalTargetServiceGetEvalTargetVersionResult() *EvalTargetServiceGetEvalTargetVersionResult {
	return &EvalTargetServiceGetEvalTargetVersionResult{}
}

func (p *EvalTargetServiceGetEvalTargetVersionResult) InitDefault() {
}

var EvalTargetServiceGetEvalTargetVersionResult_Success_DEFAULT *GetEvalTargetVersionResponse

func (p *EvalTargetServiceGetEvalTargetVersionResult) GetSuccess() (v *GetEvalTargetVersionResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvalTargetServiceGetEvalTargetVersionResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvalTargetServiceGetEvalTargetVersionResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetEvalTargetVersionResponse)
}

var fieldIDToName_EvalTargetServiceGetEvalTargetVersionResult = map[int16]string{
	0: "success",
}

func (p *EvalTargetServiceGetEvalTargetVersionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvalTargetServiceGetEvalTargetVersionResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvalTargetServiceGetEvalTargetVersionResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvalTargetServiceGetEvalTargetVersionResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetEvalTargetVersionResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvalTargetServiceGetEvalTargetVersionResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvalTargetVersion_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvalTargetServiceGetEvalTargetVersionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvalTargetServiceGetEvalTargetVersionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvalTargetServiceGetEvalTargetVersionResult(%+v)", *p)

}

func (p *EvalTargetServiceGetEvalTargetVersionResult) DeepEqual(ano *EvalTargetServiceGetEvalTargetVersionResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvalTargetServiceGetEvalTargetVersionResult) Field0DeepEqual(src *GetEvalTargetVersionResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvalTargetServiceBatchGetEvalTargetVersionsArgs struct {
	Request *BatchGetEvalTargetVersionsRequest `thrift:"request,1" frugal:"1,default,BatchGetEvalTargetVersionsRequest"`
}

func NewEvalTargetServiceBatchGetEvalTargetVersionsArgs() *EvalTargetServiceBatchGetEvalTargetVersionsArgs {
	return &EvalTargetServiceBatchGetEvalTargetVersionsArgs{}
}

func (p *EvalTargetServiceBatchGetEvalTargetVersionsArgs) InitDefault() {
}

var EvalTargetServiceBatchGetEvalTargetVersionsArgs_Request_DEFAULT *BatchGetEvalTargetVersionsRequest

func (p *EvalTargetServiceBatchGetEvalTargetVersionsArgs) GetRequest() (v *BatchGetEvalTargetVersionsRequest) {
	if p == nil {
		return
	}
	if !p.IsSetRequest() {
		return EvalTargetServiceBatchGetEvalTargetVersionsArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *EvalTargetServiceBatchGetEvalTargetVersionsArgs) SetRequest(val *BatchGetEvalTargetVersionsRequest) {
	p.Request = val
}

var fieldIDToName_EvalTargetServiceBatchGetEvalTargetVersionsArgs = map[int16]string{
	1: "request",
}

func (p *EvalTargetServiceBatchGetEvalTargetVersionsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *EvalTargetServiceBatchGetEvalTargetVersionsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvalTargetServiceBatchGetEvalTargetVersionsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvalTargetServiceBatchGetEvalTargetVersionsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewBatchGetEvalTargetVersionsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *EvalTargetServiceBatchGetEvalTargetVersionsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetEvalTargetVersions_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvalTargetServiceBatchGetEvalTargetVersionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvalTargetServiceBatchGetEvalTargetVersionsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvalTargetServiceBatchGetEvalTargetVersionsArgs(%+v)", *p)

}

func (p *EvalTargetServiceBatchGetEvalTargetVersionsArgs) DeepEqual(ano *EvalTargetServiceBatchGetEvalTargetVersionsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *EvalTargetServiceBatchGetEvalTargetVersionsArgs) Field1DeepEqual(src *BatchGetEvalTargetVersionsRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type EvalTargetServiceBatchGetEvalTargetVersionsResult struct {
	Success *BatchGetEvalTargetVersionsResponse `thrift:"success,0,optional" frugal:"0,optional,BatchGetEvalTargetVersionsResponse"`
}

func NewEvalTargetServiceBatchGetEvalTargetVersionsResult() *EvalTargetServiceBatchGetEvalTargetVersionsResult {
	return &EvalTargetServiceBatchGetEvalTargetVersionsResult{}
}

func (p *EvalTargetServiceBatchGetEvalTargetVersionsResult) InitDefault() {
}

var EvalTargetServiceBatchGetEvalTargetVersionsResult_Success_DEFAULT *BatchGetEvalTargetVersionsResponse

func (p *EvalTargetServiceBatchGetEvalTargetVersionsResult) GetSuccess() (v *BatchGetEvalTargetVersionsResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvalTargetServiceBatchGetEvalTargetVersionsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvalTargetServiceBatchGetEvalTargetVersionsResult) SetSuccess(x interface{}) {
	p.Success = x.(*BatchGetEvalTargetVersionsResponse)
}

var fieldIDToName_EvalTargetServiceBatchGetEvalTargetVersionsResult = map[int16]string{
	0: "success",
}

func (p *EvalTargetServiceBatchGetEvalTargetVersionsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvalTargetServiceBatchGetEvalTargetVersionsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvalTargetServiceBatchGetEvalTargetVersionsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvalTargetServiceBatchGetEvalTargetVersionsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewBatchGetEvalTargetVersionsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvalTargetServiceBatchGetEvalTargetVersionsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetEvalTargetVersions_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvalTargetServiceBatchGetEvalTargetVersionsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvalTargetServiceBatchGetEvalTargetVersionsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvalTargetServiceBatchGetEvalTargetVersionsResult(%+v)", *p)

}

func (p *EvalTargetServiceBatchGetEvalTargetVersionsResult) DeepEqual(ano *EvalTargetServiceBatchGetEvalTargetVersionsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvalTargetServiceBatchGetEvalTargetVersionsResult) Field0DeepEqual(src *BatchGetEvalTargetVersionsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvalTargetServiceListSourceEvalTargetsArgs struct {
	Request *ListSourceEvalTargetsRequest `thrift:"request,1" frugal:"1,default,ListSourceEvalTargetsRequest"`
}

func NewEvalTargetServiceListSourceEvalTargetsArgs() *EvalTargetServiceListSourceEvalTargetsArgs {
	return &EvalTargetServiceListSourceEvalTargetsArgs{}
}

func (p *EvalTargetServiceListSourceEvalTargetsArgs) InitDefault() {
}

var EvalTargetServiceListSourceEvalTargetsArgs_Request_DEFAULT *ListSourceEvalTargetsRequest

func (p *EvalTargetServiceListSourceEvalTargetsArgs) GetRequest() (v *ListSourceEvalTargetsRequest) {
	if p == nil {
		return
	}
	if !p.IsSetRequest() {
		return EvalTargetServiceListSourceEvalTargetsArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *EvalTargetServiceListSourceEvalTargetsArgs) SetRequest(val *ListSourceEvalTargetsRequest) {
	p.Request = val
}

var fieldIDToName_EvalTargetServiceListSourceEvalTargetsArgs = map[int16]string{
	1: "request",
}

func (p *EvalTargetServiceListSourceEvalTargetsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *EvalTargetServiceListSourceEvalTargetsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvalTargetServiceListSourceEvalTargetsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvalTargetServiceListSourceEvalTargetsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewListSourceEvalTargetsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *EvalTargetServiceListSourceEvalTargetsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListSourceEvalTargets_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvalTargetServiceListSourceEvalTargetsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvalTargetServiceListSourceEvalTargetsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvalTargetServiceListSourceEvalTargetsArgs(%+v)", *p)

}

func (p *EvalTargetServiceListSourceEvalTargetsArgs) DeepEqual(ano *EvalTargetServiceListSourceEvalTargetsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *EvalTargetServiceListSourceEvalTargetsArgs) Field1DeepEqual(src *ListSourceEvalTargetsRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type EvalTargetServiceListSourceEvalTargetsResult struct {
	Success *ListSourceEvalTargetsResponse `thrift:"success,0,optional" frugal:"0,optional,ListSourceEvalTargetsResponse"`
}

func NewEvalTargetServiceListSourceEvalTargetsResult() *EvalTargetServiceListSourceEvalTargetsResult {
	return &EvalTargetServiceListSourceEvalTargetsResult{}
}

func (p *EvalTargetServiceListSourceEvalTargetsResult) InitDefault() {
}

var EvalTargetServiceListSourceEvalTargetsResult_Success_DEFAULT *ListSourceEvalTargetsResponse

func (p *EvalTargetServiceListSourceEvalTargetsResult) GetSuccess() (v *ListSourceEvalTargetsResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvalTargetServiceListSourceEvalTargetsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvalTargetServiceListSourceEvalTargetsResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListSourceEvalTargetsResponse)
}

var fieldIDToName_EvalTargetServiceListSourceEvalTargetsResult = map[int16]string{
	0: "success",
}

func (p *EvalTargetServiceListSourceEvalTargetsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvalTargetServiceListSourceEvalTargetsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvalTargetServiceListSourceEvalTargetsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvalTargetServiceListSourceEvalTargetsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewListSourceEvalTargetsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvalTargetServiceListSourceEvalTargetsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListSourceEvalTargets_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvalTargetServiceListSourceEvalTargetsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvalTargetServiceListSourceEvalTargetsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvalTargetServiceListSourceEvalTargetsResult(%+v)", *p)

}

func (p *EvalTargetServiceListSourceEvalTargetsResult) DeepEqual(ano *EvalTargetServiceListSourceEvalTargetsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvalTargetServiceListSourceEvalTargetsResult) Field0DeepEqual(src *ListSourceEvalTargetsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvalTargetServiceListSourceEvalTargetVersionsArgs struct {
	Request *ListSourceEvalTargetVersionsRequest `thrift:"request,1" frugal:"1,default,ListSourceEvalTargetVersionsRequest"`
}

func NewEvalTargetServiceListSourceEvalTargetVersionsArgs() *EvalTargetServiceListSourceEvalTargetVersionsArgs {
	return &EvalTargetServiceListSourceEvalTargetVersionsArgs{}
}

func (p *EvalTargetServiceListSourceEvalTargetVersionsArgs) InitDefault() {
}

var EvalTargetServiceListSourceEvalTargetVersionsArgs_Request_DEFAULT *ListSourceEvalTargetVersionsRequest

func (p *EvalTargetServiceListSourceEvalTargetVersionsArgs) GetRequest() (v *ListSourceEvalTargetVersionsRequest) {
	if p == nil {
		return
	}
	if !p.IsSetRequest() {
		return EvalTargetServiceListSourceEvalTargetVersionsArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *EvalTargetServiceListSourceEvalTargetVersionsArgs) SetRequest(val *ListSourceEvalTargetVersionsRequest) {
	p.Request = val
}

var fieldIDToName_EvalTargetServiceListSourceEvalTargetVersionsArgs = map[int16]string{
	1: "request",
}

func (p *EvalTargetServiceListSourceEvalTargetVersionsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *EvalTargetServiceListSourceEvalTargetVersionsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvalTargetServiceListSourceEvalTargetVersionsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvalTargetServiceListSourceEvalTargetVersionsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewListSourceEvalTargetVersionsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *EvalTargetServiceListSourceEvalTargetVersionsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListSourceEvalTargetVersions_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvalTargetServiceListSourceEvalTargetVersionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvalTargetServiceListSourceEvalTargetVersionsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvalTargetServiceListSourceEvalTargetVersionsArgs(%+v)", *p)

}

func (p *EvalTargetServiceListSourceEvalTargetVersionsArgs) DeepEqual(ano *EvalTargetServiceListSourceEvalTargetVersionsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *EvalTargetServiceListSourceEvalTargetVersionsArgs) Field1DeepEqual(src *ListSourceEvalTargetVersionsRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type EvalTargetServiceListSourceEvalTargetVersionsResult struct {
	Success *ListSourceEvalTargetVersionsResponse `thrift:"success,0,optional" frugal:"0,optional,ListSourceEvalTargetVersionsResponse"`
}

func NewEvalTargetServiceListSourceEvalTargetVersionsResult() *EvalTargetServiceListSourceEvalTargetVersionsResult {
	return &EvalTargetServiceListSourceEvalTargetVersionsResult{}
}

func (p *EvalTargetServiceListSourceEvalTargetVersionsResult) InitDefault() {
}

var EvalTargetServiceListSourceEvalTargetVersionsResult_Success_DEFAULT *ListSourceEvalTargetVersionsResponse

func (p *EvalTargetServiceListSourceEvalTargetVersionsResult) GetSuccess() (v *ListSourceEvalTargetVersionsResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvalTargetServiceListSourceEvalTargetVersionsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvalTargetServiceListSourceEvalTargetVersionsResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListSourceEvalTargetVersionsResponse)
}

var fieldIDToName_EvalTargetServiceListSourceEvalTargetVersionsResult = map[int16]string{
	0: "success",
}

func (p *EvalTargetServiceListSourceEvalTargetVersionsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvalTargetServiceListSourceEvalTargetVersionsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvalTargetServiceListSourceEvalTargetVersionsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvalTargetServiceListSourceEvalTargetVersionsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewListSourceEvalTargetVersionsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvalTargetServiceListSourceEvalTargetVersionsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListSourceEvalTargetVersions_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvalTargetServiceListSourceEvalTargetVersionsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvalTargetServiceListSourceEvalTargetVersionsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvalTargetServiceListSourceEvalTargetVersionsResult(%+v)", *p)

}

func (p *EvalTargetServiceListSourceEvalTargetVersionsResult) DeepEqual(ano *EvalTargetServiceListSourceEvalTargetVersionsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvalTargetServiceListSourceEvalTargetVersionsResult) Field0DeepEqual(src *ListSourceEvalTargetVersionsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvalTargetServiceBatchGetSourceEvalTargetsArgs struct {
	Request *BatchGetSourceEvalTargetsRequest `thrift:"request,1" frugal:"1,default,BatchGetSourceEvalTargetsRequest"`
}

func NewEvalTargetServiceBatchGetSourceEvalTargetsArgs() *EvalTargetServiceBatchGetSourceEvalTargetsArgs {
	return &EvalTargetServiceBatchGetSourceEvalTargetsArgs{}
}

func (p *EvalTargetServiceBatchGetSourceEvalTargetsArgs) InitDefault() {
}

var EvalTargetServiceBatchGetSourceEvalTargetsArgs_Request_DEFAULT *BatchGetSourceEvalTargetsRequest

func (p *EvalTargetServiceBatchGetSourceEvalTargetsArgs) GetRequest() (v *BatchGetSourceEvalTargetsRequest) {
	if p == nil {
		return
	}
	if !p.IsSetRequest() {
		return EvalTargetServiceBatchGetSourceEvalTargetsArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *EvalTargetServiceBatchGetSourceEvalTargetsArgs) SetRequest(val *BatchGetSourceEvalTargetsRequest) {
	p.Request = val
}

var fieldIDToName_EvalTargetServiceBatchGetSourceEvalTargetsArgs = map[int16]string{
	1: "request",
}

func (p *EvalTargetServiceBatchGetSourceEvalTargetsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *EvalTargetServiceBatchGetSourceEvalTargetsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvalTargetServiceBatchGetSourceEvalTargetsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvalTargetServiceBatchGetSourceEvalTargetsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewBatchGetSourceEvalTargetsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *EvalTargetServiceBatchGetSourceEvalTargetsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetSourceEvalTargets_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvalTargetServiceBatchGetSourceEvalTargetsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvalTargetServiceBatchGetSourceEvalTargetsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvalTargetServiceBatchGetSourceEvalTargetsArgs(%+v)", *p)

}

func (p *EvalTargetServiceBatchGetSourceEvalTargetsArgs) DeepEqual(ano *EvalTargetServiceBatchGetSourceEvalTargetsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *EvalTargetServiceBatchGetSourceEvalTargetsArgs) Field1DeepEqual(src *BatchGetSourceEvalTargetsRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type EvalTargetServiceBatchGetSourceEvalTargetsResult struct {
	Success *BatchGetSourceEvalTargetsResponse `thrift:"success,0,optional" frugal:"0,optional,BatchGetSourceEvalTargetsResponse"`
}

func NewEvalTargetServiceBatchGetSourceEvalTargetsResult() *EvalTargetServiceBatchGetSourceEvalTargetsResult {
	return &EvalTargetServiceBatchGetSourceEvalTargetsResult{}
}

func (p *EvalTargetServiceBatchGetSourceEvalTargetsResult) InitDefault() {
}

var EvalTargetServiceBatchGetSourceEvalTargetsResult_Success_DEFAULT *BatchGetSourceEvalTargetsResponse

func (p *EvalTargetServiceBatchGetSourceEvalTargetsResult) GetSuccess() (v *BatchGetSourceEvalTargetsResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvalTargetServiceBatchGetSourceEvalTargetsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvalTargetServiceBatchGetSourceEvalTargetsResult) SetSuccess(x interface{}) {
	p.Success = x.(*BatchGetSourceEvalTargetsResponse)
}

var fieldIDToName_EvalTargetServiceBatchGetSourceEvalTargetsResult = map[int16]string{
	0: "success",
}

func (p *EvalTargetServiceBatchGetSourceEvalTargetsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvalTargetServiceBatchGetSourceEvalTargetsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvalTargetServiceBatchGetSourceEvalTargetsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvalTargetServiceBatchGetSourceEvalTargetsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewBatchGetSourceEvalTargetsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvalTargetServiceBatchGetSourceEvalTargetsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetSourceEvalTargets_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvalTargetServiceBatchGetSourceEvalTargetsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvalTargetServiceBatchGetSourceEvalTargetsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvalTargetServiceBatchGetSourceEvalTargetsResult(%+v)", *p)

}

func (p *EvalTargetServiceBatchGetSourceEvalTargetsResult) DeepEqual(ano *EvalTargetServiceBatchGetSourceEvalTargetsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvalTargetServiceBatchGetSourceEvalTargetsResult) Field0DeepEqual(src *BatchGetSourceEvalTargetsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvalTargetServiceExecuteEvalTargetArgs struct {
	Request *ExecuteEvalTargetRequest `thrift:"request,1" frugal:"1,default,ExecuteEvalTargetRequest"`
}

func NewEvalTargetServiceExecuteEvalTargetArgs() *EvalTargetServiceExecuteEvalTargetArgs {
	return &EvalTargetServiceExecuteEvalTargetArgs{}
}

func (p *EvalTargetServiceExecuteEvalTargetArgs) InitDefault() {
}

var EvalTargetServiceExecuteEvalTargetArgs_Request_DEFAULT *ExecuteEvalTargetRequest

func (p *EvalTargetServiceExecuteEvalTargetArgs) GetRequest() (v *ExecuteEvalTargetRequest) {
	if p == nil {
		return
	}
	if !p.IsSetRequest() {
		return EvalTargetServiceExecuteEvalTargetArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *EvalTargetServiceExecuteEvalTargetArgs) SetRequest(val *ExecuteEvalTargetRequest) {
	p.Request = val
}

var fieldIDToName_EvalTargetServiceExecuteEvalTargetArgs = map[int16]string{
	1: "request",
}

func (p *EvalTargetServiceExecuteEvalTargetArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *EvalTargetServiceExecuteEvalTargetArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvalTargetServiceExecuteEvalTargetArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvalTargetServiceExecuteEvalTargetArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewExecuteEvalTargetRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *EvalTargetServiceExecuteEvalTargetArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ExecuteEvalTarget_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvalTargetServiceExecuteEvalTargetArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvalTargetServiceExecuteEvalTargetArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvalTargetServiceExecuteEvalTargetArgs(%+v)", *p)

}

func (p *EvalTargetServiceExecuteEvalTargetArgs) DeepEqual(ano *EvalTargetServiceExecuteEvalTargetArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *EvalTargetServiceExecuteEvalTargetArgs) Field1DeepEqual(src *ExecuteEvalTargetRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type EvalTargetServiceExecuteEvalTargetResult struct {
	Success *ExecuteEvalTargetResponse `thrift:"success,0,optional" frugal:"0,optional,ExecuteEvalTargetResponse"`
}

func NewEvalTargetServiceExecuteEvalTargetResult() *EvalTargetServiceExecuteEvalTargetResult {
	return &EvalTargetServiceExecuteEvalTargetResult{}
}

func (p *EvalTargetServiceExecuteEvalTargetResult) InitDefault() {
}

var EvalTargetServiceExecuteEvalTargetResult_Success_DEFAULT *ExecuteEvalTargetResponse

func (p *EvalTargetServiceExecuteEvalTargetResult) GetSuccess() (v *ExecuteEvalTargetResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvalTargetServiceExecuteEvalTargetResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvalTargetServiceExecuteEvalTargetResult) SetSuccess(x interface{}) {
	p.Success = x.(*ExecuteEvalTargetResponse)
}

var fieldIDToName_EvalTargetServiceExecuteEvalTargetResult = map[int16]string{
	0: "success",
}

func (p *EvalTargetServiceExecuteEvalTargetResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvalTargetServiceExecuteEvalTargetResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvalTargetServiceExecuteEvalTargetResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvalTargetServiceExecuteEvalTargetResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewExecuteEvalTargetResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvalTargetServiceExecuteEvalTargetResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ExecuteEvalTarget_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvalTargetServiceExecuteEvalTargetResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvalTargetServiceExecuteEvalTargetResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvalTargetServiceExecuteEvalTargetResult(%+v)", *p)

}

func (p *EvalTargetServiceExecuteEvalTargetResult) DeepEqual(ano *EvalTargetServiceExecuteEvalTargetResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvalTargetServiceExecuteEvalTargetResult) Field0DeepEqual(src *ExecuteEvalTargetResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvalTargetServiceGetEvalTargetRecordArgs struct {
	Request *GetEvalTargetRecordRequest `thrift:"request,1" frugal:"1,default,GetEvalTargetRecordRequest"`
}

func NewEvalTargetServiceGetEvalTargetRecordArgs() *EvalTargetServiceGetEvalTargetRecordArgs {
	return &EvalTargetServiceGetEvalTargetRecordArgs{}
}

func (p *EvalTargetServiceGetEvalTargetRecordArgs) InitDefault() {
}

var EvalTargetServiceGetEvalTargetRecordArgs_Request_DEFAULT *GetEvalTargetRecordRequest

func (p *EvalTargetServiceGetEvalTargetRecordArgs) GetRequest() (v *GetEvalTargetRecordRequest) {
	if p == nil {
		return
	}
	if !p.IsSetRequest() {
		return EvalTargetServiceGetEvalTargetRecordArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *EvalTargetServiceGetEvalTargetRecordArgs) SetRequest(val *GetEvalTargetRecordRequest) {
	p.Request = val
}

var fieldIDToName_EvalTargetServiceGetEvalTargetRecordArgs = map[int16]string{
	1: "request",
}

func (p *EvalTargetServiceGetEvalTargetRecordArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *EvalTargetServiceGetEvalTargetRecordArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvalTargetServiceGetEvalTargetRecordArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvalTargetServiceGetEvalTargetRecordArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetEvalTargetRecordRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *EvalTargetServiceGetEvalTargetRecordArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvalTargetRecord_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvalTargetServiceGetEvalTargetRecordArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvalTargetServiceGetEvalTargetRecordArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvalTargetServiceGetEvalTargetRecordArgs(%+v)", *p)

}

func (p *EvalTargetServiceGetEvalTargetRecordArgs) DeepEqual(ano *EvalTargetServiceGetEvalTargetRecordArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *EvalTargetServiceGetEvalTargetRecordArgs) Field1DeepEqual(src *GetEvalTargetRecordRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type EvalTargetServiceGetEvalTargetRecordResult struct {
	Success *GetEvalTargetRecordResponse `thrift:"success,0,optional" frugal:"0,optional,GetEvalTargetRecordResponse"`
}

func NewEvalTargetServiceGetEvalTargetRecordResult() *EvalTargetServiceGetEvalTargetRecordResult {
	return &EvalTargetServiceGetEvalTargetRecordResult{}
}

func (p *EvalTargetServiceGetEvalTargetRecordResult) InitDefault() {
}

var EvalTargetServiceGetEvalTargetRecordResult_Success_DEFAULT *GetEvalTargetRecordResponse

func (p *EvalTargetServiceGetEvalTargetRecordResult) GetSuccess() (v *GetEvalTargetRecordResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvalTargetServiceGetEvalTargetRecordResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvalTargetServiceGetEvalTargetRecordResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetEvalTargetRecordResponse)
}

var fieldIDToName_EvalTargetServiceGetEvalTargetRecordResult = map[int16]string{
	0: "success",
}

func (p *EvalTargetServiceGetEvalTargetRecordResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvalTargetServiceGetEvalTargetRecordResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvalTargetServiceGetEvalTargetRecordResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvalTargetServiceGetEvalTargetRecordResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetEvalTargetRecordResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvalTargetServiceGetEvalTargetRecordResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetEvalTargetRecord_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvalTargetServiceGetEvalTargetRecordResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvalTargetServiceGetEvalTargetRecordResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvalTargetServiceGetEvalTargetRecordResult(%+v)", *p)

}

func (p *EvalTargetServiceGetEvalTargetRecordResult) DeepEqual(ano *EvalTargetServiceGetEvalTargetRecordResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvalTargetServiceGetEvalTargetRecordResult) Field0DeepEqual(src *GetEvalTargetRecordResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EvalTargetServiceBatchGetEvalTargetRecordsArgs struct {
	Request *BatchGetEvalTargetRecordsRequest `thrift:"request,1" frugal:"1,default,BatchGetEvalTargetRecordsRequest"`
}

func NewEvalTargetServiceBatchGetEvalTargetRecordsArgs() *EvalTargetServiceBatchGetEvalTargetRecordsArgs {
	return &EvalTargetServiceBatchGetEvalTargetRecordsArgs{}
}

func (p *EvalTargetServiceBatchGetEvalTargetRecordsArgs) InitDefault() {
}

var EvalTargetServiceBatchGetEvalTargetRecordsArgs_Request_DEFAULT *BatchGetEvalTargetRecordsRequest

func (p *EvalTargetServiceBatchGetEvalTargetRecordsArgs) GetRequest() (v *BatchGetEvalTargetRecordsRequest) {
	if p == nil {
		return
	}
	if !p.IsSetRequest() {
		return EvalTargetServiceBatchGetEvalTargetRecordsArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *EvalTargetServiceBatchGetEvalTargetRecordsArgs) SetRequest(val *BatchGetEvalTargetRecordsRequest) {
	p.Request = val
}

var fieldIDToName_EvalTargetServiceBatchGetEvalTargetRecordsArgs = map[int16]string{
	1: "request",
}

func (p *EvalTargetServiceBatchGetEvalTargetRecordsArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *EvalTargetServiceBatchGetEvalTargetRecordsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvalTargetServiceBatchGetEvalTargetRecordsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvalTargetServiceBatchGetEvalTargetRecordsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewBatchGetEvalTargetRecordsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *EvalTargetServiceBatchGetEvalTargetRecordsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetEvalTargetRecords_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvalTargetServiceBatchGetEvalTargetRecordsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EvalTargetServiceBatchGetEvalTargetRecordsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvalTargetServiceBatchGetEvalTargetRecordsArgs(%+v)", *p)

}

func (p *EvalTargetServiceBatchGetEvalTargetRecordsArgs) DeepEqual(ano *EvalTargetServiceBatchGetEvalTargetRecordsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *EvalTargetServiceBatchGetEvalTargetRecordsArgs) Field1DeepEqual(src *BatchGetEvalTargetRecordsRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type EvalTargetServiceBatchGetEvalTargetRecordsResult struct {
	Success *BatchGetEvalTargetRecordsResponse `thrift:"success,0,optional" frugal:"0,optional,BatchGetEvalTargetRecordsResponse"`
}

func NewEvalTargetServiceBatchGetEvalTargetRecordsResult() *EvalTargetServiceBatchGetEvalTargetRecordsResult {
	return &EvalTargetServiceBatchGetEvalTargetRecordsResult{}
}

func (p *EvalTargetServiceBatchGetEvalTargetRecordsResult) InitDefault() {
}

var EvalTargetServiceBatchGetEvalTargetRecordsResult_Success_DEFAULT *BatchGetEvalTargetRecordsResponse

func (p *EvalTargetServiceBatchGetEvalTargetRecordsResult) GetSuccess() (v *BatchGetEvalTargetRecordsResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return EvalTargetServiceBatchGetEvalTargetRecordsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EvalTargetServiceBatchGetEvalTargetRecordsResult) SetSuccess(x interface{}) {
	p.Success = x.(*BatchGetEvalTargetRecordsResponse)
}

var fieldIDToName_EvalTargetServiceBatchGetEvalTargetRecordsResult = map[int16]string{
	0: "success",
}

func (p *EvalTargetServiceBatchGetEvalTargetRecordsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EvalTargetServiceBatchGetEvalTargetRecordsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvalTargetServiceBatchGetEvalTargetRecordsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvalTargetServiceBatchGetEvalTargetRecordsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewBatchGetEvalTargetRecordsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *EvalTargetServiceBatchGetEvalTargetRecordsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetEvalTargetRecords_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvalTargetServiceBatchGetEvalTargetRecordsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EvalTargetServiceBatchGetEvalTargetRecordsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvalTargetServiceBatchGetEvalTargetRecordsResult(%+v)", *p)

}

func (p *EvalTargetServiceBatchGetEvalTargetRecordsResult) DeepEqual(ano *EvalTargetServiceBatchGetEvalTargetRecordsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EvalTargetServiceBatchGetEvalTargetRecordsResult) Field0DeepEqual(src *BatchGetEvalTargetRecordsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
