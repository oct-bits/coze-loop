// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package expt

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/domain/common"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/domain/eval_set"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/domain/eval_target"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/domain/evaluator"
	"strings"
)

type ExptStatus int64

const (
	ExptStatus_Unknown ExptStatus = 0
	// Awaiting execution
	ExptStatus_Pending ExptStatus = 2
	// In progress
	ExptStatus_Processing ExptStatus = 3
	// Execution succeeded
	ExptStatus_Success ExptStatus = 11
	// Execution failed
	ExptStatus_Failed ExptStatus = 12
	// User terminated
	ExptStatus_Terminated ExptStatus = 13
	// System terminated
	ExptStatus_SystemTerminated ExptStatus = 14
	// online expt draining
	ExptStatus_Draining ExptStatus = 21
)

func (p ExptStatus) String() string {
	switch p {
	case ExptStatus_Unknown:
		return "Unknown"
	case ExptStatus_Pending:
		return "Pending"
	case ExptStatus_Processing:
		return "Processing"
	case ExptStatus_Success:
		return "Success"
	case ExptStatus_Failed:
		return "Failed"
	case ExptStatus_Terminated:
		return "Terminated"
	case ExptStatus_SystemTerminated:
		return "SystemTerminated"
	case ExptStatus_Draining:
		return "Draining"
	}
	return "<UNSET>"
}

func ExptStatusFromString(s string) (ExptStatus, error) {
	switch s {
	case "Unknown":
		return ExptStatus_Unknown, nil
	case "Pending":
		return ExptStatus_Pending, nil
	case "Processing":
		return ExptStatus_Processing, nil
	case "Success":
		return ExptStatus_Success, nil
	case "Failed":
		return ExptStatus_Failed, nil
	case "Terminated":
		return ExptStatus_Terminated, nil
	case "SystemTerminated":
		return ExptStatus_SystemTerminated, nil
	case "Draining":
		return ExptStatus_Draining, nil
	}
	return ExptStatus(0), fmt.Errorf("not a valid ExptStatus string")
}

func ExptStatusPtr(v ExptStatus) *ExptStatus { return &v }
func (p *ExptStatus) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = ExptStatus(result.Int64)
	return
}

func (p *ExptStatus) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type ExptType int64

const (
	ExptType_Offline ExptType = 1
	ExptType_Online  ExptType = 2
)

func (p ExptType) String() string {
	switch p {
	case ExptType_Offline:
		return "Offline"
	case ExptType_Online:
		return "Online"
	}
	return "<UNSET>"
}

func ExptTypeFromString(s string) (ExptType, error) {
	switch s {
	case "Offline":
		return ExptType_Offline, nil
	case "Online":
		return ExptType_Online, nil
	}
	return ExptType(0), fmt.Errorf("not a valid ExptType string")
}

func ExptTypePtr(v ExptType) *ExptType { return &v }
func (p *ExptType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = ExptType(result.Int64)
	return
}

func (p *ExptType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type SourceType int64

const (
	SourceType_Evaluation SourceType = 1
	SourceType_AutoTask   SourceType = 2
)

func (p SourceType) String() string {
	switch p {
	case SourceType_Evaluation:
		return "Evaluation"
	case SourceType_AutoTask:
		return "AutoTask"
	}
	return "<UNSET>"
}

func SourceTypeFromString(s string) (SourceType, error) {
	switch s {
	case "Evaluation":
		return SourceType_Evaluation, nil
	case "AutoTask":
		return SourceType_AutoTask, nil
	}
	return SourceType(0), fmt.Errorf("not a valid SourceType string")
}

func SourceTypePtr(v SourceType) *SourceType { return &v }
func (p *SourceType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = SourceType(result.Int64)
	return
}

func (p *SourceType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type ExptRetryMode int64

const (
	ExptRetryMode_Unknown          ExptRetryMode = 0
	ExptRetryMode_RetryAll         ExptRetryMode = 1
	ExptRetryMode_RetryFailure     ExptRetryMode = 2
	ExptRetryMode_RetryTargetItems ExptRetryMode = 3
)

func (p ExptRetryMode) String() string {
	switch p {
	case ExptRetryMode_Unknown:
		return "Unknown"
	case ExptRetryMode_RetryAll:
		return "RetryAll"
	case ExptRetryMode_RetryFailure:
		return "RetryFailure"
	case ExptRetryMode_RetryTargetItems:
		return "RetryTargetItems"
	}
	return "<UNSET>"
}

func ExptRetryModeFromString(s string) (ExptRetryMode, error) {
	switch s {
	case "Unknown":
		return ExptRetryMode_Unknown, nil
	case "RetryAll":
		return ExptRetryMode_RetryAll, nil
	case "RetryFailure":
		return ExptRetryMode_RetryFailure, nil
	case "RetryTargetItems":
		return ExptRetryMode_RetryTargetItems, nil
	}
	return ExptRetryMode(0), fmt.Errorf("not a valid ExptRetryMode string")
}

func ExptRetryModePtr(v ExptRetryMode) *ExptRetryMode { return &v }
func (p *ExptRetryMode) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = ExptRetryMode(result.Int64)
	return
}

func (p *ExptRetryMode) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type ItemRunState int64

const (
	ItemRunState_Unknown ItemRunState = -1
	// Queuing
	ItemRunState_Queueing ItemRunState = 0
	// Processing
	ItemRunState_Processing ItemRunState = 1
	// Success
	ItemRunState_Success ItemRunState = 2
	// Failure
	ItemRunState_Fail ItemRunState = 3
	// Terminated
	ItemRunState_Terminal ItemRunState = 5
)

func (p ItemRunState) String() string {
	switch p {
	case ItemRunState_Unknown:
		return "Unknown"
	case ItemRunState_Queueing:
		return "Queueing"
	case ItemRunState_Processing:
		return "Processing"
	case ItemRunState_Success:
		return "Success"
	case ItemRunState_Fail:
		return "Fail"
	case ItemRunState_Terminal:
		return "Terminal"
	}
	return "<UNSET>"
}

func ItemRunStateFromString(s string) (ItemRunState, error) {
	switch s {
	case "Unknown":
		return ItemRunState_Unknown, nil
	case "Queueing":
		return ItemRunState_Queueing, nil
	case "Processing":
		return ItemRunState_Processing, nil
	case "Success":
		return ItemRunState_Success, nil
	case "Fail":
		return ItemRunState_Fail, nil
	case "Terminal":
		return ItemRunState_Terminal, nil
	}
	return ItemRunState(0), fmt.Errorf("not a valid ItemRunState string")
}

func ItemRunStatePtr(v ItemRunState) *ItemRunState { return &v }
func (p *ItemRunState) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = ItemRunState(result.Int64)
	return
}

func (p *ItemRunState) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type TurnRunState int64

const (
	// Not started
	TurnRunState_Queueing TurnRunState = 0
	// Execution succeeded
	TurnRunState_Success TurnRunState = 1
	// Execution failed
	TurnRunState_Fail TurnRunState = 2
	// In progress
	TurnRunState_Processing TurnRunState = 3
	// Terminated
	TurnRunState_Terminal TurnRunState = 4
)

func (p TurnRunState) String() string {
	switch p {
	case TurnRunState_Queueing:
		return "Queueing"
	case TurnRunState_Success:
		return "Success"
	case TurnRunState_Fail:
		return "Fail"
	case TurnRunState_Processing:
		return "Processing"
	case TurnRunState_Terminal:
		return "Terminal"
	}
	return "<UNSET>"
}

func TurnRunStateFromString(s string) (TurnRunState, error) {
	switch s {
	case "Queueing":
		return TurnRunState_Queueing, nil
	case "Success":
		return TurnRunState_Success, nil
	case "Fail":
		return TurnRunState_Fail, nil
	case "Processing":
		return TurnRunState_Processing, nil
	case "Terminal":
		return TurnRunState_Terminal, nil
	}
	return TurnRunState(0), fmt.Errorf("not a valid TurnRunState string")
}

func TurnRunStatePtr(v TurnRunState) *TurnRunState { return &v }
func (p *TurnRunState) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TurnRunState(result.Int64)
	return
}

func (p *TurnRunState) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type FilterLogicOp int64

const (
	FilterLogicOp_Unknown FilterLogicOp = 0
	FilterLogicOp_And     FilterLogicOp = 1
	FilterLogicOp_Or      FilterLogicOp = 2
)

func (p FilterLogicOp) String() string {
	switch p {
	case FilterLogicOp_Unknown:
		return "Unknown"
	case FilterLogicOp_And:
		return "And"
	case FilterLogicOp_Or:
		return "Or"
	}
	return "<UNSET>"
}

func FilterLogicOpFromString(s string) (FilterLogicOp, error) {
	switch s {
	case "Unknown":
		return FilterLogicOp_Unknown, nil
	case "And":
		return FilterLogicOp_And, nil
	case "Or":
		return FilterLogicOp_Or, nil
	}
	return FilterLogicOp(0), fmt.Errorf("not a valid FilterLogicOp string")
}

func FilterLogicOpPtr(v FilterLogicOp) *FilterLogicOp { return &v }
func (p *FilterLogicOp) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = FilterLogicOp(result.Int64)
	return
}

func (p *FilterLogicOp) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type FieldType int64

const (
	FieldType_Unknown FieldType = 0
	// 评估器得分, FieldKey为evaluatorVersionID,value为score
	FieldType_EvaluatorScore     FieldType = 1
	FieldType_CreatorBy          FieldType = 2
	FieldType_ExptStatus         FieldType = 3
	FieldType_TurnRunState       FieldType = 4
	FieldType_TargetID           FieldType = 5
	FieldType_EvalSetID          FieldType = 6
	FieldType_EvaluatorID        FieldType = 7
	FieldType_TargetType         FieldType = 8
	FieldType_SourceTarget       FieldType = 9
	FieldType_EvaluatorVersionID FieldType = 20
	FieldType_TargetVersionID    FieldType = 21
	FieldType_EvalSetVersionID   FieldType = 22
	FieldType_ExptType           FieldType = 30
	FieldType_SourceType         FieldType = 31
	FieldType_SourceID           FieldType = 32
	FieldType_KeywordSearch      FieldType = 41
	// 使用二级key，column_key
	FieldType_EvalSetColumn FieldType = 42
	// 使用二级key, Annotation_key（具体参考人工标注设计）
	FieldType_Annotation FieldType = 43
	// 使用二级key，目前使用固定key：content
	FieldType_ActualOutput            FieldType = 44
	FieldType_EvaluatorScoreCorrected FieldType = 45
	// 使用二级key，evaluator_version_id
	FieldType_Evaluator    FieldType = 46
	FieldType_ItemID       FieldType = 47
	FieldType_ItemRunState FieldType = 48
)

func (p FieldType) String() string {
	switch p {
	case FieldType_Unknown:
		return "Unknown"
	case FieldType_EvaluatorScore:
		return "EvaluatorScore"
	case FieldType_CreatorBy:
		return "CreatorBy"
	case FieldType_ExptStatus:
		return "ExptStatus"
	case FieldType_TurnRunState:
		return "TurnRunState"
	case FieldType_TargetID:
		return "TargetID"
	case FieldType_EvalSetID:
		return "EvalSetID"
	case FieldType_EvaluatorID:
		return "EvaluatorID"
	case FieldType_TargetType:
		return "TargetType"
	case FieldType_SourceTarget:
		return "SourceTarget"
	case FieldType_EvaluatorVersionID:
		return "EvaluatorVersionID"
	case FieldType_TargetVersionID:
		return "TargetVersionID"
	case FieldType_EvalSetVersionID:
		return "EvalSetVersionID"
	case FieldType_ExptType:
		return "ExptType"
	case FieldType_SourceType:
		return "SourceType"
	case FieldType_SourceID:
		return "SourceID"
	case FieldType_KeywordSearch:
		return "KeywordSearch"
	case FieldType_EvalSetColumn:
		return "EvalSetColumn"
	case FieldType_Annotation:
		return "Annotation"
	case FieldType_ActualOutput:
		return "ActualOutput"
	case FieldType_EvaluatorScoreCorrected:
		return "EvaluatorScoreCorrected"
	case FieldType_Evaluator:
		return "Evaluator"
	case FieldType_ItemID:
		return "ItemID"
	case FieldType_ItemRunState:
		return "ItemRunState"
	}
	return "<UNSET>"
}

func FieldTypeFromString(s string) (FieldType, error) {
	switch s {
	case "Unknown":
		return FieldType_Unknown, nil
	case "EvaluatorScore":
		return FieldType_EvaluatorScore, nil
	case "CreatorBy":
		return FieldType_CreatorBy, nil
	case "ExptStatus":
		return FieldType_ExptStatus, nil
	case "TurnRunState":
		return FieldType_TurnRunState, nil
	case "TargetID":
		return FieldType_TargetID, nil
	case "EvalSetID":
		return FieldType_EvalSetID, nil
	case "EvaluatorID":
		return FieldType_EvaluatorID, nil
	case "TargetType":
		return FieldType_TargetType, nil
	case "SourceTarget":
		return FieldType_SourceTarget, nil
	case "EvaluatorVersionID":
		return FieldType_EvaluatorVersionID, nil
	case "TargetVersionID":
		return FieldType_TargetVersionID, nil
	case "EvalSetVersionID":
		return FieldType_EvalSetVersionID, nil
	case "ExptType":
		return FieldType_ExptType, nil
	case "SourceType":
		return FieldType_SourceType, nil
	case "SourceID":
		return FieldType_SourceID, nil
	case "KeywordSearch":
		return FieldType_KeywordSearch, nil
	case "EvalSetColumn":
		return FieldType_EvalSetColumn, nil
	case "Annotation":
		return FieldType_Annotation, nil
	case "ActualOutput":
		return FieldType_ActualOutput, nil
	case "EvaluatorScoreCorrected":
		return FieldType_EvaluatorScoreCorrected, nil
	case "Evaluator":
		return FieldType_Evaluator, nil
	case "ItemID":
		return FieldType_ItemID, nil
	case "ItemRunState":
		return FieldType_ItemRunState, nil
	}
	return FieldType(0), fmt.Errorf("not a valid FieldType string")
}

func FieldTypePtr(v FieldType) *FieldType { return &v }
func (p *FieldType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = FieldType(result.Int64)
	return
}

func (p *FieldType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type FilterOperatorType int64

const (
	FilterOperatorType_Unknown FilterOperatorType = 0
	// 等于
	FilterOperatorType_Equal FilterOperatorType = 1
	// 不等于
	FilterOperatorType_NotEqual FilterOperatorType = 2
	// 大于
	FilterOperatorType_Greater FilterOperatorType = 3
	// 大于等于
	FilterOperatorType_GreaterOrEqual FilterOperatorType = 4
	// 小于
	FilterOperatorType_Less FilterOperatorType = 5
	// 小于等于
	FilterOperatorType_LessOrEqual FilterOperatorType = 6
	// 包含
	FilterOperatorType_In FilterOperatorType = 7
	// 不包含
	FilterOperatorType_NotIn FilterOperatorType = 8
	// 全文搜索
	FilterOperatorType_Like FilterOperatorType = 9
	// 全文搜索反选
	FilterOperatorType_NotLike FilterOperatorType = 10
	// 为空
	FilterOperatorType_IsNull FilterOperatorType = 11
	//非空
	FilterOperatorType_IsNotNull FilterOperatorType = 12
)

func (p FilterOperatorType) String() string {
	switch p {
	case FilterOperatorType_Unknown:
		return "Unknown"
	case FilterOperatorType_Equal:
		return "Equal"
	case FilterOperatorType_NotEqual:
		return "NotEqual"
	case FilterOperatorType_Greater:
		return "Greater"
	case FilterOperatorType_GreaterOrEqual:
		return "GreaterOrEqual"
	case FilterOperatorType_Less:
		return "Less"
	case FilterOperatorType_LessOrEqual:
		return "LessOrEqual"
	case FilterOperatorType_In:
		return "In"
	case FilterOperatorType_NotIn:
		return "NotIn"
	case FilterOperatorType_Like:
		return "Like"
	case FilterOperatorType_NotLike:
		return "NotLike"
	case FilterOperatorType_IsNull:
		return "IsNull"
	case FilterOperatorType_IsNotNull:
		return "IsNotNull"
	}
	return "<UNSET>"
}

func FilterOperatorTypeFromString(s string) (FilterOperatorType, error) {
	switch s {
	case "Unknown":
		return FilterOperatorType_Unknown, nil
	case "Equal":
		return FilterOperatorType_Equal, nil
	case "NotEqual":
		return FilterOperatorType_NotEqual, nil
	case "Greater":
		return FilterOperatorType_Greater, nil
	case "GreaterOrEqual":
		return FilterOperatorType_GreaterOrEqual, nil
	case "Less":
		return FilterOperatorType_Less, nil
	case "LessOrEqual":
		return FilterOperatorType_LessOrEqual, nil
	case "In":
		return FilterOperatorType_In, nil
	case "NotIn":
		return FilterOperatorType_NotIn, nil
	case "Like":
		return FilterOperatorType_Like, nil
	case "NotLike":
		return FilterOperatorType_NotLike, nil
	case "IsNull":
		return FilterOperatorType_IsNull, nil
	case "IsNotNull":
		return FilterOperatorType_IsNotNull, nil
	}
	return FilterOperatorType(0), fmt.Errorf("not a valid FilterOperatorType string")
}

func FilterOperatorTypePtr(v FilterOperatorType) *FilterOperatorType { return &v }
func (p *FilterOperatorType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = FilterOperatorType(result.Int64)
	return
}

func (p *FilterOperatorType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type ExptAggregateCalculateStatus int64

const (
	ExptAggregateCalculateStatus_Unknown     ExptAggregateCalculateStatus = 0
	ExptAggregateCalculateStatus_Idle        ExptAggregateCalculateStatus = 1
	ExptAggregateCalculateStatus_Calculating ExptAggregateCalculateStatus = 2
)

func (p ExptAggregateCalculateStatus) String() string {
	switch p {
	case ExptAggregateCalculateStatus_Unknown:
		return "Unknown"
	case ExptAggregateCalculateStatus_Idle:
		return "Idle"
	case ExptAggregateCalculateStatus_Calculating:
		return "Calculating"
	}
	return "<UNSET>"
}

func ExptAggregateCalculateStatusFromString(s string) (ExptAggregateCalculateStatus, error) {
	switch s {
	case "Unknown":
		return ExptAggregateCalculateStatus_Unknown, nil
	case "Idle":
		return ExptAggregateCalculateStatus_Idle, nil
	case "Calculating":
		return ExptAggregateCalculateStatus_Calculating, nil
	}
	return ExptAggregateCalculateStatus(0), fmt.Errorf("not a valid ExptAggregateCalculateStatus string")
}

func ExptAggregateCalculateStatusPtr(v ExptAggregateCalculateStatus) *ExptAggregateCalculateStatus {
	return &v
}
func (p *ExptAggregateCalculateStatus) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = ExptAggregateCalculateStatus(result.Int64)
	return
}

func (p *ExptAggregateCalculateStatus) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// 聚合器类型
type AggregatorType int64

const (
	AggregatorType_Average AggregatorType = 1
	AggregatorType_Sum     AggregatorType = 2
	AggregatorType_Max     AggregatorType = 3
	AggregatorType_Min     AggregatorType = 4
	// 得分的分布情况
	AggregatorType_Distribution AggregatorType = 5
)

func (p AggregatorType) String() string {
	switch p {
	case AggregatorType_Average:
		return "Average"
	case AggregatorType_Sum:
		return "Sum"
	case AggregatorType_Max:
		return "Max"
	case AggregatorType_Min:
		return "Min"
	case AggregatorType_Distribution:
		return "Distribution"
	}
	return "<UNSET>"
}

func AggregatorTypeFromString(s string) (AggregatorType, error) {
	switch s {
	case "Average":
		return AggregatorType_Average, nil
	case "Sum":
		return AggregatorType_Sum, nil
	case "Max":
		return AggregatorType_Max, nil
	case "Min":
		return AggregatorType_Min, nil
	case "Distribution":
		return AggregatorType_Distribution, nil
	}
	return AggregatorType(0), fmt.Errorf("not a valid AggregatorType string")
}

func AggregatorTypePtr(v AggregatorType) *AggregatorType { return &v }
func (p *AggregatorType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = AggregatorType(result.Int64)
	return
}

func (p *AggregatorType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type DataType int64

const (
	// 默认，有小数的浮点数值类型
	DataType_Double DataType = 0
	// 得分分布
	DataType_ScoreDistribution DataType = 1
)

func (p DataType) String() string {
	switch p {
	case DataType_Double:
		return "Double"
	case DataType_ScoreDistribution:
		return "ScoreDistribution"
	}
	return "<UNSET>"
}

func DataTypeFromString(s string) (DataType, error) {
	switch s {
	case "Double":
		return DataType_Double, nil
	case "ScoreDistribution":
		return DataType_ScoreDistribution, nil
	}
	return DataType(0), fmt.Errorf("not a valid DataType string")
}

func DataTypePtr(v DataType) *DataType { return &v }
func (p *DataType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = DataType(result.Int64)
	return
}

func (p *DataType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type Experiment struct {
	ID                    *int64                   `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id" form:"id" query:"id"`
	Name                  *string                  `thrift:"name,2,optional" frugal:"2,optional,string" form:"name" json:"name,omitempty" query:"name"`
	Desc                  *string                  `thrift:"desc,3,optional" frugal:"3,optional,string" form:"desc" json:"desc,omitempty" query:"desc"`
	CreatorBy             *string                  `thrift:"creator_by,4,optional" frugal:"4,optional,string" form:"creator_by" json:"creator_by,omitempty" query:"creator_by"`
	Status                *ExptStatus              `thrift:"status,5,optional" frugal:"5,optional,ExptStatus" form:"status" json:"status,omitempty" query:"status"`
	StatusMessage         *string                  `thrift:"status_message,6,optional" frugal:"6,optional,string" form:"status_message" json:"status_message,omitempty" query:"status_message"`
	StartTime             *int64                   `thrift:"start_time,7,optional" frugal:"7,optional,i64" json:"start_time" form:"start_time" query:"start_time"`
	EndTime               *int64                   `thrift:"end_time,8,optional" frugal:"8,optional,i64" json:"end_time" form:"end_time" query:"end_time"`
	EvalSetVersionID      *int64                   `thrift:"eval_set_version_id,21,optional" frugal:"21,optional,i64" json:"eval_set_version_id" form:"eval_set_version_id" query:"eval_set_version_id"`
	TargetVersionID       *int64                   `thrift:"target_version_id,22,optional" frugal:"22,optional,i64" json:"target_version_id" form:"target_version_id" query:"target_version_id"`
	EvaluatorVersionIds   []int64                  `thrift:"evaluator_version_ids,23,optional" frugal:"23,optional,list<i64>" json:"evaluator_version_ids" form:"evaluator_version_ids" query:"evaluator_version_ids"`
	EvalSet               *eval_set.EvaluationSet  `thrift:"eval_set,24,optional" frugal:"24,optional,eval_set.EvaluationSet" form:"eval_set" json:"eval_set,omitempty" query:"eval_set"`
	EvalTarget            *eval_target.EvalTarget  `thrift:"eval_target,25,optional" frugal:"25,optional,eval_target.EvalTarget" form:"eval_target" json:"eval_target,omitempty" query:"eval_target"`
	Evaluators            []*evaluator.Evaluator   `thrift:"evaluators,26,optional" frugal:"26,optional,list<evaluator.Evaluator>" form:"evaluators" json:"evaluators,omitempty" query:"evaluators"`
	EvalSetID             *int64                   `thrift:"eval_set_id,27,optional" frugal:"27,optional,i64" json:"eval_set_id" form:"eval_set_id" query:"eval_set_id"`
	TargetID              *int64                   `thrift:"target_id,28,optional" frugal:"28,optional,i64" json:"target_id" form:"target_id" query:"target_id"`
	BaseInfo              *common.BaseInfo         `thrift:"base_info,29,optional" frugal:"29,optional,common.BaseInfo" form:"base_info" json:"base_info,omitempty" query:"base_info"`
	ExptStats             *ExptStatistics          `thrift:"expt_stats,30,optional" frugal:"30,optional,ExptStatistics" form:"expt_stats" json:"expt_stats,omitempty" query:"expt_stats"`
	TargetFieldMapping    *TargetFieldMapping      `thrift:"target_field_mapping,31,optional" frugal:"31,optional,TargetFieldMapping" form:"target_field_mapping" json:"target_field_mapping,omitempty" query:"target_field_mapping"`
	EvaluatorFieldMapping []*EvaluatorFieldMapping `thrift:"evaluator_field_mapping,32,optional" frugal:"32,optional,list<EvaluatorFieldMapping>" form:"evaluator_field_mapping" json:"evaluator_field_mapping,omitempty" query:"evaluator_field_mapping"`
	ExptType              *ExptType                `thrift:"expt_type,40,optional" frugal:"40,optional,ExptType" form:"expt_type" json:"expt_type,omitempty" query:"expt_type"`
	MaxAliveTime          *int64                   `thrift:"max_alive_time,41,optional" frugal:"41,optional,i64" form:"max_alive_time" json:"max_alive_time,omitempty" query:"max_alive_time"`
	SourceType            *SourceType              `thrift:"source_type,42,optional" frugal:"42,optional,SourceType" form:"source_type" json:"source_type,omitempty" query:"source_type"`
	SourceID              *string                  `thrift:"source_id,43,optional" frugal:"43,optional,string" form:"source_id" json:"source_id,omitempty" query:"source_id"`
}

func NewExperiment() *Experiment {
	return &Experiment{}
}

func (p *Experiment) InitDefault() {
}

var Experiment_ID_DEFAULT int64

func (p *Experiment) GetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetID() {
		return Experiment_ID_DEFAULT
	}
	return *p.ID
}

var Experiment_Name_DEFAULT string

func (p *Experiment) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return Experiment_Name_DEFAULT
	}
	return *p.Name
}

var Experiment_Desc_DEFAULT string

func (p *Experiment) GetDesc() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDesc() {
		return Experiment_Desc_DEFAULT
	}
	return *p.Desc
}

var Experiment_CreatorBy_DEFAULT string

func (p *Experiment) GetCreatorBy() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetCreatorBy() {
		return Experiment_CreatorBy_DEFAULT
	}
	return *p.CreatorBy
}

var Experiment_Status_DEFAULT ExptStatus

func (p *Experiment) GetStatus() (v ExptStatus) {
	if p == nil {
		return
	}
	if !p.IsSetStatus() {
		return Experiment_Status_DEFAULT
	}
	return *p.Status
}

var Experiment_StatusMessage_DEFAULT string

func (p *Experiment) GetStatusMessage() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetStatusMessage() {
		return Experiment_StatusMessage_DEFAULT
	}
	return *p.StatusMessage
}

var Experiment_StartTime_DEFAULT int64

func (p *Experiment) GetStartTime() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetStartTime() {
		return Experiment_StartTime_DEFAULT
	}
	return *p.StartTime
}

var Experiment_EndTime_DEFAULT int64

func (p *Experiment) GetEndTime() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetEndTime() {
		return Experiment_EndTime_DEFAULT
	}
	return *p.EndTime
}

var Experiment_EvalSetVersionID_DEFAULT int64

func (p *Experiment) GetEvalSetVersionID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetEvalSetVersionID() {
		return Experiment_EvalSetVersionID_DEFAULT
	}
	return *p.EvalSetVersionID
}

var Experiment_TargetVersionID_DEFAULT int64

func (p *Experiment) GetTargetVersionID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTargetVersionID() {
		return Experiment_TargetVersionID_DEFAULT
	}
	return *p.TargetVersionID
}

var Experiment_EvaluatorVersionIds_DEFAULT []int64

func (p *Experiment) GetEvaluatorVersionIds() (v []int64) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorVersionIds() {
		return Experiment_EvaluatorVersionIds_DEFAULT
	}
	return p.EvaluatorVersionIds
}

var Experiment_EvalSet_DEFAULT *eval_set.EvaluationSet

func (p *Experiment) GetEvalSet() (v *eval_set.EvaluationSet) {
	if p == nil {
		return
	}
	if !p.IsSetEvalSet() {
		return Experiment_EvalSet_DEFAULT
	}
	return p.EvalSet
}

var Experiment_EvalTarget_DEFAULT *eval_target.EvalTarget

func (p *Experiment) GetEvalTarget() (v *eval_target.EvalTarget) {
	if p == nil {
		return
	}
	if !p.IsSetEvalTarget() {
		return Experiment_EvalTarget_DEFAULT
	}
	return p.EvalTarget
}

var Experiment_Evaluators_DEFAULT []*evaluator.Evaluator

func (p *Experiment) GetEvaluators() (v []*evaluator.Evaluator) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluators() {
		return Experiment_Evaluators_DEFAULT
	}
	return p.Evaluators
}

var Experiment_EvalSetID_DEFAULT int64

func (p *Experiment) GetEvalSetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetEvalSetID() {
		return Experiment_EvalSetID_DEFAULT
	}
	return *p.EvalSetID
}

var Experiment_TargetID_DEFAULT int64

func (p *Experiment) GetTargetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTargetID() {
		return Experiment_TargetID_DEFAULT
	}
	return *p.TargetID
}

var Experiment_BaseInfo_DEFAULT *common.BaseInfo

func (p *Experiment) GetBaseInfo() (v *common.BaseInfo) {
	if p == nil {
		return
	}
	if !p.IsSetBaseInfo() {
		return Experiment_BaseInfo_DEFAULT
	}
	return p.BaseInfo
}

var Experiment_ExptStats_DEFAULT *ExptStatistics

func (p *Experiment) GetExptStats() (v *ExptStatistics) {
	if p == nil {
		return
	}
	if !p.IsSetExptStats() {
		return Experiment_ExptStats_DEFAULT
	}
	return p.ExptStats
}

var Experiment_TargetFieldMapping_DEFAULT *TargetFieldMapping

func (p *Experiment) GetTargetFieldMapping() (v *TargetFieldMapping) {
	if p == nil {
		return
	}
	if !p.IsSetTargetFieldMapping() {
		return Experiment_TargetFieldMapping_DEFAULT
	}
	return p.TargetFieldMapping
}

var Experiment_EvaluatorFieldMapping_DEFAULT []*EvaluatorFieldMapping

func (p *Experiment) GetEvaluatorFieldMapping() (v []*EvaluatorFieldMapping) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorFieldMapping() {
		return Experiment_EvaluatorFieldMapping_DEFAULT
	}
	return p.EvaluatorFieldMapping
}

var Experiment_ExptType_DEFAULT ExptType

func (p *Experiment) GetExptType() (v ExptType) {
	if p == nil {
		return
	}
	if !p.IsSetExptType() {
		return Experiment_ExptType_DEFAULT
	}
	return *p.ExptType
}

var Experiment_MaxAliveTime_DEFAULT int64

func (p *Experiment) GetMaxAliveTime() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetMaxAliveTime() {
		return Experiment_MaxAliveTime_DEFAULT
	}
	return *p.MaxAliveTime
}

var Experiment_SourceType_DEFAULT SourceType

func (p *Experiment) GetSourceType() (v SourceType) {
	if p == nil {
		return
	}
	if !p.IsSetSourceType() {
		return Experiment_SourceType_DEFAULT
	}
	return *p.SourceType
}

var Experiment_SourceID_DEFAULT string

func (p *Experiment) GetSourceID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetSourceID() {
		return Experiment_SourceID_DEFAULT
	}
	return *p.SourceID
}
func (p *Experiment) SetID(val *int64) {
	p.ID = val
}
func (p *Experiment) SetName(val *string) {
	p.Name = val
}
func (p *Experiment) SetDesc(val *string) {
	p.Desc = val
}
func (p *Experiment) SetCreatorBy(val *string) {
	p.CreatorBy = val
}
func (p *Experiment) SetStatus(val *ExptStatus) {
	p.Status = val
}
func (p *Experiment) SetStatusMessage(val *string) {
	p.StatusMessage = val
}
func (p *Experiment) SetStartTime(val *int64) {
	p.StartTime = val
}
func (p *Experiment) SetEndTime(val *int64) {
	p.EndTime = val
}
func (p *Experiment) SetEvalSetVersionID(val *int64) {
	p.EvalSetVersionID = val
}
func (p *Experiment) SetTargetVersionID(val *int64) {
	p.TargetVersionID = val
}
func (p *Experiment) SetEvaluatorVersionIds(val []int64) {
	p.EvaluatorVersionIds = val
}
func (p *Experiment) SetEvalSet(val *eval_set.EvaluationSet) {
	p.EvalSet = val
}
func (p *Experiment) SetEvalTarget(val *eval_target.EvalTarget) {
	p.EvalTarget = val
}
func (p *Experiment) SetEvaluators(val []*evaluator.Evaluator) {
	p.Evaluators = val
}
func (p *Experiment) SetEvalSetID(val *int64) {
	p.EvalSetID = val
}
func (p *Experiment) SetTargetID(val *int64) {
	p.TargetID = val
}
func (p *Experiment) SetBaseInfo(val *common.BaseInfo) {
	p.BaseInfo = val
}
func (p *Experiment) SetExptStats(val *ExptStatistics) {
	p.ExptStats = val
}
func (p *Experiment) SetTargetFieldMapping(val *TargetFieldMapping) {
	p.TargetFieldMapping = val
}
func (p *Experiment) SetEvaluatorFieldMapping(val []*EvaluatorFieldMapping) {
	p.EvaluatorFieldMapping = val
}
func (p *Experiment) SetExptType(val *ExptType) {
	p.ExptType = val
}
func (p *Experiment) SetMaxAliveTime(val *int64) {
	p.MaxAliveTime = val
}
func (p *Experiment) SetSourceType(val *SourceType) {
	p.SourceType = val
}
func (p *Experiment) SetSourceID(val *string) {
	p.SourceID = val
}

var fieldIDToName_Experiment = map[int16]string{
	1:  "id",
	2:  "name",
	3:  "desc",
	4:  "creator_by",
	5:  "status",
	6:  "status_message",
	7:  "start_time",
	8:  "end_time",
	21: "eval_set_version_id",
	22: "target_version_id",
	23: "evaluator_version_ids",
	24: "eval_set",
	25: "eval_target",
	26: "evaluators",
	27: "eval_set_id",
	28: "target_id",
	29: "base_info",
	30: "expt_stats",
	31: "target_field_mapping",
	32: "evaluator_field_mapping",
	40: "expt_type",
	41: "max_alive_time",
	42: "source_type",
	43: "source_id",
}

func (p *Experiment) IsSetID() bool {
	return p.ID != nil
}

func (p *Experiment) IsSetName() bool {
	return p.Name != nil
}

func (p *Experiment) IsSetDesc() bool {
	return p.Desc != nil
}

func (p *Experiment) IsSetCreatorBy() bool {
	return p.CreatorBy != nil
}

func (p *Experiment) IsSetStatus() bool {
	return p.Status != nil
}

func (p *Experiment) IsSetStatusMessage() bool {
	return p.StatusMessage != nil
}

func (p *Experiment) IsSetStartTime() bool {
	return p.StartTime != nil
}

func (p *Experiment) IsSetEndTime() bool {
	return p.EndTime != nil
}

func (p *Experiment) IsSetEvalSetVersionID() bool {
	return p.EvalSetVersionID != nil
}

func (p *Experiment) IsSetTargetVersionID() bool {
	return p.TargetVersionID != nil
}

func (p *Experiment) IsSetEvaluatorVersionIds() bool {
	return p.EvaluatorVersionIds != nil
}

func (p *Experiment) IsSetEvalSet() bool {
	return p.EvalSet != nil
}

func (p *Experiment) IsSetEvalTarget() bool {
	return p.EvalTarget != nil
}

func (p *Experiment) IsSetEvaluators() bool {
	return p.Evaluators != nil
}

func (p *Experiment) IsSetEvalSetID() bool {
	return p.EvalSetID != nil
}

func (p *Experiment) IsSetTargetID() bool {
	return p.TargetID != nil
}

func (p *Experiment) IsSetBaseInfo() bool {
	return p.BaseInfo != nil
}

func (p *Experiment) IsSetExptStats() bool {
	return p.ExptStats != nil
}

func (p *Experiment) IsSetTargetFieldMapping() bool {
	return p.TargetFieldMapping != nil
}

func (p *Experiment) IsSetEvaluatorFieldMapping() bool {
	return p.EvaluatorFieldMapping != nil
}

func (p *Experiment) IsSetExptType() bool {
	return p.ExptType != nil
}

func (p *Experiment) IsSetMaxAliveTime() bool {
	return p.MaxAliveTime != nil
}

func (p *Experiment) IsSetSourceType() bool {
	return p.SourceType != nil
}

func (p *Experiment) IsSetSourceID() bool {
	return p.SourceID != nil
}

func (p *Experiment) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 22:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 23:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField23(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 24:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField24(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 25:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField25(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 26:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField26(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 27:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField27(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 28:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField28(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 29:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField29(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 30:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField30(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 31:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField31(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 32:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField32(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 40:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField40(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 41:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField41(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 42:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField42(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 43:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField43(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Experiment[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Experiment) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ID = _field
	return nil
}
func (p *Experiment) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *Experiment) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Desc = _field
	return nil
}
func (p *Experiment) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CreatorBy = _field
	return nil
}
func (p *Experiment) ReadField5(iprot thrift.TProtocol) error {

	var _field *ExptStatus
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := ExptStatus(v)
		_field = &tmp
	}
	p.Status = _field
	return nil
}
func (p *Experiment) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.StatusMessage = _field
	return nil
}
func (p *Experiment) ReadField7(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.StartTime = _field
	return nil
}
func (p *Experiment) ReadField8(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EndTime = _field
	return nil
}
func (p *Experiment) ReadField21(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvalSetVersionID = _field
	return nil
}
func (p *Experiment) ReadField22(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TargetVersionID = _field
	return nil
}
func (p *Experiment) ReadField23(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.EvaluatorVersionIds = _field
	return nil
}
func (p *Experiment) ReadField24(iprot thrift.TProtocol) error {
	_field := eval_set.NewEvaluationSet()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvalSet = _field
	return nil
}
func (p *Experiment) ReadField25(iprot thrift.TProtocol) error {
	_field := eval_target.NewEvalTarget()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvalTarget = _field
	return nil
}
func (p *Experiment) ReadField26(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*evaluator.Evaluator, 0, size)
	values := make([]evaluator.Evaluator, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Evaluators = _field
	return nil
}
func (p *Experiment) ReadField27(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvalSetID = _field
	return nil
}
func (p *Experiment) ReadField28(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TargetID = _field
	return nil
}
func (p *Experiment) ReadField29(iprot thrift.TProtocol) error {
	_field := common.NewBaseInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseInfo = _field
	return nil
}
func (p *Experiment) ReadField30(iprot thrift.TProtocol) error {
	_field := NewExptStatistics()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ExptStats = _field
	return nil
}
func (p *Experiment) ReadField31(iprot thrift.TProtocol) error {
	_field := NewTargetFieldMapping()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.TargetFieldMapping = _field
	return nil
}
func (p *Experiment) ReadField32(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*EvaluatorFieldMapping, 0, size)
	values := make([]EvaluatorFieldMapping, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.EvaluatorFieldMapping = _field
	return nil
}
func (p *Experiment) ReadField40(iprot thrift.TProtocol) error {

	var _field *ExptType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := ExptType(v)
		_field = &tmp
	}
	p.ExptType = _field
	return nil
}
func (p *Experiment) ReadField41(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MaxAliveTime = _field
	return nil
}
func (p *Experiment) ReadField42(iprot thrift.TProtocol) error {

	var _field *SourceType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := SourceType(v)
		_field = &tmp
	}
	p.SourceType = _field
	return nil
}
func (p *Experiment) ReadField43(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SourceID = _field
	return nil
}

func (p *Experiment) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Experiment"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
		if err = p.writeField23(oprot); err != nil {
			fieldId = 23
			goto WriteFieldError
		}
		if err = p.writeField24(oprot); err != nil {
			fieldId = 24
			goto WriteFieldError
		}
		if err = p.writeField25(oprot); err != nil {
			fieldId = 25
			goto WriteFieldError
		}
		if err = p.writeField26(oprot); err != nil {
			fieldId = 26
			goto WriteFieldError
		}
		if err = p.writeField27(oprot); err != nil {
			fieldId = 27
			goto WriteFieldError
		}
		if err = p.writeField28(oprot); err != nil {
			fieldId = 28
			goto WriteFieldError
		}
		if err = p.writeField29(oprot); err != nil {
			fieldId = 29
			goto WriteFieldError
		}
		if err = p.writeField30(oprot); err != nil {
			fieldId = 30
			goto WriteFieldError
		}
		if err = p.writeField31(oprot); err != nil {
			fieldId = 31
			goto WriteFieldError
		}
		if err = p.writeField32(oprot); err != nil {
			fieldId = 32
			goto WriteFieldError
		}
		if err = p.writeField40(oprot); err != nil {
			fieldId = 40
			goto WriteFieldError
		}
		if err = p.writeField41(oprot); err != nil {
			fieldId = 41
			goto WriteFieldError
		}
		if err = p.writeField42(oprot); err != nil {
			fieldId = 42
			goto WriteFieldError
		}
		if err = p.writeField43(oprot); err != nil {
			fieldId = 43
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Experiment) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *Experiment) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *Experiment) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDesc() {
		if err = oprot.WriteFieldBegin("desc", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Desc); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *Experiment) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatorBy() {
		if err = oprot.WriteFieldBegin("creator_by", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CreatorBy); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *Experiment) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.I32, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Status)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *Experiment) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatusMessage() {
		if err = oprot.WriteFieldBegin("status_message", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.StatusMessage); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *Experiment) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartTime() {
		if err = oprot.WriteFieldBegin("start_time", thrift.I64, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.StartTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}
func (p *Experiment) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndTime() {
		if err = oprot.WriteFieldBegin("end_time", thrift.I64, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.EndTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}
func (p *Experiment) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvalSetVersionID() {
		if err = oprot.WriteFieldBegin("eval_set_version_id", thrift.I64, 21); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.EvalSetVersionID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}
func (p *Experiment) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetTargetVersionID() {
		if err = oprot.WriteFieldBegin("target_version_id", thrift.I64, 22); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TargetVersionID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}
func (p *Experiment) writeField23(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorVersionIds() {
		if err = oprot.WriteFieldBegin("evaluator_version_ids", thrift.LIST, 23); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.EvaluatorVersionIds)); err != nil {
			return err
		}
		for _, v := range p.EvaluatorVersionIds {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 end error: ", p), err)
}
func (p *Experiment) writeField24(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvalSet() {
		if err = oprot.WriteFieldBegin("eval_set", thrift.STRUCT, 24); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.EvalSet.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 end error: ", p), err)
}
func (p *Experiment) writeField25(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvalTarget() {
		if err = oprot.WriteFieldBegin("eval_target", thrift.STRUCT, 25); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.EvalTarget.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 end error: ", p), err)
}
func (p *Experiment) writeField26(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluators() {
		if err = oprot.WriteFieldBegin("evaluators", thrift.LIST, 26); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Evaluators)); err != nil {
			return err
		}
		for _, v := range p.Evaluators {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 26 end error: ", p), err)
}
func (p *Experiment) writeField27(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvalSetID() {
		if err = oprot.WriteFieldBegin("eval_set_id", thrift.I64, 27); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.EvalSetID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 27 end error: ", p), err)
}
func (p *Experiment) writeField28(oprot thrift.TProtocol) (err error) {
	if p.IsSetTargetID() {
		if err = oprot.WriteFieldBegin("target_id", thrift.I64, 28); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TargetID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 28 end error: ", p), err)
}
func (p *Experiment) writeField29(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseInfo() {
		if err = oprot.WriteFieldBegin("base_info", thrift.STRUCT, 29); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseInfo.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 29 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 29 end error: ", p), err)
}
func (p *Experiment) writeField30(oprot thrift.TProtocol) (err error) {
	if p.IsSetExptStats() {
		if err = oprot.WriteFieldBegin("expt_stats", thrift.STRUCT, 30); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ExptStats.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 30 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 30 end error: ", p), err)
}
func (p *Experiment) writeField31(oprot thrift.TProtocol) (err error) {
	if p.IsSetTargetFieldMapping() {
		if err = oprot.WriteFieldBegin("target_field_mapping", thrift.STRUCT, 31); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.TargetFieldMapping.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 31 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 31 end error: ", p), err)
}
func (p *Experiment) writeField32(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorFieldMapping() {
		if err = oprot.WriteFieldBegin("evaluator_field_mapping", thrift.LIST, 32); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EvaluatorFieldMapping)); err != nil {
			return err
		}
		for _, v := range p.EvaluatorFieldMapping {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 32 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 32 end error: ", p), err)
}
func (p *Experiment) writeField40(oprot thrift.TProtocol) (err error) {
	if p.IsSetExptType() {
		if err = oprot.WriteFieldBegin("expt_type", thrift.I32, 40); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.ExptType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 40 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 40 end error: ", p), err)
}
func (p *Experiment) writeField41(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxAliveTime() {
		if err = oprot.WriteFieldBegin("max_alive_time", thrift.I64, 41); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.MaxAliveTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 41 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 41 end error: ", p), err)
}
func (p *Experiment) writeField42(oprot thrift.TProtocol) (err error) {
	if p.IsSetSourceType() {
		if err = oprot.WriteFieldBegin("source_type", thrift.I32, 42); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.SourceType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 42 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 42 end error: ", p), err)
}
func (p *Experiment) writeField43(oprot thrift.TProtocol) (err error) {
	if p.IsSetSourceID() {
		if err = oprot.WriteFieldBegin("source_id", thrift.STRING, 43); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.SourceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 43 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 43 end error: ", p), err)
}

func (p *Experiment) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Experiment(%+v)", *p)

}

func (p *Experiment) DeepEqual(ano *Experiment) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Desc) {
		return false
	}
	if !p.Field4DeepEqual(ano.CreatorBy) {
		return false
	}
	if !p.Field5DeepEqual(ano.Status) {
		return false
	}
	if !p.Field6DeepEqual(ano.StatusMessage) {
		return false
	}
	if !p.Field7DeepEqual(ano.StartTime) {
		return false
	}
	if !p.Field8DeepEqual(ano.EndTime) {
		return false
	}
	if !p.Field21DeepEqual(ano.EvalSetVersionID) {
		return false
	}
	if !p.Field22DeepEqual(ano.TargetVersionID) {
		return false
	}
	if !p.Field23DeepEqual(ano.EvaluatorVersionIds) {
		return false
	}
	if !p.Field24DeepEqual(ano.EvalSet) {
		return false
	}
	if !p.Field25DeepEqual(ano.EvalTarget) {
		return false
	}
	if !p.Field26DeepEqual(ano.Evaluators) {
		return false
	}
	if !p.Field27DeepEqual(ano.EvalSetID) {
		return false
	}
	if !p.Field28DeepEqual(ano.TargetID) {
		return false
	}
	if !p.Field29DeepEqual(ano.BaseInfo) {
		return false
	}
	if !p.Field30DeepEqual(ano.ExptStats) {
		return false
	}
	if !p.Field31DeepEqual(ano.TargetFieldMapping) {
		return false
	}
	if !p.Field32DeepEqual(ano.EvaluatorFieldMapping) {
		return false
	}
	if !p.Field40DeepEqual(ano.ExptType) {
		return false
	}
	if !p.Field41DeepEqual(ano.MaxAliveTime) {
		return false
	}
	if !p.Field42DeepEqual(ano.SourceType) {
		return false
	}
	if !p.Field43DeepEqual(ano.SourceID) {
		return false
	}
	return true
}

func (p *Experiment) Field1DeepEqual(src *int64) bool {

	if p.ID == src {
		return true
	} else if p.ID == nil || src == nil {
		return false
	}
	if *p.ID != *src {
		return false
	}
	return true
}
func (p *Experiment) Field2DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *Experiment) Field3DeepEqual(src *string) bool {

	if p.Desc == src {
		return true
	} else if p.Desc == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Desc, *src) != 0 {
		return false
	}
	return true
}
func (p *Experiment) Field4DeepEqual(src *string) bool {

	if p.CreatorBy == src {
		return true
	} else if p.CreatorBy == nil || src == nil {
		return false
	}
	if strings.Compare(*p.CreatorBy, *src) != 0 {
		return false
	}
	return true
}
func (p *Experiment) Field5DeepEqual(src *ExptStatus) bool {

	if p.Status == src {
		return true
	} else if p.Status == nil || src == nil {
		return false
	}
	if *p.Status != *src {
		return false
	}
	return true
}
func (p *Experiment) Field6DeepEqual(src *string) bool {

	if p.StatusMessage == src {
		return true
	} else if p.StatusMessage == nil || src == nil {
		return false
	}
	if strings.Compare(*p.StatusMessage, *src) != 0 {
		return false
	}
	return true
}
func (p *Experiment) Field7DeepEqual(src *int64) bool {

	if p.StartTime == src {
		return true
	} else if p.StartTime == nil || src == nil {
		return false
	}
	if *p.StartTime != *src {
		return false
	}
	return true
}
func (p *Experiment) Field8DeepEqual(src *int64) bool {

	if p.EndTime == src {
		return true
	} else if p.EndTime == nil || src == nil {
		return false
	}
	if *p.EndTime != *src {
		return false
	}
	return true
}
func (p *Experiment) Field21DeepEqual(src *int64) bool {

	if p.EvalSetVersionID == src {
		return true
	} else if p.EvalSetVersionID == nil || src == nil {
		return false
	}
	if *p.EvalSetVersionID != *src {
		return false
	}
	return true
}
func (p *Experiment) Field22DeepEqual(src *int64) bool {

	if p.TargetVersionID == src {
		return true
	} else if p.TargetVersionID == nil || src == nil {
		return false
	}
	if *p.TargetVersionID != *src {
		return false
	}
	return true
}
func (p *Experiment) Field23DeepEqual(src []int64) bool {

	if len(p.EvaluatorVersionIds) != len(src) {
		return false
	}
	for i, v := range p.EvaluatorVersionIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *Experiment) Field24DeepEqual(src *eval_set.EvaluationSet) bool {

	if !p.EvalSet.DeepEqual(src) {
		return false
	}
	return true
}
func (p *Experiment) Field25DeepEqual(src *eval_target.EvalTarget) bool {

	if !p.EvalTarget.DeepEqual(src) {
		return false
	}
	return true
}
func (p *Experiment) Field26DeepEqual(src []*evaluator.Evaluator) bool {

	if len(p.Evaluators) != len(src) {
		return false
	}
	for i, v := range p.Evaluators {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *Experiment) Field27DeepEqual(src *int64) bool {

	if p.EvalSetID == src {
		return true
	} else if p.EvalSetID == nil || src == nil {
		return false
	}
	if *p.EvalSetID != *src {
		return false
	}
	return true
}
func (p *Experiment) Field28DeepEqual(src *int64) bool {

	if p.TargetID == src {
		return true
	} else if p.TargetID == nil || src == nil {
		return false
	}
	if *p.TargetID != *src {
		return false
	}
	return true
}
func (p *Experiment) Field29DeepEqual(src *common.BaseInfo) bool {

	if !p.BaseInfo.DeepEqual(src) {
		return false
	}
	return true
}
func (p *Experiment) Field30DeepEqual(src *ExptStatistics) bool {

	if !p.ExptStats.DeepEqual(src) {
		return false
	}
	return true
}
func (p *Experiment) Field31DeepEqual(src *TargetFieldMapping) bool {

	if !p.TargetFieldMapping.DeepEqual(src) {
		return false
	}
	return true
}
func (p *Experiment) Field32DeepEqual(src []*EvaluatorFieldMapping) bool {

	if len(p.EvaluatorFieldMapping) != len(src) {
		return false
	}
	for i, v := range p.EvaluatorFieldMapping {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *Experiment) Field40DeepEqual(src *ExptType) bool {

	if p.ExptType == src {
		return true
	} else if p.ExptType == nil || src == nil {
		return false
	}
	if *p.ExptType != *src {
		return false
	}
	return true
}
func (p *Experiment) Field41DeepEqual(src *int64) bool {

	if p.MaxAliveTime == src {
		return true
	} else if p.MaxAliveTime == nil || src == nil {
		return false
	}
	if *p.MaxAliveTime != *src {
		return false
	}
	return true
}
func (p *Experiment) Field42DeepEqual(src *SourceType) bool {

	if p.SourceType == src {
		return true
	} else if p.SourceType == nil || src == nil {
		return false
	}
	if *p.SourceType != *src {
		return false
	}
	return true
}
func (p *Experiment) Field43DeepEqual(src *string) bool {

	if p.SourceID == src {
		return true
	} else if p.SourceID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.SourceID, *src) != 0 {
		return false
	}
	return true
}

type TokenUsage struct {
	InputTokens  *int64 `thrift:"input_tokens,1,optional" frugal:"1,optional,i64" json:"input_tokens" form:"input_tokens" query:"input_tokens"`
	OutputTokens *int64 `thrift:"output_tokens,2,optional" frugal:"2,optional,i64" json:"output_tokens" form:"output_tokens" query:"output_tokens"`
}

func NewTokenUsage() *TokenUsage {
	return &TokenUsage{}
}

func (p *TokenUsage) InitDefault() {
}

var TokenUsage_InputTokens_DEFAULT int64

func (p *TokenUsage) GetInputTokens() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetInputTokens() {
		return TokenUsage_InputTokens_DEFAULT
	}
	return *p.InputTokens
}

var TokenUsage_OutputTokens_DEFAULT int64

func (p *TokenUsage) GetOutputTokens() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetOutputTokens() {
		return TokenUsage_OutputTokens_DEFAULT
	}
	return *p.OutputTokens
}
func (p *TokenUsage) SetInputTokens(val *int64) {
	p.InputTokens = val
}
func (p *TokenUsage) SetOutputTokens(val *int64) {
	p.OutputTokens = val
}

var fieldIDToName_TokenUsage = map[int16]string{
	1: "input_tokens",
	2: "output_tokens",
}

func (p *TokenUsage) IsSetInputTokens() bool {
	return p.InputTokens != nil
}

func (p *TokenUsage) IsSetOutputTokens() bool {
	return p.OutputTokens != nil
}

func (p *TokenUsage) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TokenUsage[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TokenUsage) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.InputTokens = _field
	return nil
}
func (p *TokenUsage) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.OutputTokens = _field
	return nil
}

func (p *TokenUsage) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TokenUsage"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TokenUsage) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetInputTokens() {
		if err = oprot.WriteFieldBegin("input_tokens", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.InputTokens); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *TokenUsage) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutputTokens() {
		if err = oprot.WriteFieldBegin("output_tokens", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.OutputTokens); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TokenUsage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TokenUsage(%+v)", *p)

}

func (p *TokenUsage) DeepEqual(ano *TokenUsage) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.InputTokens) {
		return false
	}
	if !p.Field2DeepEqual(ano.OutputTokens) {
		return false
	}
	return true
}

func (p *TokenUsage) Field1DeepEqual(src *int64) bool {

	if p.InputTokens == src {
		return true
	} else if p.InputTokens == nil || src == nil {
		return false
	}
	if *p.InputTokens != *src {
		return false
	}
	return true
}
func (p *TokenUsage) Field2DeepEqual(src *int64) bool {

	if p.OutputTokens == src {
		return true
	} else if p.OutputTokens == nil || src == nil {
		return false
	}
	if *p.OutputTokens != *src {
		return false
	}
	return true
}

type ExptStatistics struct {
	EvaluatorAggregateResults []*EvaluatorAggregateResult_ `thrift:"evaluator_aggregate_results,1,optional" frugal:"1,optional,list<EvaluatorAggregateResult_>" form:"evaluator_aggregate_results" json:"evaluator_aggregate_results,omitempty" query:"evaluator_aggregate_results"`
	TokenUsage                *TokenUsage                  `thrift:"token_usage,2,optional" frugal:"2,optional,TokenUsage" form:"token_usage" json:"token_usage,omitempty" query:"token_usage"`
	CreditCost                *float64                     `thrift:"credit_cost,3,optional" frugal:"3,optional,double" form:"credit_cost" json:"credit_cost,omitempty" query:"credit_cost"`
	PendingTurnCnt            *int32                       `thrift:"pending_turn_cnt,4,optional" frugal:"4,optional,i32" form:"pending_turn_cnt" json:"pending_turn_cnt,omitempty" query:"pending_turn_cnt"`
	SuccessTurnCnt            *int32                       `thrift:"success_turn_cnt,5,optional" frugal:"5,optional,i32" form:"success_turn_cnt" json:"success_turn_cnt,omitempty" query:"success_turn_cnt"`
	FailTurnCnt               *int32                       `thrift:"fail_turn_cnt,6,optional" frugal:"6,optional,i32" form:"fail_turn_cnt" json:"fail_turn_cnt,omitempty" query:"fail_turn_cnt"`
	TerminatedTurnCnt         *int32                       `thrift:"terminated_turn_cnt,7,optional" frugal:"7,optional,i32" form:"terminated_turn_cnt" json:"terminated_turn_cnt,omitempty" query:"terminated_turn_cnt"`
	ProcessingTurnCnt         *int32                       `thrift:"processing_turn_cnt,8,optional" frugal:"8,optional,i32" form:"processing_turn_cnt" json:"processing_turn_cnt,omitempty" query:"processing_turn_cnt"`
}

func NewExptStatistics() *ExptStatistics {
	return &ExptStatistics{}
}

func (p *ExptStatistics) InitDefault() {
}

var ExptStatistics_EvaluatorAggregateResults_DEFAULT []*EvaluatorAggregateResult_

func (p *ExptStatistics) GetEvaluatorAggregateResults() (v []*EvaluatorAggregateResult_) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorAggregateResults() {
		return ExptStatistics_EvaluatorAggregateResults_DEFAULT
	}
	return p.EvaluatorAggregateResults
}

var ExptStatistics_TokenUsage_DEFAULT *TokenUsage

func (p *ExptStatistics) GetTokenUsage() (v *TokenUsage) {
	if p == nil {
		return
	}
	if !p.IsSetTokenUsage() {
		return ExptStatistics_TokenUsage_DEFAULT
	}
	return p.TokenUsage
}

var ExptStatistics_CreditCost_DEFAULT float64

func (p *ExptStatistics) GetCreditCost() (v float64) {
	if p == nil {
		return
	}
	if !p.IsSetCreditCost() {
		return ExptStatistics_CreditCost_DEFAULT
	}
	return *p.CreditCost
}

var ExptStatistics_PendingTurnCnt_DEFAULT int32

func (p *ExptStatistics) GetPendingTurnCnt() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPendingTurnCnt() {
		return ExptStatistics_PendingTurnCnt_DEFAULT
	}
	return *p.PendingTurnCnt
}

var ExptStatistics_SuccessTurnCnt_DEFAULT int32

func (p *ExptStatistics) GetSuccessTurnCnt() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetSuccessTurnCnt() {
		return ExptStatistics_SuccessTurnCnt_DEFAULT
	}
	return *p.SuccessTurnCnt
}

var ExptStatistics_FailTurnCnt_DEFAULT int32

func (p *ExptStatistics) GetFailTurnCnt() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetFailTurnCnt() {
		return ExptStatistics_FailTurnCnt_DEFAULT
	}
	return *p.FailTurnCnt
}

var ExptStatistics_TerminatedTurnCnt_DEFAULT int32

func (p *ExptStatistics) GetTerminatedTurnCnt() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetTerminatedTurnCnt() {
		return ExptStatistics_TerminatedTurnCnt_DEFAULT
	}
	return *p.TerminatedTurnCnt
}

var ExptStatistics_ProcessingTurnCnt_DEFAULT int32

func (p *ExptStatistics) GetProcessingTurnCnt() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetProcessingTurnCnt() {
		return ExptStatistics_ProcessingTurnCnt_DEFAULT
	}
	return *p.ProcessingTurnCnt
}
func (p *ExptStatistics) SetEvaluatorAggregateResults(val []*EvaluatorAggregateResult_) {
	p.EvaluatorAggregateResults = val
}
func (p *ExptStatistics) SetTokenUsage(val *TokenUsage) {
	p.TokenUsage = val
}
func (p *ExptStatistics) SetCreditCost(val *float64) {
	p.CreditCost = val
}
func (p *ExptStatistics) SetPendingTurnCnt(val *int32) {
	p.PendingTurnCnt = val
}
func (p *ExptStatistics) SetSuccessTurnCnt(val *int32) {
	p.SuccessTurnCnt = val
}
func (p *ExptStatistics) SetFailTurnCnt(val *int32) {
	p.FailTurnCnt = val
}
func (p *ExptStatistics) SetTerminatedTurnCnt(val *int32) {
	p.TerminatedTurnCnt = val
}
func (p *ExptStatistics) SetProcessingTurnCnt(val *int32) {
	p.ProcessingTurnCnt = val
}

var fieldIDToName_ExptStatistics = map[int16]string{
	1: "evaluator_aggregate_results",
	2: "token_usage",
	3: "credit_cost",
	4: "pending_turn_cnt",
	5: "success_turn_cnt",
	6: "fail_turn_cnt",
	7: "terminated_turn_cnt",
	8: "processing_turn_cnt",
}

func (p *ExptStatistics) IsSetEvaluatorAggregateResults() bool {
	return p.EvaluatorAggregateResults != nil
}

func (p *ExptStatistics) IsSetTokenUsage() bool {
	return p.TokenUsage != nil
}

func (p *ExptStatistics) IsSetCreditCost() bool {
	return p.CreditCost != nil
}

func (p *ExptStatistics) IsSetPendingTurnCnt() bool {
	return p.PendingTurnCnt != nil
}

func (p *ExptStatistics) IsSetSuccessTurnCnt() bool {
	return p.SuccessTurnCnt != nil
}

func (p *ExptStatistics) IsSetFailTurnCnt() bool {
	return p.FailTurnCnt != nil
}

func (p *ExptStatistics) IsSetTerminatedTurnCnt() bool {
	return p.TerminatedTurnCnt != nil
}

func (p *ExptStatistics) IsSetProcessingTurnCnt() bool {
	return p.ProcessingTurnCnt != nil
}

func (p *ExptStatistics) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExptStatistics[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExptStatistics) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*EvaluatorAggregateResult_, 0, size)
	values := make([]EvaluatorAggregateResult_, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.EvaluatorAggregateResults = _field
	return nil
}
func (p *ExptStatistics) ReadField2(iprot thrift.TProtocol) error {
	_field := NewTokenUsage()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.TokenUsage = _field
	return nil
}
func (p *ExptStatistics) ReadField3(iprot thrift.TProtocol) error {

	var _field *float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CreditCost = _field
	return nil
}
func (p *ExptStatistics) ReadField4(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PendingTurnCnt = _field
	return nil
}
func (p *ExptStatistics) ReadField5(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SuccessTurnCnt = _field
	return nil
}
func (p *ExptStatistics) ReadField6(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FailTurnCnt = _field
	return nil
}
func (p *ExptStatistics) ReadField7(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TerminatedTurnCnt = _field
	return nil
}
func (p *ExptStatistics) ReadField8(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ProcessingTurnCnt = _field
	return nil
}

func (p *ExptStatistics) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ExptStatistics"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExptStatistics) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorAggregateResults() {
		if err = oprot.WriteFieldBegin("evaluator_aggregate_results", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.EvaluatorAggregateResults)); err != nil {
			return err
		}
		for _, v := range p.EvaluatorAggregateResults {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ExptStatistics) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTokenUsage() {
		if err = oprot.WriteFieldBegin("token_usage", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.TokenUsage.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ExptStatistics) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreditCost() {
		if err = oprot.WriteFieldBegin("credit_cost", thrift.DOUBLE, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.CreditCost); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ExptStatistics) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPendingTurnCnt() {
		if err = oprot.WriteFieldBegin("pending_turn_cnt", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PendingTurnCnt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *ExptStatistics) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccessTurnCnt() {
		if err = oprot.WriteFieldBegin("success_turn_cnt", thrift.I32, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.SuccessTurnCnt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *ExptStatistics) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetFailTurnCnt() {
		if err = oprot.WriteFieldBegin("fail_turn_cnt", thrift.I32, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.FailTurnCnt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *ExptStatistics) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetTerminatedTurnCnt() {
		if err = oprot.WriteFieldBegin("terminated_turn_cnt", thrift.I32, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.TerminatedTurnCnt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}
func (p *ExptStatistics) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetProcessingTurnCnt() {
		if err = oprot.WriteFieldBegin("processing_turn_cnt", thrift.I32, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.ProcessingTurnCnt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ExptStatistics) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExptStatistics(%+v)", *p)

}

func (p *ExptStatistics) DeepEqual(ano *ExptStatistics) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvaluatorAggregateResults) {
		return false
	}
	if !p.Field2DeepEqual(ano.TokenUsage) {
		return false
	}
	if !p.Field3DeepEqual(ano.CreditCost) {
		return false
	}
	if !p.Field4DeepEqual(ano.PendingTurnCnt) {
		return false
	}
	if !p.Field5DeepEqual(ano.SuccessTurnCnt) {
		return false
	}
	if !p.Field6DeepEqual(ano.FailTurnCnt) {
		return false
	}
	if !p.Field7DeepEqual(ano.TerminatedTurnCnt) {
		return false
	}
	if !p.Field8DeepEqual(ano.ProcessingTurnCnt) {
		return false
	}
	return true
}

func (p *ExptStatistics) Field1DeepEqual(src []*EvaluatorAggregateResult_) bool {

	if len(p.EvaluatorAggregateResults) != len(src) {
		return false
	}
	for i, v := range p.EvaluatorAggregateResults {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ExptStatistics) Field2DeepEqual(src *TokenUsage) bool {

	if !p.TokenUsage.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ExptStatistics) Field3DeepEqual(src *float64) bool {

	if p.CreditCost == src {
		return true
	} else if p.CreditCost == nil || src == nil {
		return false
	}
	if *p.CreditCost != *src {
		return false
	}
	return true
}
func (p *ExptStatistics) Field4DeepEqual(src *int32) bool {

	if p.PendingTurnCnt == src {
		return true
	} else if p.PendingTurnCnt == nil || src == nil {
		return false
	}
	if *p.PendingTurnCnt != *src {
		return false
	}
	return true
}
func (p *ExptStatistics) Field5DeepEqual(src *int32) bool {

	if p.SuccessTurnCnt == src {
		return true
	} else if p.SuccessTurnCnt == nil || src == nil {
		return false
	}
	if *p.SuccessTurnCnt != *src {
		return false
	}
	return true
}
func (p *ExptStatistics) Field6DeepEqual(src *int32) bool {

	if p.FailTurnCnt == src {
		return true
	} else if p.FailTurnCnt == nil || src == nil {
		return false
	}
	if *p.FailTurnCnt != *src {
		return false
	}
	return true
}
func (p *ExptStatistics) Field7DeepEqual(src *int32) bool {

	if p.TerminatedTurnCnt == src {
		return true
	} else if p.TerminatedTurnCnt == nil || src == nil {
		return false
	}
	if *p.TerminatedTurnCnt != *src {
		return false
	}
	return true
}
func (p *ExptStatistics) Field8DeepEqual(src *int32) bool {

	if p.ProcessingTurnCnt == src {
		return true
	} else if p.ProcessingTurnCnt == nil || src == nil {
		return false
	}
	if *p.ProcessingTurnCnt != *src {
		return false
	}
	return true
}

type EvaluatorFmtResult_ struct {
	Name  *string  `thrift:"name,1,optional" frugal:"1,optional,string" form:"name" json:"name,omitempty" query:"name"`
	Score *float64 `thrift:"score,2,optional" frugal:"2,optional,double" form:"score" json:"score,omitempty" query:"score"`
}

func NewEvaluatorFmtResult_() *EvaluatorFmtResult_ {
	return &EvaluatorFmtResult_{}
}

func (p *EvaluatorFmtResult_) InitDefault() {
}

var EvaluatorFmtResult__Name_DEFAULT string

func (p *EvaluatorFmtResult_) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return EvaluatorFmtResult__Name_DEFAULT
	}
	return *p.Name
}

var EvaluatorFmtResult__Score_DEFAULT float64

func (p *EvaluatorFmtResult_) GetScore() (v float64) {
	if p == nil {
		return
	}
	if !p.IsSetScore() {
		return EvaluatorFmtResult__Score_DEFAULT
	}
	return *p.Score
}
func (p *EvaluatorFmtResult_) SetName(val *string) {
	p.Name = val
}
func (p *EvaluatorFmtResult_) SetScore(val *float64) {
	p.Score = val
}

var fieldIDToName_EvaluatorFmtResult_ = map[int16]string{
	1: "name",
	2: "score",
}

func (p *EvaluatorFmtResult_) IsSetName() bool {
	return p.Name != nil
}

func (p *EvaluatorFmtResult_) IsSetScore() bool {
	return p.Score != nil
}

func (p *EvaluatorFmtResult_) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorFmtResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorFmtResult_) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *EvaluatorFmtResult_) ReadField2(iprot thrift.TProtocol) error {

	var _field *float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Score = _field
	return nil
}

func (p *EvaluatorFmtResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EvaluatorFmtResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorFmtResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *EvaluatorFmtResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetScore() {
		if err = oprot.WriteFieldBegin("score", thrift.DOUBLE, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.Score); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *EvaluatorFmtResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorFmtResult_(%+v)", *p)

}

func (p *EvaluatorFmtResult_) DeepEqual(ano *EvaluatorFmtResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Score) {
		return false
	}
	return true
}

func (p *EvaluatorFmtResult_) Field1DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *EvaluatorFmtResult_) Field2DeepEqual(src *float64) bool {

	if p.Score == src {
		return true
	} else if p.Score == nil || src == nil {
		return false
	}
	if *p.Score != *src {
		return false
	}
	return true
}

type TargetFieldMapping struct {
	FromEvalSet []*FieldMapping `thrift:"from_eval_set,1,optional" frugal:"1,optional,list<FieldMapping>" form:"from_eval_set" json:"from_eval_set,omitempty" query:"from_eval_set"`
}

func NewTargetFieldMapping() *TargetFieldMapping {
	return &TargetFieldMapping{}
}

func (p *TargetFieldMapping) InitDefault() {
}

var TargetFieldMapping_FromEvalSet_DEFAULT []*FieldMapping

func (p *TargetFieldMapping) GetFromEvalSet() (v []*FieldMapping) {
	if p == nil {
		return
	}
	if !p.IsSetFromEvalSet() {
		return TargetFieldMapping_FromEvalSet_DEFAULT
	}
	return p.FromEvalSet
}
func (p *TargetFieldMapping) SetFromEvalSet(val []*FieldMapping) {
	p.FromEvalSet = val
}

var fieldIDToName_TargetFieldMapping = map[int16]string{
	1: "from_eval_set",
}

func (p *TargetFieldMapping) IsSetFromEvalSet() bool {
	return p.FromEvalSet != nil
}

func (p *TargetFieldMapping) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TargetFieldMapping[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TargetFieldMapping) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*FieldMapping, 0, size)
	values := make([]FieldMapping, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.FromEvalSet = _field
	return nil
}

func (p *TargetFieldMapping) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TargetFieldMapping"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TargetFieldMapping) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetFromEvalSet() {
		if err = oprot.WriteFieldBegin("from_eval_set", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.FromEvalSet)); err != nil {
			return err
		}
		for _, v := range p.FromEvalSet {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TargetFieldMapping) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TargetFieldMapping(%+v)", *p)

}

func (p *TargetFieldMapping) DeepEqual(ano *TargetFieldMapping) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.FromEvalSet) {
		return false
	}
	return true
}

func (p *TargetFieldMapping) Field1DeepEqual(src []*FieldMapping) bool {

	if len(p.FromEvalSet) != len(src) {
		return false
	}
	for i, v := range p.FromEvalSet {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type EvaluatorFieldMapping struct {
	EvaluatorVersionID int64           `thrift:"evaluator_version_id,1,required" frugal:"1,required,i64" json:"evaluator_version_id" form:"evaluator_version_id,required" query:"evaluator_version_id,required"`
	FromEvalSet        []*FieldMapping `thrift:"from_eval_set,2,optional" frugal:"2,optional,list<FieldMapping>" form:"from_eval_set" json:"from_eval_set,omitempty" query:"from_eval_set"`
	FromTarget         []*FieldMapping `thrift:"from_target,3,optional" frugal:"3,optional,list<FieldMapping>" form:"from_target" json:"from_target,omitempty" query:"from_target"`
}

func NewEvaluatorFieldMapping() *EvaluatorFieldMapping {
	return &EvaluatorFieldMapping{}
}

func (p *EvaluatorFieldMapping) InitDefault() {
}

func (p *EvaluatorFieldMapping) GetEvaluatorVersionID() (v int64) {
	if p != nil {
		return p.EvaluatorVersionID
	}
	return
}

var EvaluatorFieldMapping_FromEvalSet_DEFAULT []*FieldMapping

func (p *EvaluatorFieldMapping) GetFromEvalSet() (v []*FieldMapping) {
	if p == nil {
		return
	}
	if !p.IsSetFromEvalSet() {
		return EvaluatorFieldMapping_FromEvalSet_DEFAULT
	}
	return p.FromEvalSet
}

var EvaluatorFieldMapping_FromTarget_DEFAULT []*FieldMapping

func (p *EvaluatorFieldMapping) GetFromTarget() (v []*FieldMapping) {
	if p == nil {
		return
	}
	if !p.IsSetFromTarget() {
		return EvaluatorFieldMapping_FromTarget_DEFAULT
	}
	return p.FromTarget
}
func (p *EvaluatorFieldMapping) SetEvaluatorVersionID(val int64) {
	p.EvaluatorVersionID = val
}
func (p *EvaluatorFieldMapping) SetFromEvalSet(val []*FieldMapping) {
	p.FromEvalSet = val
}
func (p *EvaluatorFieldMapping) SetFromTarget(val []*FieldMapping) {
	p.FromTarget = val
}

var fieldIDToName_EvaluatorFieldMapping = map[int16]string{
	1: "evaluator_version_id",
	2: "from_eval_set",
	3: "from_target",
}

func (p *EvaluatorFieldMapping) IsSetFromEvalSet() bool {
	return p.FromEvalSet != nil
}

func (p *EvaluatorFieldMapping) IsSetFromTarget() bool {
	return p.FromTarget != nil
}

func (p *EvaluatorFieldMapping) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetEvaluatorVersionID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluatorVersionID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetEvaluatorVersionID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorFieldMapping[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_EvaluatorFieldMapping[fieldId]))
}

func (p *EvaluatorFieldMapping) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluatorVersionID = _field
	return nil
}
func (p *EvaluatorFieldMapping) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*FieldMapping, 0, size)
	values := make([]FieldMapping, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.FromEvalSet = _field
	return nil
}
func (p *EvaluatorFieldMapping) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*FieldMapping, 0, size)
	values := make([]FieldMapping, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.FromTarget = _field
	return nil
}

func (p *EvaluatorFieldMapping) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EvaluatorFieldMapping"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorFieldMapping) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluator_version_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EvaluatorVersionID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *EvaluatorFieldMapping) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetFromEvalSet() {
		if err = oprot.WriteFieldBegin("from_eval_set", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.FromEvalSet)); err != nil {
			return err
		}
		for _, v := range p.FromEvalSet {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *EvaluatorFieldMapping) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetFromTarget() {
		if err = oprot.WriteFieldBegin("from_target", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.FromTarget)); err != nil {
			return err
		}
		for _, v := range p.FromTarget {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *EvaluatorFieldMapping) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorFieldMapping(%+v)", *p)

}

func (p *EvaluatorFieldMapping) DeepEqual(ano *EvaluatorFieldMapping) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvaluatorVersionID) {
		return false
	}
	if !p.Field2DeepEqual(ano.FromEvalSet) {
		return false
	}
	if !p.Field3DeepEqual(ano.FromTarget) {
		return false
	}
	return true
}

func (p *EvaluatorFieldMapping) Field1DeepEqual(src int64) bool {

	if p.EvaluatorVersionID != src {
		return false
	}
	return true
}
func (p *EvaluatorFieldMapping) Field2DeepEqual(src []*FieldMapping) bool {

	if len(p.FromEvalSet) != len(src) {
		return false
	}
	for i, v := range p.FromEvalSet {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *EvaluatorFieldMapping) Field3DeepEqual(src []*FieldMapping) bool {

	if len(p.FromTarget) != len(src) {
		return false
	}
	for i, v := range p.FromTarget {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type FieldMapping struct {
	FieldName     *string `thrift:"field_name,1,optional" frugal:"1,optional,string" form:"field_name" json:"field_name,omitempty" query:"field_name"`
	ConstValue    *string `thrift:"const_value,2,optional" frugal:"2,optional,string" form:"const_value" json:"const_value,omitempty" query:"const_value"`
	FromFieldName *string `thrift:"from_field_name,3,optional" frugal:"3,optional,string" form:"from_field_name" json:"from_field_name,omitempty" query:"from_field_name"`
}

func NewFieldMapping() *FieldMapping {
	return &FieldMapping{}
}

func (p *FieldMapping) InitDefault() {
}

var FieldMapping_FieldName_DEFAULT string

func (p *FieldMapping) GetFieldName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetFieldName() {
		return FieldMapping_FieldName_DEFAULT
	}
	return *p.FieldName
}

var FieldMapping_ConstValue_DEFAULT string

func (p *FieldMapping) GetConstValue() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetConstValue() {
		return FieldMapping_ConstValue_DEFAULT
	}
	return *p.ConstValue
}

var FieldMapping_FromFieldName_DEFAULT string

func (p *FieldMapping) GetFromFieldName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetFromFieldName() {
		return FieldMapping_FromFieldName_DEFAULT
	}
	return *p.FromFieldName
}
func (p *FieldMapping) SetFieldName(val *string) {
	p.FieldName = val
}
func (p *FieldMapping) SetConstValue(val *string) {
	p.ConstValue = val
}
func (p *FieldMapping) SetFromFieldName(val *string) {
	p.FromFieldName = val
}

var fieldIDToName_FieldMapping = map[int16]string{
	1: "field_name",
	2: "const_value",
	3: "from_field_name",
}

func (p *FieldMapping) IsSetFieldName() bool {
	return p.FieldName != nil
}

func (p *FieldMapping) IsSetConstValue() bool {
	return p.ConstValue != nil
}

func (p *FieldMapping) IsSetFromFieldName() bool {
	return p.FromFieldName != nil
}

func (p *FieldMapping) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FieldMapping[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FieldMapping) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FieldName = _field
	return nil
}
func (p *FieldMapping) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ConstValue = _field
	return nil
}
func (p *FieldMapping) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FromFieldName = _field
	return nil
}

func (p *FieldMapping) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FieldMapping"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FieldMapping) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetFieldName() {
		if err = oprot.WriteFieldBegin("field_name", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.FieldName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *FieldMapping) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetConstValue() {
		if err = oprot.WriteFieldBegin("const_value", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ConstValue); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *FieldMapping) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetFromFieldName() {
		if err = oprot.WriteFieldBegin("from_field_name", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.FromFieldName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *FieldMapping) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FieldMapping(%+v)", *p)

}

func (p *FieldMapping) DeepEqual(ano *FieldMapping) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.FieldName) {
		return false
	}
	if !p.Field2DeepEqual(ano.ConstValue) {
		return false
	}
	if !p.Field3DeepEqual(ano.FromFieldName) {
		return false
	}
	return true
}

func (p *FieldMapping) Field1DeepEqual(src *string) bool {

	if p.FieldName == src {
		return true
	} else if p.FieldName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.FieldName, *src) != 0 {
		return false
	}
	return true
}
func (p *FieldMapping) Field2DeepEqual(src *string) bool {

	if p.ConstValue == src {
		return true
	} else if p.ConstValue == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ConstValue, *src) != 0 {
		return false
	}
	return true
}
func (p *FieldMapping) Field3DeepEqual(src *string) bool {

	if p.FromFieldName == src {
		return true
	} else if p.FromFieldName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.FromFieldName, *src) != 0 {
		return false
	}
	return true
}

type ExptFilterOption struct {
	FuzzyName *string  `thrift:"fuzzy_name,1,optional" frugal:"1,optional,string" form:"fuzzy_name" json:"fuzzy_name,omitempty" query:"fuzzy_name"`
	Filters   *Filters `thrift:"filters,10,optional" frugal:"10,optional,Filters" form:"filters" json:"filters,omitempty" query:"filters"`
}

func NewExptFilterOption() *ExptFilterOption {
	return &ExptFilterOption{}
}

func (p *ExptFilterOption) InitDefault() {
}

var ExptFilterOption_FuzzyName_DEFAULT string

func (p *ExptFilterOption) GetFuzzyName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetFuzzyName() {
		return ExptFilterOption_FuzzyName_DEFAULT
	}
	return *p.FuzzyName
}

var ExptFilterOption_Filters_DEFAULT *Filters

func (p *ExptFilterOption) GetFilters() (v *Filters) {
	if p == nil {
		return
	}
	if !p.IsSetFilters() {
		return ExptFilterOption_Filters_DEFAULT
	}
	return p.Filters
}
func (p *ExptFilterOption) SetFuzzyName(val *string) {
	p.FuzzyName = val
}
func (p *ExptFilterOption) SetFilters(val *Filters) {
	p.Filters = val
}

var fieldIDToName_ExptFilterOption = map[int16]string{
	1:  "fuzzy_name",
	10: "filters",
}

func (p *ExptFilterOption) IsSetFuzzyName() bool {
	return p.FuzzyName != nil
}

func (p *ExptFilterOption) IsSetFilters() bool {
	return p.Filters != nil
}

func (p *ExptFilterOption) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExptFilterOption[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExptFilterOption) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FuzzyName = _field
	return nil
}
func (p *ExptFilterOption) ReadField10(iprot thrift.TProtocol) error {
	_field := NewFilters()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Filters = _field
	return nil
}

func (p *ExptFilterOption) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ExptFilterOption"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExptFilterOption) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetFuzzyName() {
		if err = oprot.WriteFieldBegin("fuzzy_name", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.FuzzyName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ExptFilterOption) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetFilters() {
		if err = oprot.WriteFieldBegin("filters", thrift.STRUCT, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Filters.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *ExptFilterOption) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExptFilterOption(%+v)", *p)

}

func (p *ExptFilterOption) DeepEqual(ano *ExptFilterOption) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.FuzzyName) {
		return false
	}
	if !p.Field10DeepEqual(ano.Filters) {
		return false
	}
	return true
}

func (p *ExptFilterOption) Field1DeepEqual(src *string) bool {

	if p.FuzzyName == src {
		return true
	} else if p.FuzzyName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.FuzzyName, *src) != 0 {
		return false
	}
	return true
}
func (p *ExptFilterOption) Field10DeepEqual(src *Filters) bool {

	if !p.Filters.DeepEqual(src) {
		return false
	}
	return true
}

type ItemSystemInfo struct {
	RunState *ItemRunState `thrift:"run_state,1,optional" frugal:"1,optional,ItemRunState" form:"run_state" json:"run_state,omitempty" query:"run_state"`
	LogID    *string       `thrift:"log_id,2,optional" frugal:"2,optional,string" form:"log_id" json:"log_id,omitempty" query:"log_id"`
	Error    *RunError     `thrift:"error,3,optional" frugal:"3,optional,RunError" form:"error" json:"error,omitempty" query:"error"`
}

func NewItemSystemInfo() *ItemSystemInfo {
	return &ItemSystemInfo{}
}

func (p *ItemSystemInfo) InitDefault() {
}

var ItemSystemInfo_RunState_DEFAULT ItemRunState

func (p *ItemSystemInfo) GetRunState() (v ItemRunState) {
	if p == nil {
		return
	}
	if !p.IsSetRunState() {
		return ItemSystemInfo_RunState_DEFAULT
	}
	return *p.RunState
}

var ItemSystemInfo_LogID_DEFAULT string

func (p *ItemSystemInfo) GetLogID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetLogID() {
		return ItemSystemInfo_LogID_DEFAULT
	}
	return *p.LogID
}

var ItemSystemInfo_Error_DEFAULT *RunError

func (p *ItemSystemInfo) GetError() (v *RunError) {
	if p == nil {
		return
	}
	if !p.IsSetError() {
		return ItemSystemInfo_Error_DEFAULT
	}
	return p.Error
}
func (p *ItemSystemInfo) SetRunState(val *ItemRunState) {
	p.RunState = val
}
func (p *ItemSystemInfo) SetLogID(val *string) {
	p.LogID = val
}
func (p *ItemSystemInfo) SetError(val *RunError) {
	p.Error = val
}

var fieldIDToName_ItemSystemInfo = map[int16]string{
	1: "run_state",
	2: "log_id",
	3: "error",
}

func (p *ItemSystemInfo) IsSetRunState() bool {
	return p.RunState != nil
}

func (p *ItemSystemInfo) IsSetLogID() bool {
	return p.LogID != nil
}

func (p *ItemSystemInfo) IsSetError() bool {
	return p.Error != nil
}

func (p *ItemSystemInfo) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ItemSystemInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ItemSystemInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field *ItemRunState
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := ItemRunState(v)
		_field = &tmp
	}
	p.RunState = _field
	return nil
}
func (p *ItemSystemInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LogID = _field
	return nil
}
func (p *ItemSystemInfo) ReadField3(iprot thrift.TProtocol) error {
	_field := NewRunError()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Error = _field
	return nil
}

func (p *ItemSystemInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ItemSystemInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ItemSystemInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRunState() {
		if err = oprot.WriteFieldBegin("run_state", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.RunState)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ItemSystemInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetLogID() {
		if err = oprot.WriteFieldBegin("log_id", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.LogID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ItemSystemInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetError() {
		if err = oprot.WriteFieldBegin("error", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Error.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ItemSystemInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ItemSystemInfo(%+v)", *p)

}

func (p *ItemSystemInfo) DeepEqual(ano *ItemSystemInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.RunState) {
		return false
	}
	if !p.Field2DeepEqual(ano.LogID) {
		return false
	}
	if !p.Field3DeepEqual(ano.Error) {
		return false
	}
	return true
}

func (p *ItemSystemInfo) Field1DeepEqual(src *ItemRunState) bool {

	if p.RunState == src {
		return true
	} else if p.RunState == nil || src == nil {
		return false
	}
	if *p.RunState != *src {
		return false
	}
	return true
}
func (p *ItemSystemInfo) Field2DeepEqual(src *string) bool {

	if p.LogID == src {
		return true
	} else if p.LogID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.LogID, *src) != 0 {
		return false
	}
	return true
}
func (p *ItemSystemInfo) Field3DeepEqual(src *RunError) bool {

	if !p.Error.DeepEqual(src) {
		return false
	}
	return true
}

type ColumnEvaluator struct {
	EvaluatorVersionID int64                   `thrift:"evaluator_version_id,1,required" frugal:"1,required,i64" json:"evaluator_version_id" form:"evaluator_version_id,required" query:"evaluator_version_id,required"`
	EvaluatorID        int64                   `thrift:"evaluator_id,2,required" frugal:"2,required,i64" json:"evaluator_id" form:"evaluator_id,required" query:"evaluator_id,required"`
	EvaluatorType      evaluator.EvaluatorType `thrift:"evaluator_type,3,required" frugal:"3,required,EvaluatorType" form:"evaluator_type,required" json:"evaluator_type,required" query:"evaluator_type,required"`
	Name               *string                 `thrift:"name,4,optional" frugal:"4,optional,string" form:"name" json:"name,omitempty" query:"name"`
	Version            *string                 `thrift:"version,5,optional" frugal:"5,optional,string" form:"version" json:"version,omitempty" query:"version"`
	Description        *string                 `thrift:"description,6,optional" frugal:"6,optional,string" form:"description" json:"description,omitempty" query:"description"`
}

func NewColumnEvaluator() *ColumnEvaluator {
	return &ColumnEvaluator{}
}

func (p *ColumnEvaluator) InitDefault() {
}

func (p *ColumnEvaluator) GetEvaluatorVersionID() (v int64) {
	if p != nil {
		return p.EvaluatorVersionID
	}
	return
}

func (p *ColumnEvaluator) GetEvaluatorID() (v int64) {
	if p != nil {
		return p.EvaluatorID
	}
	return
}

func (p *ColumnEvaluator) GetEvaluatorType() (v evaluator.EvaluatorType) {
	if p != nil {
		return p.EvaluatorType
	}
	return
}

var ColumnEvaluator_Name_DEFAULT string

func (p *ColumnEvaluator) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return ColumnEvaluator_Name_DEFAULT
	}
	return *p.Name
}

var ColumnEvaluator_Version_DEFAULT string

func (p *ColumnEvaluator) GetVersion() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetVersion() {
		return ColumnEvaluator_Version_DEFAULT
	}
	return *p.Version
}

var ColumnEvaluator_Description_DEFAULT string

func (p *ColumnEvaluator) GetDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDescription() {
		return ColumnEvaluator_Description_DEFAULT
	}
	return *p.Description
}
func (p *ColumnEvaluator) SetEvaluatorVersionID(val int64) {
	p.EvaluatorVersionID = val
}
func (p *ColumnEvaluator) SetEvaluatorID(val int64) {
	p.EvaluatorID = val
}
func (p *ColumnEvaluator) SetEvaluatorType(val evaluator.EvaluatorType) {
	p.EvaluatorType = val
}
func (p *ColumnEvaluator) SetName(val *string) {
	p.Name = val
}
func (p *ColumnEvaluator) SetVersion(val *string) {
	p.Version = val
}
func (p *ColumnEvaluator) SetDescription(val *string) {
	p.Description = val
}

var fieldIDToName_ColumnEvaluator = map[int16]string{
	1: "evaluator_version_id",
	2: "evaluator_id",
	3: "evaluator_type",
	4: "name",
	5: "version",
	6: "description",
}

func (p *ColumnEvaluator) IsSetName() bool {
	return p.Name != nil
}

func (p *ColumnEvaluator) IsSetVersion() bool {
	return p.Version != nil
}

func (p *ColumnEvaluator) IsSetDescription() bool {
	return p.Description != nil
}

func (p *ColumnEvaluator) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetEvaluatorVersionID bool = false
	var issetEvaluatorID bool = false
	var issetEvaluatorType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluatorVersionID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluatorID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluatorType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetEvaluatorVersionID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEvaluatorID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetEvaluatorType {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ColumnEvaluator[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ColumnEvaluator[fieldId]))
}

func (p *ColumnEvaluator) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluatorVersionID = _field
	return nil
}
func (p *ColumnEvaluator) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluatorID = _field
	return nil
}
func (p *ColumnEvaluator) ReadField3(iprot thrift.TProtocol) error {

	var _field evaluator.EvaluatorType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = evaluator.EvaluatorType(v)
	}
	p.EvaluatorType = _field
	return nil
}
func (p *ColumnEvaluator) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *ColumnEvaluator) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Version = _field
	return nil
}
func (p *ColumnEvaluator) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}

func (p *ColumnEvaluator) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ColumnEvaluator"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ColumnEvaluator) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluator_version_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EvaluatorVersionID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ColumnEvaluator) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluator_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EvaluatorID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ColumnEvaluator) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluator_type", thrift.I32, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.EvaluatorType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ColumnEvaluator) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *ColumnEvaluator) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err = oprot.WriteFieldBegin("version", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Version); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *ColumnEvaluator) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ColumnEvaluator) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ColumnEvaluator(%+v)", *p)

}

func (p *ColumnEvaluator) DeepEqual(ano *ColumnEvaluator) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvaluatorVersionID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluatorID) {
		return false
	}
	if !p.Field3DeepEqual(ano.EvaluatorType) {
		return false
	}
	if !p.Field4DeepEqual(ano.Name) {
		return false
	}
	if !p.Field5DeepEqual(ano.Version) {
		return false
	}
	if !p.Field6DeepEqual(ano.Description) {
		return false
	}
	return true
}

func (p *ColumnEvaluator) Field1DeepEqual(src int64) bool {

	if p.EvaluatorVersionID != src {
		return false
	}
	return true
}
func (p *ColumnEvaluator) Field2DeepEqual(src int64) bool {

	if p.EvaluatorID != src {
		return false
	}
	return true
}
func (p *ColumnEvaluator) Field3DeepEqual(src evaluator.EvaluatorType) bool {

	if p.EvaluatorType != src {
		return false
	}
	return true
}
func (p *ColumnEvaluator) Field4DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *ColumnEvaluator) Field5DeepEqual(src *string) bool {

	if p.Version == src {
		return true
	} else if p.Version == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Version, *src) != 0 {
		return false
	}
	return true
}
func (p *ColumnEvaluator) Field6DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}

type ColumnEvalSetField struct {
	Key         *string             `thrift:"key,1,optional" frugal:"1,optional,string" form:"key" json:"key,omitempty" query:"key"`
	Name        *string             `thrift:"name,2,optional" frugal:"2,optional,string" form:"name" json:"name,omitempty" query:"name"`
	Description *string             `thrift:"description,3,optional" frugal:"3,optional,string" form:"description" json:"description,omitempty" query:"description"`
	ContentType *common.ContentType `thrift:"content_type,4,optional" frugal:"4,optional,string" form:"content_type" json:"content_type,omitempty" query:"content_type"`
	//    5: optional datasetv3.FieldDisplayFormat DefaultDisplayFormat
	TextSchema *string `thrift:"text_schema,6,optional" frugal:"6,optional,string" form:"text_schema" json:"text_schema,omitempty" query:"text_schema"`
}

func NewColumnEvalSetField() *ColumnEvalSetField {
	return &ColumnEvalSetField{}
}

func (p *ColumnEvalSetField) InitDefault() {
}

var ColumnEvalSetField_Key_DEFAULT string

func (p *ColumnEvalSetField) GetKey() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetKey() {
		return ColumnEvalSetField_Key_DEFAULT
	}
	return *p.Key
}

var ColumnEvalSetField_Name_DEFAULT string

func (p *ColumnEvalSetField) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return ColumnEvalSetField_Name_DEFAULT
	}
	return *p.Name
}

var ColumnEvalSetField_Description_DEFAULT string

func (p *ColumnEvalSetField) GetDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDescription() {
		return ColumnEvalSetField_Description_DEFAULT
	}
	return *p.Description
}

var ColumnEvalSetField_ContentType_DEFAULT common.ContentType

func (p *ColumnEvalSetField) GetContentType() (v common.ContentType) {
	if p == nil {
		return
	}
	if !p.IsSetContentType() {
		return ColumnEvalSetField_ContentType_DEFAULT
	}
	return *p.ContentType
}

var ColumnEvalSetField_TextSchema_DEFAULT string

func (p *ColumnEvalSetField) GetTextSchema() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetTextSchema() {
		return ColumnEvalSetField_TextSchema_DEFAULT
	}
	return *p.TextSchema
}
func (p *ColumnEvalSetField) SetKey(val *string) {
	p.Key = val
}
func (p *ColumnEvalSetField) SetName(val *string) {
	p.Name = val
}
func (p *ColumnEvalSetField) SetDescription(val *string) {
	p.Description = val
}
func (p *ColumnEvalSetField) SetContentType(val *common.ContentType) {
	p.ContentType = val
}
func (p *ColumnEvalSetField) SetTextSchema(val *string) {
	p.TextSchema = val
}

var fieldIDToName_ColumnEvalSetField = map[int16]string{
	1: "key",
	2: "name",
	3: "description",
	4: "content_type",
	6: "text_schema",
}

func (p *ColumnEvalSetField) IsSetKey() bool {
	return p.Key != nil
}

func (p *ColumnEvalSetField) IsSetName() bool {
	return p.Name != nil
}

func (p *ColumnEvalSetField) IsSetDescription() bool {
	return p.Description != nil
}

func (p *ColumnEvalSetField) IsSetContentType() bool {
	return p.ContentType != nil
}

func (p *ColumnEvalSetField) IsSetTextSchema() bool {
	return p.TextSchema != nil
}

func (p *ColumnEvalSetField) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ColumnEvalSetField[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ColumnEvalSetField) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Key = _field
	return nil
}
func (p *ColumnEvalSetField) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *ColumnEvalSetField) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}
func (p *ColumnEvalSetField) ReadField4(iprot thrift.TProtocol) error {

	var _field *common.ContentType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ContentType = _field
	return nil
}
func (p *ColumnEvalSetField) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TextSchema = _field
	return nil
}

func (p *ColumnEvalSetField) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ColumnEvalSetField"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ColumnEvalSetField) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetKey() {
		if err = oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Key); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ColumnEvalSetField) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ColumnEvalSetField) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ColumnEvalSetField) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetContentType() {
		if err = oprot.WriteFieldBegin("content_type", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ContentType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *ColumnEvalSetField) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetTextSchema() {
		if err = oprot.WriteFieldBegin("text_schema", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TextSchema); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ColumnEvalSetField) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ColumnEvalSetField(%+v)", *p)

}

func (p *ColumnEvalSetField) DeepEqual(ano *ColumnEvalSetField) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Key) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Description) {
		return false
	}
	if !p.Field4DeepEqual(ano.ContentType) {
		return false
	}
	if !p.Field6DeepEqual(ano.TextSchema) {
		return false
	}
	return true
}

func (p *ColumnEvalSetField) Field1DeepEqual(src *string) bool {

	if p.Key == src {
		return true
	} else if p.Key == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Key, *src) != 0 {
		return false
	}
	return true
}
func (p *ColumnEvalSetField) Field2DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *ColumnEvalSetField) Field3DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *ColumnEvalSetField) Field4DeepEqual(src *common.ContentType) bool {

	if p.ContentType == src {
		return true
	} else if p.ContentType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ContentType, *src) != 0 {
		return false
	}
	return true
}
func (p *ColumnEvalSetField) Field6DeepEqual(src *string) bool {

	if p.TextSchema == src {
		return true
	} else if p.TextSchema == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TextSchema, *src) != 0 {
		return false
	}
	return true
}

type ItemResult_ struct {
	ItemID int64 `thrift:"item_id,1,required" frugal:"1,required,i64" json:"item_id" form:"item_id,required" query:"item_id,required"`
	// row粒度实验结果详情
	TurnResults []*TurnResult_  `thrift:"turn_results,2,optional" frugal:"2,optional,list<TurnResult_>" form:"turn_results" json:"turn_results,omitempty" query:"turn_results"`
	SystemInfo  *ItemSystemInfo `thrift:"system_info,3,optional" frugal:"3,optional,ItemSystemInfo" form:"system_info" json:"system_info,omitempty" query:"system_info"`
	ItemIndex   *int64          `thrift:"item_index,4,optional" frugal:"4,optional,i64" json:"item_index" form:"item_index" query:"item_index"`
}

func NewItemResult_() *ItemResult_ {
	return &ItemResult_{}
}

func (p *ItemResult_) InitDefault() {
}

func (p *ItemResult_) GetItemID() (v int64) {
	if p != nil {
		return p.ItemID
	}
	return
}

var ItemResult__TurnResults_DEFAULT []*TurnResult_

func (p *ItemResult_) GetTurnResults() (v []*TurnResult_) {
	if p == nil {
		return
	}
	if !p.IsSetTurnResults() {
		return ItemResult__TurnResults_DEFAULT
	}
	return p.TurnResults
}

var ItemResult__SystemInfo_DEFAULT *ItemSystemInfo

func (p *ItemResult_) GetSystemInfo() (v *ItemSystemInfo) {
	if p == nil {
		return
	}
	if !p.IsSetSystemInfo() {
		return ItemResult__SystemInfo_DEFAULT
	}
	return p.SystemInfo
}

var ItemResult__ItemIndex_DEFAULT int64

func (p *ItemResult_) GetItemIndex() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetItemIndex() {
		return ItemResult__ItemIndex_DEFAULT
	}
	return *p.ItemIndex
}
func (p *ItemResult_) SetItemID(val int64) {
	p.ItemID = val
}
func (p *ItemResult_) SetTurnResults(val []*TurnResult_) {
	p.TurnResults = val
}
func (p *ItemResult_) SetSystemInfo(val *ItemSystemInfo) {
	p.SystemInfo = val
}
func (p *ItemResult_) SetItemIndex(val *int64) {
	p.ItemIndex = val
}

var fieldIDToName_ItemResult_ = map[int16]string{
	1: "item_id",
	2: "turn_results",
	3: "system_info",
	4: "item_index",
}

func (p *ItemResult_) IsSetTurnResults() bool {
	return p.TurnResults != nil
}

func (p *ItemResult_) IsSetSystemInfo() bool {
	return p.SystemInfo != nil
}

func (p *ItemResult_) IsSetItemIndex() bool {
	return p.ItemIndex != nil
}

func (p *ItemResult_) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetItemID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetItemID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetItemID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ItemResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ItemResult_[fieldId]))
}

func (p *ItemResult_) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ItemID = _field
	return nil
}
func (p *ItemResult_) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TurnResult_, 0, size)
	values := make([]TurnResult_, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.TurnResults = _field
	return nil
}
func (p *ItemResult_) ReadField3(iprot thrift.TProtocol) error {
	_field := NewItemSystemInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.SystemInfo = _field
	return nil
}
func (p *ItemResult_) ReadField4(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ItemIndex = _field
	return nil
}

func (p *ItemResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ItemResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ItemResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("item_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ItemID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ItemResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTurnResults() {
		if err = oprot.WriteFieldBegin("turn_results", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TurnResults)); err != nil {
			return err
		}
		for _, v := range p.TurnResults {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ItemResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemInfo() {
		if err = oprot.WriteFieldBegin("system_info", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.SystemInfo.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ItemResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetItemIndex() {
		if err = oprot.WriteFieldBegin("item_index", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ItemIndex); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ItemResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ItemResult_(%+v)", *p)

}

func (p *ItemResult_) DeepEqual(ano *ItemResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ItemID) {
		return false
	}
	if !p.Field2DeepEqual(ano.TurnResults) {
		return false
	}
	if !p.Field3DeepEqual(ano.SystemInfo) {
		return false
	}
	if !p.Field4DeepEqual(ano.ItemIndex) {
		return false
	}
	return true
}

func (p *ItemResult_) Field1DeepEqual(src int64) bool {

	if p.ItemID != src {
		return false
	}
	return true
}
func (p *ItemResult_) Field2DeepEqual(src []*TurnResult_) bool {

	if len(p.TurnResults) != len(src) {
		return false
	}
	for i, v := range p.TurnResults {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ItemResult_) Field3DeepEqual(src *ItemSystemInfo) bool {

	if !p.SystemInfo.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ItemResult_) Field4DeepEqual(src *int64) bool {

	if p.ItemIndex == src {
		return true
	} else if p.ItemIndex == nil || src == nil {
		return false
	}
	if *p.ItemIndex != *src {
		return false
	}
	return true
}

// 行级结果 可能包含多个实验
type TurnResult_ struct {
	TurnID int64 `thrift:"turn_id,1" frugal:"1,default,i64" json:"turn_id" form:"turn_id" query:"turn_id"`
	// 参与对比的实验序列，对于单报告序列长度为1
	ExperimentResults []*ExperimentResult_ `thrift:"experiment_results,2,optional" frugal:"2,optional,list<ExperimentResult_>" form:"experiment_results" json:"experiment_results,omitempty" query:"experiment_results"`
	TurnIndex         *int64               `thrift:"turn_index,3,optional" frugal:"3,optional,i64" json:"turn_index" form:"turn_index" query:"turn_index"`
}

func NewTurnResult_() *TurnResult_ {
	return &TurnResult_{}
}

func (p *TurnResult_) InitDefault() {
}

func (p *TurnResult_) GetTurnID() (v int64) {
	if p != nil {
		return p.TurnID
	}
	return
}

var TurnResult__ExperimentResults_DEFAULT []*ExperimentResult_

func (p *TurnResult_) GetExperimentResults() (v []*ExperimentResult_) {
	if p == nil {
		return
	}
	if !p.IsSetExperimentResults() {
		return TurnResult__ExperimentResults_DEFAULT
	}
	return p.ExperimentResults
}

var TurnResult__TurnIndex_DEFAULT int64

func (p *TurnResult_) GetTurnIndex() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTurnIndex() {
		return TurnResult__TurnIndex_DEFAULT
	}
	return *p.TurnIndex
}
func (p *TurnResult_) SetTurnID(val int64) {
	p.TurnID = val
}
func (p *TurnResult_) SetExperimentResults(val []*ExperimentResult_) {
	p.ExperimentResults = val
}
func (p *TurnResult_) SetTurnIndex(val *int64) {
	p.TurnIndex = val
}

var fieldIDToName_TurnResult_ = map[int16]string{
	1: "turn_id",
	2: "experiment_results",
	3: "turn_index",
}

func (p *TurnResult_) IsSetExperimentResults() bool {
	return p.ExperimentResults != nil
}

func (p *TurnResult_) IsSetTurnIndex() bool {
	return p.TurnIndex != nil
}

func (p *TurnResult_) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TurnResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TurnResult_) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TurnID = _field
	return nil
}
func (p *TurnResult_) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ExperimentResult_, 0, size)
	values := make([]ExperimentResult_, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ExperimentResults = _field
	return nil
}
func (p *TurnResult_) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TurnIndex = _field
	return nil
}

func (p *TurnResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TurnResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TurnResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("turn_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TurnID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *TurnResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetExperimentResults() {
		if err = oprot.WriteFieldBegin("experiment_results", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ExperimentResults)); err != nil {
			return err
		}
		for _, v := range p.ExperimentResults {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *TurnResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTurnIndex() {
		if err = oprot.WriteFieldBegin("turn_index", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TurnIndex); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TurnResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TurnResult_(%+v)", *p)

}

func (p *TurnResult_) DeepEqual(ano *TurnResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TurnID) {
		return false
	}
	if !p.Field2DeepEqual(ano.ExperimentResults) {
		return false
	}
	if !p.Field3DeepEqual(ano.TurnIndex) {
		return false
	}
	return true
}

func (p *TurnResult_) Field1DeepEqual(src int64) bool {

	if p.TurnID != src {
		return false
	}
	return true
}
func (p *TurnResult_) Field2DeepEqual(src []*ExperimentResult_) bool {

	if len(p.ExperimentResults) != len(src) {
		return false
	}
	for i, v := range p.ExperimentResults {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TurnResult_) Field3DeepEqual(src *int64) bool {

	if p.TurnIndex == src {
		return true
	} else if p.TurnIndex == nil || src == nil {
		return false
	}
	if *p.TurnIndex != *src {
		return false
	}
	return true
}

type ExperimentResult_ struct {
	ExperimentID int64                  `thrift:"experiment_id,1,required" frugal:"1,required,i64" json:"experiment_id" form:"experiment_id,required" query:"experiment_id,required"`
	Payload      *ExperimentTurnPayload `thrift:"payload,2,optional" frugal:"2,optional,ExperimentTurnPayload" form:"payload" json:"payload,omitempty" query:"payload"`
}

func NewExperimentResult_() *ExperimentResult_ {
	return &ExperimentResult_{}
}

func (p *ExperimentResult_) InitDefault() {
}

func (p *ExperimentResult_) GetExperimentID() (v int64) {
	if p != nil {
		return p.ExperimentID
	}
	return
}

var ExperimentResult__Payload_DEFAULT *ExperimentTurnPayload

func (p *ExperimentResult_) GetPayload() (v *ExperimentTurnPayload) {
	if p == nil {
		return
	}
	if !p.IsSetPayload() {
		return ExperimentResult__Payload_DEFAULT
	}
	return p.Payload
}
func (p *ExperimentResult_) SetExperimentID(val int64) {
	p.ExperimentID = val
}
func (p *ExperimentResult_) SetPayload(val *ExperimentTurnPayload) {
	p.Payload = val
}

var fieldIDToName_ExperimentResult_ = map[int16]string{
	1: "experiment_id",
	2: "payload",
}

func (p *ExperimentResult_) IsSetPayload() bool {
	return p.Payload != nil
}

func (p *ExperimentResult_) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetExperimentID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetExperimentID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetExperimentID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExperimentResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ExperimentResult_[fieldId]))
}

func (p *ExperimentResult_) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ExperimentID = _field
	return nil
}
func (p *ExperimentResult_) ReadField2(iprot thrift.TProtocol) error {
	_field := NewExperimentTurnPayload()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Payload = _field
	return nil
}

func (p *ExperimentResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ExperimentResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExperimentResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("experiment_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ExperimentID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ExperimentResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPayload() {
		if err = oprot.WriteFieldBegin("payload", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Payload.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ExperimentResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExperimentResult_(%+v)", *p)

}

func (p *ExperimentResult_) DeepEqual(ano *ExperimentResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ExperimentID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Payload) {
		return false
	}
	return true
}

func (p *ExperimentResult_) Field1DeepEqual(src int64) bool {

	if p.ExperimentID != src {
		return false
	}
	return true
}
func (p *ExperimentResult_) Field2DeepEqual(src *ExperimentTurnPayload) bool {

	if !p.Payload.DeepEqual(src) {
		return false
	}
	return true
}

type TurnSystemInfo struct {
	TurnRunState *TurnRunState `thrift:"turn_run_state,1,optional" frugal:"1,optional,TurnRunState" form:"turn_run_state" json:"turn_run_state,omitempty" query:"turn_run_state"`
	LogID        *string       `thrift:"log_id,2,optional" frugal:"2,optional,string" form:"log_id" json:"log_id,omitempty" query:"log_id"`
	Error        *RunError     `thrift:"error,3,optional" frugal:"3,optional,RunError" form:"error" json:"error,omitempty" query:"error"`
}

func NewTurnSystemInfo() *TurnSystemInfo {
	return &TurnSystemInfo{}
}

func (p *TurnSystemInfo) InitDefault() {
}

var TurnSystemInfo_TurnRunState_DEFAULT TurnRunState

func (p *TurnSystemInfo) GetTurnRunState() (v TurnRunState) {
	if p == nil {
		return
	}
	if !p.IsSetTurnRunState() {
		return TurnSystemInfo_TurnRunState_DEFAULT
	}
	return *p.TurnRunState
}

var TurnSystemInfo_LogID_DEFAULT string

func (p *TurnSystemInfo) GetLogID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetLogID() {
		return TurnSystemInfo_LogID_DEFAULT
	}
	return *p.LogID
}

var TurnSystemInfo_Error_DEFAULT *RunError

func (p *TurnSystemInfo) GetError() (v *RunError) {
	if p == nil {
		return
	}
	if !p.IsSetError() {
		return TurnSystemInfo_Error_DEFAULT
	}
	return p.Error
}
func (p *TurnSystemInfo) SetTurnRunState(val *TurnRunState) {
	p.TurnRunState = val
}
func (p *TurnSystemInfo) SetLogID(val *string) {
	p.LogID = val
}
func (p *TurnSystemInfo) SetError(val *RunError) {
	p.Error = val
}

var fieldIDToName_TurnSystemInfo = map[int16]string{
	1: "turn_run_state",
	2: "log_id",
	3: "error",
}

func (p *TurnSystemInfo) IsSetTurnRunState() bool {
	return p.TurnRunState != nil
}

func (p *TurnSystemInfo) IsSetLogID() bool {
	return p.LogID != nil
}

func (p *TurnSystemInfo) IsSetError() bool {
	return p.Error != nil
}

func (p *TurnSystemInfo) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TurnSystemInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TurnSystemInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field *TurnRunState
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := TurnRunState(v)
		_field = &tmp
	}
	p.TurnRunState = _field
	return nil
}
func (p *TurnSystemInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LogID = _field
	return nil
}
func (p *TurnSystemInfo) ReadField3(iprot thrift.TProtocol) error {
	_field := NewRunError()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Error = _field
	return nil
}

func (p *TurnSystemInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TurnSystemInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TurnSystemInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTurnRunState() {
		if err = oprot.WriteFieldBegin("turn_run_state", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.TurnRunState)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *TurnSystemInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetLogID() {
		if err = oprot.WriteFieldBegin("log_id", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.LogID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *TurnSystemInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetError() {
		if err = oprot.WriteFieldBegin("error", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Error.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TurnSystemInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TurnSystemInfo(%+v)", *p)

}

func (p *TurnSystemInfo) DeepEqual(ano *TurnSystemInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TurnRunState) {
		return false
	}
	if !p.Field2DeepEqual(ano.LogID) {
		return false
	}
	if !p.Field3DeepEqual(ano.Error) {
		return false
	}
	return true
}

func (p *TurnSystemInfo) Field1DeepEqual(src *TurnRunState) bool {

	if p.TurnRunState == src {
		return true
	} else if p.TurnRunState == nil || src == nil {
		return false
	}
	if *p.TurnRunState != *src {
		return false
	}
	return true
}
func (p *TurnSystemInfo) Field2DeepEqual(src *string) bool {

	if p.LogID == src {
		return true
	} else if p.LogID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.LogID, *src) != 0 {
		return false
	}
	return true
}
func (p *TurnSystemInfo) Field3DeepEqual(src *RunError) bool {

	if !p.Error.DeepEqual(src) {
		return false
	}
	return true
}

type RunError struct {
	Code    int64   `thrift:"code,1,required" frugal:"1,required,i64" json:"code" form:"code,required" query:"code,required"`
	Message *string `thrift:"message,2,optional" frugal:"2,optional,string" form:"message" json:"message,omitempty" query:"message"`
	Detail  *string `thrift:"detail,3,optional" frugal:"3,optional,string" form:"detail" json:"detail,omitempty" query:"detail"`
}

func NewRunError() *RunError {
	return &RunError{}
}

func (p *RunError) InitDefault() {
}

func (p *RunError) GetCode() (v int64) {
	if p != nil {
		return p.Code
	}
	return
}

var RunError_Message_DEFAULT string

func (p *RunError) GetMessage() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMessage() {
		return RunError_Message_DEFAULT
	}
	return *p.Message
}

var RunError_Detail_DEFAULT string

func (p *RunError) GetDetail() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDetail() {
		return RunError_Detail_DEFAULT
	}
	return *p.Detail
}
func (p *RunError) SetCode(val int64) {
	p.Code = val
}
func (p *RunError) SetMessage(val *string) {
	p.Message = val
}
func (p *RunError) SetDetail(val *string) {
	p.Detail = val
}

var fieldIDToName_RunError = map[int16]string{
	1: "code",
	2: "message",
	3: "detail",
}

func (p *RunError) IsSetMessage() bool {
	return p.Message != nil
}

func (p *RunError) IsSetDetail() bool {
	return p.Detail != nil
}

func (p *RunError) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetCode bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetCode = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetCode {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RunError[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_RunError[fieldId]))
}

func (p *RunError) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Code = _field
	return nil
}
func (p *RunError) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Message = _field
	return nil
}
func (p *RunError) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Detail = _field
	return nil
}

func (p *RunError) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RunError"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RunError) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("code", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Code); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *RunError) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err = oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Message); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *RunError) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDetail() {
		if err = oprot.WriteFieldBegin("detail", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Detail); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *RunError) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RunError(%+v)", *p)

}

func (p *RunError) DeepEqual(ano *RunError) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Message) {
		return false
	}
	if !p.Field3DeepEqual(ano.Detail) {
		return false
	}
	return true
}

func (p *RunError) Field1DeepEqual(src int64) bool {

	if p.Code != src {
		return false
	}
	return true
}
func (p *RunError) Field2DeepEqual(src *string) bool {

	if p.Message == src {
		return true
	} else if p.Message == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Message, *src) != 0 {
		return false
	}
	return true
}
func (p *RunError) Field3DeepEqual(src *string) bool {

	if p.Detail == src {
		return true
	} else if p.Detail == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Detail, *src) != 0 {
		return false
	}
	return true
}

type TurnEvalSet struct {
	Turn *eval_set.Turn `thrift:"turn,1" frugal:"1,default,eval_set.Turn" form:"turn" json:"turn" query:"turn"`
}

func NewTurnEvalSet() *TurnEvalSet {
	return &TurnEvalSet{}
}

func (p *TurnEvalSet) InitDefault() {
}

var TurnEvalSet_Turn_DEFAULT *eval_set.Turn

func (p *TurnEvalSet) GetTurn() (v *eval_set.Turn) {
	if p == nil {
		return
	}
	if !p.IsSetTurn() {
		return TurnEvalSet_Turn_DEFAULT
	}
	return p.Turn
}
func (p *TurnEvalSet) SetTurn(val *eval_set.Turn) {
	p.Turn = val
}

var fieldIDToName_TurnEvalSet = map[int16]string{
	1: "turn",
}

func (p *TurnEvalSet) IsSetTurn() bool {
	return p.Turn != nil
}

func (p *TurnEvalSet) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TurnEvalSet[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TurnEvalSet) ReadField1(iprot thrift.TProtocol) error {
	_field := eval_set.NewTurn()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Turn = _field
	return nil
}

func (p *TurnEvalSet) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TurnEvalSet"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TurnEvalSet) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("turn", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Turn.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TurnEvalSet) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TurnEvalSet(%+v)", *p)

}

func (p *TurnEvalSet) DeepEqual(ano *TurnEvalSet) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Turn) {
		return false
	}
	return true
}

func (p *TurnEvalSet) Field1DeepEqual(src *eval_set.Turn) bool {

	if !p.Turn.DeepEqual(src) {
		return false
	}
	return true
}

type TurnTargetOutput struct {
	EvalTargetRecord *eval_target.EvalTargetRecord `thrift:"eval_target_record,1,optional" frugal:"1,optional,eval_target.EvalTargetRecord" form:"eval_target_record" json:"eval_target_record,omitempty" query:"eval_target_record"`
}

func NewTurnTargetOutput() *TurnTargetOutput {
	return &TurnTargetOutput{}
}

func (p *TurnTargetOutput) InitDefault() {
}

var TurnTargetOutput_EvalTargetRecord_DEFAULT *eval_target.EvalTargetRecord

func (p *TurnTargetOutput) GetEvalTargetRecord() (v *eval_target.EvalTargetRecord) {
	if p == nil {
		return
	}
	if !p.IsSetEvalTargetRecord() {
		return TurnTargetOutput_EvalTargetRecord_DEFAULT
	}
	return p.EvalTargetRecord
}
func (p *TurnTargetOutput) SetEvalTargetRecord(val *eval_target.EvalTargetRecord) {
	p.EvalTargetRecord = val
}

var fieldIDToName_TurnTargetOutput = map[int16]string{
	1: "eval_target_record",
}

func (p *TurnTargetOutput) IsSetEvalTargetRecord() bool {
	return p.EvalTargetRecord != nil
}

func (p *TurnTargetOutput) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TurnTargetOutput[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TurnTargetOutput) ReadField1(iprot thrift.TProtocol) error {
	_field := eval_target.NewEvalTargetRecord()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvalTargetRecord = _field
	return nil
}

func (p *TurnTargetOutput) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TurnTargetOutput"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TurnTargetOutput) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvalTargetRecord() {
		if err = oprot.WriteFieldBegin("eval_target_record", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.EvalTargetRecord.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TurnTargetOutput) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TurnTargetOutput(%+v)", *p)

}

func (p *TurnTargetOutput) DeepEqual(ano *TurnTargetOutput) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvalTargetRecord) {
		return false
	}
	return true
}

func (p *TurnTargetOutput) Field1DeepEqual(src *eval_target.EvalTargetRecord) bool {

	if !p.EvalTargetRecord.DeepEqual(src) {
		return false
	}
	return true
}

type TurnEvaluatorOutput struct {
	EvaluatorRecords map[int64]*evaluator.EvaluatorRecord `thrift:"evaluator_records,1" frugal:"1,default,map<i64:evaluator.EvaluatorRecord>" json:"evaluator_records" form:"evaluator_records" query:"evaluator_records"`
}

func NewTurnEvaluatorOutput() *TurnEvaluatorOutput {
	return &TurnEvaluatorOutput{}
}

func (p *TurnEvaluatorOutput) InitDefault() {
}

func (p *TurnEvaluatorOutput) GetEvaluatorRecords() (v map[int64]*evaluator.EvaluatorRecord) {
	if p != nil {
		return p.EvaluatorRecords
	}
	return
}
func (p *TurnEvaluatorOutput) SetEvaluatorRecords(val map[int64]*evaluator.EvaluatorRecord) {
	p.EvaluatorRecords = val
}

var fieldIDToName_TurnEvaluatorOutput = map[int16]string{
	1: "evaluator_records",
}

func (p *TurnEvaluatorOutput) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TurnEvaluatorOutput[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TurnEvaluatorOutput) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[int64]*evaluator.EvaluatorRecord, size)
	values := make([]evaluator.EvaluatorRecord, size)
	for i := 0; i < size; i++ {
		var _key int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_key = v
		}

		_val := &values[i]
		_val.InitDefault()
		if err := _val.Read(iprot); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.EvaluatorRecords = _field
	return nil
}

func (p *TurnEvaluatorOutput) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TurnEvaluatorOutput"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TurnEvaluatorOutput) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluator_records", thrift.MAP, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I64, thrift.STRUCT, len(p.EvaluatorRecords)); err != nil {
		return err
	}
	for k, v := range p.EvaluatorRecords {
		if err := oprot.WriteI64(k); err != nil {
			return err
		}
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TurnEvaluatorOutput) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TurnEvaluatorOutput(%+v)", *p)

}

func (p *TurnEvaluatorOutput) DeepEqual(ano *TurnEvaluatorOutput) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvaluatorRecords) {
		return false
	}
	return true
}

func (p *TurnEvaluatorOutput) Field1DeepEqual(src map[int64]*evaluator.EvaluatorRecord) bool {

	if len(p.EvaluatorRecords) != len(src) {
		return false
	}
	for k, v := range p.EvaluatorRecords {
		_src := src[k]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

// 实际行级payload
type ExperimentTurnPayload struct {
	TurnID int64 `thrift:"turn_id,1" frugal:"1,default,i64" json:"turn_id" form:"turn_id" query:"turn_id"`
	// 评测数据集数据
	EvalSet *TurnEvalSet `thrift:"eval_set,2,optional" frugal:"2,optional,TurnEvalSet" form:"eval_set" json:"eval_set,omitempty" query:"eval_set"`
	// 评测对象结果
	TargetOutput *TurnTargetOutput `thrift:"target_output,3,optional" frugal:"3,optional,TurnTargetOutput" form:"target_output" json:"target_output,omitempty" query:"target_output"`
	// 评测规则执行结果
	EvaluatorOutput *TurnEvaluatorOutput `thrift:"evaluator_output,4,optional" frugal:"4,optional,TurnEvaluatorOutput" form:"evaluator_output" json:"evaluator_output,omitempty" query:"evaluator_output"`
	// 评测系统相关数据日志、error
	SystemInfo *TurnSystemInfo `thrift:"system_info,5,optional" frugal:"5,optional,TurnSystemInfo" form:"system_info" json:"system_info,omitempty" query:"system_info"`
}

func NewExperimentTurnPayload() *ExperimentTurnPayload {
	return &ExperimentTurnPayload{}
}

func (p *ExperimentTurnPayload) InitDefault() {
}

func (p *ExperimentTurnPayload) GetTurnID() (v int64) {
	if p != nil {
		return p.TurnID
	}
	return
}

var ExperimentTurnPayload_EvalSet_DEFAULT *TurnEvalSet

func (p *ExperimentTurnPayload) GetEvalSet() (v *TurnEvalSet) {
	if p == nil {
		return
	}
	if !p.IsSetEvalSet() {
		return ExperimentTurnPayload_EvalSet_DEFAULT
	}
	return p.EvalSet
}

var ExperimentTurnPayload_TargetOutput_DEFAULT *TurnTargetOutput

func (p *ExperimentTurnPayload) GetTargetOutput() (v *TurnTargetOutput) {
	if p == nil {
		return
	}
	if !p.IsSetTargetOutput() {
		return ExperimentTurnPayload_TargetOutput_DEFAULT
	}
	return p.TargetOutput
}

var ExperimentTurnPayload_EvaluatorOutput_DEFAULT *TurnEvaluatorOutput

func (p *ExperimentTurnPayload) GetEvaluatorOutput() (v *TurnEvaluatorOutput) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorOutput() {
		return ExperimentTurnPayload_EvaluatorOutput_DEFAULT
	}
	return p.EvaluatorOutput
}

var ExperimentTurnPayload_SystemInfo_DEFAULT *TurnSystemInfo

func (p *ExperimentTurnPayload) GetSystemInfo() (v *TurnSystemInfo) {
	if p == nil {
		return
	}
	if !p.IsSetSystemInfo() {
		return ExperimentTurnPayload_SystemInfo_DEFAULT
	}
	return p.SystemInfo
}
func (p *ExperimentTurnPayload) SetTurnID(val int64) {
	p.TurnID = val
}
func (p *ExperimentTurnPayload) SetEvalSet(val *TurnEvalSet) {
	p.EvalSet = val
}
func (p *ExperimentTurnPayload) SetTargetOutput(val *TurnTargetOutput) {
	p.TargetOutput = val
}
func (p *ExperimentTurnPayload) SetEvaluatorOutput(val *TurnEvaluatorOutput) {
	p.EvaluatorOutput = val
}
func (p *ExperimentTurnPayload) SetSystemInfo(val *TurnSystemInfo) {
	p.SystemInfo = val
}

var fieldIDToName_ExperimentTurnPayload = map[int16]string{
	1: "turn_id",
	2: "eval_set",
	3: "target_output",
	4: "evaluator_output",
	5: "system_info",
}

func (p *ExperimentTurnPayload) IsSetEvalSet() bool {
	return p.EvalSet != nil
}

func (p *ExperimentTurnPayload) IsSetTargetOutput() bool {
	return p.TargetOutput != nil
}

func (p *ExperimentTurnPayload) IsSetEvaluatorOutput() bool {
	return p.EvaluatorOutput != nil
}

func (p *ExperimentTurnPayload) IsSetSystemInfo() bool {
	return p.SystemInfo != nil
}

func (p *ExperimentTurnPayload) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExperimentTurnPayload[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExperimentTurnPayload) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TurnID = _field
	return nil
}
func (p *ExperimentTurnPayload) ReadField2(iprot thrift.TProtocol) error {
	_field := NewTurnEvalSet()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvalSet = _field
	return nil
}
func (p *ExperimentTurnPayload) ReadField3(iprot thrift.TProtocol) error {
	_field := NewTurnTargetOutput()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.TargetOutput = _field
	return nil
}
func (p *ExperimentTurnPayload) ReadField4(iprot thrift.TProtocol) error {
	_field := NewTurnEvaluatorOutput()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvaluatorOutput = _field
	return nil
}
func (p *ExperimentTurnPayload) ReadField5(iprot thrift.TProtocol) error {
	_field := NewTurnSystemInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.SystemInfo = _field
	return nil
}

func (p *ExperimentTurnPayload) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ExperimentTurnPayload"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExperimentTurnPayload) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("turn_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TurnID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ExperimentTurnPayload) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvalSet() {
		if err = oprot.WriteFieldBegin("eval_set", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.EvalSet.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ExperimentTurnPayload) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTargetOutput() {
		if err = oprot.WriteFieldBegin("target_output", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.TargetOutput.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ExperimentTurnPayload) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorOutput() {
		if err = oprot.WriteFieldBegin("evaluator_output", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.EvaluatorOutput.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *ExperimentTurnPayload) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemInfo() {
		if err = oprot.WriteFieldBegin("system_info", thrift.STRUCT, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.SystemInfo.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ExperimentTurnPayload) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExperimentTurnPayload(%+v)", *p)

}

func (p *ExperimentTurnPayload) DeepEqual(ano *ExperimentTurnPayload) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TurnID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvalSet) {
		return false
	}
	if !p.Field3DeepEqual(ano.TargetOutput) {
		return false
	}
	if !p.Field4DeepEqual(ano.EvaluatorOutput) {
		return false
	}
	if !p.Field5DeepEqual(ano.SystemInfo) {
		return false
	}
	return true
}

func (p *ExperimentTurnPayload) Field1DeepEqual(src int64) bool {

	if p.TurnID != src {
		return false
	}
	return true
}
func (p *ExperimentTurnPayload) Field2DeepEqual(src *TurnEvalSet) bool {

	if !p.EvalSet.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ExperimentTurnPayload) Field3DeepEqual(src *TurnTargetOutput) bool {

	if !p.TargetOutput.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ExperimentTurnPayload) Field4DeepEqual(src *TurnEvaluatorOutput) bool {

	if !p.EvaluatorOutput.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ExperimentTurnPayload) Field5DeepEqual(src *TurnSystemInfo) bool {

	if !p.SystemInfo.DeepEqual(src) {
		return false
	}
	return true
}

type KeywordSearch struct {
	Keyword      *string        `thrift:"keyword,1,optional" frugal:"1,optional,string" form:"keyword" json:"keyword,omitempty" query:"keyword"`
	FilterFields []*FilterField `thrift:"filter_fields,2,optional" frugal:"2,optional,list<FilterField>" form:"filter_fields" json:"filter_fields,omitempty" query:"filter_fields"`
}

func NewKeywordSearch() *KeywordSearch {
	return &KeywordSearch{}
}

func (p *KeywordSearch) InitDefault() {
}

var KeywordSearch_Keyword_DEFAULT string

func (p *KeywordSearch) GetKeyword() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetKeyword() {
		return KeywordSearch_Keyword_DEFAULT
	}
	return *p.Keyword
}

var KeywordSearch_FilterFields_DEFAULT []*FilterField

func (p *KeywordSearch) GetFilterFields() (v []*FilterField) {
	if p == nil {
		return
	}
	if !p.IsSetFilterFields() {
		return KeywordSearch_FilterFields_DEFAULT
	}
	return p.FilterFields
}
func (p *KeywordSearch) SetKeyword(val *string) {
	p.Keyword = val
}
func (p *KeywordSearch) SetFilterFields(val []*FilterField) {
	p.FilterFields = val
}

var fieldIDToName_KeywordSearch = map[int16]string{
	1: "keyword",
	2: "filter_fields",
}

func (p *KeywordSearch) IsSetKeyword() bool {
	return p.Keyword != nil
}

func (p *KeywordSearch) IsSetFilterFields() bool {
	return p.FilterFields != nil
}

func (p *KeywordSearch) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_KeywordSearch[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *KeywordSearch) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Keyword = _field
	return nil
}
func (p *KeywordSearch) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*FilterField, 0, size)
	values := make([]FilterField, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.FilterFields = _field
	return nil
}

func (p *KeywordSearch) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("KeywordSearch"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *KeywordSearch) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetKeyword() {
		if err = oprot.WriteFieldBegin("keyword", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Keyword); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *KeywordSearch) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetFilterFields() {
		if err = oprot.WriteFieldBegin("filter_fields", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.FilterFields)); err != nil {
			return err
		}
		for _, v := range p.FilterFields {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *KeywordSearch) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KeywordSearch(%+v)", *p)

}

func (p *KeywordSearch) DeepEqual(ano *KeywordSearch) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Keyword) {
		return false
	}
	if !p.Field2DeepEqual(ano.FilterFields) {
		return false
	}
	return true
}

func (p *KeywordSearch) Field1DeepEqual(src *string) bool {

	if p.Keyword == src {
		return true
	} else if p.Keyword == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Keyword, *src) != 0 {
		return false
	}
	return true
}
func (p *KeywordSearch) Field2DeepEqual(src []*FilterField) bool {

	if len(p.FilterFields) != len(src) {
		return false
	}
	for i, v := range p.FilterFields {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type ExperimentFilter struct {
	Filters       *Filters       `thrift:"filters,1,optional" frugal:"1,optional,Filters" form:"filters" json:"filters,omitempty" query:"filters"`
	KeywordSearch *KeywordSearch `thrift:"keyword_search,2,optional" frugal:"2,optional,KeywordSearch" form:"keyword_search" json:"keyword_search,omitempty" query:"keyword_search"`
}

func NewExperimentFilter() *ExperimentFilter {
	return &ExperimentFilter{}
}

func (p *ExperimentFilter) InitDefault() {
}

var ExperimentFilter_Filters_DEFAULT *Filters

func (p *ExperimentFilter) GetFilters() (v *Filters) {
	if p == nil {
		return
	}
	if !p.IsSetFilters() {
		return ExperimentFilter_Filters_DEFAULT
	}
	return p.Filters
}

var ExperimentFilter_KeywordSearch_DEFAULT *KeywordSearch

func (p *ExperimentFilter) GetKeywordSearch() (v *KeywordSearch) {
	if p == nil {
		return
	}
	if !p.IsSetKeywordSearch() {
		return ExperimentFilter_KeywordSearch_DEFAULT
	}
	return p.KeywordSearch
}
func (p *ExperimentFilter) SetFilters(val *Filters) {
	p.Filters = val
}
func (p *ExperimentFilter) SetKeywordSearch(val *KeywordSearch) {
	p.KeywordSearch = val
}

var fieldIDToName_ExperimentFilter = map[int16]string{
	1: "filters",
	2: "keyword_search",
}

func (p *ExperimentFilter) IsSetFilters() bool {
	return p.Filters != nil
}

func (p *ExperimentFilter) IsSetKeywordSearch() bool {
	return p.KeywordSearch != nil
}

func (p *ExperimentFilter) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExperimentFilter[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExperimentFilter) ReadField1(iprot thrift.TProtocol) error {
	_field := NewFilters()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Filters = _field
	return nil
}
func (p *ExperimentFilter) ReadField2(iprot thrift.TProtocol) error {
	_field := NewKeywordSearch()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.KeywordSearch = _field
	return nil
}

func (p *ExperimentFilter) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ExperimentFilter"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExperimentFilter) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetFilters() {
		if err = oprot.WriteFieldBegin("filters", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Filters.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ExperimentFilter) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetKeywordSearch() {
		if err = oprot.WriteFieldBegin("keyword_search", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.KeywordSearch.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ExperimentFilter) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExperimentFilter(%+v)", *p)

}

func (p *ExperimentFilter) DeepEqual(ano *ExperimentFilter) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Filters) {
		return false
	}
	if !p.Field2DeepEqual(ano.KeywordSearch) {
		return false
	}
	return true
}

func (p *ExperimentFilter) Field1DeepEqual(src *Filters) bool {

	if !p.Filters.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ExperimentFilter) Field2DeepEqual(src *KeywordSearch) bool {

	if !p.KeywordSearch.DeepEqual(src) {
		return false
	}
	return true
}

type Filters struct {
	FilterConditions []*FilterCondition `thrift:"filter_conditions,1,optional" frugal:"1,optional,list<FilterCondition>" form:"filter_conditions" json:"filter_conditions,omitempty" query:"filter_conditions"`
	LogicOp          *FilterLogicOp     `thrift:"logic_op,2,optional" frugal:"2,optional,FilterLogicOp" form:"logic_op" json:"logic_op,omitempty" query:"logic_op"`
}

func NewFilters() *Filters {
	return &Filters{}
}

func (p *Filters) InitDefault() {
}

var Filters_FilterConditions_DEFAULT []*FilterCondition

func (p *Filters) GetFilterConditions() (v []*FilterCondition) {
	if p == nil {
		return
	}
	if !p.IsSetFilterConditions() {
		return Filters_FilterConditions_DEFAULT
	}
	return p.FilterConditions
}

var Filters_LogicOp_DEFAULT FilterLogicOp

func (p *Filters) GetLogicOp() (v FilterLogicOp) {
	if p == nil {
		return
	}
	if !p.IsSetLogicOp() {
		return Filters_LogicOp_DEFAULT
	}
	return *p.LogicOp
}
func (p *Filters) SetFilterConditions(val []*FilterCondition) {
	p.FilterConditions = val
}
func (p *Filters) SetLogicOp(val *FilterLogicOp) {
	p.LogicOp = val
}

var fieldIDToName_Filters = map[int16]string{
	1: "filter_conditions",
	2: "logic_op",
}

func (p *Filters) IsSetFilterConditions() bool {
	return p.FilterConditions != nil
}

func (p *Filters) IsSetLogicOp() bool {
	return p.LogicOp != nil
}

func (p *Filters) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Filters[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Filters) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*FilterCondition, 0, size)
	values := make([]FilterCondition, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.FilterConditions = _field
	return nil
}
func (p *Filters) ReadField2(iprot thrift.TProtocol) error {

	var _field *FilterLogicOp
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := FilterLogicOp(v)
		_field = &tmp
	}
	p.LogicOp = _field
	return nil
}

func (p *Filters) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Filters"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Filters) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetFilterConditions() {
		if err = oprot.WriteFieldBegin("filter_conditions", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.FilterConditions)); err != nil {
			return err
		}
		for _, v := range p.FilterConditions {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *Filters) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetLogicOp() {
		if err = oprot.WriteFieldBegin("logic_op", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.LogicOp)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Filters) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Filters(%+v)", *p)

}

func (p *Filters) DeepEqual(ano *Filters) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.FilterConditions) {
		return false
	}
	if !p.Field2DeepEqual(ano.LogicOp) {
		return false
	}
	return true
}

func (p *Filters) Field1DeepEqual(src []*FilterCondition) bool {

	if len(p.FilterConditions) != len(src) {
		return false
	}
	for i, v := range p.FilterConditions {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *Filters) Field2DeepEqual(src *FilterLogicOp) bool {

	if p.LogicOp == src {
		return true
	} else if p.LogicOp == nil || src == nil {
		return false
	}
	if *p.LogicOp != *src {
		return false
	}
	return true
}

type FilterField struct {
	FieldType FieldType `thrift:"field_type,1,required" frugal:"1,required,FieldType" form:"field_type,required" json:"field_type,required" query:"field_type,required"`
	// 二级key放此字段里
	FieldKey *string `thrift:"field_key,2,optional" frugal:"2,optional,string" form:"field_key" json:"field_key,omitempty" query:"field_key"`
}

func NewFilterField() *FilterField {
	return &FilterField{}
}

func (p *FilterField) InitDefault() {
}

func (p *FilterField) GetFieldType() (v FieldType) {
	if p != nil {
		return p.FieldType
	}
	return
}

var FilterField_FieldKey_DEFAULT string

func (p *FilterField) GetFieldKey() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetFieldKey() {
		return FilterField_FieldKey_DEFAULT
	}
	return *p.FieldKey
}
func (p *FilterField) SetFieldType(val FieldType) {
	p.FieldType = val
}
func (p *FilterField) SetFieldKey(val *string) {
	p.FieldKey = val
}

var fieldIDToName_FilterField = map[int16]string{
	1: "field_type",
	2: "field_key",
}

func (p *FilterField) IsSetFieldKey() bool {
	return p.FieldKey != nil
}

func (p *FilterField) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetFieldType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetFieldType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetFieldType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FilterField[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_FilterField[fieldId]))
}

func (p *FilterField) ReadField1(iprot thrift.TProtocol) error {

	var _field FieldType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = FieldType(v)
	}
	p.FieldType = _field
	return nil
}
func (p *FilterField) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FieldKey = _field
	return nil
}

func (p *FilterField) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FilterField"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FilterField) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("field_type", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.FieldType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *FilterField) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetFieldKey() {
		if err = oprot.WriteFieldBegin("field_key", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.FieldKey); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *FilterField) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FilterField(%+v)", *p)

}

func (p *FilterField) DeepEqual(ano *FilterField) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.FieldType) {
		return false
	}
	if !p.Field2DeepEqual(ano.FieldKey) {
		return false
	}
	return true
}

func (p *FilterField) Field1DeepEqual(src FieldType) bool {

	if p.FieldType != src {
		return false
	}
	return true
}
func (p *FilterField) Field2DeepEqual(src *string) bool {

	if p.FieldKey == src {
		return true
	} else if p.FieldKey == nil || src == nil {
		return false
	}
	if strings.Compare(*p.FieldKey, *src) != 0 {
		return false
	}
	return true
}

// 字段过滤器
type FilterCondition struct {
	// 过滤字段，比如评估器ID
	Field *FilterField `thrift:"field,1" frugal:"1,default,FilterField" form:"field" json:"field" query:"field"`
	// 操作符，比如等于、包含、大于、小于等
	Operator FilterOperatorType `thrift:"operator,2" frugal:"2,default,FilterOperatorType" form:"operator" json:"operator" query:"operator"`
	// 操作值;支持多种类型的操作值；
	Value        string        `thrift:"value,3" frugal:"3,default,string" form:"value" json:"value" query:"value"`
	SourceTarget *SourceTarget `thrift:"source_target,4,optional" frugal:"4,optional,SourceTarget" form:"source_target" json:"source_target,omitempty" query:"source_target"`
}

func NewFilterCondition() *FilterCondition {
	return &FilterCondition{}
}

func (p *FilterCondition) InitDefault() {
}

var FilterCondition_Field_DEFAULT *FilterField

func (p *FilterCondition) GetField() (v *FilterField) {
	if p == nil {
		return
	}
	if !p.IsSetField() {
		return FilterCondition_Field_DEFAULT
	}
	return p.Field
}

func (p *FilterCondition) GetOperator() (v FilterOperatorType) {
	if p != nil {
		return p.Operator
	}
	return
}

func (p *FilterCondition) GetValue() (v string) {
	if p != nil {
		return p.Value
	}
	return
}

var FilterCondition_SourceTarget_DEFAULT *SourceTarget

func (p *FilterCondition) GetSourceTarget() (v *SourceTarget) {
	if p == nil {
		return
	}
	if !p.IsSetSourceTarget() {
		return FilterCondition_SourceTarget_DEFAULT
	}
	return p.SourceTarget
}
func (p *FilterCondition) SetField(val *FilterField) {
	p.Field = val
}
func (p *FilterCondition) SetOperator(val FilterOperatorType) {
	p.Operator = val
}
func (p *FilterCondition) SetValue(val string) {
	p.Value = val
}
func (p *FilterCondition) SetSourceTarget(val *SourceTarget) {
	p.SourceTarget = val
}

var fieldIDToName_FilterCondition = map[int16]string{
	1: "field",
	2: "operator",
	3: "value",
	4: "source_target",
}

func (p *FilterCondition) IsSetField() bool {
	return p.Field != nil
}

func (p *FilterCondition) IsSetSourceTarget() bool {
	return p.SourceTarget != nil
}

func (p *FilterCondition) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FilterCondition[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FilterCondition) ReadField1(iprot thrift.TProtocol) error {
	_field := NewFilterField()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Field = _field
	return nil
}
func (p *FilterCondition) ReadField2(iprot thrift.TProtocol) error {

	var _field FilterOperatorType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = FilterOperatorType(v)
	}
	p.Operator = _field
	return nil
}
func (p *FilterCondition) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Value = _field
	return nil
}
func (p *FilterCondition) ReadField4(iprot thrift.TProtocol) error {
	_field := NewSourceTarget()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.SourceTarget = _field
	return nil
}

func (p *FilterCondition) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FilterCondition"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FilterCondition) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("field", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Field.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *FilterCondition) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("operator", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.Operator)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *FilterCondition) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("value", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Value); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *FilterCondition) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSourceTarget() {
		if err = oprot.WriteFieldBegin("source_target", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.SourceTarget.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *FilterCondition) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FilterCondition(%+v)", *p)

}

func (p *FilterCondition) DeepEqual(ano *FilterCondition) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Field) {
		return false
	}
	if !p.Field2DeepEqual(ano.Operator) {
		return false
	}
	if !p.Field3DeepEqual(ano.Value) {
		return false
	}
	if !p.Field4DeepEqual(ano.SourceTarget) {
		return false
	}
	return true
}

func (p *FilterCondition) Field1DeepEqual(src *FilterField) bool {

	if !p.Field.DeepEqual(src) {
		return false
	}
	return true
}
func (p *FilterCondition) Field2DeepEqual(src FilterOperatorType) bool {

	if p.Operator != src {
		return false
	}
	return true
}
func (p *FilterCondition) Field3DeepEqual(src string) bool {

	if strings.Compare(p.Value, src) != 0 {
		return false
	}
	return true
}
func (p *FilterCondition) Field4DeepEqual(src *SourceTarget) bool {

	if !p.SourceTarget.DeepEqual(src) {
		return false
	}
	return true
}

type SourceTarget struct {
	EvalTargetType  *eval_target.EvalTargetType `thrift:"eval_target_type,1,optional" frugal:"1,optional,EvalTargetType" form:"eval_target_type" json:"eval_target_type,omitempty" query:"eval_target_type"`
	SourceTargetIds []string                    `thrift:"source_target_ids,3,optional" frugal:"3,optional,list<string>" form:"source_target_ids" json:"source_target_ids,omitempty" query:"source_target_ids"`
}

func NewSourceTarget() *SourceTarget {
	return &SourceTarget{}
}

func (p *SourceTarget) InitDefault() {
}

var SourceTarget_EvalTargetType_DEFAULT eval_target.EvalTargetType

func (p *SourceTarget) GetEvalTargetType() (v eval_target.EvalTargetType) {
	if p == nil {
		return
	}
	if !p.IsSetEvalTargetType() {
		return SourceTarget_EvalTargetType_DEFAULT
	}
	return *p.EvalTargetType
}

var SourceTarget_SourceTargetIds_DEFAULT []string

func (p *SourceTarget) GetSourceTargetIds() (v []string) {
	if p == nil {
		return
	}
	if !p.IsSetSourceTargetIds() {
		return SourceTarget_SourceTargetIds_DEFAULT
	}
	return p.SourceTargetIds
}
func (p *SourceTarget) SetEvalTargetType(val *eval_target.EvalTargetType) {
	p.EvalTargetType = val
}
func (p *SourceTarget) SetSourceTargetIds(val []string) {
	p.SourceTargetIds = val
}

var fieldIDToName_SourceTarget = map[int16]string{
	1: "eval_target_type",
	3: "source_target_ids",
}

func (p *SourceTarget) IsSetEvalTargetType() bool {
	return p.EvalTargetType != nil
}

func (p *SourceTarget) IsSetSourceTargetIds() bool {
	return p.SourceTargetIds != nil
}

func (p *SourceTarget) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SourceTarget[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SourceTarget) ReadField1(iprot thrift.TProtocol) error {

	var _field *eval_target.EvalTargetType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := eval_target.EvalTargetType(v)
		_field = &tmp
	}
	p.EvalTargetType = _field
	return nil
}
func (p *SourceTarget) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.SourceTargetIds = _field
	return nil
}

func (p *SourceTarget) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SourceTarget"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SourceTarget) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvalTargetType() {
		if err = oprot.WriteFieldBegin("eval_target_type", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.EvalTargetType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *SourceTarget) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSourceTargetIds() {
		if err = oprot.WriteFieldBegin("source_target_ids", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.SourceTargetIds)); err != nil {
			return err
		}
		for _, v := range p.SourceTargetIds {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *SourceTarget) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SourceTarget(%+v)", *p)

}

func (p *SourceTarget) DeepEqual(ano *SourceTarget) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvalTargetType) {
		return false
	}
	if !p.Field3DeepEqual(ano.SourceTargetIds) {
		return false
	}
	return true
}

func (p *SourceTarget) Field1DeepEqual(src *eval_target.EvalTargetType) bool {

	if p.EvalTargetType == src {
		return true
	} else if p.EvalTargetType == nil || src == nil {
		return false
	}
	if *p.EvalTargetType != *src {
		return false
	}
	return true
}
func (p *SourceTarget) Field3DeepEqual(src []string) bool {

	if len(p.SourceTargetIds) != len(src) {
		return false
	}
	for i, v := range p.SourceTargetIds {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

// 实验粒度聚合结果
type ExptAggregateResult_ struct {
	ExperimentID     int64                                `thrift:"experiment_id,1,required" frugal:"1,required,i64" json:"experiment_id" form:"experiment_id,required" query:"experiment_id,required"`
	EvaluatorResults map[int64]*EvaluatorAggregateResult_ `thrift:"evaluator_results,2,optional" frugal:"2,optional,map<i64:EvaluatorAggregateResult_>" json:"evaluator_results" form:"evaluator_results" query:"evaluator_results"`
	Status           *ExptAggregateCalculateStatus        `thrift:"status,3,optional" frugal:"3,optional,ExptAggregateCalculateStatus" form:"status" json:"status,omitempty" query:"status"`
}

func NewExptAggregateResult_() *ExptAggregateResult_ {
	return &ExptAggregateResult_{}
}

func (p *ExptAggregateResult_) InitDefault() {
}

func (p *ExptAggregateResult_) GetExperimentID() (v int64) {
	if p != nil {
		return p.ExperimentID
	}
	return
}

var ExptAggregateResult__EvaluatorResults_DEFAULT map[int64]*EvaluatorAggregateResult_

func (p *ExptAggregateResult_) GetEvaluatorResults() (v map[int64]*EvaluatorAggregateResult_) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorResults() {
		return ExptAggregateResult__EvaluatorResults_DEFAULT
	}
	return p.EvaluatorResults
}

var ExptAggregateResult__Status_DEFAULT ExptAggregateCalculateStatus

func (p *ExptAggregateResult_) GetStatus() (v ExptAggregateCalculateStatus) {
	if p == nil {
		return
	}
	if !p.IsSetStatus() {
		return ExptAggregateResult__Status_DEFAULT
	}
	return *p.Status
}
func (p *ExptAggregateResult_) SetExperimentID(val int64) {
	p.ExperimentID = val
}
func (p *ExptAggregateResult_) SetEvaluatorResults(val map[int64]*EvaluatorAggregateResult_) {
	p.EvaluatorResults = val
}
func (p *ExptAggregateResult_) SetStatus(val *ExptAggregateCalculateStatus) {
	p.Status = val
}

var fieldIDToName_ExptAggregateResult_ = map[int16]string{
	1: "experiment_id",
	2: "evaluator_results",
	3: "status",
}

func (p *ExptAggregateResult_) IsSetEvaluatorResults() bool {
	return p.EvaluatorResults != nil
}

func (p *ExptAggregateResult_) IsSetStatus() bool {
	return p.Status != nil
}

func (p *ExptAggregateResult_) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetExperimentID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetExperimentID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetExperimentID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExptAggregateResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ExptAggregateResult_[fieldId]))
}

func (p *ExptAggregateResult_) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ExperimentID = _field
	return nil
}
func (p *ExptAggregateResult_) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[int64]*EvaluatorAggregateResult_, size)
	values := make([]EvaluatorAggregateResult_, size)
	for i := 0; i < size; i++ {
		var _key int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_key = v
		}

		_val := &values[i]
		_val.InitDefault()
		if err := _val.Read(iprot); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.EvaluatorResults = _field
	return nil
}
func (p *ExptAggregateResult_) ReadField3(iprot thrift.TProtocol) error {

	var _field *ExptAggregateCalculateStatus
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := ExptAggregateCalculateStatus(v)
		_field = &tmp
	}
	p.Status = _field
	return nil
}

func (p *ExptAggregateResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ExptAggregateResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExptAggregateResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("experiment_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ExperimentID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ExptAggregateResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorResults() {
		if err = oprot.WriteFieldBegin("evaluator_results", thrift.MAP, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.I64, thrift.STRUCT, len(p.EvaluatorResults)); err != nil {
			return err
		}
		for k, v := range p.EvaluatorResults {
			if err := oprot.WriteI64(k); err != nil {
				return err
			}
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ExptAggregateResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Status)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ExptAggregateResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExptAggregateResult_(%+v)", *p)

}

func (p *ExptAggregateResult_) DeepEqual(ano *ExptAggregateResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ExperimentID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluatorResults) {
		return false
	}
	if !p.Field3DeepEqual(ano.Status) {
		return false
	}
	return true
}

func (p *ExptAggregateResult_) Field1DeepEqual(src int64) bool {

	if p.ExperimentID != src {
		return false
	}
	return true
}
func (p *ExptAggregateResult_) Field2DeepEqual(src map[int64]*EvaluatorAggregateResult_) bool {

	if len(p.EvaluatorResults) != len(src) {
		return false
	}
	for k, v := range p.EvaluatorResults {
		_src := src[k]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ExptAggregateResult_) Field3DeepEqual(src *ExptAggregateCalculateStatus) bool {

	if p.Status == src {
		return true
	} else if p.Status == nil || src == nil {
		return false
	}
	if *p.Status != *src {
		return false
	}
	return true
}

// 评估器版本粒度聚合结果
type EvaluatorAggregateResult_ struct {
	EvaluatorVersionID int64                `thrift:"evaluator_version_id,1,required" frugal:"1,required,i64" json:"evaluator_version_id" form:"evaluator_version_id,required" query:"evaluator_version_id,required"`
	AggregatorResults  []*AggregatorResult_ `thrift:"aggregator_results,2,optional" frugal:"2,optional,list<AggregatorResult_>" form:"aggregator_results" json:"aggregator_results,omitempty" query:"aggregator_results"`
	Name               *string              `thrift:"name,3,optional" frugal:"3,optional,string" form:"name" json:"name,omitempty" query:"name"`
	Version            *string              `thrift:"version,4,optional" frugal:"4,optional,string" form:"version" json:"version,omitempty" query:"version"`
}

func NewEvaluatorAggregateResult_() *EvaluatorAggregateResult_ {
	return &EvaluatorAggregateResult_{}
}

func (p *EvaluatorAggregateResult_) InitDefault() {
}

func (p *EvaluatorAggregateResult_) GetEvaluatorVersionID() (v int64) {
	if p != nil {
		return p.EvaluatorVersionID
	}
	return
}

var EvaluatorAggregateResult__AggregatorResults_DEFAULT []*AggregatorResult_

func (p *EvaluatorAggregateResult_) GetAggregatorResults() (v []*AggregatorResult_) {
	if p == nil {
		return
	}
	if !p.IsSetAggregatorResults() {
		return EvaluatorAggregateResult__AggregatorResults_DEFAULT
	}
	return p.AggregatorResults
}

var EvaluatorAggregateResult__Name_DEFAULT string

func (p *EvaluatorAggregateResult_) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return EvaluatorAggregateResult__Name_DEFAULT
	}
	return *p.Name
}

var EvaluatorAggregateResult__Version_DEFAULT string

func (p *EvaluatorAggregateResult_) GetVersion() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetVersion() {
		return EvaluatorAggregateResult__Version_DEFAULT
	}
	return *p.Version
}
func (p *EvaluatorAggregateResult_) SetEvaluatorVersionID(val int64) {
	p.EvaluatorVersionID = val
}
func (p *EvaluatorAggregateResult_) SetAggregatorResults(val []*AggregatorResult_) {
	p.AggregatorResults = val
}
func (p *EvaluatorAggregateResult_) SetName(val *string) {
	p.Name = val
}
func (p *EvaluatorAggregateResult_) SetVersion(val *string) {
	p.Version = val
}

var fieldIDToName_EvaluatorAggregateResult_ = map[int16]string{
	1: "evaluator_version_id",
	2: "aggregator_results",
	3: "name",
	4: "version",
}

func (p *EvaluatorAggregateResult_) IsSetAggregatorResults() bool {
	return p.AggregatorResults != nil
}

func (p *EvaluatorAggregateResult_) IsSetName() bool {
	return p.Name != nil
}

func (p *EvaluatorAggregateResult_) IsSetVersion() bool {
	return p.Version != nil
}

func (p *EvaluatorAggregateResult_) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetEvaluatorVersionID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluatorVersionID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetEvaluatorVersionID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorAggregateResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_EvaluatorAggregateResult_[fieldId]))
}

func (p *EvaluatorAggregateResult_) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluatorVersionID = _field
	return nil
}
func (p *EvaluatorAggregateResult_) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*AggregatorResult_, 0, size)
	values := make([]AggregatorResult_, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.AggregatorResults = _field
	return nil
}
func (p *EvaluatorAggregateResult_) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *EvaluatorAggregateResult_) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Version = _field
	return nil
}

func (p *EvaluatorAggregateResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EvaluatorAggregateResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorAggregateResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluator_version_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EvaluatorVersionID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *EvaluatorAggregateResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAggregatorResults() {
		if err = oprot.WriteFieldBegin("aggregator_results", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.AggregatorResults)); err != nil {
			return err
		}
		for _, v := range p.AggregatorResults {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *EvaluatorAggregateResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *EvaluatorAggregateResult_) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err = oprot.WriteFieldBegin("version", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Version); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *EvaluatorAggregateResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorAggregateResult_(%+v)", *p)

}

func (p *EvaluatorAggregateResult_) DeepEqual(ano *EvaluatorAggregateResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvaluatorVersionID) {
		return false
	}
	if !p.Field2DeepEqual(ano.AggregatorResults) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field4DeepEqual(ano.Version) {
		return false
	}
	return true
}

func (p *EvaluatorAggregateResult_) Field1DeepEqual(src int64) bool {

	if p.EvaluatorVersionID != src {
		return false
	}
	return true
}
func (p *EvaluatorAggregateResult_) Field2DeepEqual(src []*AggregatorResult_) bool {

	if len(p.AggregatorResults) != len(src) {
		return false
	}
	for i, v := range p.AggregatorResults {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *EvaluatorAggregateResult_) Field3DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *EvaluatorAggregateResult_) Field4DeepEqual(src *string) bool {

	if p.Version == src {
		return true
	} else if p.Version == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Version, *src) != 0 {
		return false
	}
	return true
}

// 一种聚合器类型的聚合结果
type AggregatorResult_ struct {
	AggregatorType AggregatorType `thrift:"aggregator_type,1,required" frugal:"1,required,AggregatorType" form:"aggregator_type,required" json:"aggregator_type,required" query:"aggregator_type,required"`
	Data           *AggregateData `thrift:"data,2,optional" frugal:"2,optional,AggregateData" form:"data" json:"data,omitempty" query:"data"`
}

func NewAggregatorResult_() *AggregatorResult_ {
	return &AggregatorResult_{}
}

func (p *AggregatorResult_) InitDefault() {
}

func (p *AggregatorResult_) GetAggregatorType() (v AggregatorType) {
	if p != nil {
		return p.AggregatorType
	}
	return
}

var AggregatorResult__Data_DEFAULT *AggregateData

func (p *AggregatorResult_) GetData() (v *AggregateData) {
	if p == nil {
		return
	}
	if !p.IsSetData() {
		return AggregatorResult__Data_DEFAULT
	}
	return p.Data
}
func (p *AggregatorResult_) SetAggregatorType(val AggregatorType) {
	p.AggregatorType = val
}
func (p *AggregatorResult_) SetData(val *AggregateData) {
	p.Data = val
}

var fieldIDToName_AggregatorResult_ = map[int16]string{
	1: "aggregator_type",
	2: "data",
}

func (p *AggregatorResult_) IsSetData() bool {
	return p.Data != nil
}

func (p *AggregatorResult_) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetAggregatorType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetAggregatorType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetAggregatorType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AggregatorResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_AggregatorResult_[fieldId]))
}

func (p *AggregatorResult_) ReadField1(iprot thrift.TProtocol) error {

	var _field AggregatorType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = AggregatorType(v)
	}
	p.AggregatorType = _field
	return nil
}
func (p *AggregatorResult_) ReadField2(iprot thrift.TProtocol) error {
	_field := NewAggregateData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Data = _field
	return nil
}

func (p *AggregatorResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AggregatorResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AggregatorResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("aggregator_type", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.AggregatorType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *AggregatorResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Data.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *AggregatorResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AggregatorResult_(%+v)", *p)

}

func (p *AggregatorResult_) DeepEqual(ano *AggregatorResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AggregatorType) {
		return false
	}
	if !p.Field2DeepEqual(ano.Data) {
		return false
	}
	return true
}

func (p *AggregatorResult_) Field1DeepEqual(src AggregatorType) bool {

	if p.AggregatorType != src {
		return false
	}
	return true
}
func (p *AggregatorResult_) Field2DeepEqual(src *AggregateData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}

type ScoreDistribution struct {
	ScoreDistributionItems []*ScoreDistributionItem `thrift:"score_distribution_items,1,optional" frugal:"1,optional,list<ScoreDistributionItem>" form:"score_distribution_items" json:"score_distribution_items,omitempty" query:"score_distribution_items"`
}

func NewScoreDistribution() *ScoreDistribution {
	return &ScoreDistribution{}
}

func (p *ScoreDistribution) InitDefault() {
}

var ScoreDistribution_ScoreDistributionItems_DEFAULT []*ScoreDistributionItem

func (p *ScoreDistribution) GetScoreDistributionItems() (v []*ScoreDistributionItem) {
	if p == nil {
		return
	}
	if !p.IsSetScoreDistributionItems() {
		return ScoreDistribution_ScoreDistributionItems_DEFAULT
	}
	return p.ScoreDistributionItems
}
func (p *ScoreDistribution) SetScoreDistributionItems(val []*ScoreDistributionItem) {
	p.ScoreDistributionItems = val
}

var fieldIDToName_ScoreDistribution = map[int16]string{
	1: "score_distribution_items",
}

func (p *ScoreDistribution) IsSetScoreDistributionItems() bool {
	return p.ScoreDistributionItems != nil
}

func (p *ScoreDistribution) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScoreDistribution[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ScoreDistribution) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ScoreDistributionItem, 0, size)
	values := make([]ScoreDistributionItem, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ScoreDistributionItems = _field
	return nil
}

func (p *ScoreDistribution) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ScoreDistribution"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScoreDistribution) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetScoreDistributionItems() {
		if err = oprot.WriteFieldBegin("score_distribution_items", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ScoreDistributionItems)); err != nil {
			return err
		}
		for _, v := range p.ScoreDistributionItems {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ScoreDistribution) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScoreDistribution(%+v)", *p)

}

func (p *ScoreDistribution) DeepEqual(ano *ScoreDistribution) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ScoreDistributionItems) {
		return false
	}
	return true
}

func (p *ScoreDistribution) Field1DeepEqual(src []*ScoreDistributionItem) bool {

	if len(p.ScoreDistributionItems) != len(src) {
		return false
	}
	for i, v := range p.ScoreDistributionItems {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type ScoreDistributionItem struct {
	Score      string  `thrift:"score,1,required" frugal:"1,required,string" form:"score,required" json:"score,required" query:"score,required"`
	Count      int64   `thrift:"count,2,required" frugal:"2,required,i64" json:"count" form:"count,required" query:"count,required"`
	Percentage float64 `thrift:"percentage,3,required" frugal:"3,required,double" form:"percentage,required" json:"percentage,required" query:"percentage,required"`
}

func NewScoreDistributionItem() *ScoreDistributionItem {
	return &ScoreDistributionItem{}
}

func (p *ScoreDistributionItem) InitDefault() {
}

func (p *ScoreDistributionItem) GetScore() (v string) {
	if p != nil {
		return p.Score
	}
	return
}

func (p *ScoreDistributionItem) GetCount() (v int64) {
	if p != nil {
		return p.Count
	}
	return
}

func (p *ScoreDistributionItem) GetPercentage() (v float64) {
	if p != nil {
		return p.Percentage
	}
	return
}
func (p *ScoreDistributionItem) SetScore(val string) {
	p.Score = val
}
func (p *ScoreDistributionItem) SetCount(val int64) {
	p.Count = val
}
func (p *ScoreDistributionItem) SetPercentage(val float64) {
	p.Percentage = val
}

var fieldIDToName_ScoreDistributionItem = map[int16]string{
	1: "score",
	2: "count",
	3: "percentage",
}

func (p *ScoreDistributionItem) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetScore bool = false
	var issetCount bool = false
	var issetPercentage bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetScore = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetCount = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetPercentage = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetScore {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetCount {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetPercentage {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ScoreDistributionItem[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ScoreDistributionItem[fieldId]))
}

func (p *ScoreDistributionItem) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Score = _field
	return nil
}
func (p *ScoreDistributionItem) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Count = _field
	return nil
}
func (p *ScoreDistributionItem) ReadField3(iprot thrift.TProtocol) error {

	var _field float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Percentage = _field
	return nil
}

func (p *ScoreDistributionItem) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ScoreDistributionItem"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ScoreDistributionItem) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("score", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Score); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ScoreDistributionItem) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("count", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Count); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ScoreDistributionItem) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("percentage", thrift.DOUBLE, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.Percentage); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ScoreDistributionItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScoreDistributionItem(%+v)", *p)

}

func (p *ScoreDistributionItem) DeepEqual(ano *ScoreDistributionItem) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Score) {
		return false
	}
	if !p.Field2DeepEqual(ano.Count) {
		return false
	}
	if !p.Field3DeepEqual(ano.Percentage) {
		return false
	}
	return true
}

func (p *ScoreDistributionItem) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Score, src) != 0 {
		return false
	}
	return true
}
func (p *ScoreDistributionItem) Field2DeepEqual(src int64) bool {

	if p.Count != src {
		return false
	}
	return true
}
func (p *ScoreDistributionItem) Field3DeepEqual(src float64) bool {

	if p.Percentage != src {
		return false
	}
	return true
}

type AggregateData struct {
	DataType          DataType           `thrift:"data_type,1,required" frugal:"1,required,DataType" form:"data_type,required" json:"data_type,required" query:"data_type,required"`
	Value             *float64           `thrift:"value,2,optional" frugal:"2,optional,double" form:"value" json:"value,omitempty" query:"value"`
	ScoreDistribution *ScoreDistribution `thrift:"score_distribution,3,optional" frugal:"3,optional,ScoreDistribution" form:"score_distribution" json:"score_distribution,omitempty" query:"score_distribution"`
}

func NewAggregateData() *AggregateData {
	return &AggregateData{}
}

func (p *AggregateData) InitDefault() {
}

func (p *AggregateData) GetDataType() (v DataType) {
	if p != nil {
		return p.DataType
	}
	return
}

var AggregateData_Value_DEFAULT float64

func (p *AggregateData) GetValue() (v float64) {
	if p == nil {
		return
	}
	if !p.IsSetValue() {
		return AggregateData_Value_DEFAULT
	}
	return *p.Value
}

var AggregateData_ScoreDistribution_DEFAULT *ScoreDistribution

func (p *AggregateData) GetScoreDistribution() (v *ScoreDistribution) {
	if p == nil {
		return
	}
	if !p.IsSetScoreDistribution() {
		return AggregateData_ScoreDistribution_DEFAULT
	}
	return p.ScoreDistribution
}
func (p *AggregateData) SetDataType(val DataType) {
	p.DataType = val
}
func (p *AggregateData) SetValue(val *float64) {
	p.Value = val
}
func (p *AggregateData) SetScoreDistribution(val *ScoreDistribution) {
	p.ScoreDistribution = val
}

var fieldIDToName_AggregateData = map[int16]string{
	1: "data_type",
	2: "value",
	3: "score_distribution",
}

func (p *AggregateData) IsSetValue() bool {
	return p.Value != nil
}

func (p *AggregateData) IsSetScoreDistribution() bool {
	return p.ScoreDistribution != nil
}

func (p *AggregateData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetDataType bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetDataType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetDataType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AggregateData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_AggregateData[fieldId]))
}

func (p *AggregateData) ReadField1(iprot thrift.TProtocol) error {

	var _field DataType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = DataType(v)
	}
	p.DataType = _field
	return nil
}
func (p *AggregateData) ReadField2(iprot thrift.TProtocol) error {

	var _field *float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Value = _field
	return nil
}
func (p *AggregateData) ReadField3(iprot thrift.TProtocol) error {
	_field := NewScoreDistribution()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ScoreDistribution = _field
	return nil
}

func (p *AggregateData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AggregateData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AggregateData) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("data_type", thrift.I32, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.DataType)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *AggregateData) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetValue() {
		if err = oprot.WriteFieldBegin("value", thrift.DOUBLE, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.Value); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *AggregateData) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetScoreDistribution() {
		if err = oprot.WriteFieldBegin("score_distribution", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ScoreDistribution.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *AggregateData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AggregateData(%+v)", *p)

}

func (p *AggregateData) DeepEqual(ano *AggregateData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.DataType) {
		return false
	}
	if !p.Field2DeepEqual(ano.Value) {
		return false
	}
	if !p.Field3DeepEqual(ano.ScoreDistribution) {
		return false
	}
	return true
}

func (p *AggregateData) Field1DeepEqual(src DataType) bool {

	if p.DataType != src {
		return false
	}
	return true
}
func (p *AggregateData) Field2DeepEqual(src *float64) bool {

	if p.Value == src {
		return true
	} else if p.Value == nil || src == nil {
		return false
	}
	if *p.Value != *src {
		return false
	}
	return true
}
func (p *AggregateData) Field3DeepEqual(src *ScoreDistribution) bool {

	if !p.ScoreDistribution.DeepEqual(src) {
		return false
	}
	return true
}

type ExptStatsInfo struct {
	ExptID    *int64          `thrift:"expt_id,1,optional" frugal:"1,optional,i64" form:"expt_id" json:"expt_id,omitempty" query:"expt_id"`
	SourceID  *string         `thrift:"source_id,2,optional" frugal:"2,optional,string" form:"source_id" json:"source_id,omitempty" query:"source_id"`
	ExptStats *ExptStatistics `thrift:"expt_stats,3,optional" frugal:"3,optional,ExptStatistics" form:"expt_stats" json:"expt_stats,omitempty" query:"expt_stats"`
}

func NewExptStatsInfo() *ExptStatsInfo {
	return &ExptStatsInfo{}
}

func (p *ExptStatsInfo) InitDefault() {
}

var ExptStatsInfo_ExptID_DEFAULT int64

func (p *ExptStatsInfo) GetExptID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetExptID() {
		return ExptStatsInfo_ExptID_DEFAULT
	}
	return *p.ExptID
}

var ExptStatsInfo_SourceID_DEFAULT string

func (p *ExptStatsInfo) GetSourceID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetSourceID() {
		return ExptStatsInfo_SourceID_DEFAULT
	}
	return *p.SourceID
}

var ExptStatsInfo_ExptStats_DEFAULT *ExptStatistics

func (p *ExptStatsInfo) GetExptStats() (v *ExptStatistics) {
	if p == nil {
		return
	}
	if !p.IsSetExptStats() {
		return ExptStatsInfo_ExptStats_DEFAULT
	}
	return p.ExptStats
}
func (p *ExptStatsInfo) SetExptID(val *int64) {
	p.ExptID = val
}
func (p *ExptStatsInfo) SetSourceID(val *string) {
	p.SourceID = val
}
func (p *ExptStatsInfo) SetExptStats(val *ExptStatistics) {
	p.ExptStats = val
}

var fieldIDToName_ExptStatsInfo = map[int16]string{
	1: "expt_id",
	2: "source_id",
	3: "expt_stats",
}

func (p *ExptStatsInfo) IsSetExptID() bool {
	return p.ExptID != nil
}

func (p *ExptStatsInfo) IsSetSourceID() bool {
	return p.SourceID != nil
}

func (p *ExptStatsInfo) IsSetExptStats() bool {
	return p.ExptStats != nil
}

func (p *ExptStatsInfo) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExptStatsInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExptStatsInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ExptID = _field
	return nil
}
func (p *ExptStatsInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SourceID = _field
	return nil
}
func (p *ExptStatsInfo) ReadField3(iprot thrift.TProtocol) error {
	_field := NewExptStatistics()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ExptStats = _field
	return nil
}

func (p *ExptStatsInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ExptStatsInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExptStatsInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetExptID() {
		if err = oprot.WriteFieldBegin("expt_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ExptID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ExptStatsInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSourceID() {
		if err = oprot.WriteFieldBegin("source_id", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.SourceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ExptStatsInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetExptStats() {
		if err = oprot.WriteFieldBegin("expt_stats", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ExptStats.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ExptStatsInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExptStatsInfo(%+v)", *p)

}

func (p *ExptStatsInfo) DeepEqual(ano *ExptStatsInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ExptID) {
		return false
	}
	if !p.Field2DeepEqual(ano.SourceID) {
		return false
	}
	if !p.Field3DeepEqual(ano.ExptStats) {
		return false
	}
	return true
}

func (p *ExptStatsInfo) Field1DeepEqual(src *int64) bool {

	if p.ExptID == src {
		return true
	} else if p.ExptID == nil || src == nil {
		return false
	}
	if *p.ExptID != *src {
		return false
	}
	return true
}
func (p *ExptStatsInfo) Field2DeepEqual(src *string) bool {

	if p.SourceID == src {
		return true
	} else if p.SourceID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.SourceID, *src) != 0 {
		return false
	}
	return true
}
func (p *ExptStatsInfo) Field3DeepEqual(src *ExptStatistics) bool {

	if !p.ExptStats.DeepEqual(src) {
		return false
	}
	return true
}
