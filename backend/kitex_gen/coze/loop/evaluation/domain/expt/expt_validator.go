// Code generated by Validator v0.2.6. DO NOT EDIT.

package expt

import (
	"bytes"
	"fmt"
	"reflect"
	"regexp"
	"strings"
	"time"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
	_ = (*bytes.Buffer)(nil)
	_ = (*strings.Builder)(nil)
	_ = reflect.Type(nil)
	_ = (*regexp.Regexp)(nil)
	_ = time.Nanosecond
)

func (p *Experiment) IsValid() error {
	if p.EvalSet != nil {
		if err := p.EvalSet.IsValid(); err != nil {
			return fmt.Errorf("field EvalSet not valid, %w", err)
		}
	}
	if p.EvalTarget != nil {
		if err := p.EvalTarget.IsValid(); err != nil {
			return fmt.Errorf("field EvalTarget not valid, %w", err)
		}
	}
	if p.BaseInfo != nil {
		if err := p.BaseInfo.IsValid(); err != nil {
			return fmt.Errorf("field BaseInfo not valid, %w", err)
		}
	}
	if p.ExptStats != nil {
		if err := p.ExptStats.IsValid(); err != nil {
			return fmt.Errorf("field ExptStats not valid, %w", err)
		}
	}
	if p.TargetFieldMapping != nil {
		if err := p.TargetFieldMapping.IsValid(); err != nil {
			return fmt.Errorf("field TargetFieldMapping not valid, %w", err)
		}
	}
	return nil
}
func (p *TokenUsage) IsValid() error {
	return nil
}
func (p *ExptStatistics) IsValid() error {
	if p.TokenUsage != nil {
		if err := p.TokenUsage.IsValid(); err != nil {
			return fmt.Errorf("field TokenUsage not valid, %w", err)
		}
	}
	return nil
}
func (p *EvaluatorFmtResult_) IsValid() error {
	return nil
}
func (p *TargetFieldMapping) IsValid() error {
	return nil
}
func (p *EvaluatorFieldMapping) IsValid() error {
	return nil
}
func (p *FieldMapping) IsValid() error {
	return nil
}
func (p *ExptFilterOption) IsValid() error {
	if p.Filters != nil {
		if err := p.Filters.IsValid(); err != nil {
			return fmt.Errorf("field Filters not valid, %w", err)
		}
	}
	return nil
}
func (p *ItemSystemInfo) IsValid() error {
	if p.Error != nil {
		if err := p.Error.IsValid(); err != nil {
			return fmt.Errorf("field Error not valid, %w", err)
		}
	}
	return nil
}
func (p *ColumnEvaluator) IsValid() error {
	return nil
}
func (p *ColumnEvalSetField) IsValid() error {
	return nil
}
func (p *ItemResult_) IsValid() error {
	if p.SystemInfo != nil {
		if err := p.SystemInfo.IsValid(); err != nil {
			return fmt.Errorf("field SystemInfo not valid, %w", err)
		}
	}
	return nil
}
func (p *TurnResult_) IsValid() error {
	return nil
}
func (p *ExperimentResult_) IsValid() error {
	if p.Payload != nil {
		if err := p.Payload.IsValid(); err != nil {
			return fmt.Errorf("field Payload not valid, %w", err)
		}
	}
	return nil
}
func (p *TurnSystemInfo) IsValid() error {
	if p.Error != nil {
		if err := p.Error.IsValid(); err != nil {
			return fmt.Errorf("field Error not valid, %w", err)
		}
	}
	return nil
}
func (p *RunError) IsValid() error {
	return nil
}
func (p *TurnEvalSet) IsValid() error {
	if p.Turn != nil {
		if err := p.Turn.IsValid(); err != nil {
			return fmt.Errorf("field Turn not valid, %w", err)
		}
	}
	return nil
}
func (p *TurnTargetOutput) IsValid() error {
	if p.EvalTargetRecord != nil {
		if err := p.EvalTargetRecord.IsValid(); err != nil {
			return fmt.Errorf("field EvalTargetRecord not valid, %w", err)
		}
	}
	return nil
}
func (p *TurnEvaluatorOutput) IsValid() error {
	return nil
}
func (p *ExperimentTurnPayload) IsValid() error {
	if p.EvalSet != nil {
		if err := p.EvalSet.IsValid(); err != nil {
			return fmt.Errorf("field EvalSet not valid, %w", err)
		}
	}
	if p.TargetOutput != nil {
		if err := p.TargetOutput.IsValid(); err != nil {
			return fmt.Errorf("field TargetOutput not valid, %w", err)
		}
	}
	if p.EvaluatorOutput != nil {
		if err := p.EvaluatorOutput.IsValid(); err != nil {
			return fmt.Errorf("field EvaluatorOutput not valid, %w", err)
		}
	}
	if p.SystemInfo != nil {
		if err := p.SystemInfo.IsValid(); err != nil {
			return fmt.Errorf("field SystemInfo not valid, %w", err)
		}
	}
	return nil
}
func (p *KeywordSearch) IsValid() error {
	return nil
}
func (p *ExperimentFilter) IsValid() error {
	if p.Filters != nil {
		if err := p.Filters.IsValid(); err != nil {
			return fmt.Errorf("field Filters not valid, %w", err)
		}
	}
	if p.KeywordSearch != nil {
		if err := p.KeywordSearch.IsValid(); err != nil {
			return fmt.Errorf("field KeywordSearch not valid, %w", err)
		}
	}
	return nil
}
func (p *Filters) IsValid() error {
	return nil
}
func (p *FilterField) IsValid() error {
	return nil
}
func (p *FilterCondition) IsValid() error {
	if p.Field != nil {
		if err := p.Field.IsValid(); err != nil {
			return fmt.Errorf("field Field not valid, %w", err)
		}
	}
	if p.SourceTarget != nil {
		if err := p.SourceTarget.IsValid(); err != nil {
			return fmt.Errorf("field SourceTarget not valid, %w", err)
		}
	}
	return nil
}
func (p *SourceTarget) IsValid() error {
	return nil
}
func (p *ExptAggregateResult_) IsValid() error {
	return nil
}
func (p *EvaluatorAggregateResult_) IsValid() error {
	return nil
}
func (p *AggregatorResult_) IsValid() error {
	if p.Data != nil {
		if err := p.Data.IsValid(); err != nil {
			return fmt.Errorf("field Data not valid, %w", err)
		}
	}
	return nil
}
func (p *ScoreDistribution) IsValid() error {
	return nil
}
func (p *ScoreDistributionItem) IsValid() error {
	return nil
}
func (p *AggregateData) IsValid() error {
	if p.ScoreDistribution != nil {
		if err := p.ScoreDistribution.IsValid(); err != nil {
			return fmt.Errorf("field ScoreDistribution not valid, %w", err)
		}
	}
	return nil
}
func (p *ExptStatsInfo) IsValid() error {
	if p.ExptStats != nil {
		if err := p.ExptStats.IsValid(); err != nil {
			return fmt.Errorf("field ExptStats not valid, %w", err)
		}
	}
	return nil
}
