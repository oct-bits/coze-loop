// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package eval_target

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/domain/common"
	"strings"
)

type EvalTargetType int64

const (
	// CozeBot
	EvalTargetType_CozeBot EvalTargetType = 1
	// Prompt
	EvalTargetType_CozeLoopPrompt EvalTargetType = 2
	// Trace
	EvalTargetType_Trace        EvalTargetType = 3
	EvalTargetType_CozeWorkflow EvalTargetType = 4
)

func (p EvalTargetType) String() string {
	switch p {
	case EvalTargetType_CozeBot:
		return "CozeBot"
	case EvalTargetType_CozeLoopPrompt:
		return "CozeLoopPrompt"
	case EvalTargetType_Trace:
		return "Trace"
	case EvalTargetType_CozeWorkflow:
		return "CozeWorkflow"
	}
	return "<UNSET>"
}

func EvalTargetTypeFromString(s string) (EvalTargetType, error) {
	switch s {
	case "CozeBot":
		return EvalTargetType_CozeBot, nil
	case "CozeLoopPrompt":
		return EvalTargetType_CozeLoopPrompt, nil
	case "Trace":
		return EvalTargetType_Trace, nil
	case "CozeWorkflow":
		return EvalTargetType_CozeWorkflow, nil
	}
	return EvalTargetType(0), fmt.Errorf("not a valid EvalTargetType string")
}

func EvalTargetTypePtr(v EvalTargetType) *EvalTargetType { return &v }
func (p *EvalTargetType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = EvalTargetType(result.Int64)
	return
}

func (p *EvalTargetType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type SubmitStatus int64

const (
	SubmitStatus_Undefined SubmitStatus = 0
	// 未提交
	SubmitStatus_UnSubmit SubmitStatus = 1
	// 已提交
	SubmitStatus_Submitted SubmitStatus = 2
)

func (p SubmitStatus) String() string {
	switch p {
	case SubmitStatus_Undefined:
		return "Undefined"
	case SubmitStatus_UnSubmit:
		return "UnSubmit"
	case SubmitStatus_Submitted:
		return "Submitted"
	}
	return "<UNSET>"
}

func SubmitStatusFromString(s string) (SubmitStatus, error) {
	switch s {
	case "Undefined":
		return SubmitStatus_Undefined, nil
	case "UnSubmit":
		return SubmitStatus_UnSubmit, nil
	case "Submitted":
		return SubmitStatus_Submitted, nil
	}
	return SubmitStatus(0), fmt.Errorf("not a valid SubmitStatus string")
}

func SubmitStatusPtr(v SubmitStatus) *SubmitStatus { return &v }
func (p *SubmitStatus) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = SubmitStatus(result.Int64)
	return
}

func (p *SubmitStatus) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type CozeBotInfoType int64

const (
	// 草稿 bot
	CozeBotInfoType_DraftBot CozeBotInfoType = 1
	// 商店 bot
	CozeBotInfoType_ProductBot CozeBotInfoType = 2
)

func (p CozeBotInfoType) String() string {
	switch p {
	case CozeBotInfoType_DraftBot:
		return "DraftBot"
	case CozeBotInfoType_ProductBot:
		return "ProductBot"
	}
	return "<UNSET>"
}

func CozeBotInfoTypeFromString(s string) (CozeBotInfoType, error) {
	switch s {
	case "DraftBot":
		return CozeBotInfoType_DraftBot, nil
	case "ProductBot":
		return CozeBotInfoType_ProductBot, nil
	}
	return CozeBotInfoType(0), fmt.Errorf("not a valid CozeBotInfoType string")
}

func CozeBotInfoTypePtr(v CozeBotInfoType) *CozeBotInfoType { return &v }
func (p *CozeBotInfoType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = CozeBotInfoType(result.Int64)
	return
}

func (p *CozeBotInfoType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type ModelPlatform int64

const (
	ModelPlatform_Unknown    ModelPlatform = 0
	ModelPlatform_GPTOpenAPI ModelPlatform = 1
	ModelPlatform_MAAS       ModelPlatform = 2
)

func (p ModelPlatform) String() string {
	switch p {
	case ModelPlatform_Unknown:
		return "Unknown"
	case ModelPlatform_GPTOpenAPI:
		return "GPTOpenAPI"
	case ModelPlatform_MAAS:
		return "MAAS"
	}
	return "<UNSET>"
}

func ModelPlatformFromString(s string) (ModelPlatform, error) {
	switch s {
	case "Unknown":
		return ModelPlatform_Unknown, nil
	case "GPTOpenAPI":
		return ModelPlatform_GPTOpenAPI, nil
	case "MAAS":
		return ModelPlatform_MAAS, nil
	}
	return ModelPlatform(0), fmt.Errorf("not a valid ModelPlatform string")
}

func ModelPlatformPtr(v ModelPlatform) *ModelPlatform { return &v }
func (p *ModelPlatform) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = ModelPlatform(result.Int64)
	return
}

func (p *ModelPlatform) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type EvalTargetRunStatus int64

const (
	EvalTargetRunStatus_Unknown EvalTargetRunStatus = 0
	EvalTargetRunStatus_Success EvalTargetRunStatus = 1
	EvalTargetRunStatus_Fail    EvalTargetRunStatus = 2
)

func (p EvalTargetRunStatus) String() string {
	switch p {
	case EvalTargetRunStatus_Unknown:
		return "Unknown"
	case EvalTargetRunStatus_Success:
		return "Success"
	case EvalTargetRunStatus_Fail:
		return "Fail"
	}
	return "<UNSET>"
}

func EvalTargetRunStatusFromString(s string) (EvalTargetRunStatus, error) {
	switch s {
	case "Unknown":
		return EvalTargetRunStatus_Unknown, nil
	case "Success":
		return EvalTargetRunStatus_Success, nil
	case "Fail":
		return EvalTargetRunStatus_Fail, nil
	}
	return EvalTargetRunStatus(0), fmt.Errorf("not a valid EvalTargetRunStatus string")
}

func EvalTargetRunStatusPtr(v EvalTargetRunStatus) *EvalTargetRunStatus { return &v }
func (p *EvalTargetRunStatus) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = EvalTargetRunStatus(result.Int64)
	return
}

func (p *EvalTargetRunStatus) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type EvalTarget struct {
	// 基本信息
	ID *int64 `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id" form:"id" query:"id"`
	// 空间ID
	WorkspaceID *int64 `thrift:"workspace_id,2,optional" frugal:"2,optional,i64" json:"workspace_id" form:"workspace_id" query:"workspace_id"`
	// 源对象ID，例如prompt ID
	SourceTargetID *string `thrift:"source_target_id,3,optional" frugal:"3,optional,string" form:"source_target_id" json:"source_target_id,omitempty" query:"source_target_id"`
	// 评测对象类型
	EvalTargetType *EvalTargetType `thrift:"eval_target_type,4,optional" frugal:"4,optional,EvalTargetType" form:"eval_target_type" json:"eval_target_type,omitempty" query:"eval_target_type"`
	// 版本信息
	EvalTargetVersion *EvalTargetVersion `thrift:"eval_target_version,10,optional" frugal:"10,optional,EvalTargetVersion" form:"eval_target_version" json:"eval_target_version,omitempty" query:"eval_target_version"`
	// 系统信息
	BaseInfo *common.BaseInfo `thrift:"base_info,100,optional" frugal:"100,optional,common.BaseInfo" json:"base_info" form:"base_info" query:"base_info"`
}

func NewEvalTarget() *EvalTarget {
	return &EvalTarget{}
}

func (p *EvalTarget) InitDefault() {
}

var EvalTarget_ID_DEFAULT int64

func (p *EvalTarget) GetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetID() {
		return EvalTarget_ID_DEFAULT
	}
	return *p.ID
}

var EvalTarget_WorkspaceID_DEFAULT int64

func (p *EvalTarget) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return EvalTarget_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var EvalTarget_SourceTargetID_DEFAULT string

func (p *EvalTarget) GetSourceTargetID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetSourceTargetID() {
		return EvalTarget_SourceTargetID_DEFAULT
	}
	return *p.SourceTargetID
}

var EvalTarget_EvalTargetType_DEFAULT EvalTargetType

func (p *EvalTarget) GetEvalTargetType() (v EvalTargetType) {
	if p == nil {
		return
	}
	if !p.IsSetEvalTargetType() {
		return EvalTarget_EvalTargetType_DEFAULT
	}
	return *p.EvalTargetType
}

var EvalTarget_EvalTargetVersion_DEFAULT *EvalTargetVersion

func (p *EvalTarget) GetEvalTargetVersion() (v *EvalTargetVersion) {
	if p == nil {
		return
	}
	if !p.IsSetEvalTargetVersion() {
		return EvalTarget_EvalTargetVersion_DEFAULT
	}
	return p.EvalTargetVersion
}

var EvalTarget_BaseInfo_DEFAULT *common.BaseInfo

func (p *EvalTarget) GetBaseInfo() (v *common.BaseInfo) {
	if p == nil {
		return
	}
	if !p.IsSetBaseInfo() {
		return EvalTarget_BaseInfo_DEFAULT
	}
	return p.BaseInfo
}
func (p *EvalTarget) SetID(val *int64) {
	p.ID = val
}
func (p *EvalTarget) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *EvalTarget) SetSourceTargetID(val *string) {
	p.SourceTargetID = val
}
func (p *EvalTarget) SetEvalTargetType(val *EvalTargetType) {
	p.EvalTargetType = val
}
func (p *EvalTarget) SetEvalTargetVersion(val *EvalTargetVersion) {
	p.EvalTargetVersion = val
}
func (p *EvalTarget) SetBaseInfo(val *common.BaseInfo) {
	p.BaseInfo = val
}

var fieldIDToName_EvalTarget = map[int16]string{
	1:   "id",
	2:   "workspace_id",
	3:   "source_target_id",
	4:   "eval_target_type",
	10:  "eval_target_version",
	100: "base_info",
}

func (p *EvalTarget) IsSetID() bool {
	return p.ID != nil
}

func (p *EvalTarget) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *EvalTarget) IsSetSourceTargetID() bool {
	return p.SourceTargetID != nil
}

func (p *EvalTarget) IsSetEvalTargetType() bool {
	return p.EvalTargetType != nil
}

func (p *EvalTarget) IsSetEvalTargetVersion() bool {
	return p.EvalTargetVersion != nil
}

func (p *EvalTarget) IsSetBaseInfo() bool {
	return p.BaseInfo != nil
}

func (p *EvalTarget) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvalTarget[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvalTarget) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ID = _field
	return nil
}
func (p *EvalTarget) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *EvalTarget) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SourceTargetID = _field
	return nil
}
func (p *EvalTarget) ReadField4(iprot thrift.TProtocol) error {

	var _field *EvalTargetType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := EvalTargetType(v)
		_field = &tmp
	}
	p.EvalTargetType = _field
	return nil
}
func (p *EvalTarget) ReadField10(iprot thrift.TProtocol) error {
	_field := NewEvalTargetVersion()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvalTargetVersion = _field
	return nil
}
func (p *EvalTarget) ReadField100(iprot thrift.TProtocol) error {
	_field := common.NewBaseInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseInfo = _field
	return nil
}

func (p *EvalTarget) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EvalTarget"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvalTarget) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *EvalTarget) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *EvalTarget) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSourceTargetID() {
		if err = oprot.WriteFieldBegin("source_target_id", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.SourceTargetID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *EvalTarget) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvalTargetType() {
		if err = oprot.WriteFieldBegin("eval_target_type", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.EvalTargetType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *EvalTarget) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvalTargetVersion() {
		if err = oprot.WriteFieldBegin("eval_target_version", thrift.STRUCT, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.EvalTargetVersion.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}
func (p *EvalTarget) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseInfo() {
		if err = oprot.WriteFieldBegin("base_info", thrift.STRUCT, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseInfo.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}

func (p *EvalTarget) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvalTarget(%+v)", *p)

}

func (p *EvalTarget) DeepEqual(ano *EvalTarget) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field2DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field3DeepEqual(ano.SourceTargetID) {
		return false
	}
	if !p.Field4DeepEqual(ano.EvalTargetType) {
		return false
	}
	if !p.Field10DeepEqual(ano.EvalTargetVersion) {
		return false
	}
	if !p.Field100DeepEqual(ano.BaseInfo) {
		return false
	}
	return true
}

func (p *EvalTarget) Field1DeepEqual(src *int64) bool {

	if p.ID == src {
		return true
	} else if p.ID == nil || src == nil {
		return false
	}
	if *p.ID != *src {
		return false
	}
	return true
}
func (p *EvalTarget) Field2DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *EvalTarget) Field3DeepEqual(src *string) bool {

	if p.SourceTargetID == src {
		return true
	} else if p.SourceTargetID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.SourceTargetID, *src) != 0 {
		return false
	}
	return true
}
func (p *EvalTarget) Field4DeepEqual(src *EvalTargetType) bool {

	if p.EvalTargetType == src {
		return true
	} else if p.EvalTargetType == nil || src == nil {
		return false
	}
	if *p.EvalTargetType != *src {
		return false
	}
	return true
}
func (p *EvalTarget) Field10DeepEqual(src *EvalTargetVersion) bool {

	if !p.EvalTargetVersion.DeepEqual(src) {
		return false
	}
	return true
}
func (p *EvalTarget) Field100DeepEqual(src *common.BaseInfo) bool {

	if !p.BaseInfo.DeepEqual(src) {
		return false
	}
	return true
}

type EvalTargetVersion struct {
	// 基本信息
	ID *int64 `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id" form:"id" query:"id"`
	// 空间ID
	WorkspaceID *int64 `thrift:"workspace_id,2,optional" frugal:"2,optional,i64" json:"workspace_id" form:"workspace_id" query:"workspace_id"`
	// 对象唯一标识
	TargetID *int64 `thrift:"target_id,3,optional" frugal:"3,optional,i64" json:"target_id" form:"target_id" query:"target_id"`
	// 源对象版本，例如prompt是0.0.1，bot是版本号12233等
	SourceTargetVersion *string `thrift:"source_target_version,4,optional" frugal:"4,optional,string" form:"source_target_version" json:"source_target_version,omitempty" query:"source_target_version"`
	// 目标对象内容
	EvalTargetContent *EvalTargetContent `thrift:"eval_target_content,5,optional" frugal:"5,optional,EvalTargetContent" form:"eval_target_content" json:"eval_target_content,omitempty" query:"eval_target_content"`
	// 系统信息
	BaseInfo *common.BaseInfo `thrift:"base_info,100,optional" frugal:"100,optional,common.BaseInfo" json:"base_info" form:"base_info" query:"base_info"`
}

func NewEvalTargetVersion() *EvalTargetVersion {
	return &EvalTargetVersion{}
}

func (p *EvalTargetVersion) InitDefault() {
}

var EvalTargetVersion_ID_DEFAULT int64

func (p *EvalTargetVersion) GetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetID() {
		return EvalTargetVersion_ID_DEFAULT
	}
	return *p.ID
}

var EvalTargetVersion_WorkspaceID_DEFAULT int64

func (p *EvalTargetVersion) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return EvalTargetVersion_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var EvalTargetVersion_TargetID_DEFAULT int64

func (p *EvalTargetVersion) GetTargetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTargetID() {
		return EvalTargetVersion_TargetID_DEFAULT
	}
	return *p.TargetID
}

var EvalTargetVersion_SourceTargetVersion_DEFAULT string

func (p *EvalTargetVersion) GetSourceTargetVersion() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetSourceTargetVersion() {
		return EvalTargetVersion_SourceTargetVersion_DEFAULT
	}
	return *p.SourceTargetVersion
}

var EvalTargetVersion_EvalTargetContent_DEFAULT *EvalTargetContent

func (p *EvalTargetVersion) GetEvalTargetContent() (v *EvalTargetContent) {
	if p == nil {
		return
	}
	if !p.IsSetEvalTargetContent() {
		return EvalTargetVersion_EvalTargetContent_DEFAULT
	}
	return p.EvalTargetContent
}

var EvalTargetVersion_BaseInfo_DEFAULT *common.BaseInfo

func (p *EvalTargetVersion) GetBaseInfo() (v *common.BaseInfo) {
	if p == nil {
		return
	}
	if !p.IsSetBaseInfo() {
		return EvalTargetVersion_BaseInfo_DEFAULT
	}
	return p.BaseInfo
}
func (p *EvalTargetVersion) SetID(val *int64) {
	p.ID = val
}
func (p *EvalTargetVersion) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *EvalTargetVersion) SetTargetID(val *int64) {
	p.TargetID = val
}
func (p *EvalTargetVersion) SetSourceTargetVersion(val *string) {
	p.SourceTargetVersion = val
}
func (p *EvalTargetVersion) SetEvalTargetContent(val *EvalTargetContent) {
	p.EvalTargetContent = val
}
func (p *EvalTargetVersion) SetBaseInfo(val *common.BaseInfo) {
	p.BaseInfo = val
}

var fieldIDToName_EvalTargetVersion = map[int16]string{
	1:   "id",
	2:   "workspace_id",
	3:   "target_id",
	4:   "source_target_version",
	5:   "eval_target_content",
	100: "base_info",
}

func (p *EvalTargetVersion) IsSetID() bool {
	return p.ID != nil
}

func (p *EvalTargetVersion) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *EvalTargetVersion) IsSetTargetID() bool {
	return p.TargetID != nil
}

func (p *EvalTargetVersion) IsSetSourceTargetVersion() bool {
	return p.SourceTargetVersion != nil
}

func (p *EvalTargetVersion) IsSetEvalTargetContent() bool {
	return p.EvalTargetContent != nil
}

func (p *EvalTargetVersion) IsSetBaseInfo() bool {
	return p.BaseInfo != nil
}

func (p *EvalTargetVersion) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvalTargetVersion[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvalTargetVersion) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ID = _field
	return nil
}
func (p *EvalTargetVersion) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *EvalTargetVersion) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TargetID = _field
	return nil
}
func (p *EvalTargetVersion) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SourceTargetVersion = _field
	return nil
}
func (p *EvalTargetVersion) ReadField5(iprot thrift.TProtocol) error {
	_field := NewEvalTargetContent()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvalTargetContent = _field
	return nil
}
func (p *EvalTargetVersion) ReadField100(iprot thrift.TProtocol) error {
	_field := common.NewBaseInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseInfo = _field
	return nil
}

func (p *EvalTargetVersion) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EvalTargetVersion"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvalTargetVersion) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *EvalTargetVersion) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *EvalTargetVersion) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTargetID() {
		if err = oprot.WriteFieldBegin("target_id", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TargetID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *EvalTargetVersion) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSourceTargetVersion() {
		if err = oprot.WriteFieldBegin("source_target_version", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.SourceTargetVersion); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *EvalTargetVersion) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvalTargetContent() {
		if err = oprot.WriteFieldBegin("eval_target_content", thrift.STRUCT, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.EvalTargetContent.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *EvalTargetVersion) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseInfo() {
		if err = oprot.WriteFieldBegin("base_info", thrift.STRUCT, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseInfo.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}

func (p *EvalTargetVersion) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvalTargetVersion(%+v)", *p)

}

func (p *EvalTargetVersion) DeepEqual(ano *EvalTargetVersion) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field2DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field3DeepEqual(ano.TargetID) {
		return false
	}
	if !p.Field4DeepEqual(ano.SourceTargetVersion) {
		return false
	}
	if !p.Field5DeepEqual(ano.EvalTargetContent) {
		return false
	}
	if !p.Field100DeepEqual(ano.BaseInfo) {
		return false
	}
	return true
}

func (p *EvalTargetVersion) Field1DeepEqual(src *int64) bool {

	if p.ID == src {
		return true
	} else if p.ID == nil || src == nil {
		return false
	}
	if *p.ID != *src {
		return false
	}
	return true
}
func (p *EvalTargetVersion) Field2DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *EvalTargetVersion) Field3DeepEqual(src *int64) bool {

	if p.TargetID == src {
		return true
	} else if p.TargetID == nil || src == nil {
		return false
	}
	if *p.TargetID != *src {
		return false
	}
	return true
}
func (p *EvalTargetVersion) Field4DeepEqual(src *string) bool {

	if p.SourceTargetVersion == src {
		return true
	} else if p.SourceTargetVersion == nil || src == nil {
		return false
	}
	if strings.Compare(*p.SourceTargetVersion, *src) != 0 {
		return false
	}
	return true
}
func (p *EvalTargetVersion) Field5DeepEqual(src *EvalTargetContent) bool {

	if !p.EvalTargetContent.DeepEqual(src) {
		return false
	}
	return true
}
func (p *EvalTargetVersion) Field100DeepEqual(src *common.BaseInfo) bool {

	if !p.BaseInfo.DeepEqual(src) {
		return false
	}
	return true
}

type EvalTargetContent struct {
	// 输入schema
	InputSchemas []*common.ArgsSchema `thrift:"input_schemas,1,optional" frugal:"1,optional,list<common.ArgsSchema>" json:"input_schemas" form:"input_schemas" query:"input_schemas"`
	// 输出schema
	OutputSchemas []*common.ArgsSchema `thrift:"output_schemas,2,optional" frugal:"2,optional,list<common.ArgsSchema>" json:"output_schemas" form:"output_schemas" query:"output_schemas"`
	// 101-200 EvalTarget类型
	// EvalTargetType=0 时，传参此字段。 评测对象为 CozeBot 时, 需要设置 CozeBot 信息
	CozeBot *CozeBot `thrift:"coze_bot,101,optional" frugal:"101,optional,CozeBot" form:"coze_bot" json:"coze_bot,omitempty" query:"coze_bot"`
	// EvalTargetType=1 时，传参此字段。 评测对象为 EvalPrompt 时, 需要设置 Prompt 信息
	Prompt *EvalPrompt `thrift:"prompt,102,optional" frugal:"102,optional,EvalPrompt" form:"prompt" json:"prompt,omitempty" query:"prompt"`
	// EvalTargetType=4 时，传参此字段。 评测对象为 CozeWorkflow 时, 需要设置 CozeWorkflow 信息
	CozeWorkflow *CozeWorkflow `thrift:"coze_workflow,103,optional" frugal:"103,optional,CozeWorkflow" form:"coze_workflow" json:"coze_workflow,omitempty" query:"coze_workflow"`
}

func NewEvalTargetContent() *EvalTargetContent {
	return &EvalTargetContent{}
}

func (p *EvalTargetContent) InitDefault() {
}

var EvalTargetContent_InputSchemas_DEFAULT []*common.ArgsSchema

func (p *EvalTargetContent) GetInputSchemas() (v []*common.ArgsSchema) {
	if p == nil {
		return
	}
	if !p.IsSetInputSchemas() {
		return EvalTargetContent_InputSchemas_DEFAULT
	}
	return p.InputSchemas
}

var EvalTargetContent_OutputSchemas_DEFAULT []*common.ArgsSchema

func (p *EvalTargetContent) GetOutputSchemas() (v []*common.ArgsSchema) {
	if p == nil {
		return
	}
	if !p.IsSetOutputSchemas() {
		return EvalTargetContent_OutputSchemas_DEFAULT
	}
	return p.OutputSchemas
}

var EvalTargetContent_CozeBot_DEFAULT *CozeBot

func (p *EvalTargetContent) GetCozeBot() (v *CozeBot) {
	if p == nil {
		return
	}
	if !p.IsSetCozeBot() {
		return EvalTargetContent_CozeBot_DEFAULT
	}
	return p.CozeBot
}

var EvalTargetContent_Prompt_DEFAULT *EvalPrompt

func (p *EvalTargetContent) GetPrompt() (v *EvalPrompt) {
	if p == nil {
		return
	}
	if !p.IsSetPrompt() {
		return EvalTargetContent_Prompt_DEFAULT
	}
	return p.Prompt
}

var EvalTargetContent_CozeWorkflow_DEFAULT *CozeWorkflow

func (p *EvalTargetContent) GetCozeWorkflow() (v *CozeWorkflow) {
	if p == nil {
		return
	}
	if !p.IsSetCozeWorkflow() {
		return EvalTargetContent_CozeWorkflow_DEFAULT
	}
	return p.CozeWorkflow
}
func (p *EvalTargetContent) SetInputSchemas(val []*common.ArgsSchema) {
	p.InputSchemas = val
}
func (p *EvalTargetContent) SetOutputSchemas(val []*common.ArgsSchema) {
	p.OutputSchemas = val
}
func (p *EvalTargetContent) SetCozeBot(val *CozeBot) {
	p.CozeBot = val
}
func (p *EvalTargetContent) SetPrompt(val *EvalPrompt) {
	p.Prompt = val
}
func (p *EvalTargetContent) SetCozeWorkflow(val *CozeWorkflow) {
	p.CozeWorkflow = val
}

var fieldIDToName_EvalTargetContent = map[int16]string{
	1:   "input_schemas",
	2:   "output_schemas",
	101: "coze_bot",
	102: "prompt",
	103: "coze_workflow",
}

func (p *EvalTargetContent) IsSetInputSchemas() bool {
	return p.InputSchemas != nil
}

func (p *EvalTargetContent) IsSetOutputSchemas() bool {
	return p.OutputSchemas != nil
}

func (p *EvalTargetContent) IsSetCozeBot() bool {
	return p.CozeBot != nil
}

func (p *EvalTargetContent) IsSetPrompt() bool {
	return p.Prompt != nil
}

func (p *EvalTargetContent) IsSetCozeWorkflow() bool {
	return p.CozeWorkflow != nil
}

func (p *EvalTargetContent) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 102:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField102(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 103:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField103(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvalTargetContent[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvalTargetContent) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*common.ArgsSchema, 0, size)
	values := make([]common.ArgsSchema, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.InputSchemas = _field
	return nil
}
func (p *EvalTargetContent) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*common.ArgsSchema, 0, size)
	values := make([]common.ArgsSchema, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.OutputSchemas = _field
	return nil
}
func (p *EvalTargetContent) ReadField101(iprot thrift.TProtocol) error {
	_field := NewCozeBot()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.CozeBot = _field
	return nil
}
func (p *EvalTargetContent) ReadField102(iprot thrift.TProtocol) error {
	_field := NewEvalPrompt()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Prompt = _field
	return nil
}
func (p *EvalTargetContent) ReadField103(iprot thrift.TProtocol) error {
	_field := NewCozeWorkflow()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.CozeWorkflow = _field
	return nil
}

func (p *EvalTargetContent) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EvalTargetContent"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField102(oprot); err != nil {
			fieldId = 102
			goto WriteFieldError
		}
		if err = p.writeField103(oprot); err != nil {
			fieldId = 103
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvalTargetContent) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetInputSchemas() {
		if err = oprot.WriteFieldBegin("input_schemas", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.InputSchemas)); err != nil {
			return err
		}
		for _, v := range p.InputSchemas {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *EvalTargetContent) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutputSchemas() {
		if err = oprot.WriteFieldBegin("output_schemas", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.OutputSchemas)); err != nil {
			return err
		}
		for _, v := range p.OutputSchemas {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *EvalTargetContent) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetCozeBot() {
		if err = oprot.WriteFieldBegin("coze_bot", thrift.STRUCT, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.CozeBot.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}
func (p *EvalTargetContent) writeField102(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrompt() {
		if err = oprot.WriteFieldBegin("prompt", thrift.STRUCT, 102); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Prompt.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 end error: ", p), err)
}
func (p *EvalTargetContent) writeField103(oprot thrift.TProtocol) (err error) {
	if p.IsSetCozeWorkflow() {
		if err = oprot.WriteFieldBegin("coze_workflow", thrift.STRUCT, 103); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.CozeWorkflow.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 103 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 103 end error: ", p), err)
}

func (p *EvalTargetContent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvalTargetContent(%+v)", *p)

}

func (p *EvalTargetContent) DeepEqual(ano *EvalTargetContent) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.InputSchemas) {
		return false
	}
	if !p.Field2DeepEqual(ano.OutputSchemas) {
		return false
	}
	if !p.Field101DeepEqual(ano.CozeBot) {
		return false
	}
	if !p.Field102DeepEqual(ano.Prompt) {
		return false
	}
	if !p.Field103DeepEqual(ano.CozeWorkflow) {
		return false
	}
	return true
}

func (p *EvalTargetContent) Field1DeepEqual(src []*common.ArgsSchema) bool {

	if len(p.InputSchemas) != len(src) {
		return false
	}
	for i, v := range p.InputSchemas {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *EvalTargetContent) Field2DeepEqual(src []*common.ArgsSchema) bool {

	if len(p.OutputSchemas) != len(src) {
		return false
	}
	for i, v := range p.OutputSchemas {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *EvalTargetContent) Field101DeepEqual(src *CozeBot) bool {

	if !p.CozeBot.DeepEqual(src) {
		return false
	}
	return true
}
func (p *EvalTargetContent) Field102DeepEqual(src *EvalPrompt) bool {

	if !p.Prompt.DeepEqual(src) {
		return false
	}
	return true
}
func (p *EvalTargetContent) Field103DeepEqual(src *CozeWorkflow) bool {

	if !p.CozeWorkflow.DeepEqual(src) {
		return false
	}
	return true
}

type CozeWorkflow struct {
	ID      *string `thrift:"id,1,optional" frugal:"1,optional,string" form:"id" json:"id,omitempty" query:"id"`
	Version *string `thrift:"version,2,optional" frugal:"2,optional,string" form:"version" json:"version,omitempty" query:"version"`
	// DTO使用，不存数据库
	Name *string `thrift:"name,3,optional" frugal:"3,optional,string" form:"name" json:"name,omitempty" query:"name"`
	// DTO使用，不存数据库
	AvatarURL *string `thrift:"avatar_url,4,optional" frugal:"4,optional,string" form:"avatar_url" json:"avatar_url,omitempty" query:"avatar_url"`
	// DTO使用，不存数据库
	Description *string          `thrift:"description,5,optional" frugal:"5,optional,string" form:"description" json:"description,omitempty" query:"description"`
	BaseInfo    *common.BaseInfo `thrift:"base_info,100,optional" frugal:"100,optional,common.BaseInfo" json:"base_info" form:"base_info" query:"base_info"`
}

func NewCozeWorkflow() *CozeWorkflow {
	return &CozeWorkflow{}
}

func (p *CozeWorkflow) InitDefault() {
}

var CozeWorkflow_ID_DEFAULT string

func (p *CozeWorkflow) GetID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetID() {
		return CozeWorkflow_ID_DEFAULT
	}
	return *p.ID
}

var CozeWorkflow_Version_DEFAULT string

func (p *CozeWorkflow) GetVersion() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetVersion() {
		return CozeWorkflow_Version_DEFAULT
	}
	return *p.Version
}

var CozeWorkflow_Name_DEFAULT string

func (p *CozeWorkflow) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return CozeWorkflow_Name_DEFAULT
	}
	return *p.Name
}

var CozeWorkflow_AvatarURL_DEFAULT string

func (p *CozeWorkflow) GetAvatarURL() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetAvatarURL() {
		return CozeWorkflow_AvatarURL_DEFAULT
	}
	return *p.AvatarURL
}

var CozeWorkflow_Description_DEFAULT string

func (p *CozeWorkflow) GetDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDescription() {
		return CozeWorkflow_Description_DEFAULT
	}
	return *p.Description
}

var CozeWorkflow_BaseInfo_DEFAULT *common.BaseInfo

func (p *CozeWorkflow) GetBaseInfo() (v *common.BaseInfo) {
	if p == nil {
		return
	}
	if !p.IsSetBaseInfo() {
		return CozeWorkflow_BaseInfo_DEFAULT
	}
	return p.BaseInfo
}
func (p *CozeWorkflow) SetID(val *string) {
	p.ID = val
}
func (p *CozeWorkflow) SetVersion(val *string) {
	p.Version = val
}
func (p *CozeWorkflow) SetName(val *string) {
	p.Name = val
}
func (p *CozeWorkflow) SetAvatarURL(val *string) {
	p.AvatarURL = val
}
func (p *CozeWorkflow) SetDescription(val *string) {
	p.Description = val
}
func (p *CozeWorkflow) SetBaseInfo(val *common.BaseInfo) {
	p.BaseInfo = val
}

var fieldIDToName_CozeWorkflow = map[int16]string{
	1:   "id",
	2:   "version",
	3:   "name",
	4:   "avatar_url",
	5:   "description",
	100: "base_info",
}

func (p *CozeWorkflow) IsSetID() bool {
	return p.ID != nil
}

func (p *CozeWorkflow) IsSetVersion() bool {
	return p.Version != nil
}

func (p *CozeWorkflow) IsSetName() bool {
	return p.Name != nil
}

func (p *CozeWorkflow) IsSetAvatarURL() bool {
	return p.AvatarURL != nil
}

func (p *CozeWorkflow) IsSetDescription() bool {
	return p.Description != nil
}

func (p *CozeWorkflow) IsSetBaseInfo() bool {
	return p.BaseInfo != nil
}

func (p *CozeWorkflow) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeWorkflow[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeWorkflow) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ID = _field
	return nil
}
func (p *CozeWorkflow) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Version = _field
	return nil
}
func (p *CozeWorkflow) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *CozeWorkflow) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AvatarURL = _field
	return nil
}
func (p *CozeWorkflow) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}
func (p *CozeWorkflow) ReadField100(iprot thrift.TProtocol) error {
	_field := common.NewBaseInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseInfo = _field
	return nil
}

func (p *CozeWorkflow) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CozeWorkflow"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeWorkflow) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CozeWorkflow) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err = oprot.WriteFieldBegin("version", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Version); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *CozeWorkflow) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *CozeWorkflow) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetAvatarURL() {
		if err = oprot.WriteFieldBegin("avatar_url", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.AvatarURL); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *CozeWorkflow) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *CozeWorkflow) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseInfo() {
		if err = oprot.WriteFieldBegin("base_info", thrift.STRUCT, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseInfo.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}

func (p *CozeWorkflow) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeWorkflow(%+v)", *p)

}

func (p *CozeWorkflow) DeepEqual(ano *CozeWorkflow) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Version) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field4DeepEqual(ano.AvatarURL) {
		return false
	}
	if !p.Field5DeepEqual(ano.Description) {
		return false
	}
	if !p.Field100DeepEqual(ano.BaseInfo) {
		return false
	}
	return true
}

func (p *CozeWorkflow) Field1DeepEqual(src *string) bool {

	if p.ID == src {
		return true
	} else if p.ID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ID, *src) != 0 {
		return false
	}
	return true
}
func (p *CozeWorkflow) Field2DeepEqual(src *string) bool {

	if p.Version == src {
		return true
	} else if p.Version == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Version, *src) != 0 {
		return false
	}
	return true
}
func (p *CozeWorkflow) Field3DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *CozeWorkflow) Field4DeepEqual(src *string) bool {

	if p.AvatarURL == src {
		return true
	} else if p.AvatarURL == nil || src == nil {
		return false
	}
	if strings.Compare(*p.AvatarURL, *src) != 0 {
		return false
	}
	return true
}
func (p *CozeWorkflow) Field5DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *CozeWorkflow) Field100DeepEqual(src *common.BaseInfo) bool {

	if !p.BaseInfo.DeepEqual(src) {
		return false
	}
	return true
}

type EvalPrompt struct {
	PromptID *int64  `thrift:"prompt_id,1,optional" frugal:"1,optional,i64" json:"prompt_id" form:"prompt_id" query:"prompt_id"`
	Version  *string `thrift:"version,2,optional" frugal:"2,optional,string" form:"version" json:"version,omitempty" query:"version"`
	// DTO使用，不存数据库
	Name *string `thrift:"name,3,optional" frugal:"3,optional,string" form:"name" json:"name,omitempty" query:"name"`
	// DTO使用，不存数据库
	PromptKey *string `thrift:"prompt_key,4,optional" frugal:"4,optional,string" form:"prompt_key" json:"prompt_key,omitempty" query:"prompt_key"`
	// DTO使用，不存数据库
	SubmitStatus *SubmitStatus `thrift:"submit_status,5,optional" frugal:"5,optional,SubmitStatus" form:"submit_status" json:"submit_status,omitempty" query:"submit_status"`
	// DTO使用，不存数据库
	Description *string `thrift:"description,6,optional" frugal:"6,optional,string" form:"description" json:"description,omitempty" query:"description"`
}

func NewEvalPrompt() *EvalPrompt {
	return &EvalPrompt{}
}

func (p *EvalPrompt) InitDefault() {
}

var EvalPrompt_PromptID_DEFAULT int64

func (p *EvalPrompt) GetPromptID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetPromptID() {
		return EvalPrompt_PromptID_DEFAULT
	}
	return *p.PromptID
}

var EvalPrompt_Version_DEFAULT string

func (p *EvalPrompt) GetVersion() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetVersion() {
		return EvalPrompt_Version_DEFAULT
	}
	return *p.Version
}

var EvalPrompt_Name_DEFAULT string

func (p *EvalPrompt) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return EvalPrompt_Name_DEFAULT
	}
	return *p.Name
}

var EvalPrompt_PromptKey_DEFAULT string

func (p *EvalPrompt) GetPromptKey() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetPromptKey() {
		return EvalPrompt_PromptKey_DEFAULT
	}
	return *p.PromptKey
}

var EvalPrompt_SubmitStatus_DEFAULT SubmitStatus

func (p *EvalPrompt) GetSubmitStatus() (v SubmitStatus) {
	if p == nil {
		return
	}
	if !p.IsSetSubmitStatus() {
		return EvalPrompt_SubmitStatus_DEFAULT
	}
	return *p.SubmitStatus
}

var EvalPrompt_Description_DEFAULT string

func (p *EvalPrompt) GetDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDescription() {
		return EvalPrompt_Description_DEFAULT
	}
	return *p.Description
}
func (p *EvalPrompt) SetPromptID(val *int64) {
	p.PromptID = val
}
func (p *EvalPrompt) SetVersion(val *string) {
	p.Version = val
}
func (p *EvalPrompt) SetName(val *string) {
	p.Name = val
}
func (p *EvalPrompt) SetPromptKey(val *string) {
	p.PromptKey = val
}
func (p *EvalPrompt) SetSubmitStatus(val *SubmitStatus) {
	p.SubmitStatus = val
}
func (p *EvalPrompt) SetDescription(val *string) {
	p.Description = val
}

var fieldIDToName_EvalPrompt = map[int16]string{
	1: "prompt_id",
	2: "version",
	3: "name",
	4: "prompt_key",
	5: "submit_status",
	6: "description",
}

func (p *EvalPrompt) IsSetPromptID() bool {
	return p.PromptID != nil
}

func (p *EvalPrompt) IsSetVersion() bool {
	return p.Version != nil
}

func (p *EvalPrompt) IsSetName() bool {
	return p.Name != nil
}

func (p *EvalPrompt) IsSetPromptKey() bool {
	return p.PromptKey != nil
}

func (p *EvalPrompt) IsSetSubmitStatus() bool {
	return p.SubmitStatus != nil
}

func (p *EvalPrompt) IsSetDescription() bool {
	return p.Description != nil
}

func (p *EvalPrompt) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvalPrompt[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvalPrompt) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PromptID = _field
	return nil
}
func (p *EvalPrompt) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Version = _field
	return nil
}
func (p *EvalPrompt) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *EvalPrompt) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PromptKey = _field
	return nil
}
func (p *EvalPrompt) ReadField5(iprot thrift.TProtocol) error {

	var _field *SubmitStatus
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := SubmitStatus(v)
		_field = &tmp
	}
	p.SubmitStatus = _field
	return nil
}
func (p *EvalPrompt) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}

func (p *EvalPrompt) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EvalPrompt"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvalPrompt) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPromptID() {
		if err = oprot.WriteFieldBegin("prompt_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PromptID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *EvalPrompt) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err = oprot.WriteFieldBegin("version", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Version); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *EvalPrompt) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *EvalPrompt) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPromptKey() {
		if err = oprot.WriteFieldBegin("prompt_key", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PromptKey); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *EvalPrompt) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubmitStatus() {
		if err = oprot.WriteFieldBegin("submit_status", thrift.I32, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.SubmitStatus)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *EvalPrompt) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *EvalPrompt) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvalPrompt(%+v)", *p)

}

func (p *EvalPrompt) DeepEqual(ano *EvalPrompt) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PromptID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Version) {
		return false
	}
	if !p.Field3DeepEqual(ano.Name) {
		return false
	}
	if !p.Field4DeepEqual(ano.PromptKey) {
		return false
	}
	if !p.Field5DeepEqual(ano.SubmitStatus) {
		return false
	}
	if !p.Field6DeepEqual(ano.Description) {
		return false
	}
	return true
}

func (p *EvalPrompt) Field1DeepEqual(src *int64) bool {

	if p.PromptID == src {
		return true
	} else if p.PromptID == nil || src == nil {
		return false
	}
	if *p.PromptID != *src {
		return false
	}
	return true
}
func (p *EvalPrompt) Field2DeepEqual(src *string) bool {

	if p.Version == src {
		return true
	} else if p.Version == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Version, *src) != 0 {
		return false
	}
	return true
}
func (p *EvalPrompt) Field3DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *EvalPrompt) Field4DeepEqual(src *string) bool {

	if p.PromptKey == src {
		return true
	} else if p.PromptKey == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PromptKey, *src) != 0 {
		return false
	}
	return true
}
func (p *EvalPrompt) Field5DeepEqual(src *SubmitStatus) bool {

	if p.SubmitStatus == src {
		return true
	} else if p.SubmitStatus == nil || src == nil {
		return false
	}
	if *p.SubmitStatus != *src {
		return false
	}
	return true
}
func (p *EvalPrompt) Field6DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}

// Coze2.0Bot
type CozeBot struct {
	BotID       *int64           `thrift:"bot_id,1,optional" frugal:"1,optional,i64" json:"bot_id" form:"bot_id" query:"bot_id"`
	BotVersion  *string          `thrift:"bot_version,2,optional" frugal:"2,optional,string" form:"bot_version" json:"bot_version,omitempty" query:"bot_version"`
	BotInfoType *CozeBotInfoType `thrift:"bot_info_type,3,optional" frugal:"3,optional,CozeBotInfoType" form:"bot_info_type" json:"bot_info_type,omitempty" query:"bot_info_type"`
	ModelInfo   *ModelInfo       `thrift:"model_info,4,optional" frugal:"4,optional,ModelInfo" form:"model_info" json:"model_info,omitempty" query:"model_info"`
	// DTO使用，不存数据库
	BotName *string `thrift:"bot_name,5,optional" frugal:"5,optional,string" form:"bot_name" json:"bot_name,omitempty" query:"bot_name"`
	// DTO使用，不存数据库
	AvatarURL *string `thrift:"avatar_url,6,optional" frugal:"6,optional,string" form:"avatar_url" json:"avatar_url,omitempty" query:"avatar_url"`
	// DTO使用，不存数据库
	Description *string `thrift:"description,7,optional" frugal:"7,optional,string" form:"description" json:"description,omitempty" query:"description"`
	// 如果是发布版本则这个字段不为空
	PublishVersion *string          `thrift:"publish_version,8,optional" frugal:"8,optional,string" form:"publish_version" json:"publish_version,omitempty" query:"publish_version"`
	BaseInfo       *common.BaseInfo `thrift:"base_info,100,optional" frugal:"100,optional,common.BaseInfo" json:"base_info" form:"base_info" query:"base_info"`
}

func NewCozeBot() *CozeBot {
	return &CozeBot{}
}

func (p *CozeBot) InitDefault() {
}

var CozeBot_BotID_DEFAULT int64

func (p *CozeBot) GetBotID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetBotID() {
		return CozeBot_BotID_DEFAULT
	}
	return *p.BotID
}

var CozeBot_BotVersion_DEFAULT string

func (p *CozeBot) GetBotVersion() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetBotVersion() {
		return CozeBot_BotVersion_DEFAULT
	}
	return *p.BotVersion
}

var CozeBot_BotInfoType_DEFAULT CozeBotInfoType

func (p *CozeBot) GetBotInfoType() (v CozeBotInfoType) {
	if p == nil {
		return
	}
	if !p.IsSetBotInfoType() {
		return CozeBot_BotInfoType_DEFAULT
	}
	return *p.BotInfoType
}

var CozeBot_ModelInfo_DEFAULT *ModelInfo

func (p *CozeBot) GetModelInfo() (v *ModelInfo) {
	if p == nil {
		return
	}
	if !p.IsSetModelInfo() {
		return CozeBot_ModelInfo_DEFAULT
	}
	return p.ModelInfo
}

var CozeBot_BotName_DEFAULT string

func (p *CozeBot) GetBotName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetBotName() {
		return CozeBot_BotName_DEFAULT
	}
	return *p.BotName
}

var CozeBot_AvatarURL_DEFAULT string

func (p *CozeBot) GetAvatarURL() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetAvatarURL() {
		return CozeBot_AvatarURL_DEFAULT
	}
	return *p.AvatarURL
}

var CozeBot_Description_DEFAULT string

func (p *CozeBot) GetDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDescription() {
		return CozeBot_Description_DEFAULT
	}
	return *p.Description
}

var CozeBot_PublishVersion_DEFAULT string

func (p *CozeBot) GetPublishVersion() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetPublishVersion() {
		return CozeBot_PublishVersion_DEFAULT
	}
	return *p.PublishVersion
}

var CozeBot_BaseInfo_DEFAULT *common.BaseInfo

func (p *CozeBot) GetBaseInfo() (v *common.BaseInfo) {
	if p == nil {
		return
	}
	if !p.IsSetBaseInfo() {
		return CozeBot_BaseInfo_DEFAULT
	}
	return p.BaseInfo
}
func (p *CozeBot) SetBotID(val *int64) {
	p.BotID = val
}
func (p *CozeBot) SetBotVersion(val *string) {
	p.BotVersion = val
}
func (p *CozeBot) SetBotInfoType(val *CozeBotInfoType) {
	p.BotInfoType = val
}
func (p *CozeBot) SetModelInfo(val *ModelInfo) {
	p.ModelInfo = val
}
func (p *CozeBot) SetBotName(val *string) {
	p.BotName = val
}
func (p *CozeBot) SetAvatarURL(val *string) {
	p.AvatarURL = val
}
func (p *CozeBot) SetDescription(val *string) {
	p.Description = val
}
func (p *CozeBot) SetPublishVersion(val *string) {
	p.PublishVersion = val
}
func (p *CozeBot) SetBaseInfo(val *common.BaseInfo) {
	p.BaseInfo = val
}

var fieldIDToName_CozeBot = map[int16]string{
	1:   "bot_id",
	2:   "bot_version",
	3:   "bot_info_type",
	4:   "model_info",
	5:   "bot_name",
	6:   "avatar_url",
	7:   "description",
	8:   "publish_version",
	100: "base_info",
}

func (p *CozeBot) IsSetBotID() bool {
	return p.BotID != nil
}

func (p *CozeBot) IsSetBotVersion() bool {
	return p.BotVersion != nil
}

func (p *CozeBot) IsSetBotInfoType() bool {
	return p.BotInfoType != nil
}

func (p *CozeBot) IsSetModelInfo() bool {
	return p.ModelInfo != nil
}

func (p *CozeBot) IsSetBotName() bool {
	return p.BotName != nil
}

func (p *CozeBot) IsSetAvatarURL() bool {
	return p.AvatarURL != nil
}

func (p *CozeBot) IsSetDescription() bool {
	return p.Description != nil
}

func (p *CozeBot) IsSetPublishVersion() bool {
	return p.PublishVersion != nil
}

func (p *CozeBot) IsSetBaseInfo() bool {
	return p.BaseInfo != nil
}

func (p *CozeBot) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CozeBot[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CozeBot) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BotID = _field
	return nil
}
func (p *CozeBot) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BotVersion = _field
	return nil
}
func (p *CozeBot) ReadField3(iprot thrift.TProtocol) error {

	var _field *CozeBotInfoType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := CozeBotInfoType(v)
		_field = &tmp
	}
	p.BotInfoType = _field
	return nil
}
func (p *CozeBot) ReadField4(iprot thrift.TProtocol) error {
	_field := NewModelInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ModelInfo = _field
	return nil
}
func (p *CozeBot) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BotName = _field
	return nil
}
func (p *CozeBot) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AvatarURL = _field
	return nil
}
func (p *CozeBot) ReadField7(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}
func (p *CozeBot) ReadField8(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PublishVersion = _field
	return nil
}
func (p *CozeBot) ReadField100(iprot thrift.TProtocol) error {
	_field := common.NewBaseInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseInfo = _field
	return nil
}

func (p *CozeBot) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CozeBot"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CozeBot) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetBotID() {
		if err = oprot.WriteFieldBegin("bot_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.BotID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CozeBot) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetBotVersion() {
		if err = oprot.WriteFieldBegin("bot_version", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.BotVersion); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *CozeBot) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetBotInfoType() {
		if err = oprot.WriteFieldBegin("bot_info_type", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.BotInfoType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *CozeBot) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetModelInfo() {
		if err = oprot.WriteFieldBegin("model_info", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ModelInfo.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *CozeBot) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetBotName() {
		if err = oprot.WriteFieldBegin("bot_name", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.BotName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *CozeBot) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetAvatarURL() {
		if err = oprot.WriteFieldBegin("avatar_url", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.AvatarURL); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *CozeBot) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}
func (p *CozeBot) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetPublishVersion() {
		if err = oprot.WriteFieldBegin("publish_version", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PublishVersion); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}
func (p *CozeBot) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseInfo() {
		if err = oprot.WriteFieldBegin("base_info", thrift.STRUCT, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseInfo.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}

func (p *CozeBot) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CozeBot(%+v)", *p)

}

func (p *CozeBot) DeepEqual(ano *CozeBot) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.BotID) {
		return false
	}
	if !p.Field2DeepEqual(ano.BotVersion) {
		return false
	}
	if !p.Field3DeepEqual(ano.BotInfoType) {
		return false
	}
	if !p.Field4DeepEqual(ano.ModelInfo) {
		return false
	}
	if !p.Field5DeepEqual(ano.BotName) {
		return false
	}
	if !p.Field6DeepEqual(ano.AvatarURL) {
		return false
	}
	if !p.Field7DeepEqual(ano.Description) {
		return false
	}
	if !p.Field8DeepEqual(ano.PublishVersion) {
		return false
	}
	if !p.Field100DeepEqual(ano.BaseInfo) {
		return false
	}
	return true
}

func (p *CozeBot) Field1DeepEqual(src *int64) bool {

	if p.BotID == src {
		return true
	} else if p.BotID == nil || src == nil {
		return false
	}
	if *p.BotID != *src {
		return false
	}
	return true
}
func (p *CozeBot) Field2DeepEqual(src *string) bool {

	if p.BotVersion == src {
		return true
	} else if p.BotVersion == nil || src == nil {
		return false
	}
	if strings.Compare(*p.BotVersion, *src) != 0 {
		return false
	}
	return true
}
func (p *CozeBot) Field3DeepEqual(src *CozeBotInfoType) bool {

	if p.BotInfoType == src {
		return true
	} else if p.BotInfoType == nil || src == nil {
		return false
	}
	if *p.BotInfoType != *src {
		return false
	}
	return true
}
func (p *CozeBot) Field4DeepEqual(src *ModelInfo) bool {

	if !p.ModelInfo.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CozeBot) Field5DeepEqual(src *string) bool {

	if p.BotName == src {
		return true
	} else if p.BotName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.BotName, *src) != 0 {
		return false
	}
	return true
}
func (p *CozeBot) Field6DeepEqual(src *string) bool {

	if p.AvatarURL == src {
		return true
	} else if p.AvatarURL == nil || src == nil {
		return false
	}
	if strings.Compare(*p.AvatarURL, *src) != 0 {
		return false
	}
	return true
}
func (p *CozeBot) Field7DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *CozeBot) Field8DeepEqual(src *string) bool {

	if p.PublishVersion == src {
		return true
	} else if p.PublishVersion == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PublishVersion, *src) != 0 {
		return false
	}
	return true
}
func (p *CozeBot) Field100DeepEqual(src *common.BaseInfo) bool {

	if !p.BaseInfo.DeepEqual(src) {
		return false
	}
	return true
}

type ModelInfo struct {
	ModelID   int64  `thrift:"model_id,1" frugal:"1,default,i64" json:"model_id" form:"model_id" query:"model_id"`
	ModelName string `thrift:"model_name,2" frugal:"2,default,string" form:"model_name" json:"model_name" query:"model_name"`
	// DTO使用，不存数据库
	ShowName string `thrift:"show_name,3" frugal:"3,default,string" form:"show_name" json:"show_name" query:"show_name"`
	// DTO使用，不存数据库
	MaxTokens int64 `thrift:"max_tokens,4" frugal:"4,default,i64" json:"max_tokens" form:"max_tokens" query:"max_tokens"`
	// 模型家族信息
	ModelFamily int64 `thrift:"model_family,5" frugal:"5,default,i64" json:"model_family" form:"model_family" query:"model_family"`
	// 模型平台
	Platform *ModelPlatform `thrift:"platform,6,optional" frugal:"6,optional,ModelPlatform" form:"platform" json:"platform,omitempty" query:"platform"`
}

func NewModelInfo() *ModelInfo {
	return &ModelInfo{}
}

func (p *ModelInfo) InitDefault() {
}

func (p *ModelInfo) GetModelID() (v int64) {
	if p != nil {
		return p.ModelID
	}
	return
}

func (p *ModelInfo) GetModelName() (v string) {
	if p != nil {
		return p.ModelName
	}
	return
}

func (p *ModelInfo) GetShowName() (v string) {
	if p != nil {
		return p.ShowName
	}
	return
}

func (p *ModelInfo) GetMaxTokens() (v int64) {
	if p != nil {
		return p.MaxTokens
	}
	return
}

func (p *ModelInfo) GetModelFamily() (v int64) {
	if p != nil {
		return p.ModelFamily
	}
	return
}

var ModelInfo_Platform_DEFAULT ModelPlatform

func (p *ModelInfo) GetPlatform() (v ModelPlatform) {
	if p == nil {
		return
	}
	if !p.IsSetPlatform() {
		return ModelInfo_Platform_DEFAULT
	}
	return *p.Platform
}
func (p *ModelInfo) SetModelID(val int64) {
	p.ModelID = val
}
func (p *ModelInfo) SetModelName(val string) {
	p.ModelName = val
}
func (p *ModelInfo) SetShowName(val string) {
	p.ShowName = val
}
func (p *ModelInfo) SetMaxTokens(val int64) {
	p.MaxTokens = val
}
func (p *ModelInfo) SetModelFamily(val int64) {
	p.ModelFamily = val
}
func (p *ModelInfo) SetPlatform(val *ModelPlatform) {
	p.Platform = val
}

var fieldIDToName_ModelInfo = map[int16]string{
	1: "model_id",
	2: "model_name",
	3: "show_name",
	4: "max_tokens",
	5: "model_family",
	6: "platform",
}

func (p *ModelInfo) IsSetPlatform() bool {
	return p.Platform != nil
}

func (p *ModelInfo) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ModelInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ModelInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ModelID = _field
	return nil
}
func (p *ModelInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ModelName = _field
	return nil
}
func (p *ModelInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ShowName = _field
	return nil
}
func (p *ModelInfo) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.MaxTokens = _field
	return nil
}
func (p *ModelInfo) ReadField5(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ModelFamily = _field
	return nil
}
func (p *ModelInfo) ReadField6(iprot thrift.TProtocol) error {

	var _field *ModelPlatform
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := ModelPlatform(v)
		_field = &tmp
	}
	p.Platform = _field
	return nil
}

func (p *ModelInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ModelInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ModelInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("model_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ModelID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ModelInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("model_name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ModelName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ModelInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("show_name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ShowName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ModelInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("max_tokens", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.MaxTokens); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *ModelInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("model_family", thrift.I64, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ModelFamily); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *ModelInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetPlatform() {
		if err = oprot.WriteFieldBegin("platform", thrift.I32, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Platform)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *ModelInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ModelInfo(%+v)", *p)

}

func (p *ModelInfo) DeepEqual(ano *ModelInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ModelID) {
		return false
	}
	if !p.Field2DeepEqual(ano.ModelName) {
		return false
	}
	if !p.Field3DeepEqual(ano.ShowName) {
		return false
	}
	if !p.Field4DeepEqual(ano.MaxTokens) {
		return false
	}
	if !p.Field5DeepEqual(ano.ModelFamily) {
		return false
	}
	if !p.Field6DeepEqual(ano.Platform) {
		return false
	}
	return true
}

func (p *ModelInfo) Field1DeepEqual(src int64) bool {

	if p.ModelID != src {
		return false
	}
	return true
}
func (p *ModelInfo) Field2DeepEqual(src string) bool {

	if strings.Compare(p.ModelName, src) != 0 {
		return false
	}
	return true
}
func (p *ModelInfo) Field3DeepEqual(src string) bool {

	if strings.Compare(p.ShowName, src) != 0 {
		return false
	}
	return true
}
func (p *ModelInfo) Field4DeepEqual(src int64) bool {

	if p.MaxTokens != src {
		return false
	}
	return true
}
func (p *ModelInfo) Field5DeepEqual(src int64) bool {

	if p.ModelFamily != src {
		return false
	}
	return true
}
func (p *ModelInfo) Field6DeepEqual(src *ModelPlatform) bool {

	if p.Platform == src {
		return true
	} else if p.Platform == nil || src == nil {
		return false
	}
	if *p.Platform != *src {
		return false
	}
	return true
}

type EvalTargetRecord struct {
	// 评估记录ID
	ID *int64 `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id" form:"id" query:"id"`
	// 空间ID
	WorkspaceID     *int64 `thrift:"workspace_id,2,optional" frugal:"2,optional,i64" json:"workspace_id" form:"workspace_id" query:"workspace_id"`
	TargetID        *int64 `thrift:"target_id,3,optional" frugal:"3,optional,i64" json:"target_id" form:"target_id" query:"target_id"`
	TargetVersionID *int64 `thrift:"target_version_id,4,optional" frugal:"4,optional,i64" json:"target_version_id" form:"target_version_id" query:"target_version_id"`
	// 实验执行ID
	ExperimentRunID *int64 `thrift:"experiment_run_id,5,optional" frugal:"5,optional,i64" json:"experiment_run_id" form:"experiment_run_id" query:"experiment_run_id"`
	// 评测集数据项ID
	ItemID *int64 `thrift:"item_id,6,optional" frugal:"6,optional,i64" json:"item_id" form:"item_id" query:"item_id"`
	// 评测集数据项轮次ID
	TurnID *int64 `thrift:"turn_id,7,optional" frugal:"7,optional,i64" json:"turn_id" form:"turn_id" query:"turn_id"`
	// 链路ID
	TraceID *string `thrift:"trace_id,8,optional" frugal:"8,optional,string" form:"trace_id" json:"trace_id,omitempty" query:"trace_id"`
	// 链路ID
	LogID *string `thrift:"log_id,9,optional" frugal:"9,optional,string" form:"log_id" json:"log_id,omitempty" query:"log_id"`
	// 输入数据
	EvalTargetInputData *EvalTargetInputData `thrift:"eval_target_input_data,10,optional" frugal:"10,optional,EvalTargetInputData" form:"eval_target_input_data" json:"eval_target_input_data,omitempty" query:"eval_target_input_data"`
	// 输出数据
	EvalTargetOutputData *EvalTargetOutputData `thrift:"eval_target_output_data,11,optional" frugal:"11,optional,EvalTargetOutputData" form:"eval_target_output_data" json:"eval_target_output_data,omitempty" query:"eval_target_output_data"`
	Status               *EvalTargetRunStatus  `thrift:"status,12,optional" frugal:"12,optional,EvalTargetRunStatus" form:"status" json:"status,omitempty" query:"status"`
	BaseInfo             *common.BaseInfo      `thrift:"base_info,100,optional" frugal:"100,optional,common.BaseInfo" json:"base_info" form:"base_info" query:"base_info"`
}

func NewEvalTargetRecord() *EvalTargetRecord {
	return &EvalTargetRecord{}
}

func (p *EvalTargetRecord) InitDefault() {
}

var EvalTargetRecord_ID_DEFAULT int64

func (p *EvalTargetRecord) GetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetID() {
		return EvalTargetRecord_ID_DEFAULT
	}
	return *p.ID
}

var EvalTargetRecord_WorkspaceID_DEFAULT int64

func (p *EvalTargetRecord) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return EvalTargetRecord_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var EvalTargetRecord_TargetID_DEFAULT int64

func (p *EvalTargetRecord) GetTargetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTargetID() {
		return EvalTargetRecord_TargetID_DEFAULT
	}
	return *p.TargetID
}

var EvalTargetRecord_TargetVersionID_DEFAULT int64

func (p *EvalTargetRecord) GetTargetVersionID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTargetVersionID() {
		return EvalTargetRecord_TargetVersionID_DEFAULT
	}
	return *p.TargetVersionID
}

var EvalTargetRecord_ExperimentRunID_DEFAULT int64

func (p *EvalTargetRecord) GetExperimentRunID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetExperimentRunID() {
		return EvalTargetRecord_ExperimentRunID_DEFAULT
	}
	return *p.ExperimentRunID
}

var EvalTargetRecord_ItemID_DEFAULT int64

func (p *EvalTargetRecord) GetItemID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetItemID() {
		return EvalTargetRecord_ItemID_DEFAULT
	}
	return *p.ItemID
}

var EvalTargetRecord_TurnID_DEFAULT int64

func (p *EvalTargetRecord) GetTurnID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTurnID() {
		return EvalTargetRecord_TurnID_DEFAULT
	}
	return *p.TurnID
}

var EvalTargetRecord_TraceID_DEFAULT string

func (p *EvalTargetRecord) GetTraceID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetTraceID() {
		return EvalTargetRecord_TraceID_DEFAULT
	}
	return *p.TraceID
}

var EvalTargetRecord_LogID_DEFAULT string

func (p *EvalTargetRecord) GetLogID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetLogID() {
		return EvalTargetRecord_LogID_DEFAULT
	}
	return *p.LogID
}

var EvalTargetRecord_EvalTargetInputData_DEFAULT *EvalTargetInputData

func (p *EvalTargetRecord) GetEvalTargetInputData() (v *EvalTargetInputData) {
	if p == nil {
		return
	}
	if !p.IsSetEvalTargetInputData() {
		return EvalTargetRecord_EvalTargetInputData_DEFAULT
	}
	return p.EvalTargetInputData
}

var EvalTargetRecord_EvalTargetOutputData_DEFAULT *EvalTargetOutputData

func (p *EvalTargetRecord) GetEvalTargetOutputData() (v *EvalTargetOutputData) {
	if p == nil {
		return
	}
	if !p.IsSetEvalTargetOutputData() {
		return EvalTargetRecord_EvalTargetOutputData_DEFAULT
	}
	return p.EvalTargetOutputData
}

var EvalTargetRecord_Status_DEFAULT EvalTargetRunStatus

func (p *EvalTargetRecord) GetStatus() (v EvalTargetRunStatus) {
	if p == nil {
		return
	}
	if !p.IsSetStatus() {
		return EvalTargetRecord_Status_DEFAULT
	}
	return *p.Status
}

var EvalTargetRecord_BaseInfo_DEFAULT *common.BaseInfo

func (p *EvalTargetRecord) GetBaseInfo() (v *common.BaseInfo) {
	if p == nil {
		return
	}
	if !p.IsSetBaseInfo() {
		return EvalTargetRecord_BaseInfo_DEFAULT
	}
	return p.BaseInfo
}
func (p *EvalTargetRecord) SetID(val *int64) {
	p.ID = val
}
func (p *EvalTargetRecord) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *EvalTargetRecord) SetTargetID(val *int64) {
	p.TargetID = val
}
func (p *EvalTargetRecord) SetTargetVersionID(val *int64) {
	p.TargetVersionID = val
}
func (p *EvalTargetRecord) SetExperimentRunID(val *int64) {
	p.ExperimentRunID = val
}
func (p *EvalTargetRecord) SetItemID(val *int64) {
	p.ItemID = val
}
func (p *EvalTargetRecord) SetTurnID(val *int64) {
	p.TurnID = val
}
func (p *EvalTargetRecord) SetTraceID(val *string) {
	p.TraceID = val
}
func (p *EvalTargetRecord) SetLogID(val *string) {
	p.LogID = val
}
func (p *EvalTargetRecord) SetEvalTargetInputData(val *EvalTargetInputData) {
	p.EvalTargetInputData = val
}
func (p *EvalTargetRecord) SetEvalTargetOutputData(val *EvalTargetOutputData) {
	p.EvalTargetOutputData = val
}
func (p *EvalTargetRecord) SetStatus(val *EvalTargetRunStatus) {
	p.Status = val
}
func (p *EvalTargetRecord) SetBaseInfo(val *common.BaseInfo) {
	p.BaseInfo = val
}

var fieldIDToName_EvalTargetRecord = map[int16]string{
	1:   "id",
	2:   "workspace_id",
	3:   "target_id",
	4:   "target_version_id",
	5:   "experiment_run_id",
	6:   "item_id",
	7:   "turn_id",
	8:   "trace_id",
	9:   "log_id",
	10:  "eval_target_input_data",
	11:  "eval_target_output_data",
	12:  "status",
	100: "base_info",
}

func (p *EvalTargetRecord) IsSetID() bool {
	return p.ID != nil
}

func (p *EvalTargetRecord) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *EvalTargetRecord) IsSetTargetID() bool {
	return p.TargetID != nil
}

func (p *EvalTargetRecord) IsSetTargetVersionID() bool {
	return p.TargetVersionID != nil
}

func (p *EvalTargetRecord) IsSetExperimentRunID() bool {
	return p.ExperimentRunID != nil
}

func (p *EvalTargetRecord) IsSetItemID() bool {
	return p.ItemID != nil
}

func (p *EvalTargetRecord) IsSetTurnID() bool {
	return p.TurnID != nil
}

func (p *EvalTargetRecord) IsSetTraceID() bool {
	return p.TraceID != nil
}

func (p *EvalTargetRecord) IsSetLogID() bool {
	return p.LogID != nil
}

func (p *EvalTargetRecord) IsSetEvalTargetInputData() bool {
	return p.EvalTargetInputData != nil
}

func (p *EvalTargetRecord) IsSetEvalTargetOutputData() bool {
	return p.EvalTargetOutputData != nil
}

func (p *EvalTargetRecord) IsSetStatus() bool {
	return p.Status != nil
}

func (p *EvalTargetRecord) IsSetBaseInfo() bool {
	return p.BaseInfo != nil
}

func (p *EvalTargetRecord) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvalTargetRecord[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvalTargetRecord) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ID = _field
	return nil
}
func (p *EvalTargetRecord) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *EvalTargetRecord) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TargetID = _field
	return nil
}
func (p *EvalTargetRecord) ReadField4(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TargetVersionID = _field
	return nil
}
func (p *EvalTargetRecord) ReadField5(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ExperimentRunID = _field
	return nil
}
func (p *EvalTargetRecord) ReadField6(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ItemID = _field
	return nil
}
func (p *EvalTargetRecord) ReadField7(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TurnID = _field
	return nil
}
func (p *EvalTargetRecord) ReadField8(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TraceID = _field
	return nil
}
func (p *EvalTargetRecord) ReadField9(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LogID = _field
	return nil
}
func (p *EvalTargetRecord) ReadField10(iprot thrift.TProtocol) error {
	_field := NewEvalTargetInputData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvalTargetInputData = _field
	return nil
}
func (p *EvalTargetRecord) ReadField11(iprot thrift.TProtocol) error {
	_field := NewEvalTargetOutputData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvalTargetOutputData = _field
	return nil
}
func (p *EvalTargetRecord) ReadField12(iprot thrift.TProtocol) error {

	var _field *EvalTargetRunStatus
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := EvalTargetRunStatus(v)
		_field = &tmp
	}
	p.Status = _field
	return nil
}
func (p *EvalTargetRecord) ReadField100(iprot thrift.TProtocol) error {
	_field := common.NewBaseInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseInfo = _field
	return nil
}

func (p *EvalTargetRecord) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EvalTargetRecord"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvalTargetRecord) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *EvalTargetRecord) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *EvalTargetRecord) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTargetID() {
		if err = oprot.WriteFieldBegin("target_id", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TargetID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *EvalTargetRecord) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTargetVersionID() {
		if err = oprot.WriteFieldBegin("target_version_id", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TargetVersionID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *EvalTargetRecord) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetExperimentRunID() {
		if err = oprot.WriteFieldBegin("experiment_run_id", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ExperimentRunID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *EvalTargetRecord) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetItemID() {
		if err = oprot.WriteFieldBegin("item_id", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ItemID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *EvalTargetRecord) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetTurnID() {
		if err = oprot.WriteFieldBegin("turn_id", thrift.I64, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TurnID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}
func (p *EvalTargetRecord) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetTraceID() {
		if err = oprot.WriteFieldBegin("trace_id", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TraceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}
func (p *EvalTargetRecord) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetLogID() {
		if err = oprot.WriteFieldBegin("log_id", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.LogID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}
func (p *EvalTargetRecord) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvalTargetInputData() {
		if err = oprot.WriteFieldBegin("eval_target_input_data", thrift.STRUCT, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.EvalTargetInputData.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}
func (p *EvalTargetRecord) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvalTargetOutputData() {
		if err = oprot.WriteFieldBegin("eval_target_output_data", thrift.STRUCT, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.EvalTargetOutputData.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}
func (p *EvalTargetRecord) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.I32, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Status)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}
func (p *EvalTargetRecord) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseInfo() {
		if err = oprot.WriteFieldBegin("base_info", thrift.STRUCT, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseInfo.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}

func (p *EvalTargetRecord) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvalTargetRecord(%+v)", *p)

}

func (p *EvalTargetRecord) DeepEqual(ano *EvalTargetRecord) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field2DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field3DeepEqual(ano.TargetID) {
		return false
	}
	if !p.Field4DeepEqual(ano.TargetVersionID) {
		return false
	}
	if !p.Field5DeepEqual(ano.ExperimentRunID) {
		return false
	}
	if !p.Field6DeepEqual(ano.ItemID) {
		return false
	}
	if !p.Field7DeepEqual(ano.TurnID) {
		return false
	}
	if !p.Field8DeepEqual(ano.TraceID) {
		return false
	}
	if !p.Field9DeepEqual(ano.LogID) {
		return false
	}
	if !p.Field10DeepEqual(ano.EvalTargetInputData) {
		return false
	}
	if !p.Field11DeepEqual(ano.EvalTargetOutputData) {
		return false
	}
	if !p.Field12DeepEqual(ano.Status) {
		return false
	}
	if !p.Field100DeepEqual(ano.BaseInfo) {
		return false
	}
	return true
}

func (p *EvalTargetRecord) Field1DeepEqual(src *int64) bool {

	if p.ID == src {
		return true
	} else if p.ID == nil || src == nil {
		return false
	}
	if *p.ID != *src {
		return false
	}
	return true
}
func (p *EvalTargetRecord) Field2DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *EvalTargetRecord) Field3DeepEqual(src *int64) bool {

	if p.TargetID == src {
		return true
	} else if p.TargetID == nil || src == nil {
		return false
	}
	if *p.TargetID != *src {
		return false
	}
	return true
}
func (p *EvalTargetRecord) Field4DeepEqual(src *int64) bool {

	if p.TargetVersionID == src {
		return true
	} else if p.TargetVersionID == nil || src == nil {
		return false
	}
	if *p.TargetVersionID != *src {
		return false
	}
	return true
}
func (p *EvalTargetRecord) Field5DeepEqual(src *int64) bool {

	if p.ExperimentRunID == src {
		return true
	} else if p.ExperimentRunID == nil || src == nil {
		return false
	}
	if *p.ExperimentRunID != *src {
		return false
	}
	return true
}
func (p *EvalTargetRecord) Field6DeepEqual(src *int64) bool {

	if p.ItemID == src {
		return true
	} else if p.ItemID == nil || src == nil {
		return false
	}
	if *p.ItemID != *src {
		return false
	}
	return true
}
func (p *EvalTargetRecord) Field7DeepEqual(src *int64) bool {

	if p.TurnID == src {
		return true
	} else if p.TurnID == nil || src == nil {
		return false
	}
	if *p.TurnID != *src {
		return false
	}
	return true
}
func (p *EvalTargetRecord) Field8DeepEqual(src *string) bool {

	if p.TraceID == src {
		return true
	} else if p.TraceID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TraceID, *src) != 0 {
		return false
	}
	return true
}
func (p *EvalTargetRecord) Field9DeepEqual(src *string) bool {

	if p.LogID == src {
		return true
	} else if p.LogID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.LogID, *src) != 0 {
		return false
	}
	return true
}
func (p *EvalTargetRecord) Field10DeepEqual(src *EvalTargetInputData) bool {

	if !p.EvalTargetInputData.DeepEqual(src) {
		return false
	}
	return true
}
func (p *EvalTargetRecord) Field11DeepEqual(src *EvalTargetOutputData) bool {

	if !p.EvalTargetOutputData.DeepEqual(src) {
		return false
	}
	return true
}
func (p *EvalTargetRecord) Field12DeepEqual(src *EvalTargetRunStatus) bool {

	if p.Status == src {
		return true
	} else if p.Status == nil || src == nil {
		return false
	}
	if *p.Status != *src {
		return false
	}
	return true
}
func (p *EvalTargetRecord) Field100DeepEqual(src *common.BaseInfo) bool {

	if !p.BaseInfo.DeepEqual(src) {
		return false
	}
	return true
}

type EvalTargetInputData struct {
	// 历史会话记录
	HistoryMessages []*common.Message `thrift:"history_messages,1,optional" frugal:"1,optional,list<common.Message>" form:"history_messages" json:"history_messages,omitempty" query:"history_messages"`
	// 变量
	InputFields map[string]*common.Content `thrift:"input_fields,2,optional" frugal:"2,optional,map<string:common.Content>" form:"input_fields" json:"input_fields,omitempty" query:"input_fields"`
	Ext         map[string]string          `thrift:"ext,3,optional" frugal:"3,optional,map<string:string>" form:"ext" json:"ext,omitempty" query:"ext"`
}

func NewEvalTargetInputData() *EvalTargetInputData {
	return &EvalTargetInputData{}
}

func (p *EvalTargetInputData) InitDefault() {
}

var EvalTargetInputData_HistoryMessages_DEFAULT []*common.Message

func (p *EvalTargetInputData) GetHistoryMessages() (v []*common.Message) {
	if p == nil {
		return
	}
	if !p.IsSetHistoryMessages() {
		return EvalTargetInputData_HistoryMessages_DEFAULT
	}
	return p.HistoryMessages
}

var EvalTargetInputData_InputFields_DEFAULT map[string]*common.Content

func (p *EvalTargetInputData) GetInputFields() (v map[string]*common.Content) {
	if p == nil {
		return
	}
	if !p.IsSetInputFields() {
		return EvalTargetInputData_InputFields_DEFAULT
	}
	return p.InputFields
}

var EvalTargetInputData_Ext_DEFAULT map[string]string

func (p *EvalTargetInputData) GetExt() (v map[string]string) {
	if p == nil {
		return
	}
	if !p.IsSetExt() {
		return EvalTargetInputData_Ext_DEFAULT
	}
	return p.Ext
}
func (p *EvalTargetInputData) SetHistoryMessages(val []*common.Message) {
	p.HistoryMessages = val
}
func (p *EvalTargetInputData) SetInputFields(val map[string]*common.Content) {
	p.InputFields = val
}
func (p *EvalTargetInputData) SetExt(val map[string]string) {
	p.Ext = val
}

var fieldIDToName_EvalTargetInputData = map[int16]string{
	1: "history_messages",
	2: "input_fields",
	3: "ext",
}

func (p *EvalTargetInputData) IsSetHistoryMessages() bool {
	return p.HistoryMessages != nil
}

func (p *EvalTargetInputData) IsSetInputFields() bool {
	return p.InputFields != nil
}

func (p *EvalTargetInputData) IsSetExt() bool {
	return p.Ext != nil
}

func (p *EvalTargetInputData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvalTargetInputData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvalTargetInputData) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*common.Message, 0, size)
	values := make([]common.Message, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.HistoryMessages = _field
	return nil
}
func (p *EvalTargetInputData) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]*common.Content, size)
	values := make([]common.Content, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		_val := &values[i]
		_val.InitDefault()
		if err := _val.Read(iprot); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.InputFields = _field
	return nil
}
func (p *EvalTargetInputData) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.Ext = _field
	return nil
}

func (p *EvalTargetInputData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EvalTargetInputData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvalTargetInputData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetHistoryMessages() {
		if err = oprot.WriteFieldBegin("history_messages", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.HistoryMessages)); err != nil {
			return err
		}
		for _, v := range p.HistoryMessages {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *EvalTargetInputData) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetInputFields() {
		if err = oprot.WriteFieldBegin("input_fields", thrift.MAP, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.InputFields)); err != nil {
			return err
		}
		for k, v := range p.InputFields {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *EvalTargetInputData) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetExt() {
		if err = oprot.WriteFieldBegin("ext", thrift.MAP, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Ext)); err != nil {
			return err
		}
		for k, v := range p.Ext {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *EvalTargetInputData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvalTargetInputData(%+v)", *p)

}

func (p *EvalTargetInputData) DeepEqual(ano *EvalTargetInputData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.HistoryMessages) {
		return false
	}
	if !p.Field2DeepEqual(ano.InputFields) {
		return false
	}
	if !p.Field3DeepEqual(ano.Ext) {
		return false
	}
	return true
}

func (p *EvalTargetInputData) Field1DeepEqual(src []*common.Message) bool {

	if len(p.HistoryMessages) != len(src) {
		return false
	}
	for i, v := range p.HistoryMessages {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *EvalTargetInputData) Field2DeepEqual(src map[string]*common.Content) bool {

	if len(p.InputFields) != len(src) {
		return false
	}
	for k, v := range p.InputFields {
		_src := src[k]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *EvalTargetInputData) Field3DeepEqual(src map[string]string) bool {

	if len(p.Ext) != len(src) {
		return false
	}
	for k, v := range p.Ext {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type EvalTargetOutputData struct {
	// 变量
	OutputFields map[string]*common.Content `thrift:"output_fields,1,optional" frugal:"1,optional,map<string:common.Content>" form:"output_fields" json:"output_fields,omitempty" query:"output_fields"`
	// 运行消耗
	EvalTargetUsage *EvalTargetUsage `thrift:"eval_target_usage,2,optional" frugal:"2,optional,EvalTargetUsage" form:"eval_target_usage" json:"eval_target_usage,omitempty" query:"eval_target_usage"`
	// 运行报错
	EvalTargetRunError *EvalTargetRunError `thrift:"eval_target_run_error,3,optional" frugal:"3,optional,EvalTargetRunError" form:"eval_target_run_error" json:"eval_target_run_error,omitempty" query:"eval_target_run_error"`
	// 运行耗时
	TimeConsumingMs *int64 `thrift:"time_consuming_ms,4,optional" frugal:"4,optional,i64" json:"time_consuming_ms" form:"time_consuming_ms" query:"time_consuming_ms"`
}

func NewEvalTargetOutputData() *EvalTargetOutputData {
	return &EvalTargetOutputData{}
}

func (p *EvalTargetOutputData) InitDefault() {
}

var EvalTargetOutputData_OutputFields_DEFAULT map[string]*common.Content

func (p *EvalTargetOutputData) GetOutputFields() (v map[string]*common.Content) {
	if p == nil {
		return
	}
	if !p.IsSetOutputFields() {
		return EvalTargetOutputData_OutputFields_DEFAULT
	}
	return p.OutputFields
}

var EvalTargetOutputData_EvalTargetUsage_DEFAULT *EvalTargetUsage

func (p *EvalTargetOutputData) GetEvalTargetUsage() (v *EvalTargetUsage) {
	if p == nil {
		return
	}
	if !p.IsSetEvalTargetUsage() {
		return EvalTargetOutputData_EvalTargetUsage_DEFAULT
	}
	return p.EvalTargetUsage
}

var EvalTargetOutputData_EvalTargetRunError_DEFAULT *EvalTargetRunError

func (p *EvalTargetOutputData) GetEvalTargetRunError() (v *EvalTargetRunError) {
	if p == nil {
		return
	}
	if !p.IsSetEvalTargetRunError() {
		return EvalTargetOutputData_EvalTargetRunError_DEFAULT
	}
	return p.EvalTargetRunError
}

var EvalTargetOutputData_TimeConsumingMs_DEFAULT int64

func (p *EvalTargetOutputData) GetTimeConsumingMs() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTimeConsumingMs() {
		return EvalTargetOutputData_TimeConsumingMs_DEFAULT
	}
	return *p.TimeConsumingMs
}
func (p *EvalTargetOutputData) SetOutputFields(val map[string]*common.Content) {
	p.OutputFields = val
}
func (p *EvalTargetOutputData) SetEvalTargetUsage(val *EvalTargetUsage) {
	p.EvalTargetUsage = val
}
func (p *EvalTargetOutputData) SetEvalTargetRunError(val *EvalTargetRunError) {
	p.EvalTargetRunError = val
}
func (p *EvalTargetOutputData) SetTimeConsumingMs(val *int64) {
	p.TimeConsumingMs = val
}

var fieldIDToName_EvalTargetOutputData = map[int16]string{
	1: "output_fields",
	2: "eval_target_usage",
	3: "eval_target_run_error",
	4: "time_consuming_ms",
}

func (p *EvalTargetOutputData) IsSetOutputFields() bool {
	return p.OutputFields != nil
}

func (p *EvalTargetOutputData) IsSetEvalTargetUsage() bool {
	return p.EvalTargetUsage != nil
}

func (p *EvalTargetOutputData) IsSetEvalTargetRunError() bool {
	return p.EvalTargetRunError != nil
}

func (p *EvalTargetOutputData) IsSetTimeConsumingMs() bool {
	return p.TimeConsumingMs != nil
}

func (p *EvalTargetOutputData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvalTargetOutputData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvalTargetOutputData) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]*common.Content, size)
	values := make([]common.Content, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		_val := &values[i]
		_val.InitDefault()
		if err := _val.Read(iprot); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.OutputFields = _field
	return nil
}
func (p *EvalTargetOutputData) ReadField2(iprot thrift.TProtocol) error {
	_field := NewEvalTargetUsage()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvalTargetUsage = _field
	return nil
}
func (p *EvalTargetOutputData) ReadField3(iprot thrift.TProtocol) error {
	_field := NewEvalTargetRunError()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvalTargetRunError = _field
	return nil
}
func (p *EvalTargetOutputData) ReadField4(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TimeConsumingMs = _field
	return nil
}

func (p *EvalTargetOutputData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EvalTargetOutputData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvalTargetOutputData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutputFields() {
		if err = oprot.WriteFieldBegin("output_fields", thrift.MAP, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.OutputFields)); err != nil {
			return err
		}
		for k, v := range p.OutputFields {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *EvalTargetOutputData) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvalTargetUsage() {
		if err = oprot.WriteFieldBegin("eval_target_usage", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.EvalTargetUsage.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *EvalTargetOutputData) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvalTargetRunError() {
		if err = oprot.WriteFieldBegin("eval_target_run_error", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.EvalTargetRunError.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *EvalTargetOutputData) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeConsumingMs() {
		if err = oprot.WriteFieldBegin("time_consuming_ms", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TimeConsumingMs); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *EvalTargetOutputData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvalTargetOutputData(%+v)", *p)

}

func (p *EvalTargetOutputData) DeepEqual(ano *EvalTargetOutputData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.OutputFields) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvalTargetUsage) {
		return false
	}
	if !p.Field3DeepEqual(ano.EvalTargetRunError) {
		return false
	}
	if !p.Field4DeepEqual(ano.TimeConsumingMs) {
		return false
	}
	return true
}

func (p *EvalTargetOutputData) Field1DeepEqual(src map[string]*common.Content) bool {

	if len(p.OutputFields) != len(src) {
		return false
	}
	for k, v := range p.OutputFields {
		_src := src[k]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *EvalTargetOutputData) Field2DeepEqual(src *EvalTargetUsage) bool {

	if !p.EvalTargetUsage.DeepEqual(src) {
		return false
	}
	return true
}
func (p *EvalTargetOutputData) Field3DeepEqual(src *EvalTargetRunError) bool {

	if !p.EvalTargetRunError.DeepEqual(src) {
		return false
	}
	return true
}
func (p *EvalTargetOutputData) Field4DeepEqual(src *int64) bool {

	if p.TimeConsumingMs == src {
		return true
	} else if p.TimeConsumingMs == nil || src == nil {
		return false
	}
	if *p.TimeConsumingMs != *src {
		return false
	}
	return true
}

type EvalTargetUsage struct {
	InputTokens  int64 `thrift:"input_tokens,1" frugal:"1,default,i64" json:"input_tokens" form:"input_tokens" query:"input_tokens"`
	OutputTokens int64 `thrift:"output_tokens,2" frugal:"2,default,i64" json:"output_tokens" form:"output_tokens" query:"output_tokens"`
}

func NewEvalTargetUsage() *EvalTargetUsage {
	return &EvalTargetUsage{}
}

func (p *EvalTargetUsage) InitDefault() {
}

func (p *EvalTargetUsage) GetInputTokens() (v int64) {
	if p != nil {
		return p.InputTokens
	}
	return
}

func (p *EvalTargetUsage) GetOutputTokens() (v int64) {
	if p != nil {
		return p.OutputTokens
	}
	return
}
func (p *EvalTargetUsage) SetInputTokens(val int64) {
	p.InputTokens = val
}
func (p *EvalTargetUsage) SetOutputTokens(val int64) {
	p.OutputTokens = val
}

var fieldIDToName_EvalTargetUsage = map[int16]string{
	1: "input_tokens",
	2: "output_tokens",
}

func (p *EvalTargetUsage) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvalTargetUsage[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvalTargetUsage) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.InputTokens = _field
	return nil
}
func (p *EvalTargetUsage) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.OutputTokens = _field
	return nil
}

func (p *EvalTargetUsage) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EvalTargetUsage"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvalTargetUsage) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("input_tokens", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.InputTokens); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *EvalTargetUsage) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("output_tokens", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.OutputTokens); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *EvalTargetUsage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvalTargetUsage(%+v)", *p)

}

func (p *EvalTargetUsage) DeepEqual(ano *EvalTargetUsage) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.InputTokens) {
		return false
	}
	if !p.Field2DeepEqual(ano.OutputTokens) {
		return false
	}
	return true
}

func (p *EvalTargetUsage) Field1DeepEqual(src int64) bool {

	if p.InputTokens != src {
		return false
	}
	return true
}
func (p *EvalTargetUsage) Field2DeepEqual(src int64) bool {

	if p.OutputTokens != src {
		return false
	}
	return true
}

type EvalTargetRunError struct {
	Code    *int32  `thrift:"code,1,optional" frugal:"1,optional,i32" json:"code" form:"code" query:"code"`
	Message *string `thrift:"message,2,optional" frugal:"2,optional,string" json:"message" form:"message" query:"message"`
}

func NewEvalTargetRunError() *EvalTargetRunError {
	return &EvalTargetRunError{}
}

func (p *EvalTargetRunError) InitDefault() {
}

var EvalTargetRunError_Code_DEFAULT int32

func (p *EvalTargetRunError) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return EvalTargetRunError_Code_DEFAULT
	}
	return *p.Code
}

var EvalTargetRunError_Message_DEFAULT string

func (p *EvalTargetRunError) GetMessage() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMessage() {
		return EvalTargetRunError_Message_DEFAULT
	}
	return *p.Message
}
func (p *EvalTargetRunError) SetCode(val *int32) {
	p.Code = val
}
func (p *EvalTargetRunError) SetMessage(val *string) {
	p.Message = val
}

var fieldIDToName_EvalTargetRunError = map[int16]string{
	1: "code",
	2: "message",
}

func (p *EvalTargetRunError) IsSetCode() bool {
	return p.Code != nil
}

func (p *EvalTargetRunError) IsSetMessage() bool {
	return p.Message != nil
}

func (p *EvalTargetRunError) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvalTargetRunError[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvalTargetRunError) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *EvalTargetRunError) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Message = _field
	return nil
}

func (p *EvalTargetRunError) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EvalTargetRunError"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvalTargetRunError) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *EvalTargetRunError) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err = oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Message); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *EvalTargetRunError) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvalTargetRunError(%+v)", *p)

}

func (p *EvalTargetRunError) DeepEqual(ano *EvalTargetRunError) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Message) {
		return false
	}
	return true
}

func (p *EvalTargetRunError) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *EvalTargetRunError) Field2DeepEqual(src *string) bool {

	if p.Message == src {
		return true
	} else if p.Message == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Message, *src) != 0 {
		return false
	}
	return true
}
