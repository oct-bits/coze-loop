// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package eval_set

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/data/domain/dataset"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/domain/common"
	"strings"
)

const (
	BizCategoryFromOnlineTrace = "from_online_trace"
)

type BizCategory = string

type EvaluationSet struct {
	// 主键&外键
	ID          *int64 `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id" form:"id" query:"id"`
	AppID       *int32 `thrift:"app_id,2,optional" frugal:"2,optional,i32" form:"app_id" json:"app_id,omitempty" query:"app_id"`
	WorkspaceID *int64 `thrift:"workspace_id,3,optional" frugal:"3,optional,i64" json:"workspace_id" form:"workspace_id" query:"workspace_id"`
	// 基础信息
	Name        *string                `thrift:"name,10,optional" frugal:"10,optional,string" form:"name" json:"name,omitempty" query:"name"`
	Description *string                `thrift:"description,11,optional" frugal:"11,optional,string" form:"description" json:"description,omitempty" query:"description"`
	Status      *dataset.DatasetStatus `thrift:"status,12,optional" frugal:"12,optional,DatasetStatus" form:"status" json:"status,omitempty" query:"status"`
	// 规格限制
	Spec *dataset.DatasetSpec `thrift:"spec,13,optional" frugal:"13,optional,dataset.DatasetSpec" form:"spec" json:"spec,omitempty" query:"spec"`
	// 功能开关
	Features *dataset.DatasetFeatures `thrift:"features,14,optional" frugal:"14,optional,dataset.DatasetFeatures" form:"features" json:"features,omitempty" query:"features"`
	// 数据条数
	ItemCount *int64 `thrift:"item_count,15,optional" frugal:"15,optional,i64" json:"item_count" form:"item_count" query:"item_count"`
	// 是否有未提交的修改
	ChangeUncommitted *bool `thrift:"change_uncommitted,16,optional" frugal:"16,optional,bool" form:"change_uncommitted" json:"change_uncommitted,omitempty" query:"change_uncommitted"`
	// 业务分类
	BizCategory *BizCategory `thrift:"biz_category,17,optional" frugal:"17,optional,string" form:"biz_category" json:"biz_category,omitempty" query:"biz_category"`
	// 版本信息
	EvaluationSetVersion *EvaluationSetVersion `thrift:"evaluation_set_version,30,optional" frugal:"30,optional,EvaluationSetVersion" form:"evaluation_set_version" json:"evaluation_set_version,omitempty" query:"evaluation_set_version"`
	// 最新的版本号
	LatestVersion *string `thrift:"latest_version,31,optional" frugal:"31,optional,string" form:"latest_version" json:"latest_version,omitempty" query:"latest_version"`
	// 下一个的版本号
	NextVersionNum *int64 `thrift:"next_version_num,32,optional" frugal:"32,optional,i64" json:"next_version_num" form:"next_version_num" query:"next_version_num"`
	// 系统信息
	BaseInfo *common.BaseInfo `thrift:"base_info,100,optional" frugal:"100,optional,common.BaseInfo" form:"base_info" json:"base_info,omitempty" query:"base_info"`
}

func NewEvaluationSet() *EvaluationSet {
	return &EvaluationSet{}
}

func (p *EvaluationSet) InitDefault() {
}

var EvaluationSet_ID_DEFAULT int64

func (p *EvaluationSet) GetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetID() {
		return EvaluationSet_ID_DEFAULT
	}
	return *p.ID
}

var EvaluationSet_AppID_DEFAULT int32

func (p *EvaluationSet) GetAppID() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetAppID() {
		return EvaluationSet_AppID_DEFAULT
	}
	return *p.AppID
}

var EvaluationSet_WorkspaceID_DEFAULT int64

func (p *EvaluationSet) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return EvaluationSet_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var EvaluationSet_Name_DEFAULT string

func (p *EvaluationSet) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return EvaluationSet_Name_DEFAULT
	}
	return *p.Name
}

var EvaluationSet_Description_DEFAULT string

func (p *EvaluationSet) GetDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDescription() {
		return EvaluationSet_Description_DEFAULT
	}
	return *p.Description
}

var EvaluationSet_Status_DEFAULT dataset.DatasetStatus

func (p *EvaluationSet) GetStatus() (v dataset.DatasetStatus) {
	if p == nil {
		return
	}
	if !p.IsSetStatus() {
		return EvaluationSet_Status_DEFAULT
	}
	return *p.Status
}

var EvaluationSet_Spec_DEFAULT *dataset.DatasetSpec

func (p *EvaluationSet) GetSpec() (v *dataset.DatasetSpec) {
	if p == nil {
		return
	}
	if !p.IsSetSpec() {
		return EvaluationSet_Spec_DEFAULT
	}
	return p.Spec
}

var EvaluationSet_Features_DEFAULT *dataset.DatasetFeatures

func (p *EvaluationSet) GetFeatures() (v *dataset.DatasetFeatures) {
	if p == nil {
		return
	}
	if !p.IsSetFeatures() {
		return EvaluationSet_Features_DEFAULT
	}
	return p.Features
}

var EvaluationSet_ItemCount_DEFAULT int64

func (p *EvaluationSet) GetItemCount() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetItemCount() {
		return EvaluationSet_ItemCount_DEFAULT
	}
	return *p.ItemCount
}

var EvaluationSet_ChangeUncommitted_DEFAULT bool

func (p *EvaluationSet) GetChangeUncommitted() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetChangeUncommitted() {
		return EvaluationSet_ChangeUncommitted_DEFAULT
	}
	return *p.ChangeUncommitted
}

var EvaluationSet_BizCategory_DEFAULT BizCategory

func (p *EvaluationSet) GetBizCategory() (v BizCategory) {
	if p == nil {
		return
	}
	if !p.IsSetBizCategory() {
		return EvaluationSet_BizCategory_DEFAULT
	}
	return *p.BizCategory
}

var EvaluationSet_EvaluationSetVersion_DEFAULT *EvaluationSetVersion

func (p *EvaluationSet) GetEvaluationSetVersion() (v *EvaluationSetVersion) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluationSetVersion() {
		return EvaluationSet_EvaluationSetVersion_DEFAULT
	}
	return p.EvaluationSetVersion
}

var EvaluationSet_LatestVersion_DEFAULT string

func (p *EvaluationSet) GetLatestVersion() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetLatestVersion() {
		return EvaluationSet_LatestVersion_DEFAULT
	}
	return *p.LatestVersion
}

var EvaluationSet_NextVersionNum_DEFAULT int64

func (p *EvaluationSet) GetNextVersionNum() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetNextVersionNum() {
		return EvaluationSet_NextVersionNum_DEFAULT
	}
	return *p.NextVersionNum
}

var EvaluationSet_BaseInfo_DEFAULT *common.BaseInfo

func (p *EvaluationSet) GetBaseInfo() (v *common.BaseInfo) {
	if p == nil {
		return
	}
	if !p.IsSetBaseInfo() {
		return EvaluationSet_BaseInfo_DEFAULT
	}
	return p.BaseInfo
}
func (p *EvaluationSet) SetID(val *int64) {
	p.ID = val
}
func (p *EvaluationSet) SetAppID(val *int32) {
	p.AppID = val
}
func (p *EvaluationSet) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *EvaluationSet) SetName(val *string) {
	p.Name = val
}
func (p *EvaluationSet) SetDescription(val *string) {
	p.Description = val
}
func (p *EvaluationSet) SetStatus(val *dataset.DatasetStatus) {
	p.Status = val
}
func (p *EvaluationSet) SetSpec(val *dataset.DatasetSpec) {
	p.Spec = val
}
func (p *EvaluationSet) SetFeatures(val *dataset.DatasetFeatures) {
	p.Features = val
}
func (p *EvaluationSet) SetItemCount(val *int64) {
	p.ItemCount = val
}
func (p *EvaluationSet) SetChangeUncommitted(val *bool) {
	p.ChangeUncommitted = val
}
func (p *EvaluationSet) SetBizCategory(val *BizCategory) {
	p.BizCategory = val
}
func (p *EvaluationSet) SetEvaluationSetVersion(val *EvaluationSetVersion) {
	p.EvaluationSetVersion = val
}
func (p *EvaluationSet) SetLatestVersion(val *string) {
	p.LatestVersion = val
}
func (p *EvaluationSet) SetNextVersionNum(val *int64) {
	p.NextVersionNum = val
}
func (p *EvaluationSet) SetBaseInfo(val *common.BaseInfo) {
	p.BaseInfo = val
}

var fieldIDToName_EvaluationSet = map[int16]string{
	1:   "id",
	2:   "app_id",
	3:   "workspace_id",
	10:  "name",
	11:  "description",
	12:  "status",
	13:  "spec",
	14:  "features",
	15:  "item_count",
	16:  "change_uncommitted",
	17:  "biz_category",
	30:  "evaluation_set_version",
	31:  "latest_version",
	32:  "next_version_num",
	100: "base_info",
}

func (p *EvaluationSet) IsSetID() bool {
	return p.ID != nil
}

func (p *EvaluationSet) IsSetAppID() bool {
	return p.AppID != nil
}

func (p *EvaluationSet) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *EvaluationSet) IsSetName() bool {
	return p.Name != nil
}

func (p *EvaluationSet) IsSetDescription() bool {
	return p.Description != nil
}

func (p *EvaluationSet) IsSetStatus() bool {
	return p.Status != nil
}

func (p *EvaluationSet) IsSetSpec() bool {
	return p.Spec != nil
}

func (p *EvaluationSet) IsSetFeatures() bool {
	return p.Features != nil
}

func (p *EvaluationSet) IsSetItemCount() bool {
	return p.ItemCount != nil
}

func (p *EvaluationSet) IsSetChangeUncommitted() bool {
	return p.ChangeUncommitted != nil
}

func (p *EvaluationSet) IsSetBizCategory() bool {
	return p.BizCategory != nil
}

func (p *EvaluationSet) IsSetEvaluationSetVersion() bool {
	return p.EvaluationSetVersion != nil
}

func (p *EvaluationSet) IsSetLatestVersion() bool {
	return p.LatestVersion != nil
}

func (p *EvaluationSet) IsSetNextVersionNum() bool {
	return p.NextVersionNum != nil
}

func (p *EvaluationSet) IsSetBaseInfo() bool {
	return p.BaseInfo != nil
}

func (p *EvaluationSet) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 30:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField30(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 31:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField31(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 32:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField32(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationSet[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationSet) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ID = _field
	return nil
}
func (p *EvaluationSet) ReadField2(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AppID = _field
	return nil
}
func (p *EvaluationSet) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *EvaluationSet) ReadField10(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *EvaluationSet) ReadField11(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}
func (p *EvaluationSet) ReadField12(iprot thrift.TProtocol) error {

	var _field *dataset.DatasetStatus
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := dataset.DatasetStatus(v)
		_field = &tmp
	}
	p.Status = _field
	return nil
}
func (p *EvaluationSet) ReadField13(iprot thrift.TProtocol) error {
	_field := dataset.NewDatasetSpec()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Spec = _field
	return nil
}
func (p *EvaluationSet) ReadField14(iprot thrift.TProtocol) error {
	_field := dataset.NewDatasetFeatures()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Features = _field
	return nil
}
func (p *EvaluationSet) ReadField15(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ItemCount = _field
	return nil
}
func (p *EvaluationSet) ReadField16(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ChangeUncommitted = _field
	return nil
}
func (p *EvaluationSet) ReadField17(iprot thrift.TProtocol) error {

	var _field *BizCategory
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BizCategory = _field
	return nil
}
func (p *EvaluationSet) ReadField30(iprot thrift.TProtocol) error {
	_field := NewEvaluationSetVersion()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvaluationSetVersion = _field
	return nil
}
func (p *EvaluationSet) ReadField31(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LatestVersion = _field
	return nil
}
func (p *EvaluationSet) ReadField32(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NextVersionNum = _field
	return nil
}
func (p *EvaluationSet) ReadField100(iprot thrift.TProtocol) error {
	_field := common.NewBaseInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseInfo = _field
	return nil
}

func (p *EvaluationSet) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EvaluationSet"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField30(oprot); err != nil {
			fieldId = 30
			goto WriteFieldError
		}
		if err = p.writeField31(oprot); err != nil {
			fieldId = 31
			goto WriteFieldError
		}
		if err = p.writeField32(oprot); err != nil {
			fieldId = 32
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationSet) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *EvaluationSet) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppID() {
		if err = oprot.WriteFieldBegin("app_id", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.AppID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *EvaluationSet) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *EvaluationSet) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}
func (p *EvaluationSet) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}
func (p *EvaluationSet) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.I32, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Status)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}
func (p *EvaluationSet) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetSpec() {
		if err = oprot.WriteFieldBegin("spec", thrift.STRUCT, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Spec.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}
func (p *EvaluationSet) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetFeatures() {
		if err = oprot.WriteFieldBegin("features", thrift.STRUCT, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Features.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}
func (p *EvaluationSet) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetItemCount() {
		if err = oprot.WriteFieldBegin("item_count", thrift.I64, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ItemCount); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}
func (p *EvaluationSet) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetChangeUncommitted() {
		if err = oprot.WriteFieldBegin("change_uncommitted", thrift.BOOL, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.ChangeUncommitted); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}
func (p *EvaluationSet) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetBizCategory() {
		if err = oprot.WriteFieldBegin("biz_category", thrift.STRING, 17); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.BizCategory); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}
func (p *EvaluationSet) writeField30(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluationSetVersion() {
		if err = oprot.WriteFieldBegin("evaluation_set_version", thrift.STRUCT, 30); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.EvaluationSetVersion.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 30 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 30 end error: ", p), err)
}
func (p *EvaluationSet) writeField31(oprot thrift.TProtocol) (err error) {
	if p.IsSetLatestVersion() {
		if err = oprot.WriteFieldBegin("latest_version", thrift.STRING, 31); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.LatestVersion); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 31 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 31 end error: ", p), err)
}
func (p *EvaluationSet) writeField32(oprot thrift.TProtocol) (err error) {
	if p.IsSetNextVersionNum() {
		if err = oprot.WriteFieldBegin("next_version_num", thrift.I64, 32); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.NextVersionNum); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 32 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 32 end error: ", p), err)
}
func (p *EvaluationSet) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseInfo() {
		if err = oprot.WriteFieldBegin("base_info", thrift.STRUCT, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseInfo.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}

func (p *EvaluationSet) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationSet(%+v)", *p)

}

func (p *EvaluationSet) DeepEqual(ano *EvaluationSet) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field2DeepEqual(ano.AppID) {
		return false
	}
	if !p.Field3DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field10DeepEqual(ano.Name) {
		return false
	}
	if !p.Field11DeepEqual(ano.Description) {
		return false
	}
	if !p.Field12DeepEqual(ano.Status) {
		return false
	}
	if !p.Field13DeepEqual(ano.Spec) {
		return false
	}
	if !p.Field14DeepEqual(ano.Features) {
		return false
	}
	if !p.Field15DeepEqual(ano.ItemCount) {
		return false
	}
	if !p.Field16DeepEqual(ano.ChangeUncommitted) {
		return false
	}
	if !p.Field17DeepEqual(ano.BizCategory) {
		return false
	}
	if !p.Field30DeepEqual(ano.EvaluationSetVersion) {
		return false
	}
	if !p.Field31DeepEqual(ano.LatestVersion) {
		return false
	}
	if !p.Field32DeepEqual(ano.NextVersionNum) {
		return false
	}
	if !p.Field100DeepEqual(ano.BaseInfo) {
		return false
	}
	return true
}

func (p *EvaluationSet) Field1DeepEqual(src *int64) bool {

	if p.ID == src {
		return true
	} else if p.ID == nil || src == nil {
		return false
	}
	if *p.ID != *src {
		return false
	}
	return true
}
func (p *EvaluationSet) Field2DeepEqual(src *int32) bool {

	if p.AppID == src {
		return true
	} else if p.AppID == nil || src == nil {
		return false
	}
	if *p.AppID != *src {
		return false
	}
	return true
}
func (p *EvaluationSet) Field3DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *EvaluationSet) Field10DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *EvaluationSet) Field11DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *EvaluationSet) Field12DeepEqual(src *dataset.DatasetStatus) bool {

	if p.Status == src {
		return true
	} else if p.Status == nil || src == nil {
		return false
	}
	if *p.Status != *src {
		return false
	}
	return true
}
func (p *EvaluationSet) Field13DeepEqual(src *dataset.DatasetSpec) bool {

	if !p.Spec.DeepEqual(src) {
		return false
	}
	return true
}
func (p *EvaluationSet) Field14DeepEqual(src *dataset.DatasetFeatures) bool {

	if !p.Features.DeepEqual(src) {
		return false
	}
	return true
}
func (p *EvaluationSet) Field15DeepEqual(src *int64) bool {

	if p.ItemCount == src {
		return true
	} else if p.ItemCount == nil || src == nil {
		return false
	}
	if *p.ItemCount != *src {
		return false
	}
	return true
}
func (p *EvaluationSet) Field16DeepEqual(src *bool) bool {

	if p.ChangeUncommitted == src {
		return true
	} else if p.ChangeUncommitted == nil || src == nil {
		return false
	}
	if *p.ChangeUncommitted != *src {
		return false
	}
	return true
}
func (p *EvaluationSet) Field17DeepEqual(src *BizCategory) bool {

	if p.BizCategory == src {
		return true
	} else if p.BizCategory == nil || src == nil {
		return false
	}
	if strings.Compare(*p.BizCategory, *src) != 0 {
		return false
	}
	return true
}
func (p *EvaluationSet) Field30DeepEqual(src *EvaluationSetVersion) bool {

	if !p.EvaluationSetVersion.DeepEqual(src) {
		return false
	}
	return true
}
func (p *EvaluationSet) Field31DeepEqual(src *string) bool {

	if p.LatestVersion == src {
		return true
	} else if p.LatestVersion == nil || src == nil {
		return false
	}
	if strings.Compare(*p.LatestVersion, *src) != 0 {
		return false
	}
	return true
}
func (p *EvaluationSet) Field32DeepEqual(src *int64) bool {

	if p.NextVersionNum == src {
		return true
	} else if p.NextVersionNum == nil || src == nil {
		return false
	}
	if *p.NextVersionNum != *src {
		return false
	}
	return true
}
func (p *EvaluationSet) Field100DeepEqual(src *common.BaseInfo) bool {

	if !p.BaseInfo.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluationSetVersion struct {
	// 主键&外键
	ID              *int64 `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id" form:"id" query:"id"`
	AppID           *int32 `thrift:"app_id,2,optional" frugal:"2,optional,i32" form:"app_id" json:"app_id,omitempty" query:"app_id"`
	WorkspaceID     *int64 `thrift:"workspace_id,3,optional" frugal:"3,optional,i64" json:"workspace_id" form:"workspace_id" query:"workspace_id"`
	EvaluationSetID *int64 `thrift:"evaluation_set_id,4,optional" frugal:"4,optional,i64" json:"evaluation_set_id" form:"evaluation_set_id" query:"evaluation_set_id"`
	// 版本信息
	Version *string `thrift:"version,10,optional" frugal:"10,optional,string" form:"version" json:"version,omitempty" query:"version"`
	// 后端记录的数字版本号，从 1 开始递增
	VersionNum *int64 `thrift:"version_num,11,optional" frugal:"11,optional,i64" json:"version_num" form:"version_num" query:"version_num"`
	// 版本描述
	Description *string `thrift:"description,12,optional" frugal:"12,optional,string" form:"description" json:"description,omitempty" query:"description"`
	// schema
	EvaluationSetSchema *EvaluationSetSchema `thrift:"evaluation_set_schema,13,optional" frugal:"13,optional,EvaluationSetSchema" form:"evaluation_set_schema" json:"evaluation_set_schema,omitempty" query:"evaluation_set_schema"`
	// 数据条数
	ItemCount *int64 `thrift:"item_count,14,optional" frugal:"14,optional,i64" json:"item_count" form:"item_count" query:"item_count"`
	// 系统信息
	BaseInfo *common.BaseInfo `thrift:"base_info,100,optional" frugal:"100,optional,common.BaseInfo" json:"base_info" form:"base_info" query:"base_info"`
}

func NewEvaluationSetVersion() *EvaluationSetVersion {
	return &EvaluationSetVersion{}
}

func (p *EvaluationSetVersion) InitDefault() {
}

var EvaluationSetVersion_ID_DEFAULT int64

func (p *EvaluationSetVersion) GetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetID() {
		return EvaluationSetVersion_ID_DEFAULT
	}
	return *p.ID
}

var EvaluationSetVersion_AppID_DEFAULT int32

func (p *EvaluationSetVersion) GetAppID() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetAppID() {
		return EvaluationSetVersion_AppID_DEFAULT
	}
	return *p.AppID
}

var EvaluationSetVersion_WorkspaceID_DEFAULT int64

func (p *EvaluationSetVersion) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return EvaluationSetVersion_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var EvaluationSetVersion_EvaluationSetID_DEFAULT int64

func (p *EvaluationSetVersion) GetEvaluationSetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluationSetID() {
		return EvaluationSetVersion_EvaluationSetID_DEFAULT
	}
	return *p.EvaluationSetID
}

var EvaluationSetVersion_Version_DEFAULT string

func (p *EvaluationSetVersion) GetVersion() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetVersion() {
		return EvaluationSetVersion_Version_DEFAULT
	}
	return *p.Version
}

var EvaluationSetVersion_VersionNum_DEFAULT int64

func (p *EvaluationSetVersion) GetVersionNum() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetVersionNum() {
		return EvaluationSetVersion_VersionNum_DEFAULT
	}
	return *p.VersionNum
}

var EvaluationSetVersion_Description_DEFAULT string

func (p *EvaluationSetVersion) GetDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDescription() {
		return EvaluationSetVersion_Description_DEFAULT
	}
	return *p.Description
}

var EvaluationSetVersion_EvaluationSetSchema_DEFAULT *EvaluationSetSchema

func (p *EvaluationSetVersion) GetEvaluationSetSchema() (v *EvaluationSetSchema) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluationSetSchema() {
		return EvaluationSetVersion_EvaluationSetSchema_DEFAULT
	}
	return p.EvaluationSetSchema
}

var EvaluationSetVersion_ItemCount_DEFAULT int64

func (p *EvaluationSetVersion) GetItemCount() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetItemCount() {
		return EvaluationSetVersion_ItemCount_DEFAULT
	}
	return *p.ItemCount
}

var EvaluationSetVersion_BaseInfo_DEFAULT *common.BaseInfo

func (p *EvaluationSetVersion) GetBaseInfo() (v *common.BaseInfo) {
	if p == nil {
		return
	}
	if !p.IsSetBaseInfo() {
		return EvaluationSetVersion_BaseInfo_DEFAULT
	}
	return p.BaseInfo
}
func (p *EvaluationSetVersion) SetID(val *int64) {
	p.ID = val
}
func (p *EvaluationSetVersion) SetAppID(val *int32) {
	p.AppID = val
}
func (p *EvaluationSetVersion) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *EvaluationSetVersion) SetEvaluationSetID(val *int64) {
	p.EvaluationSetID = val
}
func (p *EvaluationSetVersion) SetVersion(val *string) {
	p.Version = val
}
func (p *EvaluationSetVersion) SetVersionNum(val *int64) {
	p.VersionNum = val
}
func (p *EvaluationSetVersion) SetDescription(val *string) {
	p.Description = val
}
func (p *EvaluationSetVersion) SetEvaluationSetSchema(val *EvaluationSetSchema) {
	p.EvaluationSetSchema = val
}
func (p *EvaluationSetVersion) SetItemCount(val *int64) {
	p.ItemCount = val
}
func (p *EvaluationSetVersion) SetBaseInfo(val *common.BaseInfo) {
	p.BaseInfo = val
}

var fieldIDToName_EvaluationSetVersion = map[int16]string{
	1:   "id",
	2:   "app_id",
	3:   "workspace_id",
	4:   "evaluation_set_id",
	10:  "version",
	11:  "version_num",
	12:  "description",
	13:  "evaluation_set_schema",
	14:  "item_count",
	100: "base_info",
}

func (p *EvaluationSetVersion) IsSetID() bool {
	return p.ID != nil
}

func (p *EvaluationSetVersion) IsSetAppID() bool {
	return p.AppID != nil
}

func (p *EvaluationSetVersion) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *EvaluationSetVersion) IsSetEvaluationSetID() bool {
	return p.EvaluationSetID != nil
}

func (p *EvaluationSetVersion) IsSetVersion() bool {
	return p.Version != nil
}

func (p *EvaluationSetVersion) IsSetVersionNum() bool {
	return p.VersionNum != nil
}

func (p *EvaluationSetVersion) IsSetDescription() bool {
	return p.Description != nil
}

func (p *EvaluationSetVersion) IsSetEvaluationSetSchema() bool {
	return p.EvaluationSetSchema != nil
}

func (p *EvaluationSetVersion) IsSetItemCount() bool {
	return p.ItemCount != nil
}

func (p *EvaluationSetVersion) IsSetBaseInfo() bool {
	return p.BaseInfo != nil
}

func (p *EvaluationSetVersion) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationSetVersion[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationSetVersion) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ID = _field
	return nil
}
func (p *EvaluationSetVersion) ReadField2(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AppID = _field
	return nil
}
func (p *EvaluationSetVersion) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *EvaluationSetVersion) ReadField4(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvaluationSetID = _field
	return nil
}
func (p *EvaluationSetVersion) ReadField10(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Version = _field
	return nil
}
func (p *EvaluationSetVersion) ReadField11(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.VersionNum = _field
	return nil
}
func (p *EvaluationSetVersion) ReadField12(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}
func (p *EvaluationSetVersion) ReadField13(iprot thrift.TProtocol) error {
	_field := NewEvaluationSetSchema()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvaluationSetSchema = _field
	return nil
}
func (p *EvaluationSetVersion) ReadField14(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ItemCount = _field
	return nil
}
func (p *EvaluationSetVersion) ReadField100(iprot thrift.TProtocol) error {
	_field := common.NewBaseInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseInfo = _field
	return nil
}

func (p *EvaluationSetVersion) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EvaluationSetVersion"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationSetVersion) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *EvaluationSetVersion) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppID() {
		if err = oprot.WriteFieldBegin("app_id", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.AppID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *EvaluationSetVersion) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *EvaluationSetVersion) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluationSetID() {
		if err = oprot.WriteFieldBegin("evaluation_set_id", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.EvaluationSetID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *EvaluationSetVersion) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err = oprot.WriteFieldBegin("version", thrift.STRING, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Version); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}
func (p *EvaluationSetVersion) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersionNum() {
		if err = oprot.WriteFieldBegin("version_num", thrift.I64, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.VersionNum); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}
func (p *EvaluationSetVersion) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}
func (p *EvaluationSetVersion) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluationSetSchema() {
		if err = oprot.WriteFieldBegin("evaluation_set_schema", thrift.STRUCT, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.EvaluationSetSchema.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}
func (p *EvaluationSetVersion) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetItemCount() {
		if err = oprot.WriteFieldBegin("item_count", thrift.I64, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ItemCount); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}
func (p *EvaluationSetVersion) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseInfo() {
		if err = oprot.WriteFieldBegin("base_info", thrift.STRUCT, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseInfo.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}

func (p *EvaluationSetVersion) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationSetVersion(%+v)", *p)

}

func (p *EvaluationSetVersion) DeepEqual(ano *EvaluationSetVersion) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field2DeepEqual(ano.AppID) {
		return false
	}
	if !p.Field3DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field4DeepEqual(ano.EvaluationSetID) {
		return false
	}
	if !p.Field10DeepEqual(ano.Version) {
		return false
	}
	if !p.Field11DeepEqual(ano.VersionNum) {
		return false
	}
	if !p.Field12DeepEqual(ano.Description) {
		return false
	}
	if !p.Field13DeepEqual(ano.EvaluationSetSchema) {
		return false
	}
	if !p.Field14DeepEqual(ano.ItemCount) {
		return false
	}
	if !p.Field100DeepEqual(ano.BaseInfo) {
		return false
	}
	return true
}

func (p *EvaluationSetVersion) Field1DeepEqual(src *int64) bool {

	if p.ID == src {
		return true
	} else if p.ID == nil || src == nil {
		return false
	}
	if *p.ID != *src {
		return false
	}
	return true
}
func (p *EvaluationSetVersion) Field2DeepEqual(src *int32) bool {

	if p.AppID == src {
		return true
	} else if p.AppID == nil || src == nil {
		return false
	}
	if *p.AppID != *src {
		return false
	}
	return true
}
func (p *EvaluationSetVersion) Field3DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *EvaluationSetVersion) Field4DeepEqual(src *int64) bool {

	if p.EvaluationSetID == src {
		return true
	} else if p.EvaluationSetID == nil || src == nil {
		return false
	}
	if *p.EvaluationSetID != *src {
		return false
	}
	return true
}
func (p *EvaluationSetVersion) Field10DeepEqual(src *string) bool {

	if p.Version == src {
		return true
	} else if p.Version == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Version, *src) != 0 {
		return false
	}
	return true
}
func (p *EvaluationSetVersion) Field11DeepEqual(src *int64) bool {

	if p.VersionNum == src {
		return true
	} else if p.VersionNum == nil || src == nil {
		return false
	}
	if *p.VersionNum != *src {
		return false
	}
	return true
}
func (p *EvaluationSetVersion) Field12DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *EvaluationSetVersion) Field13DeepEqual(src *EvaluationSetSchema) bool {

	if !p.EvaluationSetSchema.DeepEqual(src) {
		return false
	}
	return true
}
func (p *EvaluationSetVersion) Field14DeepEqual(src *int64) bool {

	if p.ItemCount == src {
		return true
	} else if p.ItemCount == nil || src == nil {
		return false
	}
	if *p.ItemCount != *src {
		return false
	}
	return true
}
func (p *EvaluationSetVersion) Field100DeepEqual(src *common.BaseInfo) bool {

	if !p.BaseInfo.DeepEqual(src) {
		return false
	}
	return true
}

// EvaluationSetSchema 评测集 Schema，包含字段的类型限制等信息
type EvaluationSetSchema struct {
	// 主键&外键
	ID              *int64 `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id" form:"id" query:"id"`
	AppID           *int32 `thrift:"app_id,2,optional" frugal:"2,optional,i32" form:"app_id" json:"app_id,omitempty" query:"app_id"`
	WorkspaceID     *int64 `thrift:"workspace_id,3,optional" frugal:"3,optional,i64" json:"workspace_id" form:"workspace_id" query:"workspace_id"`
	EvaluationSetID *int64 `thrift:"evaluation_set_id,4,optional" frugal:"4,optional,i64" json:"evaluation_set_id" form:"evaluation_set_id" query:"evaluation_set_id"`
	// 数据集字段约束
	FieldSchemas []*FieldSchema `thrift:"field_schemas,10,optional" frugal:"10,optional,list<FieldSchema>" form:"field_schemas" json:"field_schemas,omitempty" query:"field_schemas"`
	// 系统信息
	BaseInfo *common.BaseInfo `thrift:"base_info,100,optional" frugal:"100,optional,common.BaseInfo" form:"base_info" json:"base_info,omitempty" query:"base_info"`
}

func NewEvaluationSetSchema() *EvaluationSetSchema {
	return &EvaluationSetSchema{}
}

func (p *EvaluationSetSchema) InitDefault() {
}

var EvaluationSetSchema_ID_DEFAULT int64

func (p *EvaluationSetSchema) GetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetID() {
		return EvaluationSetSchema_ID_DEFAULT
	}
	return *p.ID
}

var EvaluationSetSchema_AppID_DEFAULT int32

func (p *EvaluationSetSchema) GetAppID() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetAppID() {
		return EvaluationSetSchema_AppID_DEFAULT
	}
	return *p.AppID
}

var EvaluationSetSchema_WorkspaceID_DEFAULT int64

func (p *EvaluationSetSchema) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return EvaluationSetSchema_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var EvaluationSetSchema_EvaluationSetID_DEFAULT int64

func (p *EvaluationSetSchema) GetEvaluationSetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluationSetID() {
		return EvaluationSetSchema_EvaluationSetID_DEFAULT
	}
	return *p.EvaluationSetID
}

var EvaluationSetSchema_FieldSchemas_DEFAULT []*FieldSchema

func (p *EvaluationSetSchema) GetFieldSchemas() (v []*FieldSchema) {
	if p == nil {
		return
	}
	if !p.IsSetFieldSchemas() {
		return EvaluationSetSchema_FieldSchemas_DEFAULT
	}
	return p.FieldSchemas
}

var EvaluationSetSchema_BaseInfo_DEFAULT *common.BaseInfo

func (p *EvaluationSetSchema) GetBaseInfo() (v *common.BaseInfo) {
	if p == nil {
		return
	}
	if !p.IsSetBaseInfo() {
		return EvaluationSetSchema_BaseInfo_DEFAULT
	}
	return p.BaseInfo
}
func (p *EvaluationSetSchema) SetID(val *int64) {
	p.ID = val
}
func (p *EvaluationSetSchema) SetAppID(val *int32) {
	p.AppID = val
}
func (p *EvaluationSetSchema) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *EvaluationSetSchema) SetEvaluationSetID(val *int64) {
	p.EvaluationSetID = val
}
func (p *EvaluationSetSchema) SetFieldSchemas(val []*FieldSchema) {
	p.FieldSchemas = val
}
func (p *EvaluationSetSchema) SetBaseInfo(val *common.BaseInfo) {
	p.BaseInfo = val
}

var fieldIDToName_EvaluationSetSchema = map[int16]string{
	1:   "id",
	2:   "app_id",
	3:   "workspace_id",
	4:   "evaluation_set_id",
	10:  "field_schemas",
	100: "base_info",
}

func (p *EvaluationSetSchema) IsSetID() bool {
	return p.ID != nil
}

func (p *EvaluationSetSchema) IsSetAppID() bool {
	return p.AppID != nil
}

func (p *EvaluationSetSchema) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *EvaluationSetSchema) IsSetEvaluationSetID() bool {
	return p.EvaluationSetID != nil
}

func (p *EvaluationSetSchema) IsSetFieldSchemas() bool {
	return p.FieldSchemas != nil
}

func (p *EvaluationSetSchema) IsSetBaseInfo() bool {
	return p.BaseInfo != nil
}

func (p *EvaluationSetSchema) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationSetSchema[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationSetSchema) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ID = _field
	return nil
}
func (p *EvaluationSetSchema) ReadField2(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AppID = _field
	return nil
}
func (p *EvaluationSetSchema) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *EvaluationSetSchema) ReadField4(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvaluationSetID = _field
	return nil
}
func (p *EvaluationSetSchema) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*FieldSchema, 0, size)
	values := make([]FieldSchema, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.FieldSchemas = _field
	return nil
}
func (p *EvaluationSetSchema) ReadField100(iprot thrift.TProtocol) error {
	_field := common.NewBaseInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseInfo = _field
	return nil
}

func (p *EvaluationSetSchema) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EvaluationSetSchema"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationSetSchema) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *EvaluationSetSchema) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppID() {
		if err = oprot.WriteFieldBegin("app_id", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.AppID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *EvaluationSetSchema) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *EvaluationSetSchema) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluationSetID() {
		if err = oprot.WriteFieldBegin("evaluation_set_id", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.EvaluationSetID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *EvaluationSetSchema) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetFieldSchemas() {
		if err = oprot.WriteFieldBegin("field_schemas", thrift.LIST, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.FieldSchemas)); err != nil {
			return err
		}
		for _, v := range p.FieldSchemas {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}
func (p *EvaluationSetSchema) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseInfo() {
		if err = oprot.WriteFieldBegin("base_info", thrift.STRUCT, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseInfo.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}

func (p *EvaluationSetSchema) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationSetSchema(%+v)", *p)

}

func (p *EvaluationSetSchema) DeepEqual(ano *EvaluationSetSchema) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field2DeepEqual(ano.AppID) {
		return false
	}
	if !p.Field3DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field4DeepEqual(ano.EvaluationSetID) {
		return false
	}
	if !p.Field10DeepEqual(ano.FieldSchemas) {
		return false
	}
	if !p.Field100DeepEqual(ano.BaseInfo) {
		return false
	}
	return true
}

func (p *EvaluationSetSchema) Field1DeepEqual(src *int64) bool {

	if p.ID == src {
		return true
	} else if p.ID == nil || src == nil {
		return false
	}
	if *p.ID != *src {
		return false
	}
	return true
}
func (p *EvaluationSetSchema) Field2DeepEqual(src *int32) bool {

	if p.AppID == src {
		return true
	} else if p.AppID == nil || src == nil {
		return false
	}
	if *p.AppID != *src {
		return false
	}
	return true
}
func (p *EvaluationSetSchema) Field3DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *EvaluationSetSchema) Field4DeepEqual(src *int64) bool {

	if p.EvaluationSetID == src {
		return true
	} else if p.EvaluationSetID == nil || src == nil {
		return false
	}
	if *p.EvaluationSetID != *src {
		return false
	}
	return true
}
func (p *EvaluationSetSchema) Field10DeepEqual(src []*FieldSchema) bool {

	if len(p.FieldSchemas) != len(src) {
		return false
	}
	for i, v := range p.FieldSchemas {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *EvaluationSetSchema) Field100DeepEqual(src *common.BaseInfo) bool {

	if !p.BaseInfo.DeepEqual(src) {
		return false
	}
	return true
}

type FieldSchema struct {
	// 唯一键
	Key *string `thrift:"key,1,optional" frugal:"1,optional,string" form:"key" json:"key,omitempty" query:"key"`
	// 展示名称
	Name *string `thrift:"name,2,optional" frugal:"2,optional,string" form:"name" json:"name,omitempty" query:"name"`
	// 描述
	Description *string `thrift:"description,3,optional" frugal:"3,optional,string" form:"description" json:"description,omitempty" query:"description"`
	// 类型，如 文本，图片，etc.
	ContentType *common.ContentType `thrift:"content_type,4,optional" frugal:"4,optional,string" form:"content_type" json:"content_type,omitempty" query:"content_type"`
	// 默认渲染格式，如 code, json, etc.mai
	DefaultDisplayFormat *dataset.FieldDisplayFormat `thrift:"default_display_format,5,optional" frugal:"5,optional,FieldDisplayFormat" form:"default_display_format" json:"default_display_format,omitempty" query:"default_display_format"`
	// 当前列的状态
	Status *dataset.FieldStatus `thrift:"status,6,optional" frugal:"6,optional,FieldStatus" form:"status" json:"status,omitempty" query:"status"`
	// 是否必填
	IsRequired *bool `thrift:"isRequired,7,optional" frugal:"7,optional,bool" form:"isRequired" json:"isRequired,omitempty" query:"isRequired"`
	// [20,50) 内容格式限制相关
	TextSchema *string `thrift:"text_schema,20,optional" frugal:"20,optional,string" form:"text_schema" json:"text_schema,omitempty" query:"text_schema"`
	// 多模态规格限制
	MultiModelSpec *dataset.MultiModalSpec `thrift:"multi_model_spec,21,optional" frugal:"21,optional,dataset.MultiModalSpec" form:"multi_model_spec" json:"multi_model_spec,omitempty" query:"multi_model_spec"`
	// 用户是否不可见
	Hidden *bool `thrift:"hidden,50,optional" frugal:"50,optional,bool" form:"hidden" json:"hidden,omitempty" query:"hidden"`
	// 默认的预置转换配置，目前在数据校验后执行
	DefaultTransformations []*dataset.FieldTransformationConfig `thrift:"default_transformations,55,optional" frugal:"55,optional,list<dataset.FieldTransformationConfig>" form:"default_transformations" json:"default_transformations,omitempty" query:"default_transformations"`
}

func NewFieldSchema() *FieldSchema {
	return &FieldSchema{}
}

func (p *FieldSchema) InitDefault() {
}

var FieldSchema_Key_DEFAULT string

func (p *FieldSchema) GetKey() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetKey() {
		return FieldSchema_Key_DEFAULT
	}
	return *p.Key
}

var FieldSchema_Name_DEFAULT string

func (p *FieldSchema) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return FieldSchema_Name_DEFAULT
	}
	return *p.Name
}

var FieldSchema_Description_DEFAULT string

func (p *FieldSchema) GetDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDescription() {
		return FieldSchema_Description_DEFAULT
	}
	return *p.Description
}

var FieldSchema_ContentType_DEFAULT common.ContentType

func (p *FieldSchema) GetContentType() (v common.ContentType) {
	if p == nil {
		return
	}
	if !p.IsSetContentType() {
		return FieldSchema_ContentType_DEFAULT
	}
	return *p.ContentType
}

var FieldSchema_DefaultDisplayFormat_DEFAULT dataset.FieldDisplayFormat

func (p *FieldSchema) GetDefaultDisplayFormat() (v dataset.FieldDisplayFormat) {
	if p == nil {
		return
	}
	if !p.IsSetDefaultDisplayFormat() {
		return FieldSchema_DefaultDisplayFormat_DEFAULT
	}
	return *p.DefaultDisplayFormat
}

var FieldSchema_Status_DEFAULT dataset.FieldStatus

func (p *FieldSchema) GetStatus() (v dataset.FieldStatus) {
	if p == nil {
		return
	}
	if !p.IsSetStatus() {
		return FieldSchema_Status_DEFAULT
	}
	return *p.Status
}

var FieldSchema_IsRequired_DEFAULT bool

func (p *FieldSchema) GetIsRequired() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetIsRequired() {
		return FieldSchema_IsRequired_DEFAULT
	}
	return *p.IsRequired
}

var FieldSchema_TextSchema_DEFAULT string

func (p *FieldSchema) GetTextSchema() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetTextSchema() {
		return FieldSchema_TextSchema_DEFAULT
	}
	return *p.TextSchema
}

var FieldSchema_MultiModelSpec_DEFAULT *dataset.MultiModalSpec

func (p *FieldSchema) GetMultiModelSpec() (v *dataset.MultiModalSpec) {
	if p == nil {
		return
	}
	if !p.IsSetMultiModelSpec() {
		return FieldSchema_MultiModelSpec_DEFAULT
	}
	return p.MultiModelSpec
}

var FieldSchema_Hidden_DEFAULT bool

func (p *FieldSchema) GetHidden() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetHidden() {
		return FieldSchema_Hidden_DEFAULT
	}
	return *p.Hidden
}

var FieldSchema_DefaultTransformations_DEFAULT []*dataset.FieldTransformationConfig

func (p *FieldSchema) GetDefaultTransformations() (v []*dataset.FieldTransformationConfig) {
	if p == nil {
		return
	}
	if !p.IsSetDefaultTransformations() {
		return FieldSchema_DefaultTransformations_DEFAULT
	}
	return p.DefaultTransformations
}
func (p *FieldSchema) SetKey(val *string) {
	p.Key = val
}
func (p *FieldSchema) SetName(val *string) {
	p.Name = val
}
func (p *FieldSchema) SetDescription(val *string) {
	p.Description = val
}
func (p *FieldSchema) SetContentType(val *common.ContentType) {
	p.ContentType = val
}
func (p *FieldSchema) SetDefaultDisplayFormat(val *dataset.FieldDisplayFormat) {
	p.DefaultDisplayFormat = val
}
func (p *FieldSchema) SetStatus(val *dataset.FieldStatus) {
	p.Status = val
}
func (p *FieldSchema) SetIsRequired(val *bool) {
	p.IsRequired = val
}
func (p *FieldSchema) SetTextSchema(val *string) {
	p.TextSchema = val
}
func (p *FieldSchema) SetMultiModelSpec(val *dataset.MultiModalSpec) {
	p.MultiModelSpec = val
}
func (p *FieldSchema) SetHidden(val *bool) {
	p.Hidden = val
}
func (p *FieldSchema) SetDefaultTransformations(val []*dataset.FieldTransformationConfig) {
	p.DefaultTransformations = val
}

var fieldIDToName_FieldSchema = map[int16]string{
	1:  "key",
	2:  "name",
	3:  "description",
	4:  "content_type",
	5:  "default_display_format",
	6:  "status",
	7:  "isRequired",
	20: "text_schema",
	21: "multi_model_spec",
	50: "hidden",
	55: "default_transformations",
}

func (p *FieldSchema) IsSetKey() bool {
	return p.Key != nil
}

func (p *FieldSchema) IsSetName() bool {
	return p.Name != nil
}

func (p *FieldSchema) IsSetDescription() bool {
	return p.Description != nil
}

func (p *FieldSchema) IsSetContentType() bool {
	return p.ContentType != nil
}

func (p *FieldSchema) IsSetDefaultDisplayFormat() bool {
	return p.DefaultDisplayFormat != nil
}

func (p *FieldSchema) IsSetStatus() bool {
	return p.Status != nil
}

func (p *FieldSchema) IsSetIsRequired() bool {
	return p.IsRequired != nil
}

func (p *FieldSchema) IsSetTextSchema() bool {
	return p.TextSchema != nil
}

func (p *FieldSchema) IsSetMultiModelSpec() bool {
	return p.MultiModelSpec != nil
}

func (p *FieldSchema) IsSetHidden() bool {
	return p.Hidden != nil
}

func (p *FieldSchema) IsSetDefaultTransformations() bool {
	return p.DefaultTransformations != nil
}

func (p *FieldSchema) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 50:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField50(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 55:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField55(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FieldSchema[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FieldSchema) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Key = _field
	return nil
}
func (p *FieldSchema) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *FieldSchema) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}
func (p *FieldSchema) ReadField4(iprot thrift.TProtocol) error {

	var _field *common.ContentType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ContentType = _field
	return nil
}
func (p *FieldSchema) ReadField5(iprot thrift.TProtocol) error {

	var _field *dataset.FieldDisplayFormat
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := dataset.FieldDisplayFormat(v)
		_field = &tmp
	}
	p.DefaultDisplayFormat = _field
	return nil
}
func (p *FieldSchema) ReadField6(iprot thrift.TProtocol) error {

	var _field *dataset.FieldStatus
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := dataset.FieldStatus(v)
		_field = &tmp
	}
	p.Status = _field
	return nil
}
func (p *FieldSchema) ReadField7(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsRequired = _field
	return nil
}
func (p *FieldSchema) ReadField20(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TextSchema = _field
	return nil
}
func (p *FieldSchema) ReadField21(iprot thrift.TProtocol) error {
	_field := dataset.NewMultiModalSpec()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.MultiModelSpec = _field
	return nil
}
func (p *FieldSchema) ReadField50(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Hidden = _field
	return nil
}
func (p *FieldSchema) ReadField55(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*dataset.FieldTransformationConfig, 0, size)
	values := make([]dataset.FieldTransformationConfig, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.DefaultTransformations = _field
	return nil
}

func (p *FieldSchema) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FieldSchema"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField50(oprot); err != nil {
			fieldId = 50
			goto WriteFieldError
		}
		if err = p.writeField55(oprot); err != nil {
			fieldId = 55
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FieldSchema) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetKey() {
		if err = oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Key); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *FieldSchema) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *FieldSchema) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *FieldSchema) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetContentType() {
		if err = oprot.WriteFieldBegin("content_type", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ContentType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *FieldSchema) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDefaultDisplayFormat() {
		if err = oprot.WriteFieldBegin("default_display_format", thrift.I32, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.DefaultDisplayFormat)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *FieldSchema) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.I32, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Status)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *FieldSchema) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsRequired() {
		if err = oprot.WriteFieldBegin("isRequired", thrift.BOOL, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsRequired); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}
func (p *FieldSchema) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetTextSchema() {
		if err = oprot.WriteFieldBegin("text_schema", thrift.STRING, 20); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TextSchema); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}
func (p *FieldSchema) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetMultiModelSpec() {
		if err = oprot.WriteFieldBegin("multi_model_spec", thrift.STRUCT, 21); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.MultiModelSpec.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}
func (p *FieldSchema) writeField50(oprot thrift.TProtocol) (err error) {
	if p.IsSetHidden() {
		if err = oprot.WriteFieldBegin("hidden", thrift.BOOL, 50); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.Hidden); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 50 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 50 end error: ", p), err)
}
func (p *FieldSchema) writeField55(oprot thrift.TProtocol) (err error) {
	if p.IsSetDefaultTransformations() {
		if err = oprot.WriteFieldBegin("default_transformations", thrift.LIST, 55); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.DefaultTransformations)); err != nil {
			return err
		}
		for _, v := range p.DefaultTransformations {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 55 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 55 end error: ", p), err)
}

func (p *FieldSchema) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FieldSchema(%+v)", *p)

}

func (p *FieldSchema) DeepEqual(ano *FieldSchema) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Key) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Description) {
		return false
	}
	if !p.Field4DeepEqual(ano.ContentType) {
		return false
	}
	if !p.Field5DeepEqual(ano.DefaultDisplayFormat) {
		return false
	}
	if !p.Field6DeepEqual(ano.Status) {
		return false
	}
	if !p.Field7DeepEqual(ano.IsRequired) {
		return false
	}
	if !p.Field20DeepEqual(ano.TextSchema) {
		return false
	}
	if !p.Field21DeepEqual(ano.MultiModelSpec) {
		return false
	}
	if !p.Field50DeepEqual(ano.Hidden) {
		return false
	}
	if !p.Field55DeepEqual(ano.DefaultTransformations) {
		return false
	}
	return true
}

func (p *FieldSchema) Field1DeepEqual(src *string) bool {

	if p.Key == src {
		return true
	} else if p.Key == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Key, *src) != 0 {
		return false
	}
	return true
}
func (p *FieldSchema) Field2DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *FieldSchema) Field3DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *FieldSchema) Field4DeepEqual(src *common.ContentType) bool {

	if p.ContentType == src {
		return true
	} else if p.ContentType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ContentType, *src) != 0 {
		return false
	}
	return true
}
func (p *FieldSchema) Field5DeepEqual(src *dataset.FieldDisplayFormat) bool {

	if p.DefaultDisplayFormat == src {
		return true
	} else if p.DefaultDisplayFormat == nil || src == nil {
		return false
	}
	if *p.DefaultDisplayFormat != *src {
		return false
	}
	return true
}
func (p *FieldSchema) Field6DeepEqual(src *dataset.FieldStatus) bool {

	if p.Status == src {
		return true
	} else if p.Status == nil || src == nil {
		return false
	}
	if *p.Status != *src {
		return false
	}
	return true
}
func (p *FieldSchema) Field7DeepEqual(src *bool) bool {

	if p.IsRequired == src {
		return true
	} else if p.IsRequired == nil || src == nil {
		return false
	}
	if *p.IsRequired != *src {
		return false
	}
	return true
}
func (p *FieldSchema) Field20DeepEqual(src *string) bool {

	if p.TextSchema == src {
		return true
	} else if p.TextSchema == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TextSchema, *src) != 0 {
		return false
	}
	return true
}
func (p *FieldSchema) Field21DeepEqual(src *dataset.MultiModalSpec) bool {

	if !p.MultiModelSpec.DeepEqual(src) {
		return false
	}
	return true
}
func (p *FieldSchema) Field50DeepEqual(src *bool) bool {

	if p.Hidden == src {
		return true
	} else if p.Hidden == nil || src == nil {
		return false
	}
	if *p.Hidden != *src {
		return false
	}
	return true
}
func (p *FieldSchema) Field55DeepEqual(src []*dataset.FieldTransformationConfig) bool {

	if len(p.DefaultTransformations) != len(src) {
		return false
	}
	for i, v := range p.DefaultTransformations {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type EvaluationSetItem struct {
	// 主键&外键
	ID              *int64 `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id" form:"id" query:"id"`
	AppID           *int32 `thrift:"app_id,2,optional" frugal:"2,optional,i32" form:"app_id" json:"app_id,omitempty" query:"app_id"`
	WorkspaceID     *int64 `thrift:"workspace_id,3,optional" frugal:"3,optional,i64" json:"workspace_id" form:"workspace_id" query:"workspace_id"`
	EvaluationSetID *int64 `thrift:"evaluation_set_id,4,optional" frugal:"4,optional,i64" json:"evaluation_set_id" form:"evaluation_set_id" query:"evaluation_set_id"`
	SchemaID        *int64 `thrift:"schema_id,5,optional" frugal:"5,optional,i64" json:"schema_id" form:"schema_id" query:"schema_id"`
	// 数据在当前数据集内的唯一 ID，不随版本发生改变
	ItemID *int64 `thrift:"item_id,6,optional" frugal:"6,optional,i64" json:"item_id" form:"item_id" query:"item_id"`
	// 数据插入的幂等 key
	ItemKey *string `thrift:"item_key,10,optional" frugal:"10,optional,string" form:"item_key" json:"item_key,omitempty" query:"item_key"`
	// 轮次数据内容
	Turns []*Turn `thrift:"turns,11,optional" frugal:"11,optional,list<Turn>" form:"turns" json:"turns,omitempty" query:"turns"`
	// 系统信息
	BaseInfo *common.BaseInfo `thrift:"base_info,100,optional" frugal:"100,optional,common.BaseInfo" form:"base_info" json:"base_info,omitempty" query:"base_info"`
}

func NewEvaluationSetItem() *EvaluationSetItem {
	return &EvaluationSetItem{}
}

func (p *EvaluationSetItem) InitDefault() {
}

var EvaluationSetItem_ID_DEFAULT int64

func (p *EvaluationSetItem) GetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetID() {
		return EvaluationSetItem_ID_DEFAULT
	}
	return *p.ID
}

var EvaluationSetItem_AppID_DEFAULT int32

func (p *EvaluationSetItem) GetAppID() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetAppID() {
		return EvaluationSetItem_AppID_DEFAULT
	}
	return *p.AppID
}

var EvaluationSetItem_WorkspaceID_DEFAULT int64

func (p *EvaluationSetItem) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return EvaluationSetItem_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var EvaluationSetItem_EvaluationSetID_DEFAULT int64

func (p *EvaluationSetItem) GetEvaluationSetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluationSetID() {
		return EvaluationSetItem_EvaluationSetID_DEFAULT
	}
	return *p.EvaluationSetID
}

var EvaluationSetItem_SchemaID_DEFAULT int64

func (p *EvaluationSetItem) GetSchemaID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetSchemaID() {
		return EvaluationSetItem_SchemaID_DEFAULT
	}
	return *p.SchemaID
}

var EvaluationSetItem_ItemID_DEFAULT int64

func (p *EvaluationSetItem) GetItemID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetItemID() {
		return EvaluationSetItem_ItemID_DEFAULT
	}
	return *p.ItemID
}

var EvaluationSetItem_ItemKey_DEFAULT string

func (p *EvaluationSetItem) GetItemKey() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetItemKey() {
		return EvaluationSetItem_ItemKey_DEFAULT
	}
	return *p.ItemKey
}

var EvaluationSetItem_Turns_DEFAULT []*Turn

func (p *EvaluationSetItem) GetTurns() (v []*Turn) {
	if p == nil {
		return
	}
	if !p.IsSetTurns() {
		return EvaluationSetItem_Turns_DEFAULT
	}
	return p.Turns
}

var EvaluationSetItem_BaseInfo_DEFAULT *common.BaseInfo

func (p *EvaluationSetItem) GetBaseInfo() (v *common.BaseInfo) {
	if p == nil {
		return
	}
	if !p.IsSetBaseInfo() {
		return EvaluationSetItem_BaseInfo_DEFAULT
	}
	return p.BaseInfo
}
func (p *EvaluationSetItem) SetID(val *int64) {
	p.ID = val
}
func (p *EvaluationSetItem) SetAppID(val *int32) {
	p.AppID = val
}
func (p *EvaluationSetItem) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *EvaluationSetItem) SetEvaluationSetID(val *int64) {
	p.EvaluationSetID = val
}
func (p *EvaluationSetItem) SetSchemaID(val *int64) {
	p.SchemaID = val
}
func (p *EvaluationSetItem) SetItemID(val *int64) {
	p.ItemID = val
}
func (p *EvaluationSetItem) SetItemKey(val *string) {
	p.ItemKey = val
}
func (p *EvaluationSetItem) SetTurns(val []*Turn) {
	p.Turns = val
}
func (p *EvaluationSetItem) SetBaseInfo(val *common.BaseInfo) {
	p.BaseInfo = val
}

var fieldIDToName_EvaluationSetItem = map[int16]string{
	1:   "id",
	2:   "app_id",
	3:   "workspace_id",
	4:   "evaluation_set_id",
	5:   "schema_id",
	6:   "item_id",
	10:  "item_key",
	11:  "turns",
	100: "base_info",
}

func (p *EvaluationSetItem) IsSetID() bool {
	return p.ID != nil
}

func (p *EvaluationSetItem) IsSetAppID() bool {
	return p.AppID != nil
}

func (p *EvaluationSetItem) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *EvaluationSetItem) IsSetEvaluationSetID() bool {
	return p.EvaluationSetID != nil
}

func (p *EvaluationSetItem) IsSetSchemaID() bool {
	return p.SchemaID != nil
}

func (p *EvaluationSetItem) IsSetItemID() bool {
	return p.ItemID != nil
}

func (p *EvaluationSetItem) IsSetItemKey() bool {
	return p.ItemKey != nil
}

func (p *EvaluationSetItem) IsSetTurns() bool {
	return p.Turns != nil
}

func (p *EvaluationSetItem) IsSetBaseInfo() bool {
	return p.BaseInfo != nil
}

func (p *EvaluationSetItem) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluationSetItem[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluationSetItem) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ID = _field
	return nil
}
func (p *EvaluationSetItem) ReadField2(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AppID = _field
	return nil
}
func (p *EvaluationSetItem) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *EvaluationSetItem) ReadField4(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EvaluationSetID = _field
	return nil
}
func (p *EvaluationSetItem) ReadField5(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SchemaID = _field
	return nil
}
func (p *EvaluationSetItem) ReadField6(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ItemID = _field
	return nil
}
func (p *EvaluationSetItem) ReadField10(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ItemKey = _field
	return nil
}
func (p *EvaluationSetItem) ReadField11(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*Turn, 0, size)
	values := make([]Turn, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Turns = _field
	return nil
}
func (p *EvaluationSetItem) ReadField100(iprot thrift.TProtocol) error {
	_field := common.NewBaseInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseInfo = _field
	return nil
}

func (p *EvaluationSetItem) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EvaluationSetItem"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluationSetItem) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *EvaluationSetItem) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppID() {
		if err = oprot.WriteFieldBegin("app_id", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.AppID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *EvaluationSetItem) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *EvaluationSetItem) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluationSetID() {
		if err = oprot.WriteFieldBegin("evaluation_set_id", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.EvaluationSetID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *EvaluationSetItem) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSchemaID() {
		if err = oprot.WriteFieldBegin("schema_id", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.SchemaID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *EvaluationSetItem) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetItemID() {
		if err = oprot.WriteFieldBegin("item_id", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ItemID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *EvaluationSetItem) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetItemKey() {
		if err = oprot.WriteFieldBegin("item_key", thrift.STRING, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ItemKey); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}
func (p *EvaluationSetItem) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetTurns() {
		if err = oprot.WriteFieldBegin("turns", thrift.LIST, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Turns)); err != nil {
			return err
		}
		for _, v := range p.Turns {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}
func (p *EvaluationSetItem) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseInfo() {
		if err = oprot.WriteFieldBegin("base_info", thrift.STRUCT, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseInfo.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}

func (p *EvaluationSetItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluationSetItem(%+v)", *p)

}

func (p *EvaluationSetItem) DeepEqual(ano *EvaluationSetItem) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field2DeepEqual(ano.AppID) {
		return false
	}
	if !p.Field3DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field4DeepEqual(ano.EvaluationSetID) {
		return false
	}
	if !p.Field5DeepEqual(ano.SchemaID) {
		return false
	}
	if !p.Field6DeepEqual(ano.ItemID) {
		return false
	}
	if !p.Field10DeepEqual(ano.ItemKey) {
		return false
	}
	if !p.Field11DeepEqual(ano.Turns) {
		return false
	}
	if !p.Field100DeepEqual(ano.BaseInfo) {
		return false
	}
	return true
}

func (p *EvaluationSetItem) Field1DeepEqual(src *int64) bool {

	if p.ID == src {
		return true
	} else if p.ID == nil || src == nil {
		return false
	}
	if *p.ID != *src {
		return false
	}
	return true
}
func (p *EvaluationSetItem) Field2DeepEqual(src *int32) bool {

	if p.AppID == src {
		return true
	} else if p.AppID == nil || src == nil {
		return false
	}
	if *p.AppID != *src {
		return false
	}
	return true
}
func (p *EvaluationSetItem) Field3DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *EvaluationSetItem) Field4DeepEqual(src *int64) bool {

	if p.EvaluationSetID == src {
		return true
	} else if p.EvaluationSetID == nil || src == nil {
		return false
	}
	if *p.EvaluationSetID != *src {
		return false
	}
	return true
}
func (p *EvaluationSetItem) Field5DeepEqual(src *int64) bool {

	if p.SchemaID == src {
		return true
	} else if p.SchemaID == nil || src == nil {
		return false
	}
	if *p.SchemaID != *src {
		return false
	}
	return true
}
func (p *EvaluationSetItem) Field6DeepEqual(src *int64) bool {

	if p.ItemID == src {
		return true
	} else if p.ItemID == nil || src == nil {
		return false
	}
	if *p.ItemID != *src {
		return false
	}
	return true
}
func (p *EvaluationSetItem) Field10DeepEqual(src *string) bool {

	if p.ItemKey == src {
		return true
	} else if p.ItemKey == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ItemKey, *src) != 0 {
		return false
	}
	return true
}
func (p *EvaluationSetItem) Field11DeepEqual(src []*Turn) bool {

	if len(p.Turns) != len(src) {
		return false
	}
	for i, v := range p.Turns {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *EvaluationSetItem) Field100DeepEqual(src *common.BaseInfo) bool {

	if !p.BaseInfo.DeepEqual(src) {
		return false
	}
	return true
}

type Turn struct {
	// 轮次ID，如果是单轮评测集，id=0
	ID *int64 `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id" form:"id" query:"id"`
	// 字段数据
	FieldDataList []*FieldData `thrift:"field_data_list,2,optional" frugal:"2,optional,list<FieldData>" form:"field_data_list" json:"field_data_list,omitempty" query:"field_data_list"`
}

func NewTurn() *Turn {
	return &Turn{}
}

func (p *Turn) InitDefault() {
}

var Turn_ID_DEFAULT int64

func (p *Turn) GetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetID() {
		return Turn_ID_DEFAULT
	}
	return *p.ID
}

var Turn_FieldDataList_DEFAULT []*FieldData

func (p *Turn) GetFieldDataList() (v []*FieldData) {
	if p == nil {
		return
	}
	if !p.IsSetFieldDataList() {
		return Turn_FieldDataList_DEFAULT
	}
	return p.FieldDataList
}
func (p *Turn) SetID(val *int64) {
	p.ID = val
}
func (p *Turn) SetFieldDataList(val []*FieldData) {
	p.FieldDataList = val
}

var fieldIDToName_Turn = map[int16]string{
	1: "id",
	2: "field_data_list",
}

func (p *Turn) IsSetID() bool {
	return p.ID != nil
}

func (p *Turn) IsSetFieldDataList() bool {
	return p.FieldDataList != nil
}

func (p *Turn) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Turn[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Turn) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ID = _field
	return nil
}
func (p *Turn) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*FieldData, 0, size)
	values := make([]FieldData, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.FieldDataList = _field
	return nil
}

func (p *Turn) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Turn"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Turn) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *Turn) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetFieldDataList() {
		if err = oprot.WriteFieldBegin("field_data_list", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.FieldDataList)); err != nil {
			return err
		}
		for _, v := range p.FieldDataList {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Turn) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Turn(%+v)", *p)

}

func (p *Turn) DeepEqual(ano *Turn) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field2DeepEqual(ano.FieldDataList) {
		return false
	}
	return true
}

func (p *Turn) Field1DeepEqual(src *int64) bool {

	if p.ID == src {
		return true
	} else if p.ID == nil || src == nil {
		return false
	}
	if *p.ID != *src {
		return false
	}
	return true
}
func (p *Turn) Field2DeepEqual(src []*FieldData) bool {

	if len(p.FieldDataList) != len(src) {
		return false
	}
	for i, v := range p.FieldDataList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type FieldData struct {
	Key     *string         `thrift:"key,1,optional" frugal:"1,optional,string" form:"key" json:"key,omitempty" query:"key"`
	Name    *string         `thrift:"name,2,optional" frugal:"2,optional,string" form:"name" json:"name,omitempty" query:"name"`
	Content *common.Content `thrift:"content,3,optional" frugal:"3,optional,common.Content" form:"content" json:"content,omitempty" query:"content"`
}

func NewFieldData() *FieldData {
	return &FieldData{}
}

func (p *FieldData) InitDefault() {
}

var FieldData_Key_DEFAULT string

func (p *FieldData) GetKey() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetKey() {
		return FieldData_Key_DEFAULT
	}
	return *p.Key
}

var FieldData_Name_DEFAULT string

func (p *FieldData) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return FieldData_Name_DEFAULT
	}
	return *p.Name
}

var FieldData_Content_DEFAULT *common.Content

func (p *FieldData) GetContent() (v *common.Content) {
	if p == nil {
		return
	}
	if !p.IsSetContent() {
		return FieldData_Content_DEFAULT
	}
	return p.Content
}
func (p *FieldData) SetKey(val *string) {
	p.Key = val
}
func (p *FieldData) SetName(val *string) {
	p.Name = val
}
func (p *FieldData) SetContent(val *common.Content) {
	p.Content = val
}

var fieldIDToName_FieldData = map[int16]string{
	1: "key",
	2: "name",
	3: "content",
}

func (p *FieldData) IsSetKey() bool {
	return p.Key != nil
}

func (p *FieldData) IsSetName() bool {
	return p.Name != nil
}

func (p *FieldData) IsSetContent() bool {
	return p.Content != nil
}

func (p *FieldData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FieldData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FieldData) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Key = _field
	return nil
}
func (p *FieldData) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *FieldData) ReadField3(iprot thrift.TProtocol) error {
	_field := common.NewContent()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Content = _field
	return nil
}

func (p *FieldData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FieldData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FieldData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetKey() {
		if err = oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Key); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *FieldData) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *FieldData) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetContent() {
		if err = oprot.WriteFieldBegin("content", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Content.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *FieldData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FieldData(%+v)", *p)

}

func (p *FieldData) DeepEqual(ano *FieldData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Key) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Content) {
		return false
	}
	return true
}

func (p *FieldData) Field1DeepEqual(src *string) bool {

	if p.Key == src {
		return true
	} else if p.Key == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Key, *src) != 0 {
		return false
	}
	return true
}
func (p *FieldData) Field2DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *FieldData) Field3DeepEqual(src *common.Content) bool {

	if !p.Content.DeepEqual(src) {
		return false
	}
	return true
}
