// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package runtime

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/llm/domain/common"
	"strings"
)

const (
	ResponseFormatJSONObject = "json_object"

	ResponseFormatText = "text"

	ToolChoiceAuto = "auto"

	ToolChoiceRequired = "required"

	ToolChoiceNone = "none"

	ToolDefTypeOpenAPIV3 = "open_api_v3"

	RoleSystem = "system"

	RoleAssistant = "assistant"

	RoleUser = "user"

	RoleTool = "tool"

	ToolTypeFunction = "function"

	ChatMessagePartTypeText = "text"

	ChatMessagePartTypeImageURL = "image_url"

	ImageURLDetailAuto = "auto"

	ImageURLDetailLow = "low"

	ImageURLDetailHigh = "high"
)

type ResponseFormatType = string

type ToolChoice = string

type ToolDefType = string

type Role = string

type ToolType = string

type ChatMessagePartType = string

// const ChatMessagePartType chat_message_part_type_audio_url = "audio_url"
// const ChatMessagePartType chat_message_part_type_video_url = "video_url"
// const ChatMessagePartType chat_message_part_type_file_url = "file_url"
type ImageURLDetail = string

type ModelConfig struct {
	// 模型id
	ModelID     int64       `thrift:"model_id,1,required" frugal:"1,required,i64" json:"model_id" form:"model_id,required" query:"model_id,required"`
	Temperature *float64    `thrift:"temperature,2,optional" frugal:"2,optional,double" form:"temperature" json:"temperature,omitempty" query:"temperature"`
	MaxTokens   *int64      `thrift:"max_tokens,3,optional" frugal:"3,optional,i64" json:"max_tokens" form:"max_tokens" query:"max_tokens"`
	TopP        *float64    `thrift:"top_p,4,optional" frugal:"4,optional,double" form:"top_p" json:"top_p,omitempty" query:"top_p"`
	Stop        []string    `thrift:"stop,5,optional" frugal:"5,optional,list<string>" form:"stop" json:"stop,omitempty" query:"stop"`
	ToolChoice  *ToolChoice `thrift:"tool_choice,6,optional" frugal:"6,optional,string" form:"tool_choice" json:"tool_choice,omitempty" query:"tool_choice"`
	// support json
	ResponseFormat   *ResponseFormat `thrift:"response_format,7,optional" frugal:"7,optional,ResponseFormat" form:"response_format" json:"response_format,omitempty" query:"response_format"`
	TopK             *int32          `thrift:"top_k,8,optional" frugal:"8,optional,i32" form:"top_k" json:"top_k,omitempty" query:"top_k"`
	PresencePenalty  *float64        `thrift:"presence_penalty,9,optional" frugal:"9,optional,double" form:"presence_penalty" json:"presence_penalty,omitempty" query:"presence_penalty"`
	FrequencyPenalty *float64        `thrift:"frequency_penalty,10,optional" frugal:"10,optional,double" form:"frequency_penalty" json:"frequency_penalty,omitempty" query:"frequency_penalty"`
}

func NewModelConfig() *ModelConfig {
	return &ModelConfig{}
}

func (p *ModelConfig) InitDefault() {
}

func (p *ModelConfig) GetModelID() (v int64) {
	if p != nil {
		return p.ModelID
	}
	return
}

var ModelConfig_Temperature_DEFAULT float64

func (p *ModelConfig) GetTemperature() (v float64) {
	if p == nil {
		return
	}
	if !p.IsSetTemperature() {
		return ModelConfig_Temperature_DEFAULT
	}
	return *p.Temperature
}

var ModelConfig_MaxTokens_DEFAULT int64

func (p *ModelConfig) GetMaxTokens() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetMaxTokens() {
		return ModelConfig_MaxTokens_DEFAULT
	}
	return *p.MaxTokens
}

var ModelConfig_TopP_DEFAULT float64

func (p *ModelConfig) GetTopP() (v float64) {
	if p == nil {
		return
	}
	if !p.IsSetTopP() {
		return ModelConfig_TopP_DEFAULT
	}
	return *p.TopP
}

var ModelConfig_Stop_DEFAULT []string

func (p *ModelConfig) GetStop() (v []string) {
	if p == nil {
		return
	}
	if !p.IsSetStop() {
		return ModelConfig_Stop_DEFAULT
	}
	return p.Stop
}

var ModelConfig_ToolChoice_DEFAULT ToolChoice

func (p *ModelConfig) GetToolChoice() (v ToolChoice) {
	if p == nil {
		return
	}
	if !p.IsSetToolChoice() {
		return ModelConfig_ToolChoice_DEFAULT
	}
	return *p.ToolChoice
}

var ModelConfig_ResponseFormat_DEFAULT *ResponseFormat

func (p *ModelConfig) GetResponseFormat() (v *ResponseFormat) {
	if p == nil {
		return
	}
	if !p.IsSetResponseFormat() {
		return ModelConfig_ResponseFormat_DEFAULT
	}
	return p.ResponseFormat
}

var ModelConfig_TopK_DEFAULT int32

func (p *ModelConfig) GetTopK() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetTopK() {
		return ModelConfig_TopK_DEFAULT
	}
	return *p.TopK
}

var ModelConfig_PresencePenalty_DEFAULT float64

func (p *ModelConfig) GetPresencePenalty() (v float64) {
	if p == nil {
		return
	}
	if !p.IsSetPresencePenalty() {
		return ModelConfig_PresencePenalty_DEFAULT
	}
	return *p.PresencePenalty
}

var ModelConfig_FrequencyPenalty_DEFAULT float64

func (p *ModelConfig) GetFrequencyPenalty() (v float64) {
	if p == nil {
		return
	}
	if !p.IsSetFrequencyPenalty() {
		return ModelConfig_FrequencyPenalty_DEFAULT
	}
	return *p.FrequencyPenalty
}
func (p *ModelConfig) SetModelID(val int64) {
	p.ModelID = val
}
func (p *ModelConfig) SetTemperature(val *float64) {
	p.Temperature = val
}
func (p *ModelConfig) SetMaxTokens(val *int64) {
	p.MaxTokens = val
}
func (p *ModelConfig) SetTopP(val *float64) {
	p.TopP = val
}
func (p *ModelConfig) SetStop(val []string) {
	p.Stop = val
}
func (p *ModelConfig) SetToolChoice(val *ToolChoice) {
	p.ToolChoice = val
}
func (p *ModelConfig) SetResponseFormat(val *ResponseFormat) {
	p.ResponseFormat = val
}
func (p *ModelConfig) SetTopK(val *int32) {
	p.TopK = val
}
func (p *ModelConfig) SetPresencePenalty(val *float64) {
	p.PresencePenalty = val
}
func (p *ModelConfig) SetFrequencyPenalty(val *float64) {
	p.FrequencyPenalty = val
}

var fieldIDToName_ModelConfig = map[int16]string{
	1:  "model_id",
	2:  "temperature",
	3:  "max_tokens",
	4:  "top_p",
	5:  "stop",
	6:  "tool_choice",
	7:  "response_format",
	8:  "top_k",
	9:  "presence_penalty",
	10: "frequency_penalty",
}

func (p *ModelConfig) IsSetTemperature() bool {
	return p.Temperature != nil
}

func (p *ModelConfig) IsSetMaxTokens() bool {
	return p.MaxTokens != nil
}

func (p *ModelConfig) IsSetTopP() bool {
	return p.TopP != nil
}

func (p *ModelConfig) IsSetStop() bool {
	return p.Stop != nil
}

func (p *ModelConfig) IsSetToolChoice() bool {
	return p.ToolChoice != nil
}

func (p *ModelConfig) IsSetResponseFormat() bool {
	return p.ResponseFormat != nil
}

func (p *ModelConfig) IsSetTopK() bool {
	return p.TopK != nil
}

func (p *ModelConfig) IsSetPresencePenalty() bool {
	return p.PresencePenalty != nil
}

func (p *ModelConfig) IsSetFrequencyPenalty() bool {
	return p.FrequencyPenalty != nil
}

func (p *ModelConfig) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetModelID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetModelID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetModelID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ModelConfig[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ModelConfig[fieldId]))
}

func (p *ModelConfig) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ModelID = _field
	return nil
}
func (p *ModelConfig) ReadField2(iprot thrift.TProtocol) error {

	var _field *float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Temperature = _field
	return nil
}
func (p *ModelConfig) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MaxTokens = _field
	return nil
}
func (p *ModelConfig) ReadField4(iprot thrift.TProtocol) error {

	var _field *float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TopP = _field
	return nil
}
func (p *ModelConfig) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Stop = _field
	return nil
}
func (p *ModelConfig) ReadField6(iprot thrift.TProtocol) error {

	var _field *ToolChoice
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ToolChoice = _field
	return nil
}
func (p *ModelConfig) ReadField7(iprot thrift.TProtocol) error {
	_field := NewResponseFormat()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ResponseFormat = _field
	return nil
}
func (p *ModelConfig) ReadField8(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TopK = _field
	return nil
}
func (p *ModelConfig) ReadField9(iprot thrift.TProtocol) error {

	var _field *float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PresencePenalty = _field
	return nil
}
func (p *ModelConfig) ReadField10(iprot thrift.TProtocol) error {

	var _field *float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FrequencyPenalty = _field
	return nil
}

func (p *ModelConfig) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ModelConfig"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ModelConfig) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("model_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ModelID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ModelConfig) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTemperature() {
		if err = oprot.WriteFieldBegin("temperature", thrift.DOUBLE, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.Temperature); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ModelConfig) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxTokens() {
		if err = oprot.WriteFieldBegin("max_tokens", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.MaxTokens); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ModelConfig) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTopP() {
		if err = oprot.WriteFieldBegin("top_p", thrift.DOUBLE, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.TopP); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *ModelConfig) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetStop() {
		if err = oprot.WriteFieldBegin("stop", thrift.LIST, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Stop)); err != nil {
			return err
		}
		for _, v := range p.Stop {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *ModelConfig) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetToolChoice() {
		if err = oprot.WriteFieldBegin("tool_choice", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ToolChoice); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *ModelConfig) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetResponseFormat() {
		if err = oprot.WriteFieldBegin("response_format", thrift.STRUCT, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ResponseFormat.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}
func (p *ModelConfig) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetTopK() {
		if err = oprot.WriteFieldBegin("top_k", thrift.I32, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.TopK); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}
func (p *ModelConfig) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetPresencePenalty() {
		if err = oprot.WriteFieldBegin("presence_penalty", thrift.DOUBLE, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.PresencePenalty); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}
func (p *ModelConfig) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetFrequencyPenalty() {
		if err = oprot.WriteFieldBegin("frequency_penalty", thrift.DOUBLE, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.FrequencyPenalty); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *ModelConfig) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ModelConfig(%+v)", *p)

}

func (p *ModelConfig) DeepEqual(ano *ModelConfig) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ModelID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Temperature) {
		return false
	}
	if !p.Field3DeepEqual(ano.MaxTokens) {
		return false
	}
	if !p.Field4DeepEqual(ano.TopP) {
		return false
	}
	if !p.Field5DeepEqual(ano.Stop) {
		return false
	}
	if !p.Field6DeepEqual(ano.ToolChoice) {
		return false
	}
	if !p.Field7DeepEqual(ano.ResponseFormat) {
		return false
	}
	if !p.Field8DeepEqual(ano.TopK) {
		return false
	}
	if !p.Field9DeepEqual(ano.PresencePenalty) {
		return false
	}
	if !p.Field10DeepEqual(ano.FrequencyPenalty) {
		return false
	}
	return true
}

func (p *ModelConfig) Field1DeepEqual(src int64) bool {

	if p.ModelID != src {
		return false
	}
	return true
}
func (p *ModelConfig) Field2DeepEqual(src *float64) bool {

	if p.Temperature == src {
		return true
	} else if p.Temperature == nil || src == nil {
		return false
	}
	if *p.Temperature != *src {
		return false
	}
	return true
}
func (p *ModelConfig) Field3DeepEqual(src *int64) bool {

	if p.MaxTokens == src {
		return true
	} else if p.MaxTokens == nil || src == nil {
		return false
	}
	if *p.MaxTokens != *src {
		return false
	}
	return true
}
func (p *ModelConfig) Field4DeepEqual(src *float64) bool {

	if p.TopP == src {
		return true
	} else if p.TopP == nil || src == nil {
		return false
	}
	if *p.TopP != *src {
		return false
	}
	return true
}
func (p *ModelConfig) Field5DeepEqual(src []string) bool {

	if len(p.Stop) != len(src) {
		return false
	}
	for i, v := range p.Stop {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *ModelConfig) Field6DeepEqual(src *ToolChoice) bool {

	if p.ToolChoice == src {
		return true
	} else if p.ToolChoice == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ToolChoice, *src) != 0 {
		return false
	}
	return true
}
func (p *ModelConfig) Field7DeepEqual(src *ResponseFormat) bool {

	if !p.ResponseFormat.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ModelConfig) Field8DeepEqual(src *int32) bool {

	if p.TopK == src {
		return true
	} else if p.TopK == nil || src == nil {
		return false
	}
	if *p.TopK != *src {
		return false
	}
	return true
}
func (p *ModelConfig) Field9DeepEqual(src *float64) bool {

	if p.PresencePenalty == src {
		return true
	} else if p.PresencePenalty == nil || src == nil {
		return false
	}
	if *p.PresencePenalty != *src {
		return false
	}
	return true
}
func (p *ModelConfig) Field10DeepEqual(src *float64) bool {

	if p.FrequencyPenalty == src {
		return true
	} else if p.FrequencyPenalty == nil || src == nil {
		return false
	}
	if *p.FrequencyPenalty != *src {
		return false
	}
	return true
}

type Message struct {
	Role               Role               `thrift:"role,1,required" frugal:"1,required,string" form:"role,required" json:"role,required" query:"role,required"`
	Content            *string            `thrift:"content,2,optional" frugal:"2,optional,string" form:"content" json:"content,omitempty" query:"content"`
	MultimodalContents []*ChatMessagePart `thrift:"multimodal_contents,3,optional" frugal:"3,optional,list<ChatMessagePart>" form:"multimodal_contents" json:"multimodal_contents,omitempty" query:"multimodal_contents"`
	// only for AssistantMessage
	ToolCalls []*ToolCall `thrift:"tool_calls,4,optional" frugal:"4,optional,list<ToolCall>" form:"tool_calls" json:"tool_calls,omitempty" query:"tool_calls"`
	// only for ToolMessage
	ToolCallID *string `thrift:"tool_call_id,5,optional" frugal:"5,optional,string" form:"tool_call_id" json:"tool_call_id,omitempty" query:"tool_call_id"`
	// collects meta information about a chat response
	ResponseMeta *ResponseMeta `thrift:"response_meta,6,optional" frugal:"6,optional,ResponseMeta" form:"response_meta" json:"response_meta,omitempty" query:"response_meta"`
	// only for AssistantMessage, And when reasoning_content is not empty, content must be empty
	ReasoningContent *string `thrift:"reasoning_content,7,optional" frugal:"7,optional,string" form:"reasoning_content" json:"reasoning_content,omitempty" query:"reasoning_content"`
}

func NewMessage() *Message {
	return &Message{}
}

func (p *Message) InitDefault() {
}

func (p *Message) GetRole() (v Role) {
	if p != nil {
		return p.Role
	}
	return
}

var Message_Content_DEFAULT string

func (p *Message) GetContent() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetContent() {
		return Message_Content_DEFAULT
	}
	return *p.Content
}

var Message_MultimodalContents_DEFAULT []*ChatMessagePart

func (p *Message) GetMultimodalContents() (v []*ChatMessagePart) {
	if p == nil {
		return
	}
	if !p.IsSetMultimodalContents() {
		return Message_MultimodalContents_DEFAULT
	}
	return p.MultimodalContents
}

var Message_ToolCalls_DEFAULT []*ToolCall

func (p *Message) GetToolCalls() (v []*ToolCall) {
	if p == nil {
		return
	}
	if !p.IsSetToolCalls() {
		return Message_ToolCalls_DEFAULT
	}
	return p.ToolCalls
}

var Message_ToolCallID_DEFAULT string

func (p *Message) GetToolCallID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetToolCallID() {
		return Message_ToolCallID_DEFAULT
	}
	return *p.ToolCallID
}

var Message_ResponseMeta_DEFAULT *ResponseMeta

func (p *Message) GetResponseMeta() (v *ResponseMeta) {
	if p == nil {
		return
	}
	if !p.IsSetResponseMeta() {
		return Message_ResponseMeta_DEFAULT
	}
	return p.ResponseMeta
}

var Message_ReasoningContent_DEFAULT string

func (p *Message) GetReasoningContent() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetReasoningContent() {
		return Message_ReasoningContent_DEFAULT
	}
	return *p.ReasoningContent
}
func (p *Message) SetRole(val Role) {
	p.Role = val
}
func (p *Message) SetContent(val *string) {
	p.Content = val
}
func (p *Message) SetMultimodalContents(val []*ChatMessagePart) {
	p.MultimodalContents = val
}
func (p *Message) SetToolCalls(val []*ToolCall) {
	p.ToolCalls = val
}
func (p *Message) SetToolCallID(val *string) {
	p.ToolCallID = val
}
func (p *Message) SetResponseMeta(val *ResponseMeta) {
	p.ResponseMeta = val
}
func (p *Message) SetReasoningContent(val *string) {
	p.ReasoningContent = val
}

var fieldIDToName_Message = map[int16]string{
	1: "role",
	2: "content",
	3: "multimodal_contents",
	4: "tool_calls",
	5: "tool_call_id",
	6: "response_meta",
	7: "reasoning_content",
}

func (p *Message) IsSetContent() bool {
	return p.Content != nil
}

func (p *Message) IsSetMultimodalContents() bool {
	return p.MultimodalContents != nil
}

func (p *Message) IsSetToolCalls() bool {
	return p.ToolCalls != nil
}

func (p *Message) IsSetToolCallID() bool {
	return p.ToolCallID != nil
}

func (p *Message) IsSetResponseMeta() bool {
	return p.ResponseMeta != nil
}

func (p *Message) IsSetReasoningContent() bool {
	return p.ReasoningContent != nil
}

func (p *Message) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetRole bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetRole = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetRole {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Message[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_Message[fieldId]))
}

func (p *Message) ReadField1(iprot thrift.TProtocol) error {

	var _field Role
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Role = _field
	return nil
}
func (p *Message) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Content = _field
	return nil
}
func (p *Message) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ChatMessagePart, 0, size)
	values := make([]ChatMessagePart, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.MultimodalContents = _field
	return nil
}
func (p *Message) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ToolCall, 0, size)
	values := make([]ToolCall, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ToolCalls = _field
	return nil
}
func (p *Message) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ToolCallID = _field
	return nil
}
func (p *Message) ReadField6(iprot thrift.TProtocol) error {
	_field := NewResponseMeta()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ResponseMeta = _field
	return nil
}
func (p *Message) ReadField7(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ReasoningContent = _field
	return nil
}

func (p *Message) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Message"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Message) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("role", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Role); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *Message) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetContent() {
		if err = oprot.WriteFieldBegin("content", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Content); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *Message) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMultimodalContents() {
		if err = oprot.WriteFieldBegin("multimodal_contents", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MultimodalContents)); err != nil {
			return err
		}
		for _, v := range p.MultimodalContents {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *Message) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetToolCalls() {
		if err = oprot.WriteFieldBegin("tool_calls", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ToolCalls)); err != nil {
			return err
		}
		for _, v := range p.ToolCalls {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *Message) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetToolCallID() {
		if err = oprot.WriteFieldBegin("tool_call_id", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ToolCallID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *Message) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetResponseMeta() {
		if err = oprot.WriteFieldBegin("response_meta", thrift.STRUCT, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ResponseMeta.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *Message) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetReasoningContent() {
		if err = oprot.WriteFieldBegin("reasoning_content", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ReasoningContent); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *Message) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Message(%+v)", *p)

}

func (p *Message) DeepEqual(ano *Message) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Role) {
		return false
	}
	if !p.Field2DeepEqual(ano.Content) {
		return false
	}
	if !p.Field3DeepEqual(ano.MultimodalContents) {
		return false
	}
	if !p.Field4DeepEqual(ano.ToolCalls) {
		return false
	}
	if !p.Field5DeepEqual(ano.ToolCallID) {
		return false
	}
	if !p.Field6DeepEqual(ano.ResponseMeta) {
		return false
	}
	if !p.Field7DeepEqual(ano.ReasoningContent) {
		return false
	}
	return true
}

func (p *Message) Field1DeepEqual(src Role) bool {

	if strings.Compare(p.Role, src) != 0 {
		return false
	}
	return true
}
func (p *Message) Field2DeepEqual(src *string) bool {

	if p.Content == src {
		return true
	} else if p.Content == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Content, *src) != 0 {
		return false
	}
	return true
}
func (p *Message) Field3DeepEqual(src []*ChatMessagePart) bool {

	if len(p.MultimodalContents) != len(src) {
		return false
	}
	for i, v := range p.MultimodalContents {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *Message) Field4DeepEqual(src []*ToolCall) bool {

	if len(p.ToolCalls) != len(src) {
		return false
	}
	for i, v := range p.ToolCalls {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *Message) Field5DeepEqual(src *string) bool {

	if p.ToolCallID == src {
		return true
	} else if p.ToolCallID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ToolCallID, *src) != 0 {
		return false
	}
	return true
}
func (p *Message) Field6DeepEqual(src *ResponseMeta) bool {

	if !p.ResponseMeta.DeepEqual(src) {
		return false
	}
	return true
}
func (p *Message) Field7DeepEqual(src *string) bool {

	if p.ReasoningContent == src {
		return true
	} else if p.ReasoningContent == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ReasoningContent, *src) != 0 {
		return false
	}
	return true
}

type ChatMessagePart struct {
	Type     *ChatMessagePartType `thrift:"type,1,optional" frugal:"1,optional,string" form:"type" json:"type,omitempty" query:"type"`
	Text     *string              `thrift:"text,2,optional" frugal:"2,optional,string" form:"text" json:"text,omitempty" query:"text"`
	ImageURL *ChatMessageImageURL `thrift:"image_url,3,optional" frugal:"3,optional,ChatMessageImageURL" form:"image_url" json:"image_url,omitempty" query:"image_url"`
}

func NewChatMessagePart() *ChatMessagePart {
	return &ChatMessagePart{}
}

func (p *ChatMessagePart) InitDefault() {
}

var ChatMessagePart_Type_DEFAULT ChatMessagePartType

func (p *ChatMessagePart) GetType() (v ChatMessagePartType) {
	if p == nil {
		return
	}
	if !p.IsSetType() {
		return ChatMessagePart_Type_DEFAULT
	}
	return *p.Type
}

var ChatMessagePart_Text_DEFAULT string

func (p *ChatMessagePart) GetText() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetText() {
		return ChatMessagePart_Text_DEFAULT
	}
	return *p.Text
}

var ChatMessagePart_ImageURL_DEFAULT *ChatMessageImageURL

func (p *ChatMessagePart) GetImageURL() (v *ChatMessageImageURL) {
	if p == nil {
		return
	}
	if !p.IsSetImageURL() {
		return ChatMessagePart_ImageURL_DEFAULT
	}
	return p.ImageURL
}
func (p *ChatMessagePart) SetType(val *ChatMessagePartType) {
	p.Type = val
}
func (p *ChatMessagePart) SetText(val *string) {
	p.Text = val
}
func (p *ChatMessagePart) SetImageURL(val *ChatMessageImageURL) {
	p.ImageURL = val
}

var fieldIDToName_ChatMessagePart = map[int16]string{
	1: "type",
	2: "text",
	3: "image_url",
}

func (p *ChatMessagePart) IsSetType() bool {
	return p.Type != nil
}

func (p *ChatMessagePart) IsSetText() bool {
	return p.Text != nil
}

func (p *ChatMessagePart) IsSetImageURL() bool {
	return p.ImageURL != nil
}

func (p *ChatMessagePart) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ChatMessagePart[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ChatMessagePart) ReadField1(iprot thrift.TProtocol) error {

	var _field *ChatMessagePartType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Type = _field
	return nil
}
func (p *ChatMessagePart) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Text = _field
	return nil
}
func (p *ChatMessagePart) ReadField3(iprot thrift.TProtocol) error {
	_field := NewChatMessageImageURL()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ImageURL = _field
	return nil
}

func (p *ChatMessagePart) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ChatMessagePart"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ChatMessagePart) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("type", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Type); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ChatMessagePart) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetText() {
		if err = oprot.WriteFieldBegin("text", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Text); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ChatMessagePart) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetImageURL() {
		if err = oprot.WriteFieldBegin("image_url", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ImageURL.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ChatMessagePart) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatMessagePart(%+v)", *p)

}

func (p *ChatMessagePart) DeepEqual(ano *ChatMessagePart) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Type) {
		return false
	}
	if !p.Field2DeepEqual(ano.Text) {
		return false
	}
	if !p.Field3DeepEqual(ano.ImageURL) {
		return false
	}
	return true
}

func (p *ChatMessagePart) Field1DeepEqual(src *ChatMessagePartType) bool {

	if p.Type == src {
		return true
	} else if p.Type == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Type, *src) != 0 {
		return false
	}
	return true
}
func (p *ChatMessagePart) Field2DeepEqual(src *string) bool {

	if p.Text == src {
		return true
	} else if p.Text == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Text, *src) != 0 {
		return false
	}
	return true
}
func (p *ChatMessagePart) Field3DeepEqual(src *ChatMessageImageURL) bool {

	if !p.ImageURL.DeepEqual(src) {
		return false
	}
	return true
}

type ChatMessageImageURL struct {
	URL      *string         `thrift:"url,1,optional" frugal:"1,optional,string" form:"url" json:"url,omitempty" query:"url"`
	Detail   *ImageURLDetail `thrift:"detail,2,optional" frugal:"2,optional,string" form:"detail" json:"detail,omitempty" query:"detail"`
	MimeType *string         `thrift:"mime_type,3,optional" frugal:"3,optional,string" form:"mime_type" json:"mime_type,omitempty" query:"mime_type"`
}

func NewChatMessageImageURL() *ChatMessageImageURL {
	return &ChatMessageImageURL{}
}

func (p *ChatMessageImageURL) InitDefault() {
}

var ChatMessageImageURL_URL_DEFAULT string

func (p *ChatMessageImageURL) GetURL() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetURL() {
		return ChatMessageImageURL_URL_DEFAULT
	}
	return *p.URL
}

var ChatMessageImageURL_Detail_DEFAULT ImageURLDetail

func (p *ChatMessageImageURL) GetDetail() (v ImageURLDetail) {
	if p == nil {
		return
	}
	if !p.IsSetDetail() {
		return ChatMessageImageURL_Detail_DEFAULT
	}
	return *p.Detail
}

var ChatMessageImageURL_MimeType_DEFAULT string

func (p *ChatMessageImageURL) GetMimeType() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMimeType() {
		return ChatMessageImageURL_MimeType_DEFAULT
	}
	return *p.MimeType
}
func (p *ChatMessageImageURL) SetURL(val *string) {
	p.URL = val
}
func (p *ChatMessageImageURL) SetDetail(val *ImageURLDetail) {
	p.Detail = val
}
func (p *ChatMessageImageURL) SetMimeType(val *string) {
	p.MimeType = val
}

var fieldIDToName_ChatMessageImageURL = map[int16]string{
	1: "url",
	2: "detail",
	3: "mime_type",
}

func (p *ChatMessageImageURL) IsSetURL() bool {
	return p.URL != nil
}

func (p *ChatMessageImageURL) IsSetDetail() bool {
	return p.Detail != nil
}

func (p *ChatMessageImageURL) IsSetMimeType() bool {
	return p.MimeType != nil
}

func (p *ChatMessageImageURL) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ChatMessageImageURL[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ChatMessageImageURL) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.URL = _field
	return nil
}
func (p *ChatMessageImageURL) ReadField2(iprot thrift.TProtocol) error {

	var _field *ImageURLDetail
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Detail = _field
	return nil
}
func (p *ChatMessageImageURL) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MimeType = _field
	return nil
}

func (p *ChatMessageImageURL) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ChatMessageImageURL"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ChatMessageImageURL) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetURL() {
		if err = oprot.WriteFieldBegin("url", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.URL); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ChatMessageImageURL) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDetail() {
		if err = oprot.WriteFieldBegin("detail", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Detail); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ChatMessageImageURL) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMimeType() {
		if err = oprot.WriteFieldBegin("mime_type", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.MimeType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ChatMessageImageURL) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChatMessageImageURL(%+v)", *p)

}

func (p *ChatMessageImageURL) DeepEqual(ano *ChatMessageImageURL) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.URL) {
		return false
	}
	if !p.Field2DeepEqual(ano.Detail) {
		return false
	}
	if !p.Field3DeepEqual(ano.MimeType) {
		return false
	}
	return true
}

func (p *ChatMessageImageURL) Field1DeepEqual(src *string) bool {

	if p.URL == src {
		return true
	} else if p.URL == nil || src == nil {
		return false
	}
	if strings.Compare(*p.URL, *src) != 0 {
		return false
	}
	return true
}
func (p *ChatMessageImageURL) Field2DeepEqual(src *ImageURLDetail) bool {

	if p.Detail == src {
		return true
	} else if p.Detail == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Detail, *src) != 0 {
		return false
	}
	return true
}
func (p *ChatMessageImageURL) Field3DeepEqual(src *string) bool {

	if p.MimeType == src {
		return true
	} else if p.MimeType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.MimeType, *src) != 0 {
		return false
	}
	return true
}

type ToolCall struct {
	Index        *int64        `thrift:"index,1,optional" frugal:"1,optional,i64" json:"index" form:"index" query:"index"`
	ID           *string       `thrift:"id,2,optional" frugal:"2,optional,string" form:"id" json:"id,omitempty" query:"id"`
	Type         *ToolType     `thrift:"type,3,optional" frugal:"3,optional,string" form:"type" json:"type,omitempty" query:"type"`
	FunctionCall *FunctionCall `thrift:"function_call,4,optional" frugal:"4,optional,FunctionCall" form:"function_call" json:"function_call,omitempty" query:"function_call"`
}

func NewToolCall() *ToolCall {
	return &ToolCall{}
}

func (p *ToolCall) InitDefault() {
}

var ToolCall_Index_DEFAULT int64

func (p *ToolCall) GetIndex() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetIndex() {
		return ToolCall_Index_DEFAULT
	}
	return *p.Index
}

var ToolCall_ID_DEFAULT string

func (p *ToolCall) GetID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetID() {
		return ToolCall_ID_DEFAULT
	}
	return *p.ID
}

var ToolCall_Type_DEFAULT ToolType

func (p *ToolCall) GetType() (v ToolType) {
	if p == nil {
		return
	}
	if !p.IsSetType() {
		return ToolCall_Type_DEFAULT
	}
	return *p.Type
}

var ToolCall_FunctionCall_DEFAULT *FunctionCall

func (p *ToolCall) GetFunctionCall() (v *FunctionCall) {
	if p == nil {
		return
	}
	if !p.IsSetFunctionCall() {
		return ToolCall_FunctionCall_DEFAULT
	}
	return p.FunctionCall
}
func (p *ToolCall) SetIndex(val *int64) {
	p.Index = val
}
func (p *ToolCall) SetID(val *string) {
	p.ID = val
}
func (p *ToolCall) SetType(val *ToolType) {
	p.Type = val
}
func (p *ToolCall) SetFunctionCall(val *FunctionCall) {
	p.FunctionCall = val
}

var fieldIDToName_ToolCall = map[int16]string{
	1: "index",
	2: "id",
	3: "type",
	4: "function_call",
}

func (p *ToolCall) IsSetIndex() bool {
	return p.Index != nil
}

func (p *ToolCall) IsSetID() bool {
	return p.ID != nil
}

func (p *ToolCall) IsSetType() bool {
	return p.Type != nil
}

func (p *ToolCall) IsSetFunctionCall() bool {
	return p.FunctionCall != nil
}

func (p *ToolCall) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ToolCall[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ToolCall) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Index = _field
	return nil
}
func (p *ToolCall) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ID = _field
	return nil
}
func (p *ToolCall) ReadField3(iprot thrift.TProtocol) error {

	var _field *ToolType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Type = _field
	return nil
}
func (p *ToolCall) ReadField4(iprot thrift.TProtocol) error {
	_field := NewFunctionCall()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.FunctionCall = _field
	return nil
}

func (p *ToolCall) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ToolCall"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ToolCall) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIndex() {
		if err = oprot.WriteFieldBegin("index", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Index); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ToolCall) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ToolCall) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("type", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Type); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ToolCall) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetFunctionCall() {
		if err = oprot.WriteFieldBegin("function_call", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.FunctionCall.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ToolCall) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ToolCall(%+v)", *p)

}

func (p *ToolCall) DeepEqual(ano *ToolCall) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Index) {
		return false
	}
	if !p.Field2DeepEqual(ano.ID) {
		return false
	}
	if !p.Field3DeepEqual(ano.Type) {
		return false
	}
	if !p.Field4DeepEqual(ano.FunctionCall) {
		return false
	}
	return true
}

func (p *ToolCall) Field1DeepEqual(src *int64) bool {

	if p.Index == src {
		return true
	} else if p.Index == nil || src == nil {
		return false
	}
	if *p.Index != *src {
		return false
	}
	return true
}
func (p *ToolCall) Field2DeepEqual(src *string) bool {

	if p.ID == src {
		return true
	} else if p.ID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ID, *src) != 0 {
		return false
	}
	return true
}
func (p *ToolCall) Field3DeepEqual(src *ToolType) bool {

	if p.Type == src {
		return true
	} else if p.Type == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Type, *src) != 0 {
		return false
	}
	return true
}
func (p *ToolCall) Field4DeepEqual(src *FunctionCall) bool {

	if !p.FunctionCall.DeepEqual(src) {
		return false
	}
	return true
}

type FunctionCall struct {
	Name      *string `thrift:"name,1,optional" frugal:"1,optional,string" form:"name" json:"name,omitempty" query:"name"`
	Arguments *string `thrift:"arguments,2,optional" frugal:"2,optional,string" form:"arguments" json:"arguments,omitempty" query:"arguments"`
}

func NewFunctionCall() *FunctionCall {
	return &FunctionCall{}
}

func (p *FunctionCall) InitDefault() {
}

var FunctionCall_Name_DEFAULT string

func (p *FunctionCall) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return FunctionCall_Name_DEFAULT
	}
	return *p.Name
}

var FunctionCall_Arguments_DEFAULT string

func (p *FunctionCall) GetArguments() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetArguments() {
		return FunctionCall_Arguments_DEFAULT
	}
	return *p.Arguments
}
func (p *FunctionCall) SetName(val *string) {
	p.Name = val
}
func (p *FunctionCall) SetArguments(val *string) {
	p.Arguments = val
}

var fieldIDToName_FunctionCall = map[int16]string{
	1: "name",
	2: "arguments",
}

func (p *FunctionCall) IsSetName() bool {
	return p.Name != nil
}

func (p *FunctionCall) IsSetArguments() bool {
	return p.Arguments != nil
}

func (p *FunctionCall) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FunctionCall[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FunctionCall) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *FunctionCall) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Arguments = _field
	return nil
}

func (p *FunctionCall) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FunctionCall"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FunctionCall) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *FunctionCall) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetArguments() {
		if err = oprot.WriteFieldBegin("arguments", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Arguments); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *FunctionCall) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FunctionCall(%+v)", *p)

}

func (p *FunctionCall) DeepEqual(ano *FunctionCall) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Arguments) {
		return false
	}
	return true
}

func (p *FunctionCall) Field1DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *FunctionCall) Field2DeepEqual(src *string) bool {

	if p.Arguments == src {
		return true
	} else if p.Arguments == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Arguments, *src) != 0 {
		return false
	}
	return true
}

type ResponseMeta struct {
	FinishReason *string     `thrift:"finish_reason,1,optional" frugal:"1,optional,string" form:"finish_reason" json:"finish_reason,omitempty" query:"finish_reason"`
	Usage        *TokenUsage `thrift:"usage,2,optional" frugal:"2,optional,TokenUsage" form:"usage" json:"usage,omitempty" query:"usage"`
}

func NewResponseMeta() *ResponseMeta {
	return &ResponseMeta{}
}

func (p *ResponseMeta) InitDefault() {
}

var ResponseMeta_FinishReason_DEFAULT string

func (p *ResponseMeta) GetFinishReason() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetFinishReason() {
		return ResponseMeta_FinishReason_DEFAULT
	}
	return *p.FinishReason
}

var ResponseMeta_Usage_DEFAULT *TokenUsage

func (p *ResponseMeta) GetUsage() (v *TokenUsage) {
	if p == nil {
		return
	}
	if !p.IsSetUsage() {
		return ResponseMeta_Usage_DEFAULT
	}
	return p.Usage
}
func (p *ResponseMeta) SetFinishReason(val *string) {
	p.FinishReason = val
}
func (p *ResponseMeta) SetUsage(val *TokenUsage) {
	p.Usage = val
}

var fieldIDToName_ResponseMeta = map[int16]string{
	1: "finish_reason",
	2: "usage",
}

func (p *ResponseMeta) IsSetFinishReason() bool {
	return p.FinishReason != nil
}

func (p *ResponseMeta) IsSetUsage() bool {
	return p.Usage != nil
}

func (p *ResponseMeta) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResponseMeta[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResponseMeta) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FinishReason = _field
	return nil
}
func (p *ResponseMeta) ReadField2(iprot thrift.TProtocol) error {
	_field := NewTokenUsage()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Usage = _field
	return nil
}

func (p *ResponseMeta) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ResponseMeta"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResponseMeta) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetFinishReason() {
		if err = oprot.WriteFieldBegin("finish_reason", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.FinishReason); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ResponseMeta) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUsage() {
		if err = oprot.WriteFieldBegin("usage", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Usage.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ResponseMeta) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResponseMeta(%+v)", *p)

}

func (p *ResponseMeta) DeepEqual(ano *ResponseMeta) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.FinishReason) {
		return false
	}
	if !p.Field2DeepEqual(ano.Usage) {
		return false
	}
	return true
}

func (p *ResponseMeta) Field1DeepEqual(src *string) bool {

	if p.FinishReason == src {
		return true
	} else if p.FinishReason == nil || src == nil {
		return false
	}
	if strings.Compare(*p.FinishReason, *src) != 0 {
		return false
	}
	return true
}
func (p *ResponseMeta) Field2DeepEqual(src *TokenUsage) bool {

	if !p.Usage.DeepEqual(src) {
		return false
	}
	return true
}

type TokenUsage struct {
	PromptTokens     *int64 `thrift:"prompt_tokens,1,optional" frugal:"1,optional,i64" json:"prompt_tokens" form:"prompt_tokens" query:"prompt_tokens"`
	CompletionTokens *int64 `thrift:"completion_tokens,2,optional" frugal:"2,optional,i64" json:"completion_tokens" form:"completion_tokens" query:"completion_tokens"`
	TotalTokens      *int64 `thrift:"total_tokens,3,optional" frugal:"3,optional,i64" json:"total_tokens" form:"total_tokens" query:"total_tokens"`
}

func NewTokenUsage() *TokenUsage {
	return &TokenUsage{}
}

func (p *TokenUsage) InitDefault() {
}

var TokenUsage_PromptTokens_DEFAULT int64

func (p *TokenUsage) GetPromptTokens() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetPromptTokens() {
		return TokenUsage_PromptTokens_DEFAULT
	}
	return *p.PromptTokens
}

var TokenUsage_CompletionTokens_DEFAULT int64

func (p *TokenUsage) GetCompletionTokens() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetCompletionTokens() {
		return TokenUsage_CompletionTokens_DEFAULT
	}
	return *p.CompletionTokens
}

var TokenUsage_TotalTokens_DEFAULT int64

func (p *TokenUsage) GetTotalTokens() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTotalTokens() {
		return TokenUsage_TotalTokens_DEFAULT
	}
	return *p.TotalTokens
}
func (p *TokenUsage) SetPromptTokens(val *int64) {
	p.PromptTokens = val
}
func (p *TokenUsage) SetCompletionTokens(val *int64) {
	p.CompletionTokens = val
}
func (p *TokenUsage) SetTotalTokens(val *int64) {
	p.TotalTokens = val
}

var fieldIDToName_TokenUsage = map[int16]string{
	1: "prompt_tokens",
	2: "completion_tokens",
	3: "total_tokens",
}

func (p *TokenUsage) IsSetPromptTokens() bool {
	return p.PromptTokens != nil
}

func (p *TokenUsage) IsSetCompletionTokens() bool {
	return p.CompletionTokens != nil
}

func (p *TokenUsage) IsSetTotalTokens() bool {
	return p.TotalTokens != nil
}

func (p *TokenUsage) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TokenUsage[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TokenUsage) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PromptTokens = _field
	return nil
}
func (p *TokenUsage) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CompletionTokens = _field
	return nil
}
func (p *TokenUsage) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TotalTokens = _field
	return nil
}

func (p *TokenUsage) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TokenUsage"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TokenUsage) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPromptTokens() {
		if err = oprot.WriteFieldBegin("prompt_tokens", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PromptTokens); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *TokenUsage) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCompletionTokens() {
		if err = oprot.WriteFieldBegin("completion_tokens", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CompletionTokens); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *TokenUsage) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotalTokens() {
		if err = oprot.WriteFieldBegin("total_tokens", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TotalTokens); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TokenUsage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TokenUsage(%+v)", *p)

}

func (p *TokenUsage) DeepEqual(ano *TokenUsage) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PromptTokens) {
		return false
	}
	if !p.Field2DeepEqual(ano.CompletionTokens) {
		return false
	}
	if !p.Field3DeepEqual(ano.TotalTokens) {
		return false
	}
	return true
}

func (p *TokenUsage) Field1DeepEqual(src *int64) bool {

	if p.PromptTokens == src {
		return true
	} else if p.PromptTokens == nil || src == nil {
		return false
	}
	if *p.PromptTokens != *src {
		return false
	}
	return true
}
func (p *TokenUsage) Field2DeepEqual(src *int64) bool {

	if p.CompletionTokens == src {
		return true
	} else if p.CompletionTokens == nil || src == nil {
		return false
	}
	if *p.CompletionTokens != *src {
		return false
	}
	return true
}
func (p *TokenUsage) Field3DeepEqual(src *int64) bool {

	if p.TotalTokens == src {
		return true
	} else if p.TotalTokens == nil || src == nil {
		return false
	}
	if *p.TotalTokens != *src {
		return false
	}
	return true
}

type Tool struct {
	Name    *string      `thrift:"name,1,optional" frugal:"1,optional,string" form:"name" json:"name,omitempty" query:"name"`
	Desc    *string      `thrift:"desc,2,optional" frugal:"2,optional,string" form:"desc" json:"desc,omitempty" query:"desc"`
	DefType *ToolDefType `thrift:"def_type,3,optional" frugal:"3,optional,string" form:"def_type" json:"def_type,omitempty" query:"def_type"`
	// 必须使用openapi3.Schema序列化后的json
	Def *string `thrift:"def,4,optional" frugal:"4,optional,string" form:"def" json:"def,omitempty" query:"def"`
}

func NewTool() *Tool {
	return &Tool{}
}

func (p *Tool) InitDefault() {
}

var Tool_Name_DEFAULT string

func (p *Tool) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return Tool_Name_DEFAULT
	}
	return *p.Name
}

var Tool_Desc_DEFAULT string

func (p *Tool) GetDesc() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDesc() {
		return Tool_Desc_DEFAULT
	}
	return *p.Desc
}

var Tool_DefType_DEFAULT ToolDefType

func (p *Tool) GetDefType() (v ToolDefType) {
	if p == nil {
		return
	}
	if !p.IsSetDefType() {
		return Tool_DefType_DEFAULT
	}
	return *p.DefType
}

var Tool_Def_DEFAULT string

func (p *Tool) GetDef() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDef() {
		return Tool_Def_DEFAULT
	}
	return *p.Def
}
func (p *Tool) SetName(val *string) {
	p.Name = val
}
func (p *Tool) SetDesc(val *string) {
	p.Desc = val
}
func (p *Tool) SetDefType(val *ToolDefType) {
	p.DefType = val
}
func (p *Tool) SetDef(val *string) {
	p.Def = val
}

var fieldIDToName_Tool = map[int16]string{
	1: "name",
	2: "desc",
	3: "def_type",
	4: "def",
}

func (p *Tool) IsSetName() bool {
	return p.Name != nil
}

func (p *Tool) IsSetDesc() bool {
	return p.Desc != nil
}

func (p *Tool) IsSetDefType() bool {
	return p.DefType != nil
}

func (p *Tool) IsSetDef() bool {
	return p.Def != nil
}

func (p *Tool) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Tool[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Tool) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *Tool) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Desc = _field
	return nil
}
func (p *Tool) ReadField3(iprot thrift.TProtocol) error {

	var _field *ToolDefType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DefType = _field
	return nil
}
func (p *Tool) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Def = _field
	return nil
}

func (p *Tool) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Tool"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Tool) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *Tool) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDesc() {
		if err = oprot.WriteFieldBegin("desc", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Desc); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *Tool) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDefType() {
		if err = oprot.WriteFieldBegin("def_type", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.DefType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *Tool) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDef() {
		if err = oprot.WriteFieldBegin("def", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Def); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *Tool) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Tool(%+v)", *p)

}

func (p *Tool) DeepEqual(ano *Tool) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Desc) {
		return false
	}
	if !p.Field3DeepEqual(ano.DefType) {
		return false
	}
	if !p.Field4DeepEqual(ano.Def) {
		return false
	}
	return true
}

func (p *Tool) Field1DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *Tool) Field2DeepEqual(src *string) bool {

	if p.Desc == src {
		return true
	} else if p.Desc == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Desc, *src) != 0 {
		return false
	}
	return true
}
func (p *Tool) Field3DeepEqual(src *ToolDefType) bool {

	if p.DefType == src {
		return true
	} else if p.DefType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.DefType, *src) != 0 {
		return false
	}
	return true
}
func (p *Tool) Field4DeepEqual(src *string) bool {

	if p.Def == src {
		return true
	} else if p.Def == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Def, *src) != 0 {
		return false
	}
	return true
}

type BizParam struct {
	WorkspaceID *int64  `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" form:"workspace_id" query:"workspace_id"`
	UserID      *string `thrift:"user_id,2,optional" frugal:"2,optional,string" form:"user_id" json:"user_id,omitempty" query:"user_id"`
	// 使用场景
	Scenario *common.Scenario `thrift:"scenario,3,optional" frugal:"3,optional,string" form:"scenario" json:"scenario,omitempty" query:"scenario"`
	// 场景实体id(非必填)
	ScenarioEntityID *string `thrift:"scenario_entity_id,4,optional" frugal:"4,optional,string" form:"scenario_entity_id" json:"scenario_entity_id,omitempty" query:"scenario_entity_id"`
	// 场景实体version(非必填)
	ScenarioEntityVersion *string `thrift:"scenario_entity_version,5,optional" frugal:"5,optional,string" form:"scenario_entity_version" json:"scenario_entity_version,omitempty" query:"scenario_entity_version"`
	// 场景实体key(非必填), prompt场景需要传prompt key
	ScenarioEntityKey *string `thrift:"scenario_entity_key,6,optional" frugal:"6,optional,string" form:"scenario_entity_key" json:"scenario_entity_key,omitempty" query:"scenario_entity_key"`
}

func NewBizParam() *BizParam {
	return &BizParam{}
}

func (p *BizParam) InitDefault() {
}

var BizParam_WorkspaceID_DEFAULT int64

func (p *BizParam) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return BizParam_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var BizParam_UserID_DEFAULT string

func (p *BizParam) GetUserID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetUserID() {
		return BizParam_UserID_DEFAULT
	}
	return *p.UserID
}

var BizParam_Scenario_DEFAULT common.Scenario

func (p *BizParam) GetScenario() (v common.Scenario) {
	if p == nil {
		return
	}
	if !p.IsSetScenario() {
		return BizParam_Scenario_DEFAULT
	}
	return *p.Scenario
}

var BizParam_ScenarioEntityID_DEFAULT string

func (p *BizParam) GetScenarioEntityID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetScenarioEntityID() {
		return BizParam_ScenarioEntityID_DEFAULT
	}
	return *p.ScenarioEntityID
}

var BizParam_ScenarioEntityVersion_DEFAULT string

func (p *BizParam) GetScenarioEntityVersion() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetScenarioEntityVersion() {
		return BizParam_ScenarioEntityVersion_DEFAULT
	}
	return *p.ScenarioEntityVersion
}

var BizParam_ScenarioEntityKey_DEFAULT string

func (p *BizParam) GetScenarioEntityKey() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetScenarioEntityKey() {
		return BizParam_ScenarioEntityKey_DEFAULT
	}
	return *p.ScenarioEntityKey
}
func (p *BizParam) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *BizParam) SetUserID(val *string) {
	p.UserID = val
}
func (p *BizParam) SetScenario(val *common.Scenario) {
	p.Scenario = val
}
func (p *BizParam) SetScenarioEntityID(val *string) {
	p.ScenarioEntityID = val
}
func (p *BizParam) SetScenarioEntityVersion(val *string) {
	p.ScenarioEntityVersion = val
}
func (p *BizParam) SetScenarioEntityKey(val *string) {
	p.ScenarioEntityKey = val
}

var fieldIDToName_BizParam = map[int16]string{
	1: "workspace_id",
	2: "user_id",
	3: "scenario",
	4: "scenario_entity_id",
	5: "scenario_entity_version",
	6: "scenario_entity_key",
}

func (p *BizParam) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *BizParam) IsSetUserID() bool {
	return p.UserID != nil
}

func (p *BizParam) IsSetScenario() bool {
	return p.Scenario != nil
}

func (p *BizParam) IsSetScenarioEntityID() bool {
	return p.ScenarioEntityID != nil
}

func (p *BizParam) IsSetScenarioEntityVersion() bool {
	return p.ScenarioEntityVersion != nil
}

func (p *BizParam) IsSetScenarioEntityKey() bool {
	return p.ScenarioEntityKey != nil
}

func (p *BizParam) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BizParam[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BizParam) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *BizParam) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UserID = _field
	return nil
}
func (p *BizParam) ReadField3(iprot thrift.TProtocol) error {

	var _field *common.Scenario
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Scenario = _field
	return nil
}
func (p *BizParam) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ScenarioEntityID = _field
	return nil
}
func (p *BizParam) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ScenarioEntityVersion = _field
	return nil
}
func (p *BizParam) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ScenarioEntityKey = _field
	return nil
}

func (p *BizParam) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BizParam"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BizParam) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BizParam) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserID() {
		if err = oprot.WriteFieldBegin("user_id", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.UserID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BizParam) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetScenario() {
		if err = oprot.WriteFieldBegin("scenario", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Scenario); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *BizParam) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetScenarioEntityID() {
		if err = oprot.WriteFieldBegin("scenario_entity_id", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ScenarioEntityID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *BizParam) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetScenarioEntityVersion() {
		if err = oprot.WriteFieldBegin("scenario_entity_version", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ScenarioEntityVersion); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *BizParam) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetScenarioEntityKey() {
		if err = oprot.WriteFieldBegin("scenario_entity_key", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ScenarioEntityKey); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *BizParam) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BizParam(%+v)", *p)

}

func (p *BizParam) DeepEqual(ano *BizParam) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.UserID) {
		return false
	}
	if !p.Field3DeepEqual(ano.Scenario) {
		return false
	}
	if !p.Field4DeepEqual(ano.ScenarioEntityID) {
		return false
	}
	if !p.Field5DeepEqual(ano.ScenarioEntityVersion) {
		return false
	}
	if !p.Field6DeepEqual(ano.ScenarioEntityKey) {
		return false
	}
	return true
}

func (p *BizParam) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *BizParam) Field2DeepEqual(src *string) bool {

	if p.UserID == src {
		return true
	} else if p.UserID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.UserID, *src) != 0 {
		return false
	}
	return true
}
func (p *BizParam) Field3DeepEqual(src *common.Scenario) bool {

	if p.Scenario == src {
		return true
	} else if p.Scenario == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Scenario, *src) != 0 {
		return false
	}
	return true
}
func (p *BizParam) Field4DeepEqual(src *string) bool {

	if p.ScenarioEntityID == src {
		return true
	} else if p.ScenarioEntityID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ScenarioEntityID, *src) != 0 {
		return false
	}
	return true
}
func (p *BizParam) Field5DeepEqual(src *string) bool {

	if p.ScenarioEntityVersion == src {
		return true
	} else if p.ScenarioEntityVersion == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ScenarioEntityVersion, *src) != 0 {
		return false
	}
	return true
}
func (p *BizParam) Field6DeepEqual(src *string) bool {

	if p.ScenarioEntityKey == src {
		return true
	} else if p.ScenarioEntityKey == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ScenarioEntityKey, *src) != 0 {
		return false
	}
	return true
}

type ResponseFormat struct {
	Type *ResponseFormatType `thrift:"type,1,optional" frugal:"1,optional,string" form:"type" json:"type,omitempty" query:"type"`
}

func NewResponseFormat() *ResponseFormat {
	return &ResponseFormat{}
}

func (p *ResponseFormat) InitDefault() {
}

var ResponseFormat_Type_DEFAULT ResponseFormatType

func (p *ResponseFormat) GetType() (v ResponseFormatType) {
	if p == nil {
		return
	}
	if !p.IsSetType() {
		return ResponseFormat_Type_DEFAULT
	}
	return *p.Type
}
func (p *ResponseFormat) SetType(val *ResponseFormatType) {
	p.Type = val
}

var fieldIDToName_ResponseFormat = map[int16]string{
	1: "type",
}

func (p *ResponseFormat) IsSetType() bool {
	return p.Type != nil
}

func (p *ResponseFormat) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ResponseFormat[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ResponseFormat) ReadField1(iprot thrift.TProtocol) error {

	var _field *ResponseFormatType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Type = _field
	return nil
}

func (p *ResponseFormat) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ResponseFormat"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ResponseFormat) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("type", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Type); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ResponseFormat) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ResponseFormat(%+v)", *p)

}

func (p *ResponseFormat) DeepEqual(ano *ResponseFormat) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Type) {
		return false
	}
	return true
}

func (p *ResponseFormat) Field1DeepEqual(src *ResponseFormatType) bool {

	if p.Type == src {
		return true
	} else if p.Type == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Type, *src) != 0 {
		return false
	}
	return true
}
