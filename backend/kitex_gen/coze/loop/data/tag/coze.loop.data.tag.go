// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package tag

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/base"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/data/domain/dataset"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/data/domain/tag"
	"strings"
)

type CreateTagRequest struct {
	WorkspaceID    int64               `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" query:"workspace_id,required"`
	TagKeyName     string              `thrift:"tag_key_name,2,required" frugal:"2,required,string" form:"tag_key_name,required" json:"tag_key_name,required" query:"tag_key_name,required"`
	Description    *string             `thrift:"description,3,optional" frugal:"3,optional,string" form:"description" json:"description,omitempty" query:"description"`
	TagContentSpec *tag.TagContentSpec `thrift:"tag_content_spec,4,optional" frugal:"4,optional,tag.TagContentSpec" form:"tag_content_spec" json:"tag_content_spec,omitempty" query:"tag_content_spec"`
	TagValues      []*tag.TagValue     `thrift:"tag_values,5,optional" frugal:"5,optional,list<tag.TagValue>" form:"tag_values" json:"tag_values,omitempty" query:"tag_values"`
	TagDomainTypes []tag.TagDomainType `thrift:"tag_domain_types,6,optional" frugal:"6,optional,list<string>" form:"tag_domain_types" json:"tag_domain_types,omitempty" query:"tag_domain_types"`
	TagContentType *tag.TagContentType `thrift:"tag_content_type,7,optional" frugal:"7,optional,string" form:"tag_content_type" json:"tag_content_type,omitempty" query:"tag_content_type"`
	Version        *string             `thrift:"version,8,optional" frugal:"8,optional,string" form:"version" json:"version,omitempty" query:"version"`
	Base           *base.Base          `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewCreateTagRequest() *CreateTagRequest {
	return &CreateTagRequest{}
}

func (p *CreateTagRequest) InitDefault() {
}

func (p *CreateTagRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *CreateTagRequest) GetTagKeyName() (v string) {
	if p != nil {
		return p.TagKeyName
	}
	return
}

var CreateTagRequest_Description_DEFAULT string

func (p *CreateTagRequest) GetDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDescription() {
		return CreateTagRequest_Description_DEFAULT
	}
	return *p.Description
}

var CreateTagRequest_TagContentSpec_DEFAULT *tag.TagContentSpec

func (p *CreateTagRequest) GetTagContentSpec() (v *tag.TagContentSpec) {
	if p == nil {
		return
	}
	if !p.IsSetTagContentSpec() {
		return CreateTagRequest_TagContentSpec_DEFAULT
	}
	return p.TagContentSpec
}

var CreateTagRequest_TagValues_DEFAULT []*tag.TagValue

func (p *CreateTagRequest) GetTagValues() (v []*tag.TagValue) {
	if p == nil {
		return
	}
	if !p.IsSetTagValues() {
		return CreateTagRequest_TagValues_DEFAULT
	}
	return p.TagValues
}

var CreateTagRequest_TagDomainTypes_DEFAULT []tag.TagDomainType

func (p *CreateTagRequest) GetTagDomainTypes() (v []tag.TagDomainType) {
	if p == nil {
		return
	}
	if !p.IsSetTagDomainTypes() {
		return CreateTagRequest_TagDomainTypes_DEFAULT
	}
	return p.TagDomainTypes
}

var CreateTagRequest_TagContentType_DEFAULT tag.TagContentType

func (p *CreateTagRequest) GetTagContentType() (v tag.TagContentType) {
	if p == nil {
		return
	}
	if !p.IsSetTagContentType() {
		return CreateTagRequest_TagContentType_DEFAULT
	}
	return *p.TagContentType
}

var CreateTagRequest_Version_DEFAULT string

func (p *CreateTagRequest) GetVersion() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetVersion() {
		return CreateTagRequest_Version_DEFAULT
	}
	return *p.Version
}

var CreateTagRequest_Base_DEFAULT *base.Base

func (p *CreateTagRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return CreateTagRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *CreateTagRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *CreateTagRequest) SetTagKeyName(val string) {
	p.TagKeyName = val
}
func (p *CreateTagRequest) SetDescription(val *string) {
	p.Description = val
}
func (p *CreateTagRequest) SetTagContentSpec(val *tag.TagContentSpec) {
	p.TagContentSpec = val
}
func (p *CreateTagRequest) SetTagValues(val []*tag.TagValue) {
	p.TagValues = val
}
func (p *CreateTagRequest) SetTagDomainTypes(val []tag.TagDomainType) {
	p.TagDomainTypes = val
}
func (p *CreateTagRequest) SetTagContentType(val *tag.TagContentType) {
	p.TagContentType = val
}
func (p *CreateTagRequest) SetVersion(val *string) {
	p.Version = val
}
func (p *CreateTagRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_CreateTagRequest = map[int16]string{
	1:   "workspace_id",
	2:   "tag_key_name",
	3:   "description",
	4:   "tag_content_spec",
	5:   "tag_values",
	6:   "tag_domain_types",
	7:   "tag_content_type",
	8:   "version",
	255: "Base",
}

func (p *CreateTagRequest) IsSetDescription() bool {
	return p.Description != nil
}

func (p *CreateTagRequest) IsSetTagContentSpec() bool {
	return p.TagContentSpec != nil
}

func (p *CreateTagRequest) IsSetTagValues() bool {
	return p.TagValues != nil
}

func (p *CreateTagRequest) IsSetTagDomainTypes() bool {
	return p.TagDomainTypes != nil
}

func (p *CreateTagRequest) IsSetTagContentType() bool {
	return p.TagContentType != nil
}

func (p *CreateTagRequest) IsSetVersion() bool {
	return p.Version != nil
}

func (p *CreateTagRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateTagRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetTagKeyName bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTagKeyName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTagKeyName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateTagRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CreateTagRequest[fieldId]))
}

func (p *CreateTagRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *CreateTagRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TagKeyName = _field
	return nil
}
func (p *CreateTagRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}
func (p *CreateTagRequest) ReadField4(iprot thrift.TProtocol) error {
	_field := tag.NewTagContentSpec()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.TagContentSpec = _field
	return nil
}
func (p *CreateTagRequest) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*tag.TagValue, 0, size)
	values := make([]tag.TagValue, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.TagValues = _field
	return nil
}
func (p *CreateTagRequest) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]tag.TagDomainType, 0, size)
	for i := 0; i < size; i++ {

		var _elem tag.TagDomainType
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.TagDomainTypes = _field
	return nil
}
func (p *CreateTagRequest) ReadField7(iprot thrift.TProtocol) error {

	var _field *tag.TagContentType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TagContentType = _field
	return nil
}
func (p *CreateTagRequest) ReadField8(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Version = _field
	return nil
}
func (p *CreateTagRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *CreateTagRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateTagRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateTagRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CreateTagRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tag_key_name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TagKeyName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *CreateTagRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *CreateTagRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagContentSpec() {
		if err = oprot.WriteFieldBegin("tag_content_spec", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.TagContentSpec.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *CreateTagRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagValues() {
		if err = oprot.WriteFieldBegin("tag_values", thrift.LIST, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TagValues)); err != nil {
			return err
		}
		for _, v := range p.TagValues {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *CreateTagRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagDomainTypes() {
		if err = oprot.WriteFieldBegin("tag_domain_types", thrift.LIST, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.TagDomainTypes)); err != nil {
			return err
		}
		for _, v := range p.TagDomainTypes {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *CreateTagRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagContentType() {
		if err = oprot.WriteFieldBegin("tag_content_type", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TagContentType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}
func (p *CreateTagRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err = oprot.WriteFieldBegin("version", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Version); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}
func (p *CreateTagRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateTagRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateTagRequest(%+v)", *p)

}

func (p *CreateTagRequest) DeepEqual(ano *CreateTagRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.TagKeyName) {
		return false
	}
	if !p.Field3DeepEqual(ano.Description) {
		return false
	}
	if !p.Field4DeepEqual(ano.TagContentSpec) {
		return false
	}
	if !p.Field5DeepEqual(ano.TagValues) {
		return false
	}
	if !p.Field6DeepEqual(ano.TagDomainTypes) {
		return false
	}
	if !p.Field7DeepEqual(ano.TagContentType) {
		return false
	}
	if !p.Field8DeepEqual(ano.Version) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *CreateTagRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *CreateTagRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.TagKeyName, src) != 0 {
		return false
	}
	return true
}
func (p *CreateTagRequest) Field3DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateTagRequest) Field4DeepEqual(src *tag.TagContentSpec) bool {

	if !p.TagContentSpec.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateTagRequest) Field5DeepEqual(src []*tag.TagValue) bool {

	if len(p.TagValues) != len(src) {
		return false
	}
	for i, v := range p.TagValues {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *CreateTagRequest) Field6DeepEqual(src []tag.TagDomainType) bool {

	if len(p.TagDomainTypes) != len(src) {
		return false
	}
	for i, v := range p.TagDomainTypes {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *CreateTagRequest) Field7DeepEqual(src *tag.TagContentType) bool {

	if p.TagContentType == src {
		return true
	} else if p.TagContentType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TagContentType, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateTagRequest) Field8DeepEqual(src *string) bool {

	if p.Version == src {
		return true
	} else if p.Version == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Version, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateTagRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type CreateTagResponse struct {
	TagKeyID *int64         `thrift:"tag_key_id,1,optional" frugal:"1,optional,i64" json:"tag_key_id" form:"tag_key_id" query:"tag_key_id"`
	BaseResp *base.BaseResp `thrift:"BaseResp,255,optional" frugal:"255,optional,base.BaseResp" form:"BaseResp" json:"BaseResp,omitempty" query:"BaseResp"`
}

func NewCreateTagResponse() *CreateTagResponse {
	return &CreateTagResponse{}
}

func (p *CreateTagResponse) InitDefault() {
}

var CreateTagResponse_TagKeyID_DEFAULT int64

func (p *CreateTagResponse) GetTagKeyID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTagKeyID() {
		return CreateTagResponse_TagKeyID_DEFAULT
	}
	return *p.TagKeyID
}

var CreateTagResponse_BaseResp_DEFAULT *base.BaseResp

func (p *CreateTagResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return CreateTagResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CreateTagResponse) SetTagKeyID(val *int64) {
	p.TagKeyID = val
}
func (p *CreateTagResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_CreateTagResponse = map[int16]string{
	1:   "tag_key_id",
	255: "BaseResp",
}

func (p *CreateTagResponse) IsSetTagKeyID() bool {
	return p.TagKeyID != nil
}

func (p *CreateTagResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CreateTagResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateTagResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateTagResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TagKeyID = _field
	return nil
}
func (p *CreateTagResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *CreateTagResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateTagResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateTagResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagKeyID() {
		if err = oprot.WriteFieldBegin("tag_key_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TagKeyID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CreateTagResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseResp() {
		if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseResp.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateTagResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateTagResponse(%+v)", *p)

}

func (p *CreateTagResponse) DeepEqual(ano *CreateTagResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TagKeyID) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *CreateTagResponse) Field1DeepEqual(src *int64) bool {

	if p.TagKeyID == src {
		return true
	} else if p.TagKeyID == nil || src == nil {
		return false
	}
	if *p.TagKeyID != *src {
		return false
	}
	return true
}
func (p *CreateTagResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateTagRequest struct {
	WorkspaceID    int64               `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" query:"workspace_id,required"`
	TagKeyID       int64               `thrift:"tag_key_id,2,required" frugal:"2,required,i64" json:"tag_key_id" path:"tag_key_id,required" `
	TagKeyName     string              `thrift:"tag_key_name,3,required" frugal:"3,required,string" form:"tag_key_name,required" json:"tag_key_name,required" query:"tag_key_name,required"`
	Description    *string             `thrift:"description,4,optional" frugal:"4,optional,string" form:"description" json:"description,omitempty" query:"description"`
	TagContentSpec *tag.TagContentSpec `thrift:"tag_content_spec,5,optional" frugal:"5,optional,tag.TagContentSpec" form:"tag_content_spec" json:"tag_content_spec,omitempty" query:"tag_content_spec"`
	TagValues      []*tag.TagValue     `thrift:"tag_values,6,optional" frugal:"6,optional,list<tag.TagValue>" form:"tag_values" json:"tag_values,omitempty" query:"tag_values"`
	TagDomainTypes []tag.TagDomainType `thrift:"tag_domain_types,7,optional" frugal:"7,optional,list<string>" form:"tag_domain_types" json:"tag_domain_types,omitempty" query:"tag_domain_types"`
	TagContentType *tag.TagContentType `thrift:"tag_content_type,8,optional" frugal:"8,optional,string" form:"tag_content_type" json:"tag_content_type,omitempty" query:"tag_content_type"`
	Version        *string             `thrift:"version,9,optional" frugal:"9,optional,string" form:"version" json:"version,omitempty" query:"version"`
	Base           *base.Base          `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewUpdateTagRequest() *UpdateTagRequest {
	return &UpdateTagRequest{}
}

func (p *UpdateTagRequest) InitDefault() {
}

func (p *UpdateTagRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *UpdateTagRequest) GetTagKeyID() (v int64) {
	if p != nil {
		return p.TagKeyID
	}
	return
}

func (p *UpdateTagRequest) GetTagKeyName() (v string) {
	if p != nil {
		return p.TagKeyName
	}
	return
}

var UpdateTagRequest_Description_DEFAULT string

func (p *UpdateTagRequest) GetDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDescription() {
		return UpdateTagRequest_Description_DEFAULT
	}
	return *p.Description
}

var UpdateTagRequest_TagContentSpec_DEFAULT *tag.TagContentSpec

func (p *UpdateTagRequest) GetTagContentSpec() (v *tag.TagContentSpec) {
	if p == nil {
		return
	}
	if !p.IsSetTagContentSpec() {
		return UpdateTagRequest_TagContentSpec_DEFAULT
	}
	return p.TagContentSpec
}

var UpdateTagRequest_TagValues_DEFAULT []*tag.TagValue

func (p *UpdateTagRequest) GetTagValues() (v []*tag.TagValue) {
	if p == nil {
		return
	}
	if !p.IsSetTagValues() {
		return UpdateTagRequest_TagValues_DEFAULT
	}
	return p.TagValues
}

var UpdateTagRequest_TagDomainTypes_DEFAULT []tag.TagDomainType

func (p *UpdateTagRequest) GetTagDomainTypes() (v []tag.TagDomainType) {
	if p == nil {
		return
	}
	if !p.IsSetTagDomainTypes() {
		return UpdateTagRequest_TagDomainTypes_DEFAULT
	}
	return p.TagDomainTypes
}

var UpdateTagRequest_TagContentType_DEFAULT tag.TagContentType

func (p *UpdateTagRequest) GetTagContentType() (v tag.TagContentType) {
	if p == nil {
		return
	}
	if !p.IsSetTagContentType() {
		return UpdateTagRequest_TagContentType_DEFAULT
	}
	return *p.TagContentType
}

var UpdateTagRequest_Version_DEFAULT string

func (p *UpdateTagRequest) GetVersion() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetVersion() {
		return UpdateTagRequest_Version_DEFAULT
	}
	return *p.Version
}

var UpdateTagRequest_Base_DEFAULT *base.Base

func (p *UpdateTagRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return UpdateTagRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *UpdateTagRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *UpdateTagRequest) SetTagKeyID(val int64) {
	p.TagKeyID = val
}
func (p *UpdateTagRequest) SetTagKeyName(val string) {
	p.TagKeyName = val
}
func (p *UpdateTagRequest) SetDescription(val *string) {
	p.Description = val
}
func (p *UpdateTagRequest) SetTagContentSpec(val *tag.TagContentSpec) {
	p.TagContentSpec = val
}
func (p *UpdateTagRequest) SetTagValues(val []*tag.TagValue) {
	p.TagValues = val
}
func (p *UpdateTagRequest) SetTagDomainTypes(val []tag.TagDomainType) {
	p.TagDomainTypes = val
}
func (p *UpdateTagRequest) SetTagContentType(val *tag.TagContentType) {
	p.TagContentType = val
}
func (p *UpdateTagRequest) SetVersion(val *string) {
	p.Version = val
}
func (p *UpdateTagRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_UpdateTagRequest = map[int16]string{
	1:   "workspace_id",
	2:   "tag_key_id",
	3:   "tag_key_name",
	4:   "description",
	5:   "tag_content_spec",
	6:   "tag_values",
	7:   "tag_domain_types",
	8:   "tag_content_type",
	9:   "version",
	255: "Base",
}

func (p *UpdateTagRequest) IsSetDescription() bool {
	return p.Description != nil
}

func (p *UpdateTagRequest) IsSetTagContentSpec() bool {
	return p.TagContentSpec != nil
}

func (p *UpdateTagRequest) IsSetTagValues() bool {
	return p.TagValues != nil
}

func (p *UpdateTagRequest) IsSetTagDomainTypes() bool {
	return p.TagDomainTypes != nil
}

func (p *UpdateTagRequest) IsSetTagContentType() bool {
	return p.TagContentType != nil
}

func (p *UpdateTagRequest) IsSetVersion() bool {
	return p.Version != nil
}

func (p *UpdateTagRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateTagRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetTagKeyID bool = false
	var issetTagKeyName bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTagKeyID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetTagKeyName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTagKeyID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetTagKeyName {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateTagRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_UpdateTagRequest[fieldId]))
}

func (p *UpdateTagRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *UpdateTagRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TagKeyID = _field
	return nil
}
func (p *UpdateTagRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TagKeyName = _field
	return nil
}
func (p *UpdateTagRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}
func (p *UpdateTagRequest) ReadField5(iprot thrift.TProtocol) error {
	_field := tag.NewTagContentSpec()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.TagContentSpec = _field
	return nil
}
func (p *UpdateTagRequest) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*tag.TagValue, 0, size)
	values := make([]tag.TagValue, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.TagValues = _field
	return nil
}
func (p *UpdateTagRequest) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]tag.TagDomainType, 0, size)
	for i := 0; i < size; i++ {

		var _elem tag.TagDomainType
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.TagDomainTypes = _field
	return nil
}
func (p *UpdateTagRequest) ReadField8(iprot thrift.TProtocol) error {

	var _field *tag.TagContentType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TagContentType = _field
	return nil
}
func (p *UpdateTagRequest) ReadField9(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Version = _field
	return nil
}
func (p *UpdateTagRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *UpdateTagRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateTagRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateTagRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *UpdateTagRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tag_key_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TagKeyID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *UpdateTagRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tag_key_name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TagKeyName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *UpdateTagRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *UpdateTagRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagContentSpec() {
		if err = oprot.WriteFieldBegin("tag_content_spec", thrift.STRUCT, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.TagContentSpec.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *UpdateTagRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagValues() {
		if err = oprot.WriteFieldBegin("tag_values", thrift.LIST, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TagValues)); err != nil {
			return err
		}
		for _, v := range p.TagValues {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *UpdateTagRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagDomainTypes() {
		if err = oprot.WriteFieldBegin("tag_domain_types", thrift.LIST, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.TagDomainTypes)); err != nil {
			return err
		}
		for _, v := range p.TagDomainTypes {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}
func (p *UpdateTagRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagContentType() {
		if err = oprot.WriteFieldBegin("tag_content_type", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TagContentType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}
func (p *UpdateTagRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err = oprot.WriteFieldBegin("version", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Version); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}
func (p *UpdateTagRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpdateTagRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateTagRequest(%+v)", *p)

}

func (p *UpdateTagRequest) DeepEqual(ano *UpdateTagRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.TagKeyID) {
		return false
	}
	if !p.Field3DeepEqual(ano.TagKeyName) {
		return false
	}
	if !p.Field4DeepEqual(ano.Description) {
		return false
	}
	if !p.Field5DeepEqual(ano.TagContentSpec) {
		return false
	}
	if !p.Field6DeepEqual(ano.TagValues) {
		return false
	}
	if !p.Field7DeepEqual(ano.TagDomainTypes) {
		return false
	}
	if !p.Field8DeepEqual(ano.TagContentType) {
		return false
	}
	if !p.Field9DeepEqual(ano.Version) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *UpdateTagRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *UpdateTagRequest) Field2DeepEqual(src int64) bool {

	if p.TagKeyID != src {
		return false
	}
	return true
}
func (p *UpdateTagRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.TagKeyName, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateTagRequest) Field4DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *UpdateTagRequest) Field5DeepEqual(src *tag.TagContentSpec) bool {

	if !p.TagContentSpec.DeepEqual(src) {
		return false
	}
	return true
}
func (p *UpdateTagRequest) Field6DeepEqual(src []*tag.TagValue) bool {

	if len(p.TagValues) != len(src) {
		return false
	}
	for i, v := range p.TagValues {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *UpdateTagRequest) Field7DeepEqual(src []tag.TagDomainType) bool {

	if len(p.TagDomainTypes) != len(src) {
		return false
	}
	for i, v := range p.TagDomainTypes {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *UpdateTagRequest) Field8DeepEqual(src *tag.TagContentType) bool {

	if p.TagContentType == src {
		return true
	} else if p.TagContentType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TagContentType, *src) != 0 {
		return false
	}
	return true
}
func (p *UpdateTagRequest) Field9DeepEqual(src *string) bool {

	if p.Version == src {
		return true
	} else if p.Version == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Version, *src) != 0 {
		return false
	}
	return true
}
func (p *UpdateTagRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateTagResponse struct {
	BaseResp *base.BaseResp `thrift:"BaseResp,255,optional" frugal:"255,optional,base.BaseResp" form:"BaseResp" json:"BaseResp,omitempty" query:"BaseResp"`
}

func NewUpdateTagResponse() *UpdateTagResponse {
	return &UpdateTagResponse{}
}

func (p *UpdateTagResponse) InitDefault() {
}

var UpdateTagResponse_BaseResp_DEFAULT *base.BaseResp

func (p *UpdateTagResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return UpdateTagResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *UpdateTagResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_UpdateTagResponse = map[int16]string{
	255: "BaseResp",
}

func (p *UpdateTagResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *UpdateTagResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateTagResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateTagResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *UpdateTagResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateTagResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateTagResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseResp() {
		if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseResp.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpdateTagResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateTagResponse(%+v)", *p)

}

func (p *UpdateTagResponse) DeepEqual(ano *UpdateTagResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *UpdateTagResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type BatchUpdateTagStatusRequest struct {
	WorkspaceID int64         `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" query:"workspace_id,required"`
	TagKeyIds   []int64       `thrift:"tag_key_ids,2,required" frugal:"2,required,list<i64>" json:"tag_key_ids" form:"tag_key_ids,required" query:"tag_key_ids,required"`
	ToStatus    tag.TagStatus `thrift:"to_status,3,required" frugal:"3,required,string" form:"to_status,required" json:"to_status,required" query:"to_status,required"`
	Base        *base.Base    `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewBatchUpdateTagStatusRequest() *BatchUpdateTagStatusRequest {
	return &BatchUpdateTagStatusRequest{}
}

func (p *BatchUpdateTagStatusRequest) InitDefault() {
}

func (p *BatchUpdateTagStatusRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *BatchUpdateTagStatusRequest) GetTagKeyIds() (v []int64) {
	if p != nil {
		return p.TagKeyIds
	}
	return
}

func (p *BatchUpdateTagStatusRequest) GetToStatus() (v tag.TagStatus) {
	if p != nil {
		return p.ToStatus
	}
	return
}

var BatchUpdateTagStatusRequest_Base_DEFAULT *base.Base

func (p *BatchUpdateTagStatusRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return BatchUpdateTagStatusRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *BatchUpdateTagStatusRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *BatchUpdateTagStatusRequest) SetTagKeyIds(val []int64) {
	p.TagKeyIds = val
}
func (p *BatchUpdateTagStatusRequest) SetToStatus(val tag.TagStatus) {
	p.ToStatus = val
}
func (p *BatchUpdateTagStatusRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_BatchUpdateTagStatusRequest = map[int16]string{
	1:   "workspace_id",
	2:   "tag_key_ids",
	3:   "to_status",
	255: "Base",
}

func (p *BatchUpdateTagStatusRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *BatchUpdateTagStatusRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetTagKeyIds bool = false
	var issetToStatus bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTagKeyIds = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetToStatus = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTagKeyIds {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetToStatus {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchUpdateTagStatusRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_BatchUpdateTagStatusRequest[fieldId]))
}

func (p *BatchUpdateTagStatusRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *BatchUpdateTagStatusRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.TagKeyIds = _field
	return nil
}
func (p *BatchUpdateTagStatusRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field tag.TagStatus
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ToStatus = _field
	return nil
}
func (p *BatchUpdateTagStatusRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *BatchUpdateTagStatusRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchUpdateTagStatusRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchUpdateTagStatusRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchUpdateTagStatusRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tag_key_ids", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.TagKeyIds)); err != nil {
		return err
	}
	for _, v := range p.TagKeyIds {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BatchUpdateTagStatusRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("to_status", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ToStatus); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *BatchUpdateTagStatusRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchUpdateTagStatusRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchUpdateTagStatusRequest(%+v)", *p)

}

func (p *BatchUpdateTagStatusRequest) DeepEqual(ano *BatchUpdateTagStatusRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.TagKeyIds) {
		return false
	}
	if !p.Field3DeepEqual(ano.ToStatus) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *BatchUpdateTagStatusRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *BatchUpdateTagStatusRequest) Field2DeepEqual(src []int64) bool {

	if len(p.TagKeyIds) != len(src) {
		return false
	}
	for i, v := range p.TagKeyIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *BatchUpdateTagStatusRequest) Field3DeepEqual(src tag.TagStatus) bool {

	if strings.Compare(p.ToStatus, src) != 0 {
		return false
	}
	return true
}
func (p *BatchUpdateTagStatusRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type BatchUpdateTagStatusResponse struct {
	ErrInfo  map[int64]string `thrift:"err_info,1,optional" frugal:"1,optional,map<i64:string>" json:"err_info" form:"err_info" query:"err_info"`
	BaseResp *base.BaseResp   `thrift:"BaseResp,255,optional" frugal:"255,optional,base.BaseResp" form:"BaseResp" json:"BaseResp,omitempty" query:"BaseResp"`
}

func NewBatchUpdateTagStatusResponse() *BatchUpdateTagStatusResponse {
	return &BatchUpdateTagStatusResponse{}
}

func (p *BatchUpdateTagStatusResponse) InitDefault() {
}

var BatchUpdateTagStatusResponse_ErrInfo_DEFAULT map[int64]string

func (p *BatchUpdateTagStatusResponse) GetErrInfo() (v map[int64]string) {
	if p == nil {
		return
	}
	if !p.IsSetErrInfo() {
		return BatchUpdateTagStatusResponse_ErrInfo_DEFAULT
	}
	return p.ErrInfo
}

var BatchUpdateTagStatusResponse_BaseResp_DEFAULT *base.BaseResp

func (p *BatchUpdateTagStatusResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return BatchUpdateTagStatusResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *BatchUpdateTagStatusResponse) SetErrInfo(val map[int64]string) {
	p.ErrInfo = val
}
func (p *BatchUpdateTagStatusResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_BatchUpdateTagStatusResponse = map[int16]string{
	1:   "err_info",
	255: "BaseResp",
}

func (p *BatchUpdateTagStatusResponse) IsSetErrInfo() bool {
	return p.ErrInfo != nil
}

func (p *BatchUpdateTagStatusResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *BatchUpdateTagStatusResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchUpdateTagStatusResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchUpdateTagStatusResponse) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[int64]string, size)
	for i := 0; i < size; i++ {
		var _key int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.ErrInfo = _field
	return nil
}
func (p *BatchUpdateTagStatusResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *BatchUpdateTagStatusResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchUpdateTagStatusResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchUpdateTagStatusResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrInfo() {
		if err = oprot.WriteFieldBegin("err_info", thrift.MAP, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.I64, thrift.STRING, len(p.ErrInfo)); err != nil {
			return err
		}
		for k, v := range p.ErrInfo {
			if err := oprot.WriteI64(k); err != nil {
				return err
			}
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchUpdateTagStatusResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseResp() {
		if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseResp.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchUpdateTagStatusResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchUpdateTagStatusResponse(%+v)", *p)

}

func (p *BatchUpdateTagStatusResponse) DeepEqual(ano *BatchUpdateTagStatusResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ErrInfo) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *BatchUpdateTagStatusResponse) Field1DeepEqual(src map[int64]string) bool {

	if len(p.ErrInfo) != len(src) {
		return false
	}
	for k, v := range p.ErrInfo {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *BatchUpdateTagStatusResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type SearchTagsRequest struct {
	WorkspaceID    int64                `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" query:"workspace_id,required"`
	TagKeyNameLike *string              `thrift:"tag_key_name_like,2,optional" frugal:"2,optional,string" form:"tag_key_name_like" json:"tag_key_name_like,omitempty" query:"tag_key_name_like"`
	CreatedBys     []string             `thrift:"created_bys,3,optional" frugal:"3,optional,list<string>" form:"created_bys" json:"created_bys,omitempty" query:"created_bys"`
	DomainTypes    []tag.TagDomainType  `thrift:"domain_types,4,optional" frugal:"4,optional,list<string>" form:"domain_types" json:"domain_types,omitempty" query:"domain_types"`
	ContentTypes   []tag.TagContentType `thrift:"content_types,5,optional" frugal:"5,optional,list<string>" form:"content_types" json:"content_types,omitempty" query:"content_types"`
	TagKeyName     *string              `thrift:"tag_key_name,6,optional" frugal:"6,optional,string" form:"tag_key_name" json:"tag_key_name,omitempty" query:"tag_key_name"`
	/* pagination */
	PageNumber *int32           `thrift:"page_number,100,optional" frugal:"100,optional,i32" form:"page_number" json:"page_number,omitempty" query:"page_number"`
	PageSize   *int32           `thrift:"page_size,101,optional" frugal:"101,optional,i32" form:"page_size" json:"page_size,omitempty" query:"page_size"`
	PageToken  *string          `thrift:"page_token,102,optional" frugal:"102,optional,string" form:"page_token" json:"page_token,omitempty" query:"page_token"`
	OrderBy    *dataset.OrderBy `thrift:"order_by,103,optional" frugal:"103,optional,dataset.OrderBy" form:"order_by" json:"order_by,omitempty" query:"order_by"`
	Base       *base.Base       `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewSearchTagsRequest() *SearchTagsRequest {
	return &SearchTagsRequest{}
}

func (p *SearchTagsRequest) InitDefault() {
}

func (p *SearchTagsRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

var SearchTagsRequest_TagKeyNameLike_DEFAULT string

func (p *SearchTagsRequest) GetTagKeyNameLike() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetTagKeyNameLike() {
		return SearchTagsRequest_TagKeyNameLike_DEFAULT
	}
	return *p.TagKeyNameLike
}

var SearchTagsRequest_CreatedBys_DEFAULT []string

func (p *SearchTagsRequest) GetCreatedBys() (v []string) {
	if p == nil {
		return
	}
	if !p.IsSetCreatedBys() {
		return SearchTagsRequest_CreatedBys_DEFAULT
	}
	return p.CreatedBys
}

var SearchTagsRequest_DomainTypes_DEFAULT []tag.TagDomainType

func (p *SearchTagsRequest) GetDomainTypes() (v []tag.TagDomainType) {
	if p == nil {
		return
	}
	if !p.IsSetDomainTypes() {
		return SearchTagsRequest_DomainTypes_DEFAULT
	}
	return p.DomainTypes
}

var SearchTagsRequest_ContentTypes_DEFAULT []tag.TagContentType

func (p *SearchTagsRequest) GetContentTypes() (v []tag.TagContentType) {
	if p == nil {
		return
	}
	if !p.IsSetContentTypes() {
		return SearchTagsRequest_ContentTypes_DEFAULT
	}
	return p.ContentTypes
}

var SearchTagsRequest_TagKeyName_DEFAULT string

func (p *SearchTagsRequest) GetTagKeyName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetTagKeyName() {
		return SearchTagsRequest_TagKeyName_DEFAULT
	}
	return *p.TagKeyName
}

var SearchTagsRequest_PageNumber_DEFAULT int32

func (p *SearchTagsRequest) GetPageNumber() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageNumber() {
		return SearchTagsRequest_PageNumber_DEFAULT
	}
	return *p.PageNumber
}

var SearchTagsRequest_PageSize_DEFAULT int32

func (p *SearchTagsRequest) GetPageSize() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageSize() {
		return SearchTagsRequest_PageSize_DEFAULT
	}
	return *p.PageSize
}

var SearchTagsRequest_PageToken_DEFAULT string

func (p *SearchTagsRequest) GetPageToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetPageToken() {
		return SearchTagsRequest_PageToken_DEFAULT
	}
	return *p.PageToken
}

var SearchTagsRequest_OrderBy_DEFAULT *dataset.OrderBy

func (p *SearchTagsRequest) GetOrderBy() (v *dataset.OrderBy) {
	if p == nil {
		return
	}
	if !p.IsSetOrderBy() {
		return SearchTagsRequest_OrderBy_DEFAULT
	}
	return p.OrderBy
}

var SearchTagsRequest_Base_DEFAULT *base.Base

func (p *SearchTagsRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return SearchTagsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *SearchTagsRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *SearchTagsRequest) SetTagKeyNameLike(val *string) {
	p.TagKeyNameLike = val
}
func (p *SearchTagsRequest) SetCreatedBys(val []string) {
	p.CreatedBys = val
}
func (p *SearchTagsRequest) SetDomainTypes(val []tag.TagDomainType) {
	p.DomainTypes = val
}
func (p *SearchTagsRequest) SetContentTypes(val []tag.TagContentType) {
	p.ContentTypes = val
}
func (p *SearchTagsRequest) SetTagKeyName(val *string) {
	p.TagKeyName = val
}
func (p *SearchTagsRequest) SetPageNumber(val *int32) {
	p.PageNumber = val
}
func (p *SearchTagsRequest) SetPageSize(val *int32) {
	p.PageSize = val
}
func (p *SearchTagsRequest) SetPageToken(val *string) {
	p.PageToken = val
}
func (p *SearchTagsRequest) SetOrderBy(val *dataset.OrderBy) {
	p.OrderBy = val
}
func (p *SearchTagsRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_SearchTagsRequest = map[int16]string{
	1:   "workspace_id",
	2:   "tag_key_name_like",
	3:   "created_bys",
	4:   "domain_types",
	5:   "content_types",
	6:   "tag_key_name",
	100: "page_number",
	101: "page_size",
	102: "page_token",
	103: "order_by",
	255: "Base",
}

func (p *SearchTagsRequest) IsSetTagKeyNameLike() bool {
	return p.TagKeyNameLike != nil
}

func (p *SearchTagsRequest) IsSetCreatedBys() bool {
	return p.CreatedBys != nil
}

func (p *SearchTagsRequest) IsSetDomainTypes() bool {
	return p.DomainTypes != nil
}

func (p *SearchTagsRequest) IsSetContentTypes() bool {
	return p.ContentTypes != nil
}

func (p *SearchTagsRequest) IsSetTagKeyName() bool {
	return p.TagKeyName != nil
}

func (p *SearchTagsRequest) IsSetPageNumber() bool {
	return p.PageNumber != nil
}

func (p *SearchTagsRequest) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *SearchTagsRequest) IsSetPageToken() bool {
	return p.PageToken != nil
}

func (p *SearchTagsRequest) IsSetOrderBy() bool {
	return p.OrderBy != nil
}

func (p *SearchTagsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *SearchTagsRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 102:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField102(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 103:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField103(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SearchTagsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_SearchTagsRequest[fieldId]))
}

func (p *SearchTagsRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *SearchTagsRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TagKeyNameLike = _field
	return nil
}
func (p *SearchTagsRequest) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.CreatedBys = _field
	return nil
}
func (p *SearchTagsRequest) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]tag.TagDomainType, 0, size)
	for i := 0; i < size; i++ {

		var _elem tag.TagDomainType
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.DomainTypes = _field
	return nil
}
func (p *SearchTagsRequest) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]tag.TagContentType, 0, size)
	for i := 0; i < size; i++ {

		var _elem tag.TagContentType
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ContentTypes = _field
	return nil
}
func (p *SearchTagsRequest) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TagKeyName = _field
	return nil
}
func (p *SearchTagsRequest) ReadField100(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageNumber = _field
	return nil
}
func (p *SearchTagsRequest) ReadField101(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageSize = _field
	return nil
}
func (p *SearchTagsRequest) ReadField102(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageToken = _field
	return nil
}
func (p *SearchTagsRequest) ReadField103(iprot thrift.TProtocol) error {
	_field := dataset.NewOrderBy()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.OrderBy = _field
	return nil
}
func (p *SearchTagsRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *SearchTagsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SearchTagsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField102(oprot); err != nil {
			fieldId = 102
			goto WriteFieldError
		}
		if err = p.writeField103(oprot); err != nil {
			fieldId = 103
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SearchTagsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *SearchTagsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagKeyNameLike() {
		if err = oprot.WriteFieldBegin("tag_key_name_like", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TagKeyNameLike); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *SearchTagsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedBys() {
		if err = oprot.WriteFieldBegin("created_bys", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.CreatedBys)); err != nil {
			return err
		}
		for _, v := range p.CreatedBys {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *SearchTagsRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDomainTypes() {
		if err = oprot.WriteFieldBegin("domain_types", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.DomainTypes)); err != nil {
			return err
		}
		for _, v := range p.DomainTypes {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *SearchTagsRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetContentTypes() {
		if err = oprot.WriteFieldBegin("content_types", thrift.LIST, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.ContentTypes)); err != nil {
			return err
		}
		for _, v := range p.ContentTypes {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *SearchTagsRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagKeyName() {
		if err = oprot.WriteFieldBegin("tag_key_name", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TagKeyName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *SearchTagsRequest) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageNumber() {
		if err = oprot.WriteFieldBegin("page_number", thrift.I32, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageNumber); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}
func (p *SearchTagsRequest) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("page_size", thrift.I32, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}
func (p *SearchTagsRequest) writeField102(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageToken() {
		if err = oprot.WriteFieldBegin("page_token", thrift.STRING, 102); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PageToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 end error: ", p), err)
}
func (p *SearchTagsRequest) writeField103(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrderBy() {
		if err = oprot.WriteFieldBegin("order_by", thrift.STRUCT, 103); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.OrderBy.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 103 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 103 end error: ", p), err)
}
func (p *SearchTagsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *SearchTagsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SearchTagsRequest(%+v)", *p)

}

func (p *SearchTagsRequest) DeepEqual(ano *SearchTagsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.TagKeyNameLike) {
		return false
	}
	if !p.Field3DeepEqual(ano.CreatedBys) {
		return false
	}
	if !p.Field4DeepEqual(ano.DomainTypes) {
		return false
	}
	if !p.Field5DeepEqual(ano.ContentTypes) {
		return false
	}
	if !p.Field6DeepEqual(ano.TagKeyName) {
		return false
	}
	if !p.Field100DeepEqual(ano.PageNumber) {
		return false
	}
	if !p.Field101DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field102DeepEqual(ano.PageToken) {
		return false
	}
	if !p.Field103DeepEqual(ano.OrderBy) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *SearchTagsRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *SearchTagsRequest) Field2DeepEqual(src *string) bool {

	if p.TagKeyNameLike == src {
		return true
	} else if p.TagKeyNameLike == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TagKeyNameLike, *src) != 0 {
		return false
	}
	return true
}
func (p *SearchTagsRequest) Field3DeepEqual(src []string) bool {

	if len(p.CreatedBys) != len(src) {
		return false
	}
	for i, v := range p.CreatedBys {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *SearchTagsRequest) Field4DeepEqual(src []tag.TagDomainType) bool {

	if len(p.DomainTypes) != len(src) {
		return false
	}
	for i, v := range p.DomainTypes {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *SearchTagsRequest) Field5DeepEqual(src []tag.TagContentType) bool {

	if len(p.ContentTypes) != len(src) {
		return false
	}
	for i, v := range p.ContentTypes {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *SearchTagsRequest) Field6DeepEqual(src *string) bool {

	if p.TagKeyName == src {
		return true
	} else if p.TagKeyName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TagKeyName, *src) != 0 {
		return false
	}
	return true
}
func (p *SearchTagsRequest) Field100DeepEqual(src *int32) bool {

	if p.PageNumber == src {
		return true
	} else if p.PageNumber == nil || src == nil {
		return false
	}
	if *p.PageNumber != *src {
		return false
	}
	return true
}
func (p *SearchTagsRequest) Field101DeepEqual(src *int32) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}
func (p *SearchTagsRequest) Field102DeepEqual(src *string) bool {

	if p.PageToken == src {
		return true
	} else if p.PageToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PageToken, *src) != 0 {
		return false
	}
	return true
}
func (p *SearchTagsRequest) Field103DeepEqual(src *dataset.OrderBy) bool {

	if !p.OrderBy.DeepEqual(src) {
		return false
	}
	return true
}
func (p *SearchTagsRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type SearchTagsResponse struct {
	TagInfos      []*tag.TagInfo `thrift:"tagInfos,1,optional" frugal:"1,optional,list<tag.TagInfo>" form:"tagInfos" json:"tagInfos,omitempty" query:"tagInfos"`
	NextPageToken *string        `thrift:"next_page_token,100,optional" frugal:"100,optional,string" form:"next_page_token" json:"next_page_token,omitempty" query:"next_page_token"`
	Total         *int64         `thrift:"total,101,optional" frugal:"101,optional,i64" json:"total" form:"total" query:"total"`
	BaseResp      *base.BaseResp `thrift:"BaseResp,255,optional" frugal:"255,optional,base.BaseResp" form:"BaseResp" json:"BaseResp,omitempty" query:"BaseResp"`
}

func NewSearchTagsResponse() *SearchTagsResponse {
	return &SearchTagsResponse{}
}

func (p *SearchTagsResponse) InitDefault() {
}

var SearchTagsResponse_TagInfos_DEFAULT []*tag.TagInfo

func (p *SearchTagsResponse) GetTagInfos() (v []*tag.TagInfo) {
	if p == nil {
		return
	}
	if !p.IsSetTagInfos() {
		return SearchTagsResponse_TagInfos_DEFAULT
	}
	return p.TagInfos
}

var SearchTagsResponse_NextPageToken_DEFAULT string

func (p *SearchTagsResponse) GetNextPageToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetNextPageToken() {
		return SearchTagsResponse_NextPageToken_DEFAULT
	}
	return *p.NextPageToken
}

var SearchTagsResponse_Total_DEFAULT int64

func (p *SearchTagsResponse) GetTotal() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTotal() {
		return SearchTagsResponse_Total_DEFAULT
	}
	return *p.Total
}

var SearchTagsResponse_BaseResp_DEFAULT *base.BaseResp

func (p *SearchTagsResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return SearchTagsResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *SearchTagsResponse) SetTagInfos(val []*tag.TagInfo) {
	p.TagInfos = val
}
func (p *SearchTagsResponse) SetNextPageToken(val *string) {
	p.NextPageToken = val
}
func (p *SearchTagsResponse) SetTotal(val *int64) {
	p.Total = val
}
func (p *SearchTagsResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_SearchTagsResponse = map[int16]string{
	1:   "tagInfos",
	100: "next_page_token",
	101: "total",
	255: "BaseResp",
}

func (p *SearchTagsResponse) IsSetTagInfos() bool {
	return p.TagInfos != nil
}

func (p *SearchTagsResponse) IsSetNextPageToken() bool {
	return p.NextPageToken != nil
}

func (p *SearchTagsResponse) IsSetTotal() bool {
	return p.Total != nil
}

func (p *SearchTagsResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *SearchTagsResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SearchTagsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SearchTagsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*tag.TagInfo, 0, size)
	values := make([]tag.TagInfo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.TagInfos = _field
	return nil
}
func (p *SearchTagsResponse) ReadField100(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NextPageToken = _field
	return nil
}
func (p *SearchTagsResponse) ReadField101(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Total = _field
	return nil
}
func (p *SearchTagsResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *SearchTagsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SearchTagsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SearchTagsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagInfos() {
		if err = oprot.WriteFieldBegin("tagInfos", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TagInfos)); err != nil {
			return err
		}
		for _, v := range p.TagInfos {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *SearchTagsResponse) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetNextPageToken() {
		if err = oprot.WriteFieldBegin("next_page_token", thrift.STRING, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.NextPageToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}
func (p *SearchTagsResponse) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotal() {
		if err = oprot.WriteFieldBegin("total", thrift.I64, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Total); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}
func (p *SearchTagsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseResp() {
		if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseResp.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *SearchTagsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SearchTagsResponse(%+v)", *p)

}

func (p *SearchTagsResponse) DeepEqual(ano *SearchTagsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TagInfos) {
		return false
	}
	if !p.Field100DeepEqual(ano.NextPageToken) {
		return false
	}
	if !p.Field101DeepEqual(ano.Total) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *SearchTagsResponse) Field1DeepEqual(src []*tag.TagInfo) bool {

	if len(p.TagInfos) != len(src) {
		return false
	}
	for i, v := range p.TagInfos {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *SearchTagsResponse) Field100DeepEqual(src *string) bool {

	if p.NextPageToken == src {
		return true
	} else if p.NextPageToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.NextPageToken, *src) != 0 {
		return false
	}
	return true
}
func (p *SearchTagsResponse) Field101DeepEqual(src *int64) bool {

	if p.Total == src {
		return true
	} else if p.Total == nil || src == nil {
		return false
	}
	if *p.Total != *src {
		return false
	}
	return true
}
func (p *SearchTagsResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type GetTagDetailRequest struct {
	WorkspaceID int64 `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" query:"workspace_id,required"`
	TagKeyID    int64 `thrift:"tag_key_id,2,required" frugal:"2,required,i64" json:"tag_key_id" path:"tag_key_id,required" `
	/* pagination */
	PageNumber *int32           `thrift:"page_number,100,optional" frugal:"100,optional,i32" form:"page_number" json:"page_number,omitempty" query:"page_number"`
	PageSize   *int32           `thrift:"page_size,101,optional" frugal:"101,optional,i32" form:"page_size" json:"page_size,omitempty" query:"page_size"`
	PageToken  *string          `thrift:"page_token,102,optional" frugal:"102,optional,string" form:"page_token" json:"page_token,omitempty" query:"page_token"`
	OrderBy    *dataset.OrderBy `thrift:"order_by,103,optional" frugal:"103,optional,dataset.OrderBy" form:"order_by" json:"order_by,omitempty" query:"order_by"`
	Base       *base.Base       `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewGetTagDetailRequest() *GetTagDetailRequest {
	return &GetTagDetailRequest{}
}

func (p *GetTagDetailRequest) InitDefault() {
}

func (p *GetTagDetailRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *GetTagDetailRequest) GetTagKeyID() (v int64) {
	if p != nil {
		return p.TagKeyID
	}
	return
}

var GetTagDetailRequest_PageNumber_DEFAULT int32

func (p *GetTagDetailRequest) GetPageNumber() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageNumber() {
		return GetTagDetailRequest_PageNumber_DEFAULT
	}
	return *p.PageNumber
}

var GetTagDetailRequest_PageSize_DEFAULT int32

func (p *GetTagDetailRequest) GetPageSize() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageSize() {
		return GetTagDetailRequest_PageSize_DEFAULT
	}
	return *p.PageSize
}

var GetTagDetailRequest_PageToken_DEFAULT string

func (p *GetTagDetailRequest) GetPageToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetPageToken() {
		return GetTagDetailRequest_PageToken_DEFAULT
	}
	return *p.PageToken
}

var GetTagDetailRequest_OrderBy_DEFAULT *dataset.OrderBy

func (p *GetTagDetailRequest) GetOrderBy() (v *dataset.OrderBy) {
	if p == nil {
		return
	}
	if !p.IsSetOrderBy() {
		return GetTagDetailRequest_OrderBy_DEFAULT
	}
	return p.OrderBy
}

var GetTagDetailRequest_Base_DEFAULT *base.Base

func (p *GetTagDetailRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return GetTagDetailRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetTagDetailRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *GetTagDetailRequest) SetTagKeyID(val int64) {
	p.TagKeyID = val
}
func (p *GetTagDetailRequest) SetPageNumber(val *int32) {
	p.PageNumber = val
}
func (p *GetTagDetailRequest) SetPageSize(val *int32) {
	p.PageSize = val
}
func (p *GetTagDetailRequest) SetPageToken(val *string) {
	p.PageToken = val
}
func (p *GetTagDetailRequest) SetOrderBy(val *dataset.OrderBy) {
	p.OrderBy = val
}
func (p *GetTagDetailRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetTagDetailRequest = map[int16]string{
	1:   "workspace_id",
	2:   "tag_key_id",
	100: "page_number",
	101: "page_size",
	102: "page_token",
	103: "order_by",
	255: "Base",
}

func (p *GetTagDetailRequest) IsSetPageNumber() bool {
	return p.PageNumber != nil
}

func (p *GetTagDetailRequest) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *GetTagDetailRequest) IsSetPageToken() bool {
	return p.PageToken != nil
}

func (p *GetTagDetailRequest) IsSetOrderBy() bool {
	return p.OrderBy != nil
}

func (p *GetTagDetailRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetTagDetailRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetTagKeyID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTagKeyID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 102:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField102(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 103:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField103(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTagKeyID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetTagDetailRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetTagDetailRequest[fieldId]))
}

func (p *GetTagDetailRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *GetTagDetailRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TagKeyID = _field
	return nil
}
func (p *GetTagDetailRequest) ReadField100(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageNumber = _field
	return nil
}
func (p *GetTagDetailRequest) ReadField101(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageSize = _field
	return nil
}
func (p *GetTagDetailRequest) ReadField102(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageToken = _field
	return nil
}
func (p *GetTagDetailRequest) ReadField103(iprot thrift.TProtocol) error {
	_field := dataset.NewOrderBy()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.OrderBy = _field
	return nil
}
func (p *GetTagDetailRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *GetTagDetailRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTagDetailRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField102(oprot); err != nil {
			fieldId = 102
			goto WriteFieldError
		}
		if err = p.writeField103(oprot); err != nil {
			fieldId = 103
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetTagDetailRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetTagDetailRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tag_key_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TagKeyID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetTagDetailRequest) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageNumber() {
		if err = oprot.WriteFieldBegin("page_number", thrift.I32, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageNumber); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}
func (p *GetTagDetailRequest) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("page_size", thrift.I32, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}
func (p *GetTagDetailRequest) writeField102(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageToken() {
		if err = oprot.WriteFieldBegin("page_token", thrift.STRING, 102); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PageToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 end error: ", p), err)
}
func (p *GetTagDetailRequest) writeField103(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrderBy() {
		if err = oprot.WriteFieldBegin("order_by", thrift.STRUCT, 103); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.OrderBy.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 103 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 103 end error: ", p), err)
}
func (p *GetTagDetailRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetTagDetailRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTagDetailRequest(%+v)", *p)

}

func (p *GetTagDetailRequest) DeepEqual(ano *GetTagDetailRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.TagKeyID) {
		return false
	}
	if !p.Field100DeepEqual(ano.PageNumber) {
		return false
	}
	if !p.Field101DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field102DeepEqual(ano.PageToken) {
		return false
	}
	if !p.Field103DeepEqual(ano.OrderBy) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetTagDetailRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *GetTagDetailRequest) Field2DeepEqual(src int64) bool {

	if p.TagKeyID != src {
		return false
	}
	return true
}
func (p *GetTagDetailRequest) Field100DeepEqual(src *int32) bool {

	if p.PageNumber == src {
		return true
	} else if p.PageNumber == nil || src == nil {
		return false
	}
	if *p.PageNumber != *src {
		return false
	}
	return true
}
func (p *GetTagDetailRequest) Field101DeepEqual(src *int32) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}
func (p *GetTagDetailRequest) Field102DeepEqual(src *string) bool {

	if p.PageToken == src {
		return true
	} else if p.PageToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PageToken, *src) != 0 {
		return false
	}
	return true
}
func (p *GetTagDetailRequest) Field103DeepEqual(src *dataset.OrderBy) bool {

	if !p.OrderBy.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetTagDetailRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetTagDetailResponse struct {
	Tags          []*tag.TagInfo `thrift:"tags,1,optional" frugal:"1,optional,list<tag.TagInfo>" form:"tags" json:"tags,omitempty" query:"tags"`
	NextPageToken *string        `thrift:"next_page_token,100,optional" frugal:"100,optional,string" form:"next_page_token" json:"next_page_token,omitempty" query:"next_page_token"`
	Total         *int64         `thrift:"total,101,optional" frugal:"101,optional,i64" json:"total" form:"total" query:"total"`
	BaseResp      *base.BaseResp `thrift:"BaseResp,255,optional" frugal:"255,optional,base.BaseResp" form:"BaseResp" json:"BaseResp,omitempty" query:"BaseResp"`
}

func NewGetTagDetailResponse() *GetTagDetailResponse {
	return &GetTagDetailResponse{}
}

func (p *GetTagDetailResponse) InitDefault() {
}

var GetTagDetailResponse_Tags_DEFAULT []*tag.TagInfo

func (p *GetTagDetailResponse) GetTags() (v []*tag.TagInfo) {
	if p == nil {
		return
	}
	if !p.IsSetTags() {
		return GetTagDetailResponse_Tags_DEFAULT
	}
	return p.Tags
}

var GetTagDetailResponse_NextPageToken_DEFAULT string

func (p *GetTagDetailResponse) GetNextPageToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetNextPageToken() {
		return GetTagDetailResponse_NextPageToken_DEFAULT
	}
	return *p.NextPageToken
}

var GetTagDetailResponse_Total_DEFAULT int64

func (p *GetTagDetailResponse) GetTotal() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTotal() {
		return GetTagDetailResponse_Total_DEFAULT
	}
	return *p.Total
}

var GetTagDetailResponse_BaseResp_DEFAULT *base.BaseResp

func (p *GetTagDetailResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return GetTagDetailResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetTagDetailResponse) SetTags(val []*tag.TagInfo) {
	p.Tags = val
}
func (p *GetTagDetailResponse) SetNextPageToken(val *string) {
	p.NextPageToken = val
}
func (p *GetTagDetailResponse) SetTotal(val *int64) {
	p.Total = val
}
func (p *GetTagDetailResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_GetTagDetailResponse = map[int16]string{
	1:   "tags",
	100: "next_page_token",
	101: "total",
	255: "BaseResp",
}

func (p *GetTagDetailResponse) IsSetTags() bool {
	return p.Tags != nil
}

func (p *GetTagDetailResponse) IsSetNextPageToken() bool {
	return p.NextPageToken != nil
}

func (p *GetTagDetailResponse) IsSetTotal() bool {
	return p.Total != nil
}

func (p *GetTagDetailResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetTagDetailResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetTagDetailResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetTagDetailResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*tag.TagInfo, 0, size)
	values := make([]tag.TagInfo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Tags = _field
	return nil
}
func (p *GetTagDetailResponse) ReadField100(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NextPageToken = _field
	return nil
}
func (p *GetTagDetailResponse) ReadField101(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Total = _field
	return nil
}
func (p *GetTagDetailResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *GetTagDetailResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTagDetailResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetTagDetailResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTags() {
		if err = oprot.WriteFieldBegin("tags", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tags)); err != nil {
			return err
		}
		for _, v := range p.Tags {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetTagDetailResponse) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetNextPageToken() {
		if err = oprot.WriteFieldBegin("next_page_token", thrift.STRING, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.NextPageToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}
func (p *GetTagDetailResponse) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotal() {
		if err = oprot.WriteFieldBegin("total", thrift.I64, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Total); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}
func (p *GetTagDetailResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseResp() {
		if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseResp.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetTagDetailResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTagDetailResponse(%+v)", *p)

}

func (p *GetTagDetailResponse) DeepEqual(ano *GetTagDetailResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Tags) {
		return false
	}
	if !p.Field100DeepEqual(ano.NextPageToken) {
		return false
	}
	if !p.Field101DeepEqual(ano.Total) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *GetTagDetailResponse) Field1DeepEqual(src []*tag.TagInfo) bool {

	if len(p.Tags) != len(src) {
		return false
	}
	for i, v := range p.Tags {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetTagDetailResponse) Field100DeepEqual(src *string) bool {

	if p.NextPageToken == src {
		return true
	} else if p.NextPageToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.NextPageToken, *src) != 0 {
		return false
	}
	return true
}
func (p *GetTagDetailResponse) Field101DeepEqual(src *int64) bool {

	if p.Total == src {
		return true
	} else if p.Total == nil || src == nil {
		return false
	}
	if *p.Total != *src {
		return false
	}
	return true
}
func (p *GetTagDetailResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type GetTagSpecRequest struct {
	WorkspaceID int64      `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" query:"workspace_id,required"`
	Base        *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewGetTagSpecRequest() *GetTagSpecRequest {
	return &GetTagSpecRequest{}
}

func (p *GetTagSpecRequest) InitDefault() {
}

func (p *GetTagSpecRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

var GetTagSpecRequest_Base_DEFAULT *base.Base

func (p *GetTagSpecRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return GetTagSpecRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetTagSpecRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *GetTagSpecRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetTagSpecRequest = map[int16]string{
	1:   "workspace_id",
	255: "Base",
}

func (p *GetTagSpecRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetTagSpecRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetTagSpecRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetTagSpecRequest[fieldId]))
}

func (p *GetTagSpecRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *GetTagSpecRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *GetTagSpecRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTagSpecRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetTagSpecRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetTagSpecRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetTagSpecRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTagSpecRequest(%+v)", *p)

}

func (p *GetTagSpecRequest) DeepEqual(ano *GetTagSpecRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetTagSpecRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *GetTagSpecRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetTagSpecResponse struct {
	// 最大高度
	MaxHeight *int64 `thrift:"max_height,1,optional" frugal:"1,optional,i64" form:"max_height" json:"max_height,omitempty" query:"max_height"`
	// 最大宽度(一层最多有多少个)
	MaxWidth *int64 `thrift:"max_width,2,optional" frugal:"2,optional,i64" form:"max_width" json:"max_width,omitempty" query:"max_width"`
	// 最多个数(各层加一起总数)
	MaxTotal *int64         `thrift:"max_total,3,optional" frugal:"3,optional,i64" form:"max_total" json:"max_total,omitempty" query:"max_total"`
	BaseResp *base.BaseResp `thrift:"BaseResp,255,optional" frugal:"255,optional,base.BaseResp" form:"BaseResp" json:"BaseResp,omitempty" query:"BaseResp"`
}

func NewGetTagSpecResponse() *GetTagSpecResponse {
	return &GetTagSpecResponse{}
}

func (p *GetTagSpecResponse) InitDefault() {
}

var GetTagSpecResponse_MaxHeight_DEFAULT int64

func (p *GetTagSpecResponse) GetMaxHeight() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetMaxHeight() {
		return GetTagSpecResponse_MaxHeight_DEFAULT
	}
	return *p.MaxHeight
}

var GetTagSpecResponse_MaxWidth_DEFAULT int64

func (p *GetTagSpecResponse) GetMaxWidth() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetMaxWidth() {
		return GetTagSpecResponse_MaxWidth_DEFAULT
	}
	return *p.MaxWidth
}

var GetTagSpecResponse_MaxTotal_DEFAULT int64

func (p *GetTagSpecResponse) GetMaxTotal() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetMaxTotal() {
		return GetTagSpecResponse_MaxTotal_DEFAULT
	}
	return *p.MaxTotal
}

var GetTagSpecResponse_BaseResp_DEFAULT *base.BaseResp

func (p *GetTagSpecResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return GetTagSpecResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetTagSpecResponse) SetMaxHeight(val *int64) {
	p.MaxHeight = val
}
func (p *GetTagSpecResponse) SetMaxWidth(val *int64) {
	p.MaxWidth = val
}
func (p *GetTagSpecResponse) SetMaxTotal(val *int64) {
	p.MaxTotal = val
}
func (p *GetTagSpecResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_GetTagSpecResponse = map[int16]string{
	1:   "max_height",
	2:   "max_width",
	3:   "max_total",
	255: "BaseResp",
}

func (p *GetTagSpecResponse) IsSetMaxHeight() bool {
	return p.MaxHeight != nil
}

func (p *GetTagSpecResponse) IsSetMaxWidth() bool {
	return p.MaxWidth != nil
}

func (p *GetTagSpecResponse) IsSetMaxTotal() bool {
	return p.MaxTotal != nil
}

func (p *GetTagSpecResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetTagSpecResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetTagSpecResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetTagSpecResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MaxHeight = _field
	return nil
}
func (p *GetTagSpecResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MaxWidth = _field
	return nil
}
func (p *GetTagSpecResponse) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MaxTotal = _field
	return nil
}
func (p *GetTagSpecResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *GetTagSpecResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTagSpecResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetTagSpecResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxHeight() {
		if err = oprot.WriteFieldBegin("max_height", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.MaxHeight); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetTagSpecResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxWidth() {
		if err = oprot.WriteFieldBegin("max_width", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.MaxWidth); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetTagSpecResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxTotal() {
		if err = oprot.WriteFieldBegin("max_total", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.MaxTotal); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *GetTagSpecResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseResp() {
		if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseResp.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetTagSpecResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTagSpecResponse(%+v)", *p)

}

func (p *GetTagSpecResponse) DeepEqual(ano *GetTagSpecResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.MaxHeight) {
		return false
	}
	if !p.Field2DeepEqual(ano.MaxWidth) {
		return false
	}
	if !p.Field3DeepEqual(ano.MaxTotal) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *GetTagSpecResponse) Field1DeepEqual(src *int64) bool {

	if p.MaxHeight == src {
		return true
	} else if p.MaxHeight == nil || src == nil {
		return false
	}
	if *p.MaxHeight != *src {
		return false
	}
	return true
}
func (p *GetTagSpecResponse) Field2DeepEqual(src *int64) bool {

	if p.MaxWidth == src {
		return true
	} else if p.MaxWidth == nil || src == nil {
		return false
	}
	if *p.MaxWidth != *src {
		return false
	}
	return true
}
func (p *GetTagSpecResponse) Field3DeepEqual(src *int64) bool {

	if p.MaxTotal == src {
		return true
	} else if p.MaxTotal == nil || src == nil {
		return false
	}
	if *p.MaxTotal != *src {
		return false
	}
	return true
}
func (p *GetTagSpecResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type BatchGetTagsRequest struct {
	WorkspaceID int64      `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" query:"workspace_id,required"`
	TagKeyIds   []int64    `thrift:"tag_key_ids,2,required" frugal:"2,required,list<i64>" json:"tag_key_ids" form:"tag_key_ids,required" query:"tag_key_ids,required"`
	Base        *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewBatchGetTagsRequest() *BatchGetTagsRequest {
	return &BatchGetTagsRequest{}
}

func (p *BatchGetTagsRequest) InitDefault() {
}

func (p *BatchGetTagsRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *BatchGetTagsRequest) GetTagKeyIds() (v []int64) {
	if p != nil {
		return p.TagKeyIds
	}
	return
}

var BatchGetTagsRequest_Base_DEFAULT *base.Base

func (p *BatchGetTagsRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return BatchGetTagsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *BatchGetTagsRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *BatchGetTagsRequest) SetTagKeyIds(val []int64) {
	p.TagKeyIds = val
}
func (p *BatchGetTagsRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_BatchGetTagsRequest = map[int16]string{
	1:   "workspace_id",
	2:   "tag_key_ids",
	255: "Base",
}

func (p *BatchGetTagsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *BatchGetTagsRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetTagKeyIds bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTagKeyIds = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTagKeyIds {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchGetTagsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_BatchGetTagsRequest[fieldId]))
}

func (p *BatchGetTagsRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *BatchGetTagsRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]int64, 0, size)
	for i := 0; i < size; i++ {

		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.TagKeyIds = _field
	return nil
}
func (p *BatchGetTagsRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *BatchGetTagsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetTagsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchGetTagsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchGetTagsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tag_key_ids", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.I64, len(p.TagKeyIds)); err != nil {
		return err
	}
	for _, v := range p.TagKeyIds {
		if err := oprot.WriteI64(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BatchGetTagsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchGetTagsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchGetTagsRequest(%+v)", *p)

}

func (p *BatchGetTagsRequest) DeepEqual(ano *BatchGetTagsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.TagKeyIds) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *BatchGetTagsRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *BatchGetTagsRequest) Field2DeepEqual(src []int64) bool {

	if len(p.TagKeyIds) != len(src) {
		return false
	}
	for i, v := range p.TagKeyIds {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *BatchGetTagsRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type BatchGetTagsResponse struct {
	TagInfoList []*tag.TagInfo `thrift:"tag_info_list,1,optional" frugal:"1,optional,list<tag.TagInfo>" form:"tag_info_list" json:"tag_info_list,omitempty" query:"tag_info_list"`
	BaseResp    *base.BaseResp `thrift:"BaseResp,255,optional" frugal:"255,optional,base.BaseResp" form:"BaseResp" json:"BaseResp,omitempty" query:"BaseResp"`
}

func NewBatchGetTagsResponse() *BatchGetTagsResponse {
	return &BatchGetTagsResponse{}
}

func (p *BatchGetTagsResponse) InitDefault() {
}

var BatchGetTagsResponse_TagInfoList_DEFAULT []*tag.TagInfo

func (p *BatchGetTagsResponse) GetTagInfoList() (v []*tag.TagInfo) {
	if p == nil {
		return
	}
	if !p.IsSetTagInfoList() {
		return BatchGetTagsResponse_TagInfoList_DEFAULT
	}
	return p.TagInfoList
}

var BatchGetTagsResponse_BaseResp_DEFAULT *base.BaseResp

func (p *BatchGetTagsResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return BatchGetTagsResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *BatchGetTagsResponse) SetTagInfoList(val []*tag.TagInfo) {
	p.TagInfoList = val
}
func (p *BatchGetTagsResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_BatchGetTagsResponse = map[int16]string{
	1:   "tag_info_list",
	255: "BaseResp",
}

func (p *BatchGetTagsResponse) IsSetTagInfoList() bool {
	return p.TagInfoList != nil
}

func (p *BatchGetTagsResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *BatchGetTagsResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchGetTagsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchGetTagsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*tag.TagInfo, 0, size)
	values := make([]tag.TagInfo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.TagInfoList = _field
	return nil
}
func (p *BatchGetTagsResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *BatchGetTagsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetTagsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchGetTagsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagInfoList() {
		if err = oprot.WriteFieldBegin("tag_info_list", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TagInfoList)); err != nil {
			return err
		}
		for _, v := range p.TagInfoList {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchGetTagsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseResp() {
		if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseResp.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchGetTagsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchGetTagsResponse(%+v)", *p)

}

func (p *BatchGetTagsResponse) DeepEqual(ano *BatchGetTagsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TagInfoList) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *BatchGetTagsResponse) Field1DeepEqual(src []*tag.TagInfo) bool {

	if len(p.TagInfoList) != len(src) {
		return false
	}
	for i, v := range p.TagInfoList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *BatchGetTagsResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type TagService interface {
	/* Tag */
	// 新增标签
	CreateTag(ctx context.Context, req *CreateTagRequest) (r *CreateTagResponse, err error)
	// 更新标签
	UpdateTag(ctx context.Context, req *UpdateTagRequest) (r *UpdateTagResponse, err error)
	// 批量更新标签状态
	BatchUpdateTagStatus(ctx context.Context, req *BatchUpdateTagStatusRequest) (r *BatchUpdateTagStatusResponse, err error)
	// 搜索标签
	SearchTags(ctx context.Context, req *SearchTagsRequest) (r *SearchTagsResponse, err error)
	// 标签详情
	GetTagDetail(ctx context.Context, req *GetTagDetailRequest) (r *GetTagDetailResponse, err error)
	// 获取标签限制
	GetTagSpec(ctx context.Context, req *GetTagSpecRequest) (r *GetTagSpecResponse, err error)
	// 批量获取标签
	BatchGetTags(ctx context.Context, req *BatchGetTagsRequest) (r *BatchGetTagsResponse, err error)
}

type TagServiceClient struct {
	c thrift.TClient
}

func NewTagServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TagServiceClient {
	return &TagServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewTagServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TagServiceClient {
	return &TagServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewTagServiceClient(c thrift.TClient) *TagServiceClient {
	return &TagServiceClient{
		c: c,
	}
}

func (p *TagServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *TagServiceClient) CreateTag(ctx context.Context, req *CreateTagRequest) (r *CreateTagResponse, err error) {
	var _args TagServiceCreateTagArgs
	_args.Req = req
	var _result TagServiceCreateTagResult
	if err = p.Client_().Call(ctx, "CreateTag", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *TagServiceClient) UpdateTag(ctx context.Context, req *UpdateTagRequest) (r *UpdateTagResponse, err error) {
	var _args TagServiceUpdateTagArgs
	_args.Req = req
	var _result TagServiceUpdateTagResult
	if err = p.Client_().Call(ctx, "UpdateTag", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *TagServiceClient) BatchUpdateTagStatus(ctx context.Context, req *BatchUpdateTagStatusRequest) (r *BatchUpdateTagStatusResponse, err error) {
	var _args TagServiceBatchUpdateTagStatusArgs
	_args.Req = req
	var _result TagServiceBatchUpdateTagStatusResult
	if err = p.Client_().Call(ctx, "BatchUpdateTagStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *TagServiceClient) SearchTags(ctx context.Context, req *SearchTagsRequest) (r *SearchTagsResponse, err error) {
	var _args TagServiceSearchTagsArgs
	_args.Req = req
	var _result TagServiceSearchTagsResult
	if err = p.Client_().Call(ctx, "SearchTags", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *TagServiceClient) GetTagDetail(ctx context.Context, req *GetTagDetailRequest) (r *GetTagDetailResponse, err error) {
	var _args TagServiceGetTagDetailArgs
	_args.Req = req
	var _result TagServiceGetTagDetailResult
	if err = p.Client_().Call(ctx, "GetTagDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *TagServiceClient) GetTagSpec(ctx context.Context, req *GetTagSpecRequest) (r *GetTagSpecResponse, err error) {
	var _args TagServiceGetTagSpecArgs
	_args.Req = req
	var _result TagServiceGetTagSpecResult
	if err = p.Client_().Call(ctx, "GetTagSpec", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *TagServiceClient) BatchGetTags(ctx context.Context, req *BatchGetTagsRequest) (r *BatchGetTagsResponse, err error) {
	var _args TagServiceBatchGetTagsArgs
	_args.Req = req
	var _result TagServiceBatchGetTagsResult
	if err = p.Client_().Call(ctx, "BatchGetTags", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type TagServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      TagService
}

func (p *TagServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *TagServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *TagServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewTagServiceProcessor(handler TagService) *TagServiceProcessor {
	self := &TagServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("CreateTag", &tagServiceProcessorCreateTag{handler: handler})
	self.AddToProcessorMap("UpdateTag", &tagServiceProcessorUpdateTag{handler: handler})
	self.AddToProcessorMap("BatchUpdateTagStatus", &tagServiceProcessorBatchUpdateTagStatus{handler: handler})
	self.AddToProcessorMap("SearchTags", &tagServiceProcessorSearchTags{handler: handler})
	self.AddToProcessorMap("GetTagDetail", &tagServiceProcessorGetTagDetail{handler: handler})
	self.AddToProcessorMap("GetTagSpec", &tagServiceProcessorGetTagSpec{handler: handler})
	self.AddToProcessorMap("BatchGetTags", &tagServiceProcessorBatchGetTags{handler: handler})
	return self
}
func (p *TagServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type tagServiceProcessorCreateTag struct {
	handler TagService
}

func (p *tagServiceProcessorCreateTag) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TagServiceCreateTagArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateTag", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := TagServiceCreateTagResult{}
	var retval *CreateTagResponse
	if retval, err2 = p.handler.CreateTag(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateTag: "+err2.Error())
		oprot.WriteMessageBegin("CreateTag", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateTag", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tagServiceProcessorUpdateTag struct {
	handler TagService
}

func (p *tagServiceProcessorUpdateTag) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TagServiceUpdateTagArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateTag", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := TagServiceUpdateTagResult{}
	var retval *UpdateTagResponse
	if retval, err2 = p.handler.UpdateTag(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateTag: "+err2.Error())
		oprot.WriteMessageBegin("UpdateTag", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateTag", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tagServiceProcessorBatchUpdateTagStatus struct {
	handler TagService
}

func (p *tagServiceProcessorBatchUpdateTagStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TagServiceBatchUpdateTagStatusArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BatchUpdateTagStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := TagServiceBatchUpdateTagStatusResult{}
	var retval *BatchUpdateTagStatusResponse
	if retval, err2 = p.handler.BatchUpdateTagStatus(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BatchUpdateTagStatus: "+err2.Error())
		oprot.WriteMessageBegin("BatchUpdateTagStatus", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BatchUpdateTagStatus", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tagServiceProcessorSearchTags struct {
	handler TagService
}

func (p *tagServiceProcessorSearchTags) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TagServiceSearchTagsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SearchTags", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := TagServiceSearchTagsResult{}
	var retval *SearchTagsResponse
	if retval, err2 = p.handler.SearchTags(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SearchTags: "+err2.Error())
		oprot.WriteMessageBegin("SearchTags", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("SearchTags", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tagServiceProcessorGetTagDetail struct {
	handler TagService
}

func (p *tagServiceProcessorGetTagDetail) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TagServiceGetTagDetailArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetTagDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := TagServiceGetTagDetailResult{}
	var retval *GetTagDetailResponse
	if retval, err2 = p.handler.GetTagDetail(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetTagDetail: "+err2.Error())
		oprot.WriteMessageBegin("GetTagDetail", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetTagDetail", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tagServiceProcessorGetTagSpec struct {
	handler TagService
}

func (p *tagServiceProcessorGetTagSpec) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TagServiceGetTagSpecArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetTagSpec", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := TagServiceGetTagSpecResult{}
	var retval *GetTagSpecResponse
	if retval, err2 = p.handler.GetTagSpec(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetTagSpec: "+err2.Error())
		oprot.WriteMessageBegin("GetTagSpec", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetTagSpec", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type tagServiceProcessorBatchGetTags struct {
	handler TagService
}

func (p *tagServiceProcessorBatchGetTags) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TagServiceBatchGetTagsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BatchGetTags", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := TagServiceBatchGetTagsResult{}
	var retval *BatchGetTagsResponse
	if retval, err2 = p.handler.BatchGetTags(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BatchGetTags: "+err2.Error())
		oprot.WriteMessageBegin("BatchGetTags", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BatchGetTags", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type TagServiceCreateTagArgs struct {
	Req *CreateTagRequest `thrift:"req,1" frugal:"1,default,CreateTagRequest"`
}

func NewTagServiceCreateTagArgs() *TagServiceCreateTagArgs {
	return &TagServiceCreateTagArgs{}
}

func (p *TagServiceCreateTagArgs) InitDefault() {
}

var TagServiceCreateTagArgs_Req_DEFAULT *CreateTagRequest

func (p *TagServiceCreateTagArgs) GetReq() (v *CreateTagRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return TagServiceCreateTagArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TagServiceCreateTagArgs) SetReq(val *CreateTagRequest) {
	p.Req = val
}

var fieldIDToName_TagServiceCreateTagArgs = map[int16]string{
	1: "req",
}

func (p *TagServiceCreateTagArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TagServiceCreateTagArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TagServiceCreateTagArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TagServiceCreateTagArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateTagRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *TagServiceCreateTagArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateTag_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TagServiceCreateTagArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TagServiceCreateTagArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TagServiceCreateTagArgs(%+v)", *p)

}

func (p *TagServiceCreateTagArgs) DeepEqual(ano *TagServiceCreateTagArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *TagServiceCreateTagArgs) Field1DeepEqual(src *CreateTagRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type TagServiceCreateTagResult struct {
	Success *CreateTagResponse `thrift:"success,0,optional" frugal:"0,optional,CreateTagResponse"`
}

func NewTagServiceCreateTagResult() *TagServiceCreateTagResult {
	return &TagServiceCreateTagResult{}
}

func (p *TagServiceCreateTagResult) InitDefault() {
}

var TagServiceCreateTagResult_Success_DEFAULT *CreateTagResponse

func (p *TagServiceCreateTagResult) GetSuccess() (v *CreateTagResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return TagServiceCreateTagResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TagServiceCreateTagResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateTagResponse)
}

var fieldIDToName_TagServiceCreateTagResult = map[int16]string{
	0: "success",
}

func (p *TagServiceCreateTagResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TagServiceCreateTagResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TagServiceCreateTagResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TagServiceCreateTagResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreateTagResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *TagServiceCreateTagResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateTag_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TagServiceCreateTagResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *TagServiceCreateTagResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TagServiceCreateTagResult(%+v)", *p)

}

func (p *TagServiceCreateTagResult) DeepEqual(ano *TagServiceCreateTagResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *TagServiceCreateTagResult) Field0DeepEqual(src *CreateTagResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type TagServiceUpdateTagArgs struct {
	Req *UpdateTagRequest `thrift:"req,1" frugal:"1,default,UpdateTagRequest"`
}

func NewTagServiceUpdateTagArgs() *TagServiceUpdateTagArgs {
	return &TagServiceUpdateTagArgs{}
}

func (p *TagServiceUpdateTagArgs) InitDefault() {
}

var TagServiceUpdateTagArgs_Req_DEFAULT *UpdateTagRequest

func (p *TagServiceUpdateTagArgs) GetReq() (v *UpdateTagRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return TagServiceUpdateTagArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TagServiceUpdateTagArgs) SetReq(val *UpdateTagRequest) {
	p.Req = val
}

var fieldIDToName_TagServiceUpdateTagArgs = map[int16]string{
	1: "req",
}

func (p *TagServiceUpdateTagArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TagServiceUpdateTagArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TagServiceUpdateTagArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TagServiceUpdateTagArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUpdateTagRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *TagServiceUpdateTagArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateTag_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TagServiceUpdateTagArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TagServiceUpdateTagArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TagServiceUpdateTagArgs(%+v)", *p)

}

func (p *TagServiceUpdateTagArgs) DeepEqual(ano *TagServiceUpdateTagArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *TagServiceUpdateTagArgs) Field1DeepEqual(src *UpdateTagRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type TagServiceUpdateTagResult struct {
	Success *UpdateTagResponse `thrift:"success,0,optional" frugal:"0,optional,UpdateTagResponse"`
}

func NewTagServiceUpdateTagResult() *TagServiceUpdateTagResult {
	return &TagServiceUpdateTagResult{}
}

func (p *TagServiceUpdateTagResult) InitDefault() {
}

var TagServiceUpdateTagResult_Success_DEFAULT *UpdateTagResponse

func (p *TagServiceUpdateTagResult) GetSuccess() (v *UpdateTagResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return TagServiceUpdateTagResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TagServiceUpdateTagResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateTagResponse)
}

var fieldIDToName_TagServiceUpdateTagResult = map[int16]string{
	0: "success",
}

func (p *TagServiceUpdateTagResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TagServiceUpdateTagResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TagServiceUpdateTagResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TagServiceUpdateTagResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewUpdateTagResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *TagServiceUpdateTagResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateTag_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TagServiceUpdateTagResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *TagServiceUpdateTagResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TagServiceUpdateTagResult(%+v)", *p)

}

func (p *TagServiceUpdateTagResult) DeepEqual(ano *TagServiceUpdateTagResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *TagServiceUpdateTagResult) Field0DeepEqual(src *UpdateTagResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type TagServiceBatchUpdateTagStatusArgs struct {
	Req *BatchUpdateTagStatusRequest `thrift:"req,1" frugal:"1,default,BatchUpdateTagStatusRequest"`
}

func NewTagServiceBatchUpdateTagStatusArgs() *TagServiceBatchUpdateTagStatusArgs {
	return &TagServiceBatchUpdateTagStatusArgs{}
}

func (p *TagServiceBatchUpdateTagStatusArgs) InitDefault() {
}

var TagServiceBatchUpdateTagStatusArgs_Req_DEFAULT *BatchUpdateTagStatusRequest

func (p *TagServiceBatchUpdateTagStatusArgs) GetReq() (v *BatchUpdateTagStatusRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return TagServiceBatchUpdateTagStatusArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TagServiceBatchUpdateTagStatusArgs) SetReq(val *BatchUpdateTagStatusRequest) {
	p.Req = val
}

var fieldIDToName_TagServiceBatchUpdateTagStatusArgs = map[int16]string{
	1: "req",
}

func (p *TagServiceBatchUpdateTagStatusArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TagServiceBatchUpdateTagStatusArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TagServiceBatchUpdateTagStatusArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TagServiceBatchUpdateTagStatusArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewBatchUpdateTagStatusRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *TagServiceBatchUpdateTagStatusArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchUpdateTagStatus_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TagServiceBatchUpdateTagStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TagServiceBatchUpdateTagStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TagServiceBatchUpdateTagStatusArgs(%+v)", *p)

}

func (p *TagServiceBatchUpdateTagStatusArgs) DeepEqual(ano *TagServiceBatchUpdateTagStatusArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *TagServiceBatchUpdateTagStatusArgs) Field1DeepEqual(src *BatchUpdateTagStatusRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type TagServiceBatchUpdateTagStatusResult struct {
	Success *BatchUpdateTagStatusResponse `thrift:"success,0,optional" frugal:"0,optional,BatchUpdateTagStatusResponse"`
}

func NewTagServiceBatchUpdateTagStatusResult() *TagServiceBatchUpdateTagStatusResult {
	return &TagServiceBatchUpdateTagStatusResult{}
}

func (p *TagServiceBatchUpdateTagStatusResult) InitDefault() {
}

var TagServiceBatchUpdateTagStatusResult_Success_DEFAULT *BatchUpdateTagStatusResponse

func (p *TagServiceBatchUpdateTagStatusResult) GetSuccess() (v *BatchUpdateTagStatusResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return TagServiceBatchUpdateTagStatusResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TagServiceBatchUpdateTagStatusResult) SetSuccess(x interface{}) {
	p.Success = x.(*BatchUpdateTagStatusResponse)
}

var fieldIDToName_TagServiceBatchUpdateTagStatusResult = map[int16]string{
	0: "success",
}

func (p *TagServiceBatchUpdateTagStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TagServiceBatchUpdateTagStatusResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TagServiceBatchUpdateTagStatusResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TagServiceBatchUpdateTagStatusResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewBatchUpdateTagStatusResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *TagServiceBatchUpdateTagStatusResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchUpdateTagStatus_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TagServiceBatchUpdateTagStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *TagServiceBatchUpdateTagStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TagServiceBatchUpdateTagStatusResult(%+v)", *p)

}

func (p *TagServiceBatchUpdateTagStatusResult) DeepEqual(ano *TagServiceBatchUpdateTagStatusResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *TagServiceBatchUpdateTagStatusResult) Field0DeepEqual(src *BatchUpdateTagStatusResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type TagServiceSearchTagsArgs struct {
	Req *SearchTagsRequest `thrift:"req,1" frugal:"1,default,SearchTagsRequest"`
}

func NewTagServiceSearchTagsArgs() *TagServiceSearchTagsArgs {
	return &TagServiceSearchTagsArgs{}
}

func (p *TagServiceSearchTagsArgs) InitDefault() {
}

var TagServiceSearchTagsArgs_Req_DEFAULT *SearchTagsRequest

func (p *TagServiceSearchTagsArgs) GetReq() (v *SearchTagsRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return TagServiceSearchTagsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TagServiceSearchTagsArgs) SetReq(val *SearchTagsRequest) {
	p.Req = val
}

var fieldIDToName_TagServiceSearchTagsArgs = map[int16]string{
	1: "req",
}

func (p *TagServiceSearchTagsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TagServiceSearchTagsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TagServiceSearchTagsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TagServiceSearchTagsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewSearchTagsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *TagServiceSearchTagsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SearchTags_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TagServiceSearchTagsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TagServiceSearchTagsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TagServiceSearchTagsArgs(%+v)", *p)

}

func (p *TagServiceSearchTagsArgs) DeepEqual(ano *TagServiceSearchTagsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *TagServiceSearchTagsArgs) Field1DeepEqual(src *SearchTagsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type TagServiceSearchTagsResult struct {
	Success *SearchTagsResponse `thrift:"success,0,optional" frugal:"0,optional,SearchTagsResponse"`
}

func NewTagServiceSearchTagsResult() *TagServiceSearchTagsResult {
	return &TagServiceSearchTagsResult{}
}

func (p *TagServiceSearchTagsResult) InitDefault() {
}

var TagServiceSearchTagsResult_Success_DEFAULT *SearchTagsResponse

func (p *TagServiceSearchTagsResult) GetSuccess() (v *SearchTagsResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return TagServiceSearchTagsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TagServiceSearchTagsResult) SetSuccess(x interface{}) {
	p.Success = x.(*SearchTagsResponse)
}

var fieldIDToName_TagServiceSearchTagsResult = map[int16]string{
	0: "success",
}

func (p *TagServiceSearchTagsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TagServiceSearchTagsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TagServiceSearchTagsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TagServiceSearchTagsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewSearchTagsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *TagServiceSearchTagsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SearchTags_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TagServiceSearchTagsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *TagServiceSearchTagsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TagServiceSearchTagsResult(%+v)", *p)

}

func (p *TagServiceSearchTagsResult) DeepEqual(ano *TagServiceSearchTagsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *TagServiceSearchTagsResult) Field0DeepEqual(src *SearchTagsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type TagServiceGetTagDetailArgs struct {
	Req *GetTagDetailRequest `thrift:"req,1" frugal:"1,default,GetTagDetailRequest"`
}

func NewTagServiceGetTagDetailArgs() *TagServiceGetTagDetailArgs {
	return &TagServiceGetTagDetailArgs{}
}

func (p *TagServiceGetTagDetailArgs) InitDefault() {
}

var TagServiceGetTagDetailArgs_Req_DEFAULT *GetTagDetailRequest

func (p *TagServiceGetTagDetailArgs) GetReq() (v *GetTagDetailRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return TagServiceGetTagDetailArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TagServiceGetTagDetailArgs) SetReq(val *GetTagDetailRequest) {
	p.Req = val
}

var fieldIDToName_TagServiceGetTagDetailArgs = map[int16]string{
	1: "req",
}

func (p *TagServiceGetTagDetailArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TagServiceGetTagDetailArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TagServiceGetTagDetailArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TagServiceGetTagDetailArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetTagDetailRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *TagServiceGetTagDetailArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTagDetail_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TagServiceGetTagDetailArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TagServiceGetTagDetailArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TagServiceGetTagDetailArgs(%+v)", *p)

}

func (p *TagServiceGetTagDetailArgs) DeepEqual(ano *TagServiceGetTagDetailArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *TagServiceGetTagDetailArgs) Field1DeepEqual(src *GetTagDetailRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type TagServiceGetTagDetailResult struct {
	Success *GetTagDetailResponse `thrift:"success,0,optional" frugal:"0,optional,GetTagDetailResponse"`
}

func NewTagServiceGetTagDetailResult() *TagServiceGetTagDetailResult {
	return &TagServiceGetTagDetailResult{}
}

func (p *TagServiceGetTagDetailResult) InitDefault() {
}

var TagServiceGetTagDetailResult_Success_DEFAULT *GetTagDetailResponse

func (p *TagServiceGetTagDetailResult) GetSuccess() (v *GetTagDetailResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return TagServiceGetTagDetailResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TagServiceGetTagDetailResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetTagDetailResponse)
}

var fieldIDToName_TagServiceGetTagDetailResult = map[int16]string{
	0: "success",
}

func (p *TagServiceGetTagDetailResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TagServiceGetTagDetailResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TagServiceGetTagDetailResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TagServiceGetTagDetailResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetTagDetailResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *TagServiceGetTagDetailResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTagDetail_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TagServiceGetTagDetailResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *TagServiceGetTagDetailResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TagServiceGetTagDetailResult(%+v)", *p)

}

func (p *TagServiceGetTagDetailResult) DeepEqual(ano *TagServiceGetTagDetailResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *TagServiceGetTagDetailResult) Field0DeepEqual(src *GetTagDetailResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type TagServiceGetTagSpecArgs struct {
	Req *GetTagSpecRequest `thrift:"req,1" frugal:"1,default,GetTagSpecRequest"`
}

func NewTagServiceGetTagSpecArgs() *TagServiceGetTagSpecArgs {
	return &TagServiceGetTagSpecArgs{}
}

func (p *TagServiceGetTagSpecArgs) InitDefault() {
}

var TagServiceGetTagSpecArgs_Req_DEFAULT *GetTagSpecRequest

func (p *TagServiceGetTagSpecArgs) GetReq() (v *GetTagSpecRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return TagServiceGetTagSpecArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TagServiceGetTagSpecArgs) SetReq(val *GetTagSpecRequest) {
	p.Req = val
}

var fieldIDToName_TagServiceGetTagSpecArgs = map[int16]string{
	1: "req",
}

func (p *TagServiceGetTagSpecArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TagServiceGetTagSpecArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TagServiceGetTagSpecArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TagServiceGetTagSpecArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetTagSpecRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *TagServiceGetTagSpecArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTagSpec_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TagServiceGetTagSpecArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TagServiceGetTagSpecArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TagServiceGetTagSpecArgs(%+v)", *p)

}

func (p *TagServiceGetTagSpecArgs) DeepEqual(ano *TagServiceGetTagSpecArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *TagServiceGetTagSpecArgs) Field1DeepEqual(src *GetTagSpecRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type TagServiceGetTagSpecResult struct {
	Success *GetTagSpecResponse `thrift:"success,0,optional" frugal:"0,optional,GetTagSpecResponse"`
}

func NewTagServiceGetTagSpecResult() *TagServiceGetTagSpecResult {
	return &TagServiceGetTagSpecResult{}
}

func (p *TagServiceGetTagSpecResult) InitDefault() {
}

var TagServiceGetTagSpecResult_Success_DEFAULT *GetTagSpecResponse

func (p *TagServiceGetTagSpecResult) GetSuccess() (v *GetTagSpecResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return TagServiceGetTagSpecResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TagServiceGetTagSpecResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetTagSpecResponse)
}

var fieldIDToName_TagServiceGetTagSpecResult = map[int16]string{
	0: "success",
}

func (p *TagServiceGetTagSpecResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TagServiceGetTagSpecResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TagServiceGetTagSpecResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TagServiceGetTagSpecResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetTagSpecResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *TagServiceGetTagSpecResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTagSpec_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TagServiceGetTagSpecResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *TagServiceGetTagSpecResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TagServiceGetTagSpecResult(%+v)", *p)

}

func (p *TagServiceGetTagSpecResult) DeepEqual(ano *TagServiceGetTagSpecResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *TagServiceGetTagSpecResult) Field0DeepEqual(src *GetTagSpecResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type TagServiceBatchGetTagsArgs struct {
	Req *BatchGetTagsRequest `thrift:"req,1" frugal:"1,default,BatchGetTagsRequest"`
}

func NewTagServiceBatchGetTagsArgs() *TagServiceBatchGetTagsArgs {
	return &TagServiceBatchGetTagsArgs{}
}

func (p *TagServiceBatchGetTagsArgs) InitDefault() {
}

var TagServiceBatchGetTagsArgs_Req_DEFAULT *BatchGetTagsRequest

func (p *TagServiceBatchGetTagsArgs) GetReq() (v *BatchGetTagsRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return TagServiceBatchGetTagsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TagServiceBatchGetTagsArgs) SetReq(val *BatchGetTagsRequest) {
	p.Req = val
}

var fieldIDToName_TagServiceBatchGetTagsArgs = map[int16]string{
	1: "req",
}

func (p *TagServiceBatchGetTagsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TagServiceBatchGetTagsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TagServiceBatchGetTagsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TagServiceBatchGetTagsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewBatchGetTagsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *TagServiceBatchGetTagsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetTags_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TagServiceBatchGetTagsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TagServiceBatchGetTagsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TagServiceBatchGetTagsArgs(%+v)", *p)

}

func (p *TagServiceBatchGetTagsArgs) DeepEqual(ano *TagServiceBatchGetTagsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *TagServiceBatchGetTagsArgs) Field1DeepEqual(src *BatchGetTagsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type TagServiceBatchGetTagsResult struct {
	Success *BatchGetTagsResponse `thrift:"success,0,optional" frugal:"0,optional,BatchGetTagsResponse"`
}

func NewTagServiceBatchGetTagsResult() *TagServiceBatchGetTagsResult {
	return &TagServiceBatchGetTagsResult{}
}

func (p *TagServiceBatchGetTagsResult) InitDefault() {
}

var TagServiceBatchGetTagsResult_Success_DEFAULT *BatchGetTagsResponse

func (p *TagServiceBatchGetTagsResult) GetSuccess() (v *BatchGetTagsResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return TagServiceBatchGetTagsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TagServiceBatchGetTagsResult) SetSuccess(x interface{}) {
	p.Success = x.(*BatchGetTagsResponse)
}

var fieldIDToName_TagServiceBatchGetTagsResult = map[int16]string{
	0: "success",
}

func (p *TagServiceBatchGetTagsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TagServiceBatchGetTagsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TagServiceBatchGetTagsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TagServiceBatchGetTagsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewBatchGetTagsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *TagServiceBatchGetTagsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetTags_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TagServiceBatchGetTagsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *TagServiceBatchGetTagsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TagServiceBatchGetTagsResult(%+v)", *p)

}

func (p *TagServiceBatchGetTagsResult) DeepEqual(ano *TagServiceBatchGetTagsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *TagServiceBatchGetTagsResult) Field0DeepEqual(src *BatchGetTagsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
