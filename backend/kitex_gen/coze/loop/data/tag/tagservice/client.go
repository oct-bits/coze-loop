// Code generated by Kitex v0.13.1. DO NOT EDIT.

package tagservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	tag "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/data/tag"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CreateTag(ctx context.Context, req *tag.CreateTagRequest, callOptions ...callopt.Option) (r *tag.CreateTagResponse, err error)
	UpdateTag(ctx context.Context, req *tag.UpdateTagRequest, callOptions ...callopt.Option) (r *tag.UpdateTagResponse, err error)
	BatchUpdateTagStatus(ctx context.Context, req *tag.BatchUpdateTagStatusRequest, callOptions ...callopt.Option) (r *tag.BatchUpdateTagStatusResponse, err error)
	SearchTags(ctx context.Context, req *tag.SearchTagsRequest, callOptions ...callopt.Option) (r *tag.SearchTagsResponse, err error)
	GetTagDetail(ctx context.Context, req *tag.GetTagDetailRequest, callOptions ...callopt.Option) (r *tag.GetTagDetailResponse, err error)
	GetTagSpec(ctx context.Context, req *tag.GetTagSpecRequest, callOptions ...callopt.Option) (r *tag.GetTagSpecResponse, err error)
	BatchGetTags(ctx context.Context, req *tag.BatchGetTagsRequest, callOptions ...callopt.Option) (r *tag.BatchGetTagsResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kTagServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kTagServiceClient struct {
	*kClient
}

func (p *kTagServiceClient) CreateTag(ctx context.Context, req *tag.CreateTagRequest, callOptions ...callopt.Option) (r *tag.CreateTagResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateTag(ctx, req)
}

func (p *kTagServiceClient) UpdateTag(ctx context.Context, req *tag.UpdateTagRequest, callOptions ...callopt.Option) (r *tag.UpdateTagResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateTag(ctx, req)
}

func (p *kTagServiceClient) BatchUpdateTagStatus(ctx context.Context, req *tag.BatchUpdateTagStatusRequest, callOptions ...callopt.Option) (r *tag.BatchUpdateTagStatusResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.BatchUpdateTagStatus(ctx, req)
}

func (p *kTagServiceClient) SearchTags(ctx context.Context, req *tag.SearchTagsRequest, callOptions ...callopt.Option) (r *tag.SearchTagsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SearchTags(ctx, req)
}

func (p *kTagServiceClient) GetTagDetail(ctx context.Context, req *tag.GetTagDetailRequest, callOptions ...callopt.Option) (r *tag.GetTagDetailResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetTagDetail(ctx, req)
}

func (p *kTagServiceClient) GetTagSpec(ctx context.Context, req *tag.GetTagSpecRequest, callOptions ...callopt.Option) (r *tag.GetTagSpecResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetTagSpec(ctx, req)
}

func (p *kTagServiceClient) BatchGetTags(ctx context.Context, req *tag.BatchGetTagsRequest, callOptions ...callopt.Option) (r *tag.BatchGetTagsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.BatchGetTags(ctx, req)
}
