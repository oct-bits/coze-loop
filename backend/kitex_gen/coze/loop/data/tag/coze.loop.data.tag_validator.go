// Code generated by Validator v0.2.6. DO NOT EDIT.

package tag

import (
	"bytes"
	"fmt"
	"reflect"
	"regexp"
	"strings"
	"time"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
	_ = (*bytes.Buffer)(nil)
	_ = (*strings.Builder)(nil)
	_ = reflect.Type(nil)
	_ = (*regexp.Regexp)(nil)
	_ = time.Nanosecond
)

func (p *CreateTagRequest) IsValid() error {
	if p.WorkspaceID <= int64(0) {
		return fmt.Errorf("field WorkspaceID gt rule failed, current value: %v", p.WorkspaceID)
	}
	if p.TagContentSpec != nil {
		if err := p.TagContentSpec.IsValid(); err != nil {
			return fmt.Errorf("field TagContentSpec not valid, %w", err)
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *CreateTagResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *UpdateTagRequest) IsValid() error {
	if p.WorkspaceID <= int64(0) {
		return fmt.Errorf("field WorkspaceID gt rule failed, current value: %v", p.WorkspaceID)
	}
	if p.TagKeyID <= int64(0) {
		return fmt.Errorf("field TagKeyID gt rule failed, current value: %v", p.TagKeyID)
	}
	if p.TagContentSpec != nil {
		if err := p.TagContentSpec.IsValid(); err != nil {
			return fmt.Errorf("field TagContentSpec not valid, %w", err)
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *UpdateTagResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *BatchUpdateTagStatusRequest) IsValid() error {
	if p.WorkspaceID <= int64(0) {
		return fmt.Errorf("field WorkspaceID gt rule failed, current value: %v", p.WorkspaceID)
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *BatchUpdateTagStatusResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *SearchTagsRequest) IsValid() error {
	if p.WorkspaceID <= int64(0) {
		return fmt.Errorf("field WorkspaceID gt rule failed, current value: %v", p.WorkspaceID)
	}
	if p.PageNumber != nil {
		if *p.PageNumber <= int32(0) {
			return fmt.Errorf("field PageNumber gt rule failed, current value: %v", *p.PageNumber)
		}
	}
	if p.PageSize != nil {
		if *p.PageSize <= int32(0) {
			return fmt.Errorf("field PageSize gt rule failed, current value: %v", *p.PageSize)
		}
		if *p.PageSize > int32(200) {
			return fmt.Errorf("field PageSize le rule failed, current value: %v", *p.PageSize)
		}
	}
	if p.OrderBy != nil {
		if err := p.OrderBy.IsValid(); err != nil {
			return fmt.Errorf("field OrderBy not valid, %w", err)
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *SearchTagsResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *GetTagDetailRequest) IsValid() error {
	if p.WorkspaceID <= int64(0) {
		return fmt.Errorf("field WorkspaceID gt rule failed, current value: %v", p.WorkspaceID)
	}
	if p.TagKeyID <= int64(0) {
		return fmt.Errorf("field TagKeyID gt rule failed, current value: %v", p.TagKeyID)
	}
	if p.PageNumber != nil {
		if *p.PageNumber <= int32(0) {
			return fmt.Errorf("field PageNumber gt rule failed, current value: %v", *p.PageNumber)
		}
	}
	if p.PageSize != nil {
		if *p.PageSize <= int32(0) {
			return fmt.Errorf("field PageSize gt rule failed, current value: %v", *p.PageSize)
		}
		if *p.PageSize > int32(200) {
			return fmt.Errorf("field PageSize le rule failed, current value: %v", *p.PageSize)
		}
	}
	if p.OrderBy != nil {
		if err := p.OrderBy.IsValid(); err != nil {
			return fmt.Errorf("field OrderBy not valid, %w", err)
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *GetTagDetailResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *GetTagSpecRequest) IsValid() error {
	if p.WorkspaceID <= int64(0) {
		return fmt.Errorf("field WorkspaceID gt rule failed, current value: %v", p.WorkspaceID)
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *GetTagSpecResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *BatchGetTagsRequest) IsValid() error {
	if p.WorkspaceID <= int64(0) {
		return fmt.Errorf("field WorkspaceID gt rule failed, current value: %v", p.WorkspaceID)
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *BatchGetTagsResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
