// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package dataset

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type StorageProvider int64

const (
	StorageProvider_TOS    StorageProvider = 1
	StorageProvider_VETOS  StorageProvider = 2
	StorageProvider_HDFS   StorageProvider = 3
	StorageProvider_ImageX StorageProvider = 4
	StorageProvider_S3     StorageProvider = 5
	/* 后端内部使用 */
	StorageProvider_Abase   StorageProvider = 100
	StorageProvider_RDS     StorageProvider = 101
	StorageProvider_LocalFS StorageProvider = 102
)

func (p StorageProvider) String() string {
	switch p {
	case StorageProvider_TOS:
		return "TOS"
	case StorageProvider_VETOS:
		return "VETOS"
	case StorageProvider_HDFS:
		return "HDFS"
	case StorageProvider_ImageX:
		return "ImageX"
	case StorageProvider_S3:
		return "S3"
	case StorageProvider_Abase:
		return "Abase"
	case StorageProvider_RDS:
		return "RDS"
	case StorageProvider_LocalFS:
		return "LocalFS"
	}
	return "<UNSET>"
}

func StorageProviderFromString(s string) (StorageProvider, error) {
	switch s {
	case "TOS":
		return StorageProvider_TOS, nil
	case "VETOS":
		return StorageProvider_VETOS, nil
	case "HDFS":
		return StorageProvider_HDFS, nil
	case "ImageX":
		return StorageProvider_ImageX, nil
	case "S3":
		return StorageProvider_S3, nil
	case "Abase":
		return StorageProvider_Abase, nil
	case "RDS":
		return StorageProvider_RDS, nil
	case "LocalFS":
		return StorageProvider_LocalFS, nil
	}
	return StorageProvider(0), fmt.Errorf("not a valid StorageProvider string")
}

func StorageProviderPtr(v StorageProvider) *StorageProvider { return &v }
func (p *StorageProvider) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = StorageProvider(result.Int64)
	return
}

func (p *StorageProvider) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type DatasetVisibility int64

const (
	// 所有空间可见
	DatasetVisibility_Public DatasetVisibility = 1
	// 当前空间可见
	DatasetVisibility_Space DatasetVisibility = 2
	// 用户不可见
	DatasetVisibility_System DatasetVisibility = 3
)

func (p DatasetVisibility) String() string {
	switch p {
	case DatasetVisibility_Public:
		return "Public"
	case DatasetVisibility_Space:
		return "Space"
	case DatasetVisibility_System:
		return "System"
	}
	return "<UNSET>"
}

func DatasetVisibilityFromString(s string) (DatasetVisibility, error) {
	switch s {
	case "Public":
		return DatasetVisibility_Public, nil
	case "Space":
		return DatasetVisibility_Space, nil
	case "System":
		return DatasetVisibility_System, nil
	}
	return DatasetVisibility(0), fmt.Errorf("not a valid DatasetVisibility string")
}

func DatasetVisibilityPtr(v DatasetVisibility) *DatasetVisibility { return &v }
func (p *DatasetVisibility) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = DatasetVisibility(result.Int64)
	return
}

func (p *DatasetVisibility) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type SecurityLevel int64

const (
	SecurityLevel_L1 SecurityLevel = 1
	SecurityLevel_L2 SecurityLevel = 2
	SecurityLevel_L3 SecurityLevel = 3
	SecurityLevel_L4 SecurityLevel = 4
)

func (p SecurityLevel) String() string {
	switch p {
	case SecurityLevel_L1:
		return "L1"
	case SecurityLevel_L2:
		return "L2"
	case SecurityLevel_L3:
		return "L3"
	case SecurityLevel_L4:
		return "L4"
	}
	return "<UNSET>"
}

func SecurityLevelFromString(s string) (SecurityLevel, error) {
	switch s {
	case "L1":
		return SecurityLevel_L1, nil
	case "L2":
		return SecurityLevel_L2, nil
	case "L3":
		return SecurityLevel_L3, nil
	case "L4":
		return SecurityLevel_L4, nil
	}
	return SecurityLevel(0), fmt.Errorf("not a valid SecurityLevel string")
}

func SecurityLevelPtr(v SecurityLevel) *SecurityLevel { return &v }
func (p *SecurityLevel) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = SecurityLevel(result.Int64)
	return
}

func (p *SecurityLevel) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type DatasetCategory int64

const (
	DatasetCategory_General    DatasetCategory = 1
	DatasetCategory_Training   DatasetCategory = 2
	DatasetCategory_Validation DatasetCategory = 3
	DatasetCategory_Evaluation DatasetCategory = 4
)

func (p DatasetCategory) String() string {
	switch p {
	case DatasetCategory_General:
		return "General"
	case DatasetCategory_Training:
		return "Training"
	case DatasetCategory_Validation:
		return "Validation"
	case DatasetCategory_Evaluation:
		return "Evaluation"
	}
	return "<UNSET>"
}

func DatasetCategoryFromString(s string) (DatasetCategory, error) {
	switch s {
	case "General":
		return DatasetCategory_General, nil
	case "Training":
		return DatasetCategory_Training, nil
	case "Validation":
		return DatasetCategory_Validation, nil
	case "Evaluation":
		return DatasetCategory_Evaluation, nil
	}
	return DatasetCategory(0), fmt.Errorf("not a valid DatasetCategory string")
}

func DatasetCategoryPtr(v DatasetCategory) *DatasetCategory { return &v }
func (p *DatasetCategory) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = DatasetCategory(result.Int64)
	return
}

func (p *DatasetCategory) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type DatasetStatus int64

const (
	DatasetStatus_Available DatasetStatus = 1
	DatasetStatus_Deleted   DatasetStatus = 2
	DatasetStatus_Expired   DatasetStatus = 3
	DatasetStatus_Importing DatasetStatus = 4
	DatasetStatus_Exporting DatasetStatus = 5
	DatasetStatus_Indexing  DatasetStatus = 6
)

func (p DatasetStatus) String() string {
	switch p {
	case DatasetStatus_Available:
		return "Available"
	case DatasetStatus_Deleted:
		return "Deleted"
	case DatasetStatus_Expired:
		return "Expired"
	case DatasetStatus_Importing:
		return "Importing"
	case DatasetStatus_Exporting:
		return "Exporting"
	case DatasetStatus_Indexing:
		return "Indexing"
	}
	return "<UNSET>"
}

func DatasetStatusFromString(s string) (DatasetStatus, error) {
	switch s {
	case "Available":
		return DatasetStatus_Available, nil
	case "Deleted":
		return DatasetStatus_Deleted, nil
	case "Expired":
		return DatasetStatus_Expired, nil
	case "Importing":
		return DatasetStatus_Importing, nil
	case "Exporting":
		return DatasetStatus_Exporting, nil
	case "Indexing":
		return DatasetStatus_Indexing, nil
	}
	return DatasetStatus(0), fmt.Errorf("not a valid DatasetStatus string")
}

func DatasetStatusPtr(v DatasetStatus) *DatasetStatus { return &v }
func (p *DatasetStatus) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = DatasetStatus(result.Int64)
	return
}

func (p *DatasetStatus) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type ContentType int64

const (
	/* 基础类型 */
	ContentType_Text  ContentType = 1
	ContentType_Image ContentType = 2
	ContentType_Audio ContentType = 3
	ContentType_Video ContentType = 4
	// 图文混排
	ContentType_MultiPart ContentType = 100
)

func (p ContentType) String() string {
	switch p {
	case ContentType_Text:
		return "Text"
	case ContentType_Image:
		return "Image"
	case ContentType_Audio:
		return "Audio"
	case ContentType_Video:
		return "Video"
	case ContentType_MultiPart:
		return "MultiPart"
	}
	return "<UNSET>"
}

func ContentTypeFromString(s string) (ContentType, error) {
	switch s {
	case "Text":
		return ContentType_Text, nil
	case "Image":
		return ContentType_Image, nil
	case "Audio":
		return ContentType_Audio, nil
	case "Video":
		return ContentType_Video, nil
	case "MultiPart":
		return ContentType_MultiPart, nil
	}
	return ContentType(0), fmt.Errorf("not a valid ContentType string")
}

func ContentTypePtr(v ContentType) *ContentType { return &v }
func (p *ContentType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = ContentType(result.Int64)
	return
}

func (p *ContentType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type FieldDisplayFormat int64

const (
	FieldDisplayFormat_PlainText FieldDisplayFormat = 1
	FieldDisplayFormat_Markdown  FieldDisplayFormat = 2
	FieldDisplayFormat_JSON      FieldDisplayFormat = 3
	FieldDisplayFormat_YAML      FieldDisplayFormat = 4
	FieldDisplayFormat_Code      FieldDisplayFormat = 5
)

func (p FieldDisplayFormat) String() string {
	switch p {
	case FieldDisplayFormat_PlainText:
		return "PlainText"
	case FieldDisplayFormat_Markdown:
		return "Markdown"
	case FieldDisplayFormat_JSON:
		return "JSON"
	case FieldDisplayFormat_YAML:
		return "YAML"
	case FieldDisplayFormat_Code:
		return "Code"
	}
	return "<UNSET>"
}

func FieldDisplayFormatFromString(s string) (FieldDisplayFormat, error) {
	switch s {
	case "PlainText":
		return FieldDisplayFormat_PlainText, nil
	case "Markdown":
		return FieldDisplayFormat_Markdown, nil
	case "JSON":
		return FieldDisplayFormat_JSON, nil
	case "YAML":
		return FieldDisplayFormat_YAML, nil
	case "Code":
		return FieldDisplayFormat_Code, nil
	}
	return FieldDisplayFormat(0), fmt.Errorf("not a valid FieldDisplayFormat string")
}

func FieldDisplayFormatPtr(v FieldDisplayFormat) *FieldDisplayFormat { return &v }
func (p *FieldDisplayFormat) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = FieldDisplayFormat(result.Int64)
	return
}

func (p *FieldDisplayFormat) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type SnapshotStatus int64

const (
	SnapshotStatus_Unstarted  SnapshotStatus = 1
	SnapshotStatus_InProgress SnapshotStatus = 2
	SnapshotStatus_Completed  SnapshotStatus = 3
	SnapshotStatus_Failed     SnapshotStatus = 4
)

func (p SnapshotStatus) String() string {
	switch p {
	case SnapshotStatus_Unstarted:
		return "Unstarted"
	case SnapshotStatus_InProgress:
		return "InProgress"
	case SnapshotStatus_Completed:
		return "Completed"
	case SnapshotStatus_Failed:
		return "Failed"
	}
	return "<UNSET>"
}

func SnapshotStatusFromString(s string) (SnapshotStatus, error) {
	switch s {
	case "Unstarted":
		return SnapshotStatus_Unstarted, nil
	case "InProgress":
		return SnapshotStatus_InProgress, nil
	case "Completed":
		return SnapshotStatus_Completed, nil
	case "Failed":
		return SnapshotStatus_Failed, nil
	}
	return SnapshotStatus(0), fmt.Errorf("not a valid SnapshotStatus string")
}

func SnapshotStatusPtr(v SnapshotStatus) *SnapshotStatus { return &v }
func (p *SnapshotStatus) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = SnapshotStatus(result.Int64)
	return
}

func (p *SnapshotStatus) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type SchemaKey int64

const (
	SchemaKey_String  SchemaKey = 1
	SchemaKey_Integer SchemaKey = 2
	SchemaKey_Float   SchemaKey = 3
	SchemaKey_Bool    SchemaKey = 4
	SchemaKey_Message SchemaKey = 5
)

func (p SchemaKey) String() string {
	switch p {
	case SchemaKey_String:
		return "String"
	case SchemaKey_Integer:
		return "Integer"
	case SchemaKey_Float:
		return "Float"
	case SchemaKey_Bool:
		return "Bool"
	case SchemaKey_Message:
		return "Message"
	}
	return "<UNSET>"
}

func SchemaKeyFromString(s string) (SchemaKey, error) {
	switch s {
	case "String":
		return SchemaKey_String, nil
	case "Integer":
		return SchemaKey_Integer, nil
	case "Float":
		return SchemaKey_Float, nil
	case "Bool":
		return SchemaKey_Bool, nil
	case "Message":
		return SchemaKey_Message, nil
	}
	return SchemaKey(0), fmt.Errorf("not a valid SchemaKey string")
}

func SchemaKeyPtr(v SchemaKey) *SchemaKey { return &v }
func (p *SchemaKey) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = SchemaKey(result.Int64)
	return
}

func (p *SchemaKey) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type FieldStatus int64

const (
	FieldStatus_Available FieldStatus = 1
	FieldStatus_Deleted   FieldStatus = 2
)

func (p FieldStatus) String() string {
	switch p {
	case FieldStatus_Available:
		return "Available"
	case FieldStatus_Deleted:
		return "Deleted"
	}
	return "<UNSET>"
}

func FieldStatusFromString(s string) (FieldStatus, error) {
	switch s {
	case "Available":
		return FieldStatus_Available, nil
	case "Deleted":
		return FieldStatus_Deleted, nil
	}
	return FieldStatus(0), fmt.Errorf("not a valid FieldStatus string")
}

func FieldStatusPtr(v FieldStatus) *FieldStatus { return &v }
func (p *FieldStatus) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = FieldStatus(result.Int64)
	return
}

func (p *FieldStatus) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type FieldTransformationType int64

const (
	// 移除未在当前列的 jsonSchema 中定义的字段（包括 properties 和 patternProperties），仅在列类型为 struct 时有效
	FieldTransformationType_RemoveExtraFields FieldTransformationType = 1
)

func (p FieldTransformationType) String() string {
	switch p {
	case FieldTransformationType_RemoveExtraFields:
		return "RemoveExtraFields"
	}
	return "<UNSET>"
}

func FieldTransformationTypeFromString(s string) (FieldTransformationType, error) {
	switch s {
	case "RemoveExtraFields":
		return FieldTransformationType_RemoveExtraFields, nil
	}
	return FieldTransformationType(0), fmt.Errorf("not a valid FieldTransformationType string")
}

func FieldTransformationTypePtr(v FieldTransformationType) *FieldTransformationType { return &v }
func (p *FieldTransformationType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = FieldTransformationType(result.Int64)
	return
}

func (p *FieldTransformationType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type ItemErrorType int64

const (
	// schema 不匹配
	ItemErrorType_MismatchSchema ItemErrorType = 1
	// 空数据
	ItemErrorType_EmptyData ItemErrorType = 2
	// 单条数据大小超限
	ItemErrorType_ExceedMaxItemSize ItemErrorType = 3
	// 数据集容量超限
	ItemErrorType_ExceedDatasetCapacity ItemErrorType = 4
	// 文件格式错误
	ItemErrorType_MalformedFile ItemErrorType = 5
	// 包含非法内容
	ItemErrorType_IllegalContent ItemErrorType = 6
	// 缺少必填字段
	ItemErrorType_MissingRequiredField ItemErrorType = 7
	// 数据嵌套层数超限
	ItemErrorType_ExceedMaxNestedDepth ItemErrorType = 8
	// 数据转换失败
	ItemErrorType_TransformItemFailed ItemErrorType = 9
	/* system error*/
	ItemErrorType_InternalError ItemErrorType = 100
)

func (p ItemErrorType) String() string {
	switch p {
	case ItemErrorType_MismatchSchema:
		return "MismatchSchema"
	case ItemErrorType_EmptyData:
		return "EmptyData"
	case ItemErrorType_ExceedMaxItemSize:
		return "ExceedMaxItemSize"
	case ItemErrorType_ExceedDatasetCapacity:
		return "ExceedDatasetCapacity"
	case ItemErrorType_MalformedFile:
		return "MalformedFile"
	case ItemErrorType_IllegalContent:
		return "IllegalContent"
	case ItemErrorType_MissingRequiredField:
		return "MissingRequiredField"
	case ItemErrorType_ExceedMaxNestedDepth:
		return "ExceedMaxNestedDepth"
	case ItemErrorType_TransformItemFailed:
		return "TransformItemFailed"
	case ItemErrorType_InternalError:
		return "InternalError"
	}
	return "<UNSET>"
}

func ItemErrorTypeFromString(s string) (ItemErrorType, error) {
	switch s {
	case "MismatchSchema":
		return ItemErrorType_MismatchSchema, nil
	case "EmptyData":
		return ItemErrorType_EmptyData, nil
	case "ExceedMaxItemSize":
		return ItemErrorType_ExceedMaxItemSize, nil
	case "ExceedDatasetCapacity":
		return ItemErrorType_ExceedDatasetCapacity, nil
	case "MalformedFile":
		return ItemErrorType_MalformedFile, nil
	case "IllegalContent":
		return ItemErrorType_IllegalContent, nil
	case "MissingRequiredField":
		return ItemErrorType_MissingRequiredField, nil
	case "ExceedMaxNestedDepth":
		return ItemErrorType_ExceedMaxNestedDepth, nil
	case "TransformItemFailed":
		return ItemErrorType_TransformItemFailed, nil
	case "InternalError":
		return ItemErrorType_InternalError, nil
	}
	return ItemErrorType(0), fmt.Errorf("not a valid ItemErrorType string")
}

func ItemErrorTypePtr(v ItemErrorType) *ItemErrorType { return &v }
func (p *ItemErrorType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = ItemErrorType(result.Int64)
	return
}

func (p *ItemErrorType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type DatasetFeatures struct {
	// 变更 schema
	EditSchema *bool `thrift:"editSchema,1,optional" frugal:"1,optional,bool" form:"editSchema" json:"editSchema,omitempty" query:"editSchema"`
	// 多轮数据
	RepeatedData *bool `thrift:"repeatedData,2,optional" frugal:"2,optional,bool" form:"repeatedData" json:"repeatedData,omitempty" query:"repeatedData"`
	// 多模态
	MultiModal *bool `thrift:"multiModal,3,optional" frugal:"3,optional,bool" form:"multiModal" json:"multiModal,omitempty" query:"multiModal"`
}

func NewDatasetFeatures() *DatasetFeatures {
	return &DatasetFeatures{}
}

func (p *DatasetFeatures) InitDefault() {
}

var DatasetFeatures_EditSchema_DEFAULT bool

func (p *DatasetFeatures) GetEditSchema() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetEditSchema() {
		return DatasetFeatures_EditSchema_DEFAULT
	}
	return *p.EditSchema
}

var DatasetFeatures_RepeatedData_DEFAULT bool

func (p *DatasetFeatures) GetRepeatedData() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetRepeatedData() {
		return DatasetFeatures_RepeatedData_DEFAULT
	}
	return *p.RepeatedData
}

var DatasetFeatures_MultiModal_DEFAULT bool

func (p *DatasetFeatures) GetMultiModal() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetMultiModal() {
		return DatasetFeatures_MultiModal_DEFAULT
	}
	return *p.MultiModal
}
func (p *DatasetFeatures) SetEditSchema(val *bool) {
	p.EditSchema = val
}
func (p *DatasetFeatures) SetRepeatedData(val *bool) {
	p.RepeatedData = val
}
func (p *DatasetFeatures) SetMultiModal(val *bool) {
	p.MultiModal = val
}

var fieldIDToName_DatasetFeatures = map[int16]string{
	1: "editSchema",
	2: "repeatedData",
	3: "multiModal",
}

func (p *DatasetFeatures) IsSetEditSchema() bool {
	return p.EditSchema != nil
}

func (p *DatasetFeatures) IsSetRepeatedData() bool {
	return p.RepeatedData != nil
}

func (p *DatasetFeatures) IsSetMultiModal() bool {
	return p.MultiModal != nil
}

func (p *DatasetFeatures) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetFeatures[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetFeatures) ReadField1(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EditSchema = _field
	return nil
}
func (p *DatasetFeatures) ReadField2(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.RepeatedData = _field
	return nil
}
func (p *DatasetFeatures) ReadField3(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MultiModal = _field
	return nil
}

func (p *DatasetFeatures) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DatasetFeatures"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetFeatures) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEditSchema() {
		if err = oprot.WriteFieldBegin("editSchema", thrift.BOOL, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.EditSchema); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *DatasetFeatures) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRepeatedData() {
		if err = oprot.WriteFieldBegin("repeatedData", thrift.BOOL, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.RepeatedData); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *DatasetFeatures) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMultiModal() {
		if err = oprot.WriteFieldBegin("multiModal", thrift.BOOL, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.MultiModal); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *DatasetFeatures) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetFeatures(%+v)", *p)

}

func (p *DatasetFeatures) DeepEqual(ano *DatasetFeatures) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EditSchema) {
		return false
	}
	if !p.Field2DeepEqual(ano.RepeatedData) {
		return false
	}
	if !p.Field3DeepEqual(ano.MultiModal) {
		return false
	}
	return true
}

func (p *DatasetFeatures) Field1DeepEqual(src *bool) bool {

	if p.EditSchema == src {
		return true
	} else if p.EditSchema == nil || src == nil {
		return false
	}
	if *p.EditSchema != *src {
		return false
	}
	return true
}
func (p *DatasetFeatures) Field2DeepEqual(src *bool) bool {

	if p.RepeatedData == src {
		return true
	} else if p.RepeatedData == nil || src == nil {
		return false
	}
	if *p.RepeatedData != *src {
		return false
	}
	return true
}
func (p *DatasetFeatures) Field3DeepEqual(src *bool) bool {

	if p.MultiModal == src {
		return true
	} else if p.MultiModal == nil || src == nil {
		return false
	}
	if *p.MultiModal != *src {
		return false
	}
	return true
}

// Dataset 数据集实体
type Dataset struct {
	ID          int64          `thrift:"id,1,required" frugal:"1,required,i64" json:"id" form:"id,required" query:"id,required"`
	AppID       *int32         `thrift:"app_id,2,optional" frugal:"2,optional,i32" form:"app_id" json:"app_id,omitempty" query:"app_id"`
	SpaceID     int64          `thrift:"space_id,3,required" frugal:"3,required,i64" json:"space_id" form:"space_id,required" query:"space_id,required"`
	SchemaID    int64          `thrift:"schema_id,4,required" frugal:"4,required,i64" json:"schema_id" form:"schema_id,required" query:"schema_id,required"`
	Name        *string        `thrift:"name,10,optional" frugal:"10,optional,string" form:"name" json:"name,omitempty" query:"name"`
	Description *string        `thrift:"description,11,optional" frugal:"11,optional,string" form:"description" json:"description,omitempty" query:"description"`
	Status      *DatasetStatus `thrift:"status,12,optional" frugal:"12,optional,DatasetStatus" form:"status" json:"status,omitempty" query:"status"`
	// 业务场景分类
	Category *DatasetCategory `thrift:"category,13,optional" frugal:"13,optional,DatasetCategory" form:"category" json:"category,omitempty" query:"category"`
	// 提供给上层业务定义数据集类别
	BizCategory *string `thrift:"biz_category,14,optional" frugal:"14,optional,string" form:"biz_category" json:"biz_category,omitempty" query:"biz_category"`
	// 当前数据集结构
	Schema *DatasetSchema `thrift:"schema,15,optional" frugal:"15,optional,DatasetSchema" form:"schema" json:"schema,omitempty" query:"schema"`
	// 密级
	SecurityLevel *SecurityLevel `thrift:"security_level,16,optional" frugal:"16,optional,SecurityLevel" form:"security_level" json:"security_level,omitempty" query:"security_level"`
	// 可见性
	Visibility *DatasetVisibility `thrift:"visibility,17,optional" frugal:"17,optional,DatasetVisibility" form:"visibility" json:"visibility,omitempty" query:"visibility"`
	// 规格限制
	Spec *DatasetSpec `thrift:"spec,18,optional" frugal:"18,optional,DatasetSpec" form:"spec" json:"spec,omitempty" query:"spec"`
	// 数据集功能开关
	Features *DatasetFeatures `thrift:"features,19,optional" frugal:"19,optional,DatasetFeatures" form:"features" json:"features,omitempty" query:"features"`
	// 最新的版本号
	LatestVersion *string `thrift:"latest_version,20,optional" frugal:"20,optional,string" form:"latest_version" json:"latest_version,omitempty" query:"latest_version"`
	// 下一个的版本号
	NextVersionNum *int64 `thrift:"next_version_num,21,optional" frugal:"21,optional,i64" json:"next_version_num" form:"next_version_num" query:"next_version_num"`
	// 数据条数
	ItemCount *int64 `thrift:"item_count,22,optional" frugal:"22,optional,i64" json:"item_count" form:"item_count" query:"item_count"`
	/* 通用信息 */
	CreatedBy *string `thrift:"created_by,100,optional" frugal:"100,optional,string" form:"created_by" json:"created_by,omitempty" query:"created_by"`
	CreatedAt *int64  `thrift:"created_at,101,optional" frugal:"101,optional,i64" json:"created_at" form:"created_at" query:"created_at"`
	UpdatedBy *string `thrift:"updated_by,102,optional" frugal:"102,optional,string" form:"updated_by" json:"updated_by,omitempty" query:"updated_by"`
	UpdatedAt *int64  `thrift:"updated_at,103,optional" frugal:"103,optional,i64" json:"updated_at" form:"updated_at" query:"updated_at"`
	ExpiredAt *int64  `thrift:"expired_at,104,optional" frugal:"104,optional,i64" json:"expired_at" form:"expired_at" query:"expired_at"`
	/* DTO 专用字段 */
	ChangeUncommitted *bool `thrift:"change_uncommitted,150,optional" frugal:"150,optional,bool" form:"change_uncommitted" json:"change_uncommitted,omitempty" query:"change_uncommitted"`
}

func NewDataset() *Dataset {
	return &Dataset{}
}

func (p *Dataset) InitDefault() {
}

func (p *Dataset) GetID() (v int64) {
	if p != nil {
		return p.ID
	}
	return
}

var Dataset_AppID_DEFAULT int32

func (p *Dataset) GetAppID() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetAppID() {
		return Dataset_AppID_DEFAULT
	}
	return *p.AppID
}

func (p *Dataset) GetSpaceID() (v int64) {
	if p != nil {
		return p.SpaceID
	}
	return
}

func (p *Dataset) GetSchemaID() (v int64) {
	if p != nil {
		return p.SchemaID
	}
	return
}

var Dataset_Name_DEFAULT string

func (p *Dataset) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return Dataset_Name_DEFAULT
	}
	return *p.Name
}

var Dataset_Description_DEFAULT string

func (p *Dataset) GetDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDescription() {
		return Dataset_Description_DEFAULT
	}
	return *p.Description
}

var Dataset_Status_DEFAULT DatasetStatus

func (p *Dataset) GetStatus() (v DatasetStatus) {
	if p == nil {
		return
	}
	if !p.IsSetStatus() {
		return Dataset_Status_DEFAULT
	}
	return *p.Status
}

var Dataset_Category_DEFAULT DatasetCategory

func (p *Dataset) GetCategory() (v DatasetCategory) {
	if p == nil {
		return
	}
	if !p.IsSetCategory() {
		return Dataset_Category_DEFAULT
	}
	return *p.Category
}

var Dataset_BizCategory_DEFAULT string

func (p *Dataset) GetBizCategory() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetBizCategory() {
		return Dataset_BizCategory_DEFAULT
	}
	return *p.BizCategory
}

var Dataset_Schema_DEFAULT *DatasetSchema

func (p *Dataset) GetSchema() (v *DatasetSchema) {
	if p == nil {
		return
	}
	if !p.IsSetSchema() {
		return Dataset_Schema_DEFAULT
	}
	return p.Schema
}

var Dataset_SecurityLevel_DEFAULT SecurityLevel

func (p *Dataset) GetSecurityLevel() (v SecurityLevel) {
	if p == nil {
		return
	}
	if !p.IsSetSecurityLevel() {
		return Dataset_SecurityLevel_DEFAULT
	}
	return *p.SecurityLevel
}

var Dataset_Visibility_DEFAULT DatasetVisibility

func (p *Dataset) GetVisibility() (v DatasetVisibility) {
	if p == nil {
		return
	}
	if !p.IsSetVisibility() {
		return Dataset_Visibility_DEFAULT
	}
	return *p.Visibility
}

var Dataset_Spec_DEFAULT *DatasetSpec

func (p *Dataset) GetSpec() (v *DatasetSpec) {
	if p == nil {
		return
	}
	if !p.IsSetSpec() {
		return Dataset_Spec_DEFAULT
	}
	return p.Spec
}

var Dataset_Features_DEFAULT *DatasetFeatures

func (p *Dataset) GetFeatures() (v *DatasetFeatures) {
	if p == nil {
		return
	}
	if !p.IsSetFeatures() {
		return Dataset_Features_DEFAULT
	}
	return p.Features
}

var Dataset_LatestVersion_DEFAULT string

func (p *Dataset) GetLatestVersion() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetLatestVersion() {
		return Dataset_LatestVersion_DEFAULT
	}
	return *p.LatestVersion
}

var Dataset_NextVersionNum_DEFAULT int64

func (p *Dataset) GetNextVersionNum() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetNextVersionNum() {
		return Dataset_NextVersionNum_DEFAULT
	}
	return *p.NextVersionNum
}

var Dataset_ItemCount_DEFAULT int64

func (p *Dataset) GetItemCount() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetItemCount() {
		return Dataset_ItemCount_DEFAULT
	}
	return *p.ItemCount
}

var Dataset_CreatedBy_DEFAULT string

func (p *Dataset) GetCreatedBy() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetCreatedBy() {
		return Dataset_CreatedBy_DEFAULT
	}
	return *p.CreatedBy
}

var Dataset_CreatedAt_DEFAULT int64

func (p *Dataset) GetCreatedAt() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetCreatedAt() {
		return Dataset_CreatedAt_DEFAULT
	}
	return *p.CreatedAt
}

var Dataset_UpdatedBy_DEFAULT string

func (p *Dataset) GetUpdatedBy() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetUpdatedBy() {
		return Dataset_UpdatedBy_DEFAULT
	}
	return *p.UpdatedBy
}

var Dataset_UpdatedAt_DEFAULT int64

func (p *Dataset) GetUpdatedAt() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetUpdatedAt() {
		return Dataset_UpdatedAt_DEFAULT
	}
	return *p.UpdatedAt
}

var Dataset_ExpiredAt_DEFAULT int64

func (p *Dataset) GetExpiredAt() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetExpiredAt() {
		return Dataset_ExpiredAt_DEFAULT
	}
	return *p.ExpiredAt
}

var Dataset_ChangeUncommitted_DEFAULT bool

func (p *Dataset) GetChangeUncommitted() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetChangeUncommitted() {
		return Dataset_ChangeUncommitted_DEFAULT
	}
	return *p.ChangeUncommitted
}
func (p *Dataset) SetID(val int64) {
	p.ID = val
}
func (p *Dataset) SetAppID(val *int32) {
	p.AppID = val
}
func (p *Dataset) SetSpaceID(val int64) {
	p.SpaceID = val
}
func (p *Dataset) SetSchemaID(val int64) {
	p.SchemaID = val
}
func (p *Dataset) SetName(val *string) {
	p.Name = val
}
func (p *Dataset) SetDescription(val *string) {
	p.Description = val
}
func (p *Dataset) SetStatus(val *DatasetStatus) {
	p.Status = val
}
func (p *Dataset) SetCategory(val *DatasetCategory) {
	p.Category = val
}
func (p *Dataset) SetBizCategory(val *string) {
	p.BizCategory = val
}
func (p *Dataset) SetSchema(val *DatasetSchema) {
	p.Schema = val
}
func (p *Dataset) SetSecurityLevel(val *SecurityLevel) {
	p.SecurityLevel = val
}
func (p *Dataset) SetVisibility(val *DatasetVisibility) {
	p.Visibility = val
}
func (p *Dataset) SetSpec(val *DatasetSpec) {
	p.Spec = val
}
func (p *Dataset) SetFeatures(val *DatasetFeatures) {
	p.Features = val
}
func (p *Dataset) SetLatestVersion(val *string) {
	p.LatestVersion = val
}
func (p *Dataset) SetNextVersionNum(val *int64) {
	p.NextVersionNum = val
}
func (p *Dataset) SetItemCount(val *int64) {
	p.ItemCount = val
}
func (p *Dataset) SetCreatedBy(val *string) {
	p.CreatedBy = val
}
func (p *Dataset) SetCreatedAt(val *int64) {
	p.CreatedAt = val
}
func (p *Dataset) SetUpdatedBy(val *string) {
	p.UpdatedBy = val
}
func (p *Dataset) SetUpdatedAt(val *int64) {
	p.UpdatedAt = val
}
func (p *Dataset) SetExpiredAt(val *int64) {
	p.ExpiredAt = val
}
func (p *Dataset) SetChangeUncommitted(val *bool) {
	p.ChangeUncommitted = val
}

var fieldIDToName_Dataset = map[int16]string{
	1:   "id",
	2:   "app_id",
	3:   "space_id",
	4:   "schema_id",
	10:  "name",
	11:  "description",
	12:  "status",
	13:  "category",
	14:  "biz_category",
	15:  "schema",
	16:  "security_level",
	17:  "visibility",
	18:  "spec",
	19:  "features",
	20:  "latest_version",
	21:  "next_version_num",
	22:  "item_count",
	100: "created_by",
	101: "created_at",
	102: "updated_by",
	103: "updated_at",
	104: "expired_at",
	150: "change_uncommitted",
}

func (p *Dataset) IsSetAppID() bool {
	return p.AppID != nil
}

func (p *Dataset) IsSetName() bool {
	return p.Name != nil
}

func (p *Dataset) IsSetDescription() bool {
	return p.Description != nil
}

func (p *Dataset) IsSetStatus() bool {
	return p.Status != nil
}

func (p *Dataset) IsSetCategory() bool {
	return p.Category != nil
}

func (p *Dataset) IsSetBizCategory() bool {
	return p.BizCategory != nil
}

func (p *Dataset) IsSetSchema() bool {
	return p.Schema != nil
}

func (p *Dataset) IsSetSecurityLevel() bool {
	return p.SecurityLevel != nil
}

func (p *Dataset) IsSetVisibility() bool {
	return p.Visibility != nil
}

func (p *Dataset) IsSetSpec() bool {
	return p.Spec != nil
}

func (p *Dataset) IsSetFeatures() bool {
	return p.Features != nil
}

func (p *Dataset) IsSetLatestVersion() bool {
	return p.LatestVersion != nil
}

func (p *Dataset) IsSetNextVersionNum() bool {
	return p.NextVersionNum != nil
}

func (p *Dataset) IsSetItemCount() bool {
	return p.ItemCount != nil
}

func (p *Dataset) IsSetCreatedBy() bool {
	return p.CreatedBy != nil
}

func (p *Dataset) IsSetCreatedAt() bool {
	return p.CreatedAt != nil
}

func (p *Dataset) IsSetUpdatedBy() bool {
	return p.UpdatedBy != nil
}

func (p *Dataset) IsSetUpdatedAt() bool {
	return p.UpdatedAt != nil
}

func (p *Dataset) IsSetExpiredAt() bool {
	return p.ExpiredAt != nil
}

func (p *Dataset) IsSetChangeUncommitted() bool {
	return p.ChangeUncommitted != nil
}

func (p *Dataset) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetID bool = false
	var issetSpaceID bool = false
	var issetSchemaID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetSpaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetSchemaID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 22:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 102:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField102(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 103:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField103(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 104:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField104(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 150:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField150(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetSpaceID {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetSchemaID {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Dataset[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_Dataset[fieldId]))
}

func (p *Dataset) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ID = _field
	return nil
}
func (p *Dataset) ReadField2(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AppID = _field
	return nil
}
func (p *Dataset) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SpaceID = _field
	return nil
}
func (p *Dataset) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SchemaID = _field
	return nil
}
func (p *Dataset) ReadField10(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *Dataset) ReadField11(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}
func (p *Dataset) ReadField12(iprot thrift.TProtocol) error {

	var _field *DatasetStatus
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := DatasetStatus(v)
		_field = &tmp
	}
	p.Status = _field
	return nil
}
func (p *Dataset) ReadField13(iprot thrift.TProtocol) error {

	var _field *DatasetCategory
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := DatasetCategory(v)
		_field = &tmp
	}
	p.Category = _field
	return nil
}
func (p *Dataset) ReadField14(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BizCategory = _field
	return nil
}
func (p *Dataset) ReadField15(iprot thrift.TProtocol) error {
	_field := NewDatasetSchema()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Schema = _field
	return nil
}
func (p *Dataset) ReadField16(iprot thrift.TProtocol) error {

	var _field *SecurityLevel
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := SecurityLevel(v)
		_field = &tmp
	}
	p.SecurityLevel = _field
	return nil
}
func (p *Dataset) ReadField17(iprot thrift.TProtocol) error {

	var _field *DatasetVisibility
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := DatasetVisibility(v)
		_field = &tmp
	}
	p.Visibility = _field
	return nil
}
func (p *Dataset) ReadField18(iprot thrift.TProtocol) error {
	_field := NewDatasetSpec()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Spec = _field
	return nil
}
func (p *Dataset) ReadField19(iprot thrift.TProtocol) error {
	_field := NewDatasetFeatures()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Features = _field
	return nil
}
func (p *Dataset) ReadField20(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LatestVersion = _field
	return nil
}
func (p *Dataset) ReadField21(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NextVersionNum = _field
	return nil
}
func (p *Dataset) ReadField22(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ItemCount = _field
	return nil
}
func (p *Dataset) ReadField100(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CreatedBy = _field
	return nil
}
func (p *Dataset) ReadField101(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CreatedAt = _field
	return nil
}
func (p *Dataset) ReadField102(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UpdatedBy = _field
	return nil
}
func (p *Dataset) ReadField103(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *Dataset) ReadField104(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ExpiredAt = _field
	return nil
}
func (p *Dataset) ReadField150(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ChangeUncommitted = _field
	return nil
}

func (p *Dataset) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Dataset"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField102(oprot); err != nil {
			fieldId = 102
			goto WriteFieldError
		}
		if err = p.writeField103(oprot); err != nil {
			fieldId = 103
			goto WriteFieldError
		}
		if err = p.writeField104(oprot); err != nil {
			fieldId = 104
			goto WriteFieldError
		}
		if err = p.writeField150(oprot); err != nil {
			fieldId = 150
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Dataset) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *Dataset) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppID() {
		if err = oprot.WriteFieldBegin("app_id", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.AppID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *Dataset) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("space_id", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.SpaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *Dataset) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("schema_id", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.SchemaID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *Dataset) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}
func (p *Dataset) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}
func (p *Dataset) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.I32, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Status)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}
func (p *Dataset) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetCategory() {
		if err = oprot.WriteFieldBegin("category", thrift.I32, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Category)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}
func (p *Dataset) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetBizCategory() {
		if err = oprot.WriteFieldBegin("biz_category", thrift.STRING, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.BizCategory); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}
func (p *Dataset) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetSchema() {
		if err = oprot.WriteFieldBegin("schema", thrift.STRUCT, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Schema.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}
func (p *Dataset) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetSecurityLevel() {
		if err = oprot.WriteFieldBegin("security_level", thrift.I32, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.SecurityLevel)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}
func (p *Dataset) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetVisibility() {
		if err = oprot.WriteFieldBegin("visibility", thrift.I32, 17); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Visibility)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}
func (p *Dataset) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetSpec() {
		if err = oprot.WriteFieldBegin("spec", thrift.STRUCT, 18); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Spec.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}
func (p *Dataset) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetFeatures() {
		if err = oprot.WriteFieldBegin("features", thrift.STRUCT, 19); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Features.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}
func (p *Dataset) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetLatestVersion() {
		if err = oprot.WriteFieldBegin("latest_version", thrift.STRING, 20); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.LatestVersion); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}
func (p *Dataset) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetNextVersionNum() {
		if err = oprot.WriteFieldBegin("next_version_num", thrift.I64, 21); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.NextVersionNum); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}
func (p *Dataset) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetItemCount() {
		if err = oprot.WriteFieldBegin("item_count", thrift.I64, 22); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ItemCount); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}
func (p *Dataset) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedBy() {
		if err = oprot.WriteFieldBegin("created_by", thrift.STRING, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CreatedBy); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}
func (p *Dataset) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedAt() {
		if err = oprot.WriteFieldBegin("created_at", thrift.I64, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CreatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}
func (p *Dataset) writeField102(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdatedBy() {
		if err = oprot.WriteFieldBegin("updated_by", thrift.STRING, 102); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.UpdatedBy); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 end error: ", p), err)
}
func (p *Dataset) writeField103(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdatedAt() {
		if err = oprot.WriteFieldBegin("updated_at", thrift.I64, 103); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.UpdatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 103 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 103 end error: ", p), err)
}
func (p *Dataset) writeField104(oprot thrift.TProtocol) (err error) {
	if p.IsSetExpiredAt() {
		if err = oprot.WriteFieldBegin("expired_at", thrift.I64, 104); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ExpiredAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 104 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 104 end error: ", p), err)
}
func (p *Dataset) writeField150(oprot thrift.TProtocol) (err error) {
	if p.IsSetChangeUncommitted() {
		if err = oprot.WriteFieldBegin("change_uncommitted", thrift.BOOL, 150); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.ChangeUncommitted); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 150 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 150 end error: ", p), err)
}

func (p *Dataset) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Dataset(%+v)", *p)

}

func (p *Dataset) DeepEqual(ano *Dataset) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field2DeepEqual(ano.AppID) {
		return false
	}
	if !p.Field3DeepEqual(ano.SpaceID) {
		return false
	}
	if !p.Field4DeepEqual(ano.SchemaID) {
		return false
	}
	if !p.Field10DeepEqual(ano.Name) {
		return false
	}
	if !p.Field11DeepEqual(ano.Description) {
		return false
	}
	if !p.Field12DeepEqual(ano.Status) {
		return false
	}
	if !p.Field13DeepEqual(ano.Category) {
		return false
	}
	if !p.Field14DeepEqual(ano.BizCategory) {
		return false
	}
	if !p.Field15DeepEqual(ano.Schema) {
		return false
	}
	if !p.Field16DeepEqual(ano.SecurityLevel) {
		return false
	}
	if !p.Field17DeepEqual(ano.Visibility) {
		return false
	}
	if !p.Field18DeepEqual(ano.Spec) {
		return false
	}
	if !p.Field19DeepEqual(ano.Features) {
		return false
	}
	if !p.Field20DeepEqual(ano.LatestVersion) {
		return false
	}
	if !p.Field21DeepEqual(ano.NextVersionNum) {
		return false
	}
	if !p.Field22DeepEqual(ano.ItemCount) {
		return false
	}
	if !p.Field100DeepEqual(ano.CreatedBy) {
		return false
	}
	if !p.Field101DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field102DeepEqual(ano.UpdatedBy) {
		return false
	}
	if !p.Field103DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field104DeepEqual(ano.ExpiredAt) {
		return false
	}
	if !p.Field150DeepEqual(ano.ChangeUncommitted) {
		return false
	}
	return true
}

func (p *Dataset) Field1DeepEqual(src int64) bool {

	if p.ID != src {
		return false
	}
	return true
}
func (p *Dataset) Field2DeepEqual(src *int32) bool {

	if p.AppID == src {
		return true
	} else if p.AppID == nil || src == nil {
		return false
	}
	if *p.AppID != *src {
		return false
	}
	return true
}
func (p *Dataset) Field3DeepEqual(src int64) bool {

	if p.SpaceID != src {
		return false
	}
	return true
}
func (p *Dataset) Field4DeepEqual(src int64) bool {

	if p.SchemaID != src {
		return false
	}
	return true
}
func (p *Dataset) Field10DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *Dataset) Field11DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *Dataset) Field12DeepEqual(src *DatasetStatus) bool {

	if p.Status == src {
		return true
	} else if p.Status == nil || src == nil {
		return false
	}
	if *p.Status != *src {
		return false
	}
	return true
}
func (p *Dataset) Field13DeepEqual(src *DatasetCategory) bool {

	if p.Category == src {
		return true
	} else if p.Category == nil || src == nil {
		return false
	}
	if *p.Category != *src {
		return false
	}
	return true
}
func (p *Dataset) Field14DeepEqual(src *string) bool {

	if p.BizCategory == src {
		return true
	} else if p.BizCategory == nil || src == nil {
		return false
	}
	if strings.Compare(*p.BizCategory, *src) != 0 {
		return false
	}
	return true
}
func (p *Dataset) Field15DeepEqual(src *DatasetSchema) bool {

	if !p.Schema.DeepEqual(src) {
		return false
	}
	return true
}
func (p *Dataset) Field16DeepEqual(src *SecurityLevel) bool {

	if p.SecurityLevel == src {
		return true
	} else if p.SecurityLevel == nil || src == nil {
		return false
	}
	if *p.SecurityLevel != *src {
		return false
	}
	return true
}
func (p *Dataset) Field17DeepEqual(src *DatasetVisibility) bool {

	if p.Visibility == src {
		return true
	} else if p.Visibility == nil || src == nil {
		return false
	}
	if *p.Visibility != *src {
		return false
	}
	return true
}
func (p *Dataset) Field18DeepEqual(src *DatasetSpec) bool {

	if !p.Spec.DeepEqual(src) {
		return false
	}
	return true
}
func (p *Dataset) Field19DeepEqual(src *DatasetFeatures) bool {

	if !p.Features.DeepEqual(src) {
		return false
	}
	return true
}
func (p *Dataset) Field20DeepEqual(src *string) bool {

	if p.LatestVersion == src {
		return true
	} else if p.LatestVersion == nil || src == nil {
		return false
	}
	if strings.Compare(*p.LatestVersion, *src) != 0 {
		return false
	}
	return true
}
func (p *Dataset) Field21DeepEqual(src *int64) bool {

	if p.NextVersionNum == src {
		return true
	} else if p.NextVersionNum == nil || src == nil {
		return false
	}
	if *p.NextVersionNum != *src {
		return false
	}
	return true
}
func (p *Dataset) Field22DeepEqual(src *int64) bool {

	if p.ItemCount == src {
		return true
	} else if p.ItemCount == nil || src == nil {
		return false
	}
	if *p.ItemCount != *src {
		return false
	}
	return true
}
func (p *Dataset) Field100DeepEqual(src *string) bool {

	if p.CreatedBy == src {
		return true
	} else if p.CreatedBy == nil || src == nil {
		return false
	}
	if strings.Compare(*p.CreatedBy, *src) != 0 {
		return false
	}
	return true
}
func (p *Dataset) Field101DeepEqual(src *int64) bool {

	if p.CreatedAt == src {
		return true
	} else if p.CreatedAt == nil || src == nil {
		return false
	}
	if *p.CreatedAt != *src {
		return false
	}
	return true
}
func (p *Dataset) Field102DeepEqual(src *string) bool {

	if p.UpdatedBy == src {
		return true
	} else if p.UpdatedBy == nil || src == nil {
		return false
	}
	if strings.Compare(*p.UpdatedBy, *src) != 0 {
		return false
	}
	return true
}
func (p *Dataset) Field103DeepEqual(src *int64) bool {

	if p.UpdatedAt == src {
		return true
	} else if p.UpdatedAt == nil || src == nil {
		return false
	}
	if *p.UpdatedAt != *src {
		return false
	}
	return true
}
func (p *Dataset) Field104DeepEqual(src *int64) bool {

	if p.ExpiredAt == src {
		return true
	} else if p.ExpiredAt == nil || src == nil {
		return false
	}
	if *p.ExpiredAt != *src {
		return false
	}
	return true
}
func (p *Dataset) Field150DeepEqual(src *bool) bool {

	if p.ChangeUncommitted == src {
		return true
	} else if p.ChangeUncommitted == nil || src == nil {
		return false
	}
	if *p.ChangeUncommitted != *src {
		return false
	}
	return true
}

type DatasetSpec struct {
	// 条数上限
	MaxItemCount *int64 `thrift:"max_item_count,1,optional" frugal:"1,optional,i64" json:"max_item_count" form:"max_item_count" query:"max_item_count"`
	// 字段数量上限
	MaxFieldCount *int32 `thrift:"max_field_count,2,optional" frugal:"2,optional,i32" form:"max_field_count" json:"max_field_count,omitempty" query:"max_field_count"`
	// 单条数据字数上限
	MaxItemSize            *int64 `thrift:"max_item_size,3,optional" frugal:"3,optional,i64" json:"max_item_size" form:"max_item_size" query:"max_item_size"`
	MaxItemDataNestedDepth *int32 `thrift:"max_item_data_nested_depth,4,optional" frugal:"4,optional,i32" form:"max_item_data_nested_depth" json:"max_item_data_nested_depth,omitempty" query:"max_item_data_nested_depth"`
}

func NewDatasetSpec() *DatasetSpec {
	return &DatasetSpec{}
}

func (p *DatasetSpec) InitDefault() {
}

var DatasetSpec_MaxItemCount_DEFAULT int64

func (p *DatasetSpec) GetMaxItemCount() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetMaxItemCount() {
		return DatasetSpec_MaxItemCount_DEFAULT
	}
	return *p.MaxItemCount
}

var DatasetSpec_MaxFieldCount_DEFAULT int32

func (p *DatasetSpec) GetMaxFieldCount() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetMaxFieldCount() {
		return DatasetSpec_MaxFieldCount_DEFAULT
	}
	return *p.MaxFieldCount
}

var DatasetSpec_MaxItemSize_DEFAULT int64

func (p *DatasetSpec) GetMaxItemSize() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetMaxItemSize() {
		return DatasetSpec_MaxItemSize_DEFAULT
	}
	return *p.MaxItemSize
}

var DatasetSpec_MaxItemDataNestedDepth_DEFAULT int32

func (p *DatasetSpec) GetMaxItemDataNestedDepth() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetMaxItemDataNestedDepth() {
		return DatasetSpec_MaxItemDataNestedDepth_DEFAULT
	}
	return *p.MaxItemDataNestedDepth
}
func (p *DatasetSpec) SetMaxItemCount(val *int64) {
	p.MaxItemCount = val
}
func (p *DatasetSpec) SetMaxFieldCount(val *int32) {
	p.MaxFieldCount = val
}
func (p *DatasetSpec) SetMaxItemSize(val *int64) {
	p.MaxItemSize = val
}
func (p *DatasetSpec) SetMaxItemDataNestedDepth(val *int32) {
	p.MaxItemDataNestedDepth = val
}

var fieldIDToName_DatasetSpec = map[int16]string{
	1: "max_item_count",
	2: "max_field_count",
	3: "max_item_size",
	4: "max_item_data_nested_depth",
}

func (p *DatasetSpec) IsSetMaxItemCount() bool {
	return p.MaxItemCount != nil
}

func (p *DatasetSpec) IsSetMaxFieldCount() bool {
	return p.MaxFieldCount != nil
}

func (p *DatasetSpec) IsSetMaxItemSize() bool {
	return p.MaxItemSize != nil
}

func (p *DatasetSpec) IsSetMaxItemDataNestedDepth() bool {
	return p.MaxItemDataNestedDepth != nil
}

func (p *DatasetSpec) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetSpec[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetSpec) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MaxItemCount = _field
	return nil
}
func (p *DatasetSpec) ReadField2(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MaxFieldCount = _field
	return nil
}
func (p *DatasetSpec) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MaxItemSize = _field
	return nil
}
func (p *DatasetSpec) ReadField4(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MaxItemDataNestedDepth = _field
	return nil
}

func (p *DatasetSpec) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DatasetSpec"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetSpec) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxItemCount() {
		if err = oprot.WriteFieldBegin("max_item_count", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.MaxItemCount); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *DatasetSpec) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxFieldCount() {
		if err = oprot.WriteFieldBegin("max_field_count", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.MaxFieldCount); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *DatasetSpec) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxItemSize() {
		if err = oprot.WriteFieldBegin("max_item_size", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.MaxItemSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *DatasetSpec) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxItemDataNestedDepth() {
		if err = oprot.WriteFieldBegin("max_item_data_nested_depth", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.MaxItemDataNestedDepth); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *DatasetSpec) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetSpec(%+v)", *p)

}

func (p *DatasetSpec) DeepEqual(ano *DatasetSpec) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.MaxItemCount) {
		return false
	}
	if !p.Field2DeepEqual(ano.MaxFieldCount) {
		return false
	}
	if !p.Field3DeepEqual(ano.MaxItemSize) {
		return false
	}
	if !p.Field4DeepEqual(ano.MaxItemDataNestedDepth) {
		return false
	}
	return true
}

func (p *DatasetSpec) Field1DeepEqual(src *int64) bool {

	if p.MaxItemCount == src {
		return true
	} else if p.MaxItemCount == nil || src == nil {
		return false
	}
	if *p.MaxItemCount != *src {
		return false
	}
	return true
}
func (p *DatasetSpec) Field2DeepEqual(src *int32) bool {

	if p.MaxFieldCount == src {
		return true
	} else if p.MaxFieldCount == nil || src == nil {
		return false
	}
	if *p.MaxFieldCount != *src {
		return false
	}
	return true
}
func (p *DatasetSpec) Field3DeepEqual(src *int64) bool {

	if p.MaxItemSize == src {
		return true
	} else if p.MaxItemSize == nil || src == nil {
		return false
	}
	if *p.MaxItemSize != *src {
		return false
	}
	return true
}
func (p *DatasetSpec) Field4DeepEqual(src *int32) bool {

	if p.MaxItemDataNestedDepth == src {
		return true
	} else if p.MaxItemDataNestedDepth == nil || src == nil {
		return false
	}
	if *p.MaxItemDataNestedDepth != *src {
		return false
	}
	return true
}

// DatasetVersion 数据集版本元信息，不包含数据本身
type DatasetVersion struct {
	ID        int64  `thrift:"id,1,required" frugal:"1,required,i64" json:"id" form:"id,required" query:"id,required"`
	AppID     *int32 `thrift:"app_id,2,optional" frugal:"2,optional,i32" form:"app_id" json:"app_id,omitempty" query:"app_id"`
	SpaceID   int64  `thrift:"space_id,3,required" frugal:"3,required,i64" json:"space_id" form:"space_id,required" query:"space_id,required"`
	DatasetID int64  `thrift:"dataset_id,4,required" frugal:"4,required,i64" json:"dataset_id" form:"dataset_id,required" query:"dataset_id,required"`
	SchemaID  int64  `thrift:"schema_id,5,required" frugal:"5,required,i64" json:"schema_id" form:"schema_id,required" query:"schema_id,required"`
	// 展示的版本号，SemVer2 三段式
	Version *string `thrift:"version,10,optional" frugal:"10,optional,string" form:"version" json:"version,omitempty" query:"version"`
	// 后端记录的数字版本号，从 1 开始递增
	VersionNum *int64 `thrift:"version_num,11,optional" frugal:"11,optional,i64" json:"version_num" form:"version_num" query:"version_num"`
	// 版本描述
	Description *string `thrift:"description,12,optional" frugal:"12,optional,string" form:"description" json:"description,omitempty" query:"description"`
	// marshal 后的版本保存时的数据集元信息，不包含 schema
	DatasetBrief *string `thrift:"dataset_brief,13,optional" frugal:"13,optional,string" form:"dataset_brief" json:"dataset_brief,omitempty" query:"dataset_brief"`
	// 数据条数
	ItemCount *int64 `thrift:"item_count,14,optional" frugal:"14,optional,i64" json:"item_count" form:"item_count" query:"item_count"`
	// 当前版本的快照状态
	SnapshotStatus *SnapshotStatus `thrift:"snapshot_status,15,optional" frugal:"15,optional,SnapshotStatus" form:"snapshot_status" json:"snapshot_status,omitempty" query:"snapshot_status"`
	/* 通用信息 */
	CreatedBy *string `thrift:"created_by,100,optional" frugal:"100,optional,string" form:"created_by" json:"created_by,omitempty" query:"created_by"`
	CreatedAt *int64  `thrift:"created_at,101,optional" frugal:"101,optional,i64" json:"created_at" form:"created_at" query:"created_at"`
	// 版本禁用的时间
	DisabledAt *int64 `thrift:"disabled_at,102,optional" frugal:"102,optional,i64" json:"disabled_at" form:"disabled_at" query:"disabled_at"`
}

func NewDatasetVersion() *DatasetVersion {
	return &DatasetVersion{}
}

func (p *DatasetVersion) InitDefault() {
}

func (p *DatasetVersion) GetID() (v int64) {
	if p != nil {
		return p.ID
	}
	return
}

var DatasetVersion_AppID_DEFAULT int32

func (p *DatasetVersion) GetAppID() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetAppID() {
		return DatasetVersion_AppID_DEFAULT
	}
	return *p.AppID
}

func (p *DatasetVersion) GetSpaceID() (v int64) {
	if p != nil {
		return p.SpaceID
	}
	return
}

func (p *DatasetVersion) GetDatasetID() (v int64) {
	if p != nil {
		return p.DatasetID
	}
	return
}

func (p *DatasetVersion) GetSchemaID() (v int64) {
	if p != nil {
		return p.SchemaID
	}
	return
}

var DatasetVersion_Version_DEFAULT string

func (p *DatasetVersion) GetVersion() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetVersion() {
		return DatasetVersion_Version_DEFAULT
	}
	return *p.Version
}

var DatasetVersion_VersionNum_DEFAULT int64

func (p *DatasetVersion) GetVersionNum() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetVersionNum() {
		return DatasetVersion_VersionNum_DEFAULT
	}
	return *p.VersionNum
}

var DatasetVersion_Description_DEFAULT string

func (p *DatasetVersion) GetDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDescription() {
		return DatasetVersion_Description_DEFAULT
	}
	return *p.Description
}

var DatasetVersion_DatasetBrief_DEFAULT string

func (p *DatasetVersion) GetDatasetBrief() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDatasetBrief() {
		return DatasetVersion_DatasetBrief_DEFAULT
	}
	return *p.DatasetBrief
}

var DatasetVersion_ItemCount_DEFAULT int64

func (p *DatasetVersion) GetItemCount() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetItemCount() {
		return DatasetVersion_ItemCount_DEFAULT
	}
	return *p.ItemCount
}

var DatasetVersion_SnapshotStatus_DEFAULT SnapshotStatus

func (p *DatasetVersion) GetSnapshotStatus() (v SnapshotStatus) {
	if p == nil {
		return
	}
	if !p.IsSetSnapshotStatus() {
		return DatasetVersion_SnapshotStatus_DEFAULT
	}
	return *p.SnapshotStatus
}

var DatasetVersion_CreatedBy_DEFAULT string

func (p *DatasetVersion) GetCreatedBy() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetCreatedBy() {
		return DatasetVersion_CreatedBy_DEFAULT
	}
	return *p.CreatedBy
}

var DatasetVersion_CreatedAt_DEFAULT int64

func (p *DatasetVersion) GetCreatedAt() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetCreatedAt() {
		return DatasetVersion_CreatedAt_DEFAULT
	}
	return *p.CreatedAt
}

var DatasetVersion_DisabledAt_DEFAULT int64

func (p *DatasetVersion) GetDisabledAt() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetDisabledAt() {
		return DatasetVersion_DisabledAt_DEFAULT
	}
	return *p.DisabledAt
}
func (p *DatasetVersion) SetID(val int64) {
	p.ID = val
}
func (p *DatasetVersion) SetAppID(val *int32) {
	p.AppID = val
}
func (p *DatasetVersion) SetSpaceID(val int64) {
	p.SpaceID = val
}
func (p *DatasetVersion) SetDatasetID(val int64) {
	p.DatasetID = val
}
func (p *DatasetVersion) SetSchemaID(val int64) {
	p.SchemaID = val
}
func (p *DatasetVersion) SetVersion(val *string) {
	p.Version = val
}
func (p *DatasetVersion) SetVersionNum(val *int64) {
	p.VersionNum = val
}
func (p *DatasetVersion) SetDescription(val *string) {
	p.Description = val
}
func (p *DatasetVersion) SetDatasetBrief(val *string) {
	p.DatasetBrief = val
}
func (p *DatasetVersion) SetItemCount(val *int64) {
	p.ItemCount = val
}
func (p *DatasetVersion) SetSnapshotStatus(val *SnapshotStatus) {
	p.SnapshotStatus = val
}
func (p *DatasetVersion) SetCreatedBy(val *string) {
	p.CreatedBy = val
}
func (p *DatasetVersion) SetCreatedAt(val *int64) {
	p.CreatedAt = val
}
func (p *DatasetVersion) SetDisabledAt(val *int64) {
	p.DisabledAt = val
}

var fieldIDToName_DatasetVersion = map[int16]string{
	1:   "id",
	2:   "app_id",
	3:   "space_id",
	4:   "dataset_id",
	5:   "schema_id",
	10:  "version",
	11:  "version_num",
	12:  "description",
	13:  "dataset_brief",
	14:  "item_count",
	15:  "snapshot_status",
	100: "created_by",
	101: "created_at",
	102: "disabled_at",
}

func (p *DatasetVersion) IsSetAppID() bool {
	return p.AppID != nil
}

func (p *DatasetVersion) IsSetVersion() bool {
	return p.Version != nil
}

func (p *DatasetVersion) IsSetVersionNum() bool {
	return p.VersionNum != nil
}

func (p *DatasetVersion) IsSetDescription() bool {
	return p.Description != nil
}

func (p *DatasetVersion) IsSetDatasetBrief() bool {
	return p.DatasetBrief != nil
}

func (p *DatasetVersion) IsSetItemCount() bool {
	return p.ItemCount != nil
}

func (p *DatasetVersion) IsSetSnapshotStatus() bool {
	return p.SnapshotStatus != nil
}

func (p *DatasetVersion) IsSetCreatedBy() bool {
	return p.CreatedBy != nil
}

func (p *DatasetVersion) IsSetCreatedAt() bool {
	return p.CreatedAt != nil
}

func (p *DatasetVersion) IsSetDisabledAt() bool {
	return p.DisabledAt != nil
}

func (p *DatasetVersion) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetID bool = false
	var issetSpaceID bool = false
	var issetDatasetID bool = false
	var issetSchemaID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetSpaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetDatasetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetSchemaID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 102:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField102(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetSpaceID {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetDatasetID {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetSchemaID {
		fieldId = 5
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetVersion[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_DatasetVersion[fieldId]))
}

func (p *DatasetVersion) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ID = _field
	return nil
}
func (p *DatasetVersion) ReadField2(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AppID = _field
	return nil
}
func (p *DatasetVersion) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SpaceID = _field
	return nil
}
func (p *DatasetVersion) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.DatasetID = _field
	return nil
}
func (p *DatasetVersion) ReadField5(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SchemaID = _field
	return nil
}
func (p *DatasetVersion) ReadField10(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Version = _field
	return nil
}
func (p *DatasetVersion) ReadField11(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.VersionNum = _field
	return nil
}
func (p *DatasetVersion) ReadField12(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}
func (p *DatasetVersion) ReadField13(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DatasetBrief = _field
	return nil
}
func (p *DatasetVersion) ReadField14(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ItemCount = _field
	return nil
}
func (p *DatasetVersion) ReadField15(iprot thrift.TProtocol) error {

	var _field *SnapshotStatus
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := SnapshotStatus(v)
		_field = &tmp
	}
	p.SnapshotStatus = _field
	return nil
}
func (p *DatasetVersion) ReadField100(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CreatedBy = _field
	return nil
}
func (p *DatasetVersion) ReadField101(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CreatedAt = _field
	return nil
}
func (p *DatasetVersion) ReadField102(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DisabledAt = _field
	return nil
}

func (p *DatasetVersion) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DatasetVersion"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField102(oprot); err != nil {
			fieldId = 102
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetVersion) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *DatasetVersion) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppID() {
		if err = oprot.WriteFieldBegin("app_id", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.AppID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *DatasetVersion) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("space_id", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.SpaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *DatasetVersion) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("dataset_id", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.DatasetID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *DatasetVersion) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("schema_id", thrift.I64, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.SchemaID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *DatasetVersion) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err = oprot.WriteFieldBegin("version", thrift.STRING, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Version); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}
func (p *DatasetVersion) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersionNum() {
		if err = oprot.WriteFieldBegin("version_num", thrift.I64, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.VersionNum); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}
func (p *DatasetVersion) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}
func (p *DatasetVersion) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetDatasetBrief() {
		if err = oprot.WriteFieldBegin("dataset_brief", thrift.STRING, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.DatasetBrief); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}
func (p *DatasetVersion) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetItemCount() {
		if err = oprot.WriteFieldBegin("item_count", thrift.I64, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ItemCount); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}
func (p *DatasetVersion) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetSnapshotStatus() {
		if err = oprot.WriteFieldBegin("snapshot_status", thrift.I32, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.SnapshotStatus)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}
func (p *DatasetVersion) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedBy() {
		if err = oprot.WriteFieldBegin("created_by", thrift.STRING, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CreatedBy); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}
func (p *DatasetVersion) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedAt() {
		if err = oprot.WriteFieldBegin("created_at", thrift.I64, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CreatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}
func (p *DatasetVersion) writeField102(oprot thrift.TProtocol) (err error) {
	if p.IsSetDisabledAt() {
		if err = oprot.WriteFieldBegin("disabled_at", thrift.I64, 102); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.DisabledAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 end error: ", p), err)
}

func (p *DatasetVersion) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetVersion(%+v)", *p)

}

func (p *DatasetVersion) DeepEqual(ano *DatasetVersion) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field2DeepEqual(ano.AppID) {
		return false
	}
	if !p.Field3DeepEqual(ano.SpaceID) {
		return false
	}
	if !p.Field4DeepEqual(ano.DatasetID) {
		return false
	}
	if !p.Field5DeepEqual(ano.SchemaID) {
		return false
	}
	if !p.Field10DeepEqual(ano.Version) {
		return false
	}
	if !p.Field11DeepEqual(ano.VersionNum) {
		return false
	}
	if !p.Field12DeepEqual(ano.Description) {
		return false
	}
	if !p.Field13DeepEqual(ano.DatasetBrief) {
		return false
	}
	if !p.Field14DeepEqual(ano.ItemCount) {
		return false
	}
	if !p.Field15DeepEqual(ano.SnapshotStatus) {
		return false
	}
	if !p.Field100DeepEqual(ano.CreatedBy) {
		return false
	}
	if !p.Field101DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field102DeepEqual(ano.DisabledAt) {
		return false
	}
	return true
}

func (p *DatasetVersion) Field1DeepEqual(src int64) bool {

	if p.ID != src {
		return false
	}
	return true
}
func (p *DatasetVersion) Field2DeepEqual(src *int32) bool {

	if p.AppID == src {
		return true
	} else if p.AppID == nil || src == nil {
		return false
	}
	if *p.AppID != *src {
		return false
	}
	return true
}
func (p *DatasetVersion) Field3DeepEqual(src int64) bool {

	if p.SpaceID != src {
		return false
	}
	return true
}
func (p *DatasetVersion) Field4DeepEqual(src int64) bool {

	if p.DatasetID != src {
		return false
	}
	return true
}
func (p *DatasetVersion) Field5DeepEqual(src int64) bool {

	if p.SchemaID != src {
		return false
	}
	return true
}
func (p *DatasetVersion) Field10DeepEqual(src *string) bool {

	if p.Version == src {
		return true
	} else if p.Version == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Version, *src) != 0 {
		return false
	}
	return true
}
func (p *DatasetVersion) Field11DeepEqual(src *int64) bool {

	if p.VersionNum == src {
		return true
	} else if p.VersionNum == nil || src == nil {
		return false
	}
	if *p.VersionNum != *src {
		return false
	}
	return true
}
func (p *DatasetVersion) Field12DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *DatasetVersion) Field13DeepEqual(src *string) bool {

	if p.DatasetBrief == src {
		return true
	} else if p.DatasetBrief == nil || src == nil {
		return false
	}
	if strings.Compare(*p.DatasetBrief, *src) != 0 {
		return false
	}
	return true
}
func (p *DatasetVersion) Field14DeepEqual(src *int64) bool {

	if p.ItemCount == src {
		return true
	} else if p.ItemCount == nil || src == nil {
		return false
	}
	if *p.ItemCount != *src {
		return false
	}
	return true
}
func (p *DatasetVersion) Field15DeepEqual(src *SnapshotStatus) bool {

	if p.SnapshotStatus == src {
		return true
	} else if p.SnapshotStatus == nil || src == nil {
		return false
	}
	if *p.SnapshotStatus != *src {
		return false
	}
	return true
}
func (p *DatasetVersion) Field100DeepEqual(src *string) bool {

	if p.CreatedBy == src {
		return true
	} else if p.CreatedBy == nil || src == nil {
		return false
	}
	if strings.Compare(*p.CreatedBy, *src) != 0 {
		return false
	}
	return true
}
func (p *DatasetVersion) Field101DeepEqual(src *int64) bool {

	if p.CreatedAt == src {
		return true
	} else if p.CreatedAt == nil || src == nil {
		return false
	}
	if *p.CreatedAt != *src {
		return false
	}
	return true
}
func (p *DatasetVersion) Field102DeepEqual(src *int64) bool {

	if p.DisabledAt == src {
		return true
	} else if p.DisabledAt == nil || src == nil {
		return false
	}
	if *p.DisabledAt != *src {
		return false
	}
	return true
}

// DatasetSchema 数据集 Schema，包含数据集列的类型限制等信息
type DatasetSchema struct {
	// 主键 ID，创建时可以不传
	ID *int64 `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id" form:"id" query:"id"`
	// schema 所在的空间 ID，创建时可以不传
	AppID *int32 `thrift:"app_id,2,optional" frugal:"2,optional,i32" form:"app_id" json:"app_id,omitempty" query:"app_id"`
	// schema 所在的空间 ID，创建时可以不传
	SpaceID *int64 `thrift:"space_id,3,optional" frugal:"3,optional,i64" json:"space_id" form:"space_id" query:"space_id"`
	// 数据集 ID，创建时可以不传
	DatasetID *int64 `thrift:"dataset_id,4,optional" frugal:"4,optional,i64" json:"dataset_id" form:"dataset_id" query:"dataset_id"`
	// 数据集列约束
	Fields []*FieldSchema `thrift:"fields,10,optional" frugal:"10,optional,list<FieldSchema>" form:"fields" json:"fields,omitempty" query:"fields"`
	// 是否不允许编辑
	Immutable *bool `thrift:"immutable,11,optional" frugal:"11,optional,bool" form:"immutable" json:"immutable,omitempty" query:"immutable"`
	/* 通用信息 */
	CreatedBy     *string `thrift:"created_by,100,optional" frugal:"100,optional,string" form:"created_by" json:"created_by,omitempty" query:"created_by"`
	CreatedAt     *int64  `thrift:"created_at,101,optional" frugal:"101,optional,i64" json:"created_at" form:"created_at" query:"created_at"`
	UpdatedBy     *string `thrift:"updated_by,102,optional" frugal:"102,optional,string" form:"updated_by" json:"updated_by,omitempty" query:"updated_by"`
	UpdatedAt     *int64  `thrift:"updated_at,103,optional" frugal:"103,optional,i64" json:"updated_at" form:"updated_at" query:"updated_at"`
	UpdateVersion *int64  `thrift:"update_version,104,optional" frugal:"104,optional,i64" json:"update_version" form:"update_version" query:"update_version"`
}

func NewDatasetSchema() *DatasetSchema {
	return &DatasetSchema{}
}

func (p *DatasetSchema) InitDefault() {
}

var DatasetSchema_ID_DEFAULT int64

func (p *DatasetSchema) GetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetID() {
		return DatasetSchema_ID_DEFAULT
	}
	return *p.ID
}

var DatasetSchema_AppID_DEFAULT int32

func (p *DatasetSchema) GetAppID() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetAppID() {
		return DatasetSchema_AppID_DEFAULT
	}
	return *p.AppID
}

var DatasetSchema_SpaceID_DEFAULT int64

func (p *DatasetSchema) GetSpaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetSpaceID() {
		return DatasetSchema_SpaceID_DEFAULT
	}
	return *p.SpaceID
}

var DatasetSchema_DatasetID_DEFAULT int64

func (p *DatasetSchema) GetDatasetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetDatasetID() {
		return DatasetSchema_DatasetID_DEFAULT
	}
	return *p.DatasetID
}

var DatasetSchema_Fields_DEFAULT []*FieldSchema

func (p *DatasetSchema) GetFields() (v []*FieldSchema) {
	if p == nil {
		return
	}
	if !p.IsSetFields() {
		return DatasetSchema_Fields_DEFAULT
	}
	return p.Fields
}

var DatasetSchema_Immutable_DEFAULT bool

func (p *DatasetSchema) GetImmutable() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetImmutable() {
		return DatasetSchema_Immutable_DEFAULT
	}
	return *p.Immutable
}

var DatasetSchema_CreatedBy_DEFAULT string

func (p *DatasetSchema) GetCreatedBy() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetCreatedBy() {
		return DatasetSchema_CreatedBy_DEFAULT
	}
	return *p.CreatedBy
}

var DatasetSchema_CreatedAt_DEFAULT int64

func (p *DatasetSchema) GetCreatedAt() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetCreatedAt() {
		return DatasetSchema_CreatedAt_DEFAULT
	}
	return *p.CreatedAt
}

var DatasetSchema_UpdatedBy_DEFAULT string

func (p *DatasetSchema) GetUpdatedBy() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetUpdatedBy() {
		return DatasetSchema_UpdatedBy_DEFAULT
	}
	return *p.UpdatedBy
}

var DatasetSchema_UpdatedAt_DEFAULT int64

func (p *DatasetSchema) GetUpdatedAt() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetUpdatedAt() {
		return DatasetSchema_UpdatedAt_DEFAULT
	}
	return *p.UpdatedAt
}

var DatasetSchema_UpdateVersion_DEFAULT int64

func (p *DatasetSchema) GetUpdateVersion() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetUpdateVersion() {
		return DatasetSchema_UpdateVersion_DEFAULT
	}
	return *p.UpdateVersion
}
func (p *DatasetSchema) SetID(val *int64) {
	p.ID = val
}
func (p *DatasetSchema) SetAppID(val *int32) {
	p.AppID = val
}
func (p *DatasetSchema) SetSpaceID(val *int64) {
	p.SpaceID = val
}
func (p *DatasetSchema) SetDatasetID(val *int64) {
	p.DatasetID = val
}
func (p *DatasetSchema) SetFields(val []*FieldSchema) {
	p.Fields = val
}
func (p *DatasetSchema) SetImmutable(val *bool) {
	p.Immutable = val
}
func (p *DatasetSchema) SetCreatedBy(val *string) {
	p.CreatedBy = val
}
func (p *DatasetSchema) SetCreatedAt(val *int64) {
	p.CreatedAt = val
}
func (p *DatasetSchema) SetUpdatedBy(val *string) {
	p.UpdatedBy = val
}
func (p *DatasetSchema) SetUpdatedAt(val *int64) {
	p.UpdatedAt = val
}
func (p *DatasetSchema) SetUpdateVersion(val *int64) {
	p.UpdateVersion = val
}

var fieldIDToName_DatasetSchema = map[int16]string{
	1:   "id",
	2:   "app_id",
	3:   "space_id",
	4:   "dataset_id",
	10:  "fields",
	11:  "immutable",
	100: "created_by",
	101: "created_at",
	102: "updated_by",
	103: "updated_at",
	104: "update_version",
}

func (p *DatasetSchema) IsSetID() bool {
	return p.ID != nil
}

func (p *DatasetSchema) IsSetAppID() bool {
	return p.AppID != nil
}

func (p *DatasetSchema) IsSetSpaceID() bool {
	return p.SpaceID != nil
}

func (p *DatasetSchema) IsSetDatasetID() bool {
	return p.DatasetID != nil
}

func (p *DatasetSchema) IsSetFields() bool {
	return p.Fields != nil
}

func (p *DatasetSchema) IsSetImmutable() bool {
	return p.Immutable != nil
}

func (p *DatasetSchema) IsSetCreatedBy() bool {
	return p.CreatedBy != nil
}

func (p *DatasetSchema) IsSetCreatedAt() bool {
	return p.CreatedAt != nil
}

func (p *DatasetSchema) IsSetUpdatedBy() bool {
	return p.UpdatedBy != nil
}

func (p *DatasetSchema) IsSetUpdatedAt() bool {
	return p.UpdatedAt != nil
}

func (p *DatasetSchema) IsSetUpdateVersion() bool {
	return p.UpdateVersion != nil
}

func (p *DatasetSchema) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 102:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField102(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 103:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField103(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 104:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField104(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetSchema[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetSchema) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ID = _field
	return nil
}
func (p *DatasetSchema) ReadField2(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AppID = _field
	return nil
}
func (p *DatasetSchema) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SpaceID = _field
	return nil
}
func (p *DatasetSchema) ReadField4(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DatasetID = _field
	return nil
}
func (p *DatasetSchema) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*FieldSchema, 0, size)
	values := make([]FieldSchema, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Fields = _field
	return nil
}
func (p *DatasetSchema) ReadField11(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Immutable = _field
	return nil
}
func (p *DatasetSchema) ReadField100(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CreatedBy = _field
	return nil
}
func (p *DatasetSchema) ReadField101(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CreatedAt = _field
	return nil
}
func (p *DatasetSchema) ReadField102(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UpdatedBy = _field
	return nil
}
func (p *DatasetSchema) ReadField103(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *DatasetSchema) ReadField104(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UpdateVersion = _field
	return nil
}

func (p *DatasetSchema) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DatasetSchema"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField102(oprot); err != nil {
			fieldId = 102
			goto WriteFieldError
		}
		if err = p.writeField103(oprot); err != nil {
			fieldId = 103
			goto WriteFieldError
		}
		if err = p.writeField104(oprot); err != nil {
			fieldId = 104
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetSchema) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *DatasetSchema) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppID() {
		if err = oprot.WriteFieldBegin("app_id", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.AppID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *DatasetSchema) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSpaceID() {
		if err = oprot.WriteFieldBegin("space_id", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.SpaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *DatasetSchema) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDatasetID() {
		if err = oprot.WriteFieldBegin("dataset_id", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.DatasetID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *DatasetSchema) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetFields() {
		if err = oprot.WriteFieldBegin("fields", thrift.LIST, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Fields)); err != nil {
			return err
		}
		for _, v := range p.Fields {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}
func (p *DatasetSchema) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetImmutable() {
		if err = oprot.WriteFieldBegin("immutable", thrift.BOOL, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.Immutable); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}
func (p *DatasetSchema) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedBy() {
		if err = oprot.WriteFieldBegin("created_by", thrift.STRING, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CreatedBy); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}
func (p *DatasetSchema) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedAt() {
		if err = oprot.WriteFieldBegin("created_at", thrift.I64, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CreatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}
func (p *DatasetSchema) writeField102(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdatedBy() {
		if err = oprot.WriteFieldBegin("updated_by", thrift.STRING, 102); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.UpdatedBy); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 end error: ", p), err)
}
func (p *DatasetSchema) writeField103(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdatedAt() {
		if err = oprot.WriteFieldBegin("updated_at", thrift.I64, 103); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.UpdatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 103 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 103 end error: ", p), err)
}
func (p *DatasetSchema) writeField104(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdateVersion() {
		if err = oprot.WriteFieldBegin("update_version", thrift.I64, 104); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.UpdateVersion); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 104 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 104 end error: ", p), err)
}

func (p *DatasetSchema) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetSchema(%+v)", *p)

}

func (p *DatasetSchema) DeepEqual(ano *DatasetSchema) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field2DeepEqual(ano.AppID) {
		return false
	}
	if !p.Field3DeepEqual(ano.SpaceID) {
		return false
	}
	if !p.Field4DeepEqual(ano.DatasetID) {
		return false
	}
	if !p.Field10DeepEqual(ano.Fields) {
		return false
	}
	if !p.Field11DeepEqual(ano.Immutable) {
		return false
	}
	if !p.Field100DeepEqual(ano.CreatedBy) {
		return false
	}
	if !p.Field101DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field102DeepEqual(ano.UpdatedBy) {
		return false
	}
	if !p.Field103DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field104DeepEqual(ano.UpdateVersion) {
		return false
	}
	return true
}

func (p *DatasetSchema) Field1DeepEqual(src *int64) bool {

	if p.ID == src {
		return true
	} else if p.ID == nil || src == nil {
		return false
	}
	if *p.ID != *src {
		return false
	}
	return true
}
func (p *DatasetSchema) Field2DeepEqual(src *int32) bool {

	if p.AppID == src {
		return true
	} else if p.AppID == nil || src == nil {
		return false
	}
	if *p.AppID != *src {
		return false
	}
	return true
}
func (p *DatasetSchema) Field3DeepEqual(src *int64) bool {

	if p.SpaceID == src {
		return true
	} else if p.SpaceID == nil || src == nil {
		return false
	}
	if *p.SpaceID != *src {
		return false
	}
	return true
}
func (p *DatasetSchema) Field4DeepEqual(src *int64) bool {

	if p.DatasetID == src {
		return true
	} else if p.DatasetID == nil || src == nil {
		return false
	}
	if *p.DatasetID != *src {
		return false
	}
	return true
}
func (p *DatasetSchema) Field10DeepEqual(src []*FieldSchema) bool {

	if len(p.Fields) != len(src) {
		return false
	}
	for i, v := range p.Fields {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *DatasetSchema) Field11DeepEqual(src *bool) bool {

	if p.Immutable == src {
		return true
	} else if p.Immutable == nil || src == nil {
		return false
	}
	if *p.Immutable != *src {
		return false
	}
	return true
}
func (p *DatasetSchema) Field100DeepEqual(src *string) bool {

	if p.CreatedBy == src {
		return true
	} else if p.CreatedBy == nil || src == nil {
		return false
	}
	if strings.Compare(*p.CreatedBy, *src) != 0 {
		return false
	}
	return true
}
func (p *DatasetSchema) Field101DeepEqual(src *int64) bool {

	if p.CreatedAt == src {
		return true
	} else if p.CreatedAt == nil || src == nil {
		return false
	}
	if *p.CreatedAt != *src {
		return false
	}
	return true
}
func (p *DatasetSchema) Field102DeepEqual(src *string) bool {

	if p.UpdatedBy == src {
		return true
	} else if p.UpdatedBy == nil || src == nil {
		return false
	}
	if strings.Compare(*p.UpdatedBy, *src) != 0 {
		return false
	}
	return true
}
func (p *DatasetSchema) Field103DeepEqual(src *int64) bool {

	if p.UpdatedAt == src {
		return true
	} else if p.UpdatedAt == nil || src == nil {
		return false
	}
	if *p.UpdatedAt != *src {
		return false
	}
	return true
}
func (p *DatasetSchema) Field104DeepEqual(src *int64) bool {

	if p.UpdateVersion == src {
		return true
	} else if p.UpdateVersion == nil || src == nil {
		return false
	}
	if *p.UpdateVersion != *src {
		return false
	}
	return true
}

type FieldSchema struct {
	// 数据集 schema 版本变化中 key 唯一，新建时自动生成，不需传入
	Key *string `thrift:"key,1,optional" frugal:"1,optional,string" form:"key" json:"key,omitempty" query:"key"`
	// 展示名称
	Name *string `thrift:"name,2,optional" frugal:"2,optional,string" form:"name" json:"name,omitempty" query:"name"`
	// 描述
	Description *string `thrift:"description,3,optional" frugal:"3,optional,string" form:"description" json:"description,omitempty" query:"description"`
	// 类型，如 文本，图片，etc.
	ContentType *ContentType `thrift:"content_type,4,optional" frugal:"4,optional,ContentType" form:"content_type" json:"content_type,omitempty" query:"content_type"`
	// 默认渲染格式，如 code, json, etc.
	DefaultFormat *FieldDisplayFormat `thrift:"default_format,5,optional" frugal:"5,optional,FieldDisplayFormat" form:"default_format" json:"default_format,omitempty" query:"default_format"`
	// 对应的内置 schema
	SchemaKey *SchemaKey `thrift:"schemaKey,6,optional" frugal:"6,optional,SchemaKey" form:"schemaKey" json:"schemaKey,omitempty" query:"schemaKey"`
	/* [20,50) 内容格式限制相关 */
	TextSchema *string `thrift:"text_schema,20,optional" frugal:"20,optional,string" form:"text_schema" json:"text_schema,omitempty" query:"text_schema"`
	// 多模态规格限制
	MultiModelSpec *MultiModalSpec `thrift:"multi_model_spec,21,optional" frugal:"21,optional,MultiModalSpec" form:"multi_model_spec" json:"multi_model_spec,omitempty" query:"multi_model_spec"`
	// 用户是否不可见
	Hidden *bool `thrift:"hidden,50,optional" frugal:"50,optional,bool" form:"hidden" json:"hidden,omitempty" query:"hidden"`
	// 当前列的状态，创建/更新时可以不传
	Status *FieldStatus `thrift:"status,51,optional" frugal:"51,optional,FieldStatus" form:"status" json:"status,omitempty" query:"status"`
	// 默认的预置转换配置，目前在数据校验后执行
	DefaultTransformations []*FieldTransformationConfig `thrift:"default_transformations,55,optional" frugal:"55,optional,list<FieldTransformationConfig>" form:"default_transformations" json:"default_transformations,omitempty" query:"default_transformations"`
}

func NewFieldSchema() *FieldSchema {
	return &FieldSchema{}
}

func (p *FieldSchema) InitDefault() {
}

var FieldSchema_Key_DEFAULT string

func (p *FieldSchema) GetKey() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetKey() {
		return FieldSchema_Key_DEFAULT
	}
	return *p.Key
}

var FieldSchema_Name_DEFAULT string

func (p *FieldSchema) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return FieldSchema_Name_DEFAULT
	}
	return *p.Name
}

var FieldSchema_Description_DEFAULT string

func (p *FieldSchema) GetDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDescription() {
		return FieldSchema_Description_DEFAULT
	}
	return *p.Description
}

var FieldSchema_ContentType_DEFAULT ContentType

func (p *FieldSchema) GetContentType() (v ContentType) {
	if p == nil {
		return
	}
	if !p.IsSetContentType() {
		return FieldSchema_ContentType_DEFAULT
	}
	return *p.ContentType
}

var FieldSchema_DefaultFormat_DEFAULT FieldDisplayFormat

func (p *FieldSchema) GetDefaultFormat() (v FieldDisplayFormat) {
	if p == nil {
		return
	}
	if !p.IsSetDefaultFormat() {
		return FieldSchema_DefaultFormat_DEFAULT
	}
	return *p.DefaultFormat
}

var FieldSchema_SchemaKey_DEFAULT SchemaKey

func (p *FieldSchema) GetSchemaKey() (v SchemaKey) {
	if p == nil {
		return
	}
	if !p.IsSetSchemaKey() {
		return FieldSchema_SchemaKey_DEFAULT
	}
	return *p.SchemaKey
}

var FieldSchema_TextSchema_DEFAULT string

func (p *FieldSchema) GetTextSchema() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetTextSchema() {
		return FieldSchema_TextSchema_DEFAULT
	}
	return *p.TextSchema
}

var FieldSchema_MultiModelSpec_DEFAULT *MultiModalSpec

func (p *FieldSchema) GetMultiModelSpec() (v *MultiModalSpec) {
	if p == nil {
		return
	}
	if !p.IsSetMultiModelSpec() {
		return FieldSchema_MultiModelSpec_DEFAULT
	}
	return p.MultiModelSpec
}

var FieldSchema_Hidden_DEFAULT bool

func (p *FieldSchema) GetHidden() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetHidden() {
		return FieldSchema_Hidden_DEFAULT
	}
	return *p.Hidden
}

var FieldSchema_Status_DEFAULT FieldStatus

func (p *FieldSchema) GetStatus() (v FieldStatus) {
	if p == nil {
		return
	}
	if !p.IsSetStatus() {
		return FieldSchema_Status_DEFAULT
	}
	return *p.Status
}

var FieldSchema_DefaultTransformations_DEFAULT []*FieldTransformationConfig

func (p *FieldSchema) GetDefaultTransformations() (v []*FieldTransformationConfig) {
	if p == nil {
		return
	}
	if !p.IsSetDefaultTransformations() {
		return FieldSchema_DefaultTransformations_DEFAULT
	}
	return p.DefaultTransformations
}
func (p *FieldSchema) SetKey(val *string) {
	p.Key = val
}
func (p *FieldSchema) SetName(val *string) {
	p.Name = val
}
func (p *FieldSchema) SetDescription(val *string) {
	p.Description = val
}
func (p *FieldSchema) SetContentType(val *ContentType) {
	p.ContentType = val
}
func (p *FieldSchema) SetDefaultFormat(val *FieldDisplayFormat) {
	p.DefaultFormat = val
}
func (p *FieldSchema) SetSchemaKey(val *SchemaKey) {
	p.SchemaKey = val
}
func (p *FieldSchema) SetTextSchema(val *string) {
	p.TextSchema = val
}
func (p *FieldSchema) SetMultiModelSpec(val *MultiModalSpec) {
	p.MultiModelSpec = val
}
func (p *FieldSchema) SetHidden(val *bool) {
	p.Hidden = val
}
func (p *FieldSchema) SetStatus(val *FieldStatus) {
	p.Status = val
}
func (p *FieldSchema) SetDefaultTransformations(val []*FieldTransformationConfig) {
	p.DefaultTransformations = val
}

var fieldIDToName_FieldSchema = map[int16]string{
	1:  "key",
	2:  "name",
	3:  "description",
	4:  "content_type",
	5:  "default_format",
	6:  "schemaKey",
	20: "text_schema",
	21: "multi_model_spec",
	50: "hidden",
	51: "status",
	55: "default_transformations",
}

func (p *FieldSchema) IsSetKey() bool {
	return p.Key != nil
}

func (p *FieldSchema) IsSetName() bool {
	return p.Name != nil
}

func (p *FieldSchema) IsSetDescription() bool {
	return p.Description != nil
}

func (p *FieldSchema) IsSetContentType() bool {
	return p.ContentType != nil
}

func (p *FieldSchema) IsSetDefaultFormat() bool {
	return p.DefaultFormat != nil
}

func (p *FieldSchema) IsSetSchemaKey() bool {
	return p.SchemaKey != nil
}

func (p *FieldSchema) IsSetTextSchema() bool {
	return p.TextSchema != nil
}

func (p *FieldSchema) IsSetMultiModelSpec() bool {
	return p.MultiModelSpec != nil
}

func (p *FieldSchema) IsSetHidden() bool {
	return p.Hidden != nil
}

func (p *FieldSchema) IsSetStatus() bool {
	return p.Status != nil
}

func (p *FieldSchema) IsSetDefaultTransformations() bool {
	return p.DefaultTransformations != nil
}

func (p *FieldSchema) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 50:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField50(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 51:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField51(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 55:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField55(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FieldSchema[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FieldSchema) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Key = _field
	return nil
}
func (p *FieldSchema) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *FieldSchema) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}
func (p *FieldSchema) ReadField4(iprot thrift.TProtocol) error {

	var _field *ContentType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := ContentType(v)
		_field = &tmp
	}
	p.ContentType = _field
	return nil
}
func (p *FieldSchema) ReadField5(iprot thrift.TProtocol) error {

	var _field *FieldDisplayFormat
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := FieldDisplayFormat(v)
		_field = &tmp
	}
	p.DefaultFormat = _field
	return nil
}
func (p *FieldSchema) ReadField6(iprot thrift.TProtocol) error {

	var _field *SchemaKey
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := SchemaKey(v)
		_field = &tmp
	}
	p.SchemaKey = _field
	return nil
}
func (p *FieldSchema) ReadField20(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TextSchema = _field
	return nil
}
func (p *FieldSchema) ReadField21(iprot thrift.TProtocol) error {
	_field := NewMultiModalSpec()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.MultiModelSpec = _field
	return nil
}
func (p *FieldSchema) ReadField50(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Hidden = _field
	return nil
}
func (p *FieldSchema) ReadField51(iprot thrift.TProtocol) error {

	var _field *FieldStatus
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := FieldStatus(v)
		_field = &tmp
	}
	p.Status = _field
	return nil
}
func (p *FieldSchema) ReadField55(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*FieldTransformationConfig, 0, size)
	values := make([]FieldTransformationConfig, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.DefaultTransformations = _field
	return nil
}

func (p *FieldSchema) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FieldSchema"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField50(oprot); err != nil {
			fieldId = 50
			goto WriteFieldError
		}
		if err = p.writeField51(oprot); err != nil {
			fieldId = 51
			goto WriteFieldError
		}
		if err = p.writeField55(oprot); err != nil {
			fieldId = 55
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FieldSchema) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetKey() {
		if err = oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Key); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *FieldSchema) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *FieldSchema) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *FieldSchema) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetContentType() {
		if err = oprot.WriteFieldBegin("content_type", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.ContentType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *FieldSchema) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDefaultFormat() {
		if err = oprot.WriteFieldBegin("default_format", thrift.I32, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.DefaultFormat)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *FieldSchema) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetSchemaKey() {
		if err = oprot.WriteFieldBegin("schemaKey", thrift.I32, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.SchemaKey)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *FieldSchema) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetTextSchema() {
		if err = oprot.WriteFieldBegin("text_schema", thrift.STRING, 20); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TextSchema); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}
func (p *FieldSchema) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetMultiModelSpec() {
		if err = oprot.WriteFieldBegin("multi_model_spec", thrift.STRUCT, 21); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.MultiModelSpec.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}
func (p *FieldSchema) writeField50(oprot thrift.TProtocol) (err error) {
	if p.IsSetHidden() {
		if err = oprot.WriteFieldBegin("hidden", thrift.BOOL, 50); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.Hidden); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 50 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 50 end error: ", p), err)
}
func (p *FieldSchema) writeField51(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.I32, 51); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Status)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 51 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 51 end error: ", p), err)
}
func (p *FieldSchema) writeField55(oprot thrift.TProtocol) (err error) {
	if p.IsSetDefaultTransformations() {
		if err = oprot.WriteFieldBegin("default_transformations", thrift.LIST, 55); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.DefaultTransformations)); err != nil {
			return err
		}
		for _, v := range p.DefaultTransformations {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 55 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 55 end error: ", p), err)
}

func (p *FieldSchema) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FieldSchema(%+v)", *p)

}

func (p *FieldSchema) DeepEqual(ano *FieldSchema) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Key) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.Description) {
		return false
	}
	if !p.Field4DeepEqual(ano.ContentType) {
		return false
	}
	if !p.Field5DeepEqual(ano.DefaultFormat) {
		return false
	}
	if !p.Field6DeepEqual(ano.SchemaKey) {
		return false
	}
	if !p.Field20DeepEqual(ano.TextSchema) {
		return false
	}
	if !p.Field21DeepEqual(ano.MultiModelSpec) {
		return false
	}
	if !p.Field50DeepEqual(ano.Hidden) {
		return false
	}
	if !p.Field51DeepEqual(ano.Status) {
		return false
	}
	if !p.Field55DeepEqual(ano.DefaultTransformations) {
		return false
	}
	return true
}

func (p *FieldSchema) Field1DeepEqual(src *string) bool {

	if p.Key == src {
		return true
	} else if p.Key == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Key, *src) != 0 {
		return false
	}
	return true
}
func (p *FieldSchema) Field2DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *FieldSchema) Field3DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *FieldSchema) Field4DeepEqual(src *ContentType) bool {

	if p.ContentType == src {
		return true
	} else if p.ContentType == nil || src == nil {
		return false
	}
	if *p.ContentType != *src {
		return false
	}
	return true
}
func (p *FieldSchema) Field5DeepEqual(src *FieldDisplayFormat) bool {

	if p.DefaultFormat == src {
		return true
	} else if p.DefaultFormat == nil || src == nil {
		return false
	}
	if *p.DefaultFormat != *src {
		return false
	}
	return true
}
func (p *FieldSchema) Field6DeepEqual(src *SchemaKey) bool {

	if p.SchemaKey == src {
		return true
	} else if p.SchemaKey == nil || src == nil {
		return false
	}
	if *p.SchemaKey != *src {
		return false
	}
	return true
}
func (p *FieldSchema) Field20DeepEqual(src *string) bool {

	if p.TextSchema == src {
		return true
	} else if p.TextSchema == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TextSchema, *src) != 0 {
		return false
	}
	return true
}
func (p *FieldSchema) Field21DeepEqual(src *MultiModalSpec) bool {

	if !p.MultiModelSpec.DeepEqual(src) {
		return false
	}
	return true
}
func (p *FieldSchema) Field50DeepEqual(src *bool) bool {

	if p.Hidden == src {
		return true
	} else if p.Hidden == nil || src == nil {
		return false
	}
	if *p.Hidden != *src {
		return false
	}
	return true
}
func (p *FieldSchema) Field51DeepEqual(src *FieldStatus) bool {

	if p.Status == src {
		return true
	} else if p.Status == nil || src == nil {
		return false
	}
	if *p.Status != *src {
		return false
	}
	return true
}
func (p *FieldSchema) Field55DeepEqual(src []*FieldTransformationConfig) bool {

	if len(p.DefaultTransformations) != len(src) {
		return false
	}
	for i, v := range p.DefaultTransformations {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type FieldTransformationConfig struct {
	// 预置的转换类型
	TransType *FieldTransformationType `thrift:"transType,1,optional" frugal:"1,optional,FieldTransformationType" form:"transType" json:"transType,omitempty" query:"transType"`
	// 当前转换配置在这一列上的数据及其嵌套的子结构上均生效
	Global *bool `thrift:"global,2,optional" frugal:"2,optional,bool" form:"global" json:"global,omitempty" query:"global"`
}

func NewFieldTransformationConfig() *FieldTransformationConfig {
	return &FieldTransformationConfig{}
}

func (p *FieldTransformationConfig) InitDefault() {
}

var FieldTransformationConfig_TransType_DEFAULT FieldTransformationType

func (p *FieldTransformationConfig) GetTransType() (v FieldTransformationType) {
	if p == nil {
		return
	}
	if !p.IsSetTransType() {
		return FieldTransformationConfig_TransType_DEFAULT
	}
	return *p.TransType
}

var FieldTransformationConfig_Global_DEFAULT bool

func (p *FieldTransformationConfig) GetGlobal() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetGlobal() {
		return FieldTransformationConfig_Global_DEFAULT
	}
	return *p.Global
}
func (p *FieldTransformationConfig) SetTransType(val *FieldTransformationType) {
	p.TransType = val
}
func (p *FieldTransformationConfig) SetGlobal(val *bool) {
	p.Global = val
}

var fieldIDToName_FieldTransformationConfig = map[int16]string{
	1: "transType",
	2: "global",
}

func (p *FieldTransformationConfig) IsSetTransType() bool {
	return p.TransType != nil
}

func (p *FieldTransformationConfig) IsSetGlobal() bool {
	return p.Global != nil
}

func (p *FieldTransformationConfig) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FieldTransformationConfig[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FieldTransformationConfig) ReadField1(iprot thrift.TProtocol) error {

	var _field *FieldTransformationType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := FieldTransformationType(v)
		_field = &tmp
	}
	p.TransType = _field
	return nil
}
func (p *FieldTransformationConfig) ReadField2(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Global = _field
	return nil
}

func (p *FieldTransformationConfig) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FieldTransformationConfig"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FieldTransformationConfig) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTransType() {
		if err = oprot.WriteFieldBegin("transType", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.TransType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *FieldTransformationConfig) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetGlobal() {
		if err = oprot.WriteFieldBegin("global", thrift.BOOL, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.Global); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *FieldTransformationConfig) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FieldTransformationConfig(%+v)", *p)

}

func (p *FieldTransformationConfig) DeepEqual(ano *FieldTransformationConfig) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TransType) {
		return false
	}
	if !p.Field2DeepEqual(ano.Global) {
		return false
	}
	return true
}

func (p *FieldTransformationConfig) Field1DeepEqual(src *FieldTransformationType) bool {

	if p.TransType == src {
		return true
	} else if p.TransType == nil || src == nil {
		return false
	}
	if *p.TransType != *src {
		return false
	}
	return true
}
func (p *FieldTransformationConfig) Field2DeepEqual(src *bool) bool {

	if p.Global == src {
		return true
	} else if p.Global == nil || src == nil {
		return false
	}
	if *p.Global != *src {
		return false
	}
	return true
}

type MultiModalSpec struct {
	// 文件数量上限
	MaxFileCount *int64 `thrift:"max_file_count,1,optional" frugal:"1,optional,i64" json:"max_file_count" form:"max_file_count" query:"max_file_count"`
	// 文件大小上限
	MaxFileSize *int64 `thrift:"max_file_size,2,optional" frugal:"2,optional,i64" json:"max_file_size" form:"max_file_size" query:"max_file_size"`
	// 文件格式
	SupportedFormats []string `thrift:"supported_formats,3,optional" frugal:"3,optional,list<string>" form:"supported_formats" json:"supported_formats,omitempty" query:"supported_formats"`
}

func NewMultiModalSpec() *MultiModalSpec {
	return &MultiModalSpec{}
}

func (p *MultiModalSpec) InitDefault() {
}

var MultiModalSpec_MaxFileCount_DEFAULT int64

func (p *MultiModalSpec) GetMaxFileCount() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetMaxFileCount() {
		return MultiModalSpec_MaxFileCount_DEFAULT
	}
	return *p.MaxFileCount
}

var MultiModalSpec_MaxFileSize_DEFAULT int64

func (p *MultiModalSpec) GetMaxFileSize() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetMaxFileSize() {
		return MultiModalSpec_MaxFileSize_DEFAULT
	}
	return *p.MaxFileSize
}

var MultiModalSpec_SupportedFormats_DEFAULT []string

func (p *MultiModalSpec) GetSupportedFormats() (v []string) {
	if p == nil {
		return
	}
	if !p.IsSetSupportedFormats() {
		return MultiModalSpec_SupportedFormats_DEFAULT
	}
	return p.SupportedFormats
}
func (p *MultiModalSpec) SetMaxFileCount(val *int64) {
	p.MaxFileCount = val
}
func (p *MultiModalSpec) SetMaxFileSize(val *int64) {
	p.MaxFileSize = val
}
func (p *MultiModalSpec) SetSupportedFormats(val []string) {
	p.SupportedFormats = val
}

var fieldIDToName_MultiModalSpec = map[int16]string{
	1: "max_file_count",
	2: "max_file_size",
	3: "supported_formats",
}

func (p *MultiModalSpec) IsSetMaxFileCount() bool {
	return p.MaxFileCount != nil
}

func (p *MultiModalSpec) IsSetMaxFileSize() bool {
	return p.MaxFileSize != nil
}

func (p *MultiModalSpec) IsSetSupportedFormats() bool {
	return p.SupportedFormats != nil
}

func (p *MultiModalSpec) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MultiModalSpec[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MultiModalSpec) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MaxFileCount = _field
	return nil
}
func (p *MultiModalSpec) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MaxFileSize = _field
	return nil
}
func (p *MultiModalSpec) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.SupportedFormats = _field
	return nil
}

func (p *MultiModalSpec) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MultiModalSpec"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MultiModalSpec) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxFileCount() {
		if err = oprot.WriteFieldBegin("max_file_count", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.MaxFileCount); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *MultiModalSpec) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxFileSize() {
		if err = oprot.WriteFieldBegin("max_file_size", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.MaxFileSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *MultiModalSpec) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSupportedFormats() {
		if err = oprot.WriteFieldBegin("supported_formats", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.SupportedFormats)); err != nil {
			return err
		}
		for _, v := range p.SupportedFormats {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *MultiModalSpec) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MultiModalSpec(%+v)", *p)

}

func (p *MultiModalSpec) DeepEqual(ano *MultiModalSpec) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.MaxFileCount) {
		return false
	}
	if !p.Field2DeepEqual(ano.MaxFileSize) {
		return false
	}
	if !p.Field3DeepEqual(ano.SupportedFormats) {
		return false
	}
	return true
}

func (p *MultiModalSpec) Field1DeepEqual(src *int64) bool {

	if p.MaxFileCount == src {
		return true
	} else if p.MaxFileCount == nil || src == nil {
		return false
	}
	if *p.MaxFileCount != *src {
		return false
	}
	return true
}
func (p *MultiModalSpec) Field2DeepEqual(src *int64) bool {

	if p.MaxFileSize == src {
		return true
	} else if p.MaxFileSize == nil || src == nil {
		return false
	}
	if *p.MaxFileSize != *src {
		return false
	}
	return true
}
func (p *MultiModalSpec) Field3DeepEqual(src []string) bool {

	if len(p.SupportedFormats) != len(src) {
		return false
	}
	for i, v := range p.SupportedFormats {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

// DatasetItem 数据内容
type DatasetItem struct {
	// 主键 ID，创建时可以不传
	ID *int64 `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id" form:"id" query:"id"`
	// 冗余 app ID，创建时可以不传
	AppID *int32 `thrift:"app_id,2,optional" frugal:"2,optional,i32" form:"app_id" json:"app_id,omitempty" query:"app_id"`
	// 冗余 space ID，创建时可以不传
	SpaceID *int64 `thrift:"space_id,3,optional" frugal:"3,optional,i64" json:"space_id" form:"space_id" query:"space_id"`
	// 所属的 data ID，创建时可以不传
	DatasetID *int64 `thrift:"dataset_id,4,optional" frugal:"4,optional,i64" json:"dataset_id" form:"dataset_id" query:"dataset_id"`
	// 插入时对应的 schema ID，后端根据 req 参数中的 datasetID 自动填充
	SchemaID *int64 `thrift:"schema_id,5,optional" frugal:"5,optional,i64" json:"schema_id" form:"schema_id" query:"schema_id"`
	// 数据在当前数据集内的唯一 ID，不随版本发生改变
	ItemID *int64 `thrift:"item_id,6,optional" frugal:"6,optional,i64" json:"item_id" form:"item_id" query:"item_id"`
	// 数据插入的幂等 key
	ItemKey *string `thrift:"item_key,10,optional" frugal:"10,optional,string" form:"item_key" json:"item_key,omitempty" query:"item_key"`
	// 数据内容
	Data []*FieldData `thrift:"data,11,optional" frugal:"11,optional,list<FieldData>" form:"data" json:"data,omitempty" query:"data"`
	// 多轮数据内容，与 data 互斥
	RepeatedData []*ItemData `thrift:"repeated_data,12,optional" frugal:"12,optional,list<ItemData>" form:"repeated_data" json:"repeated_data,omitempty" query:"repeated_data"`
	/* 通用信息 */
	CreatedBy *string `thrift:"created_by,100,optional" frugal:"100,optional,string" form:"created_by" json:"created_by,omitempty" query:"created_by"`
	CreatedAt *int64  `thrift:"created_at,101,optional" frugal:"101,optional,i64" json:"created_at" form:"created_at" query:"created_at"`
	UpdatedBy *string `thrift:"updated_by,102,optional" frugal:"102,optional,string" form:"updated_by" json:"updated_by,omitempty" query:"updated_by"`
	UpdatedAt *int64  `thrift:"updated_at,103,optional" frugal:"103,optional,i64" json:"updated_at" form:"updated_at" query:"updated_at"`
	/* DTO 专用字段 */
	DataOmitted *bool `thrift:"data_omitted,150,optional" frugal:"150,optional,bool" form:"data_omitted" json:"data_omitted,omitempty" query:"data_omitted"`
}

func NewDatasetItem() *DatasetItem {
	return &DatasetItem{}
}

func (p *DatasetItem) InitDefault() {
}

var DatasetItem_ID_DEFAULT int64

func (p *DatasetItem) GetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetID() {
		return DatasetItem_ID_DEFAULT
	}
	return *p.ID
}

var DatasetItem_AppID_DEFAULT int32

func (p *DatasetItem) GetAppID() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetAppID() {
		return DatasetItem_AppID_DEFAULT
	}
	return *p.AppID
}

var DatasetItem_SpaceID_DEFAULT int64

func (p *DatasetItem) GetSpaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetSpaceID() {
		return DatasetItem_SpaceID_DEFAULT
	}
	return *p.SpaceID
}

var DatasetItem_DatasetID_DEFAULT int64

func (p *DatasetItem) GetDatasetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetDatasetID() {
		return DatasetItem_DatasetID_DEFAULT
	}
	return *p.DatasetID
}

var DatasetItem_SchemaID_DEFAULT int64

func (p *DatasetItem) GetSchemaID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetSchemaID() {
		return DatasetItem_SchemaID_DEFAULT
	}
	return *p.SchemaID
}

var DatasetItem_ItemID_DEFAULT int64

func (p *DatasetItem) GetItemID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetItemID() {
		return DatasetItem_ItemID_DEFAULT
	}
	return *p.ItemID
}

var DatasetItem_ItemKey_DEFAULT string

func (p *DatasetItem) GetItemKey() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetItemKey() {
		return DatasetItem_ItemKey_DEFAULT
	}
	return *p.ItemKey
}

var DatasetItem_Data_DEFAULT []*FieldData

func (p *DatasetItem) GetData() (v []*FieldData) {
	if p == nil {
		return
	}
	if !p.IsSetData() {
		return DatasetItem_Data_DEFAULT
	}
	return p.Data
}

var DatasetItem_RepeatedData_DEFAULT []*ItemData

func (p *DatasetItem) GetRepeatedData() (v []*ItemData) {
	if p == nil {
		return
	}
	if !p.IsSetRepeatedData() {
		return DatasetItem_RepeatedData_DEFAULT
	}
	return p.RepeatedData
}

var DatasetItem_CreatedBy_DEFAULT string

func (p *DatasetItem) GetCreatedBy() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetCreatedBy() {
		return DatasetItem_CreatedBy_DEFAULT
	}
	return *p.CreatedBy
}

var DatasetItem_CreatedAt_DEFAULT int64

func (p *DatasetItem) GetCreatedAt() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetCreatedAt() {
		return DatasetItem_CreatedAt_DEFAULT
	}
	return *p.CreatedAt
}

var DatasetItem_UpdatedBy_DEFAULT string

func (p *DatasetItem) GetUpdatedBy() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetUpdatedBy() {
		return DatasetItem_UpdatedBy_DEFAULT
	}
	return *p.UpdatedBy
}

var DatasetItem_UpdatedAt_DEFAULT int64

func (p *DatasetItem) GetUpdatedAt() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetUpdatedAt() {
		return DatasetItem_UpdatedAt_DEFAULT
	}
	return *p.UpdatedAt
}

var DatasetItem_DataOmitted_DEFAULT bool

func (p *DatasetItem) GetDataOmitted() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetDataOmitted() {
		return DatasetItem_DataOmitted_DEFAULT
	}
	return *p.DataOmitted
}
func (p *DatasetItem) SetID(val *int64) {
	p.ID = val
}
func (p *DatasetItem) SetAppID(val *int32) {
	p.AppID = val
}
func (p *DatasetItem) SetSpaceID(val *int64) {
	p.SpaceID = val
}
func (p *DatasetItem) SetDatasetID(val *int64) {
	p.DatasetID = val
}
func (p *DatasetItem) SetSchemaID(val *int64) {
	p.SchemaID = val
}
func (p *DatasetItem) SetItemID(val *int64) {
	p.ItemID = val
}
func (p *DatasetItem) SetItemKey(val *string) {
	p.ItemKey = val
}
func (p *DatasetItem) SetData(val []*FieldData) {
	p.Data = val
}
func (p *DatasetItem) SetRepeatedData(val []*ItemData) {
	p.RepeatedData = val
}
func (p *DatasetItem) SetCreatedBy(val *string) {
	p.CreatedBy = val
}
func (p *DatasetItem) SetCreatedAt(val *int64) {
	p.CreatedAt = val
}
func (p *DatasetItem) SetUpdatedBy(val *string) {
	p.UpdatedBy = val
}
func (p *DatasetItem) SetUpdatedAt(val *int64) {
	p.UpdatedAt = val
}
func (p *DatasetItem) SetDataOmitted(val *bool) {
	p.DataOmitted = val
}

var fieldIDToName_DatasetItem = map[int16]string{
	1:   "id",
	2:   "app_id",
	3:   "space_id",
	4:   "dataset_id",
	5:   "schema_id",
	6:   "item_id",
	10:  "item_key",
	11:  "data",
	12:  "repeated_data",
	100: "created_by",
	101: "created_at",
	102: "updated_by",
	103: "updated_at",
	150: "data_omitted",
}

func (p *DatasetItem) IsSetID() bool {
	return p.ID != nil
}

func (p *DatasetItem) IsSetAppID() bool {
	return p.AppID != nil
}

func (p *DatasetItem) IsSetSpaceID() bool {
	return p.SpaceID != nil
}

func (p *DatasetItem) IsSetDatasetID() bool {
	return p.DatasetID != nil
}

func (p *DatasetItem) IsSetSchemaID() bool {
	return p.SchemaID != nil
}

func (p *DatasetItem) IsSetItemID() bool {
	return p.ItemID != nil
}

func (p *DatasetItem) IsSetItemKey() bool {
	return p.ItemKey != nil
}

func (p *DatasetItem) IsSetData() bool {
	return p.Data != nil
}

func (p *DatasetItem) IsSetRepeatedData() bool {
	return p.RepeatedData != nil
}

func (p *DatasetItem) IsSetCreatedBy() bool {
	return p.CreatedBy != nil
}

func (p *DatasetItem) IsSetCreatedAt() bool {
	return p.CreatedAt != nil
}

func (p *DatasetItem) IsSetUpdatedBy() bool {
	return p.UpdatedBy != nil
}

func (p *DatasetItem) IsSetUpdatedAt() bool {
	return p.UpdatedAt != nil
}

func (p *DatasetItem) IsSetDataOmitted() bool {
	return p.DataOmitted != nil
}

func (p *DatasetItem) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 102:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField102(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 103:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField103(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 150:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField150(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DatasetItem[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DatasetItem) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ID = _field
	return nil
}
func (p *DatasetItem) ReadField2(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AppID = _field
	return nil
}
func (p *DatasetItem) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SpaceID = _field
	return nil
}
func (p *DatasetItem) ReadField4(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DatasetID = _field
	return nil
}
func (p *DatasetItem) ReadField5(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SchemaID = _field
	return nil
}
func (p *DatasetItem) ReadField6(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ItemID = _field
	return nil
}
func (p *DatasetItem) ReadField10(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ItemKey = _field
	return nil
}
func (p *DatasetItem) ReadField11(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*FieldData, 0, size)
	values := make([]FieldData, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *DatasetItem) ReadField12(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ItemData, 0, size)
	values := make([]ItemData, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.RepeatedData = _field
	return nil
}
func (p *DatasetItem) ReadField100(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CreatedBy = _field
	return nil
}
func (p *DatasetItem) ReadField101(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CreatedAt = _field
	return nil
}
func (p *DatasetItem) ReadField102(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UpdatedBy = _field
	return nil
}
func (p *DatasetItem) ReadField103(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *DatasetItem) ReadField150(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DataOmitted = _field
	return nil
}

func (p *DatasetItem) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DatasetItem"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField102(oprot); err != nil {
			fieldId = 102
			goto WriteFieldError
		}
		if err = p.writeField103(oprot); err != nil {
			fieldId = 103
			goto WriteFieldError
		}
		if err = p.writeField150(oprot); err != nil {
			fieldId = 150
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DatasetItem) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *DatasetItem) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppID() {
		if err = oprot.WriteFieldBegin("app_id", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.AppID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *DatasetItem) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSpaceID() {
		if err = oprot.WriteFieldBegin("space_id", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.SpaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *DatasetItem) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDatasetID() {
		if err = oprot.WriteFieldBegin("dataset_id", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.DatasetID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *DatasetItem) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSchemaID() {
		if err = oprot.WriteFieldBegin("schema_id", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.SchemaID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *DatasetItem) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetItemID() {
		if err = oprot.WriteFieldBegin("item_id", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ItemID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *DatasetItem) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetItemKey() {
		if err = oprot.WriteFieldBegin("item_key", thrift.STRING, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ItemKey); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}
func (p *DatasetItem) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.LIST, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Data)); err != nil {
			return err
		}
		for _, v := range p.Data {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}
func (p *DatasetItem) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetRepeatedData() {
		if err = oprot.WriteFieldBegin("repeated_data", thrift.LIST, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RepeatedData)); err != nil {
			return err
		}
		for _, v := range p.RepeatedData {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}
func (p *DatasetItem) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedBy() {
		if err = oprot.WriteFieldBegin("created_by", thrift.STRING, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CreatedBy); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}
func (p *DatasetItem) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedAt() {
		if err = oprot.WriteFieldBegin("created_at", thrift.I64, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CreatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}
func (p *DatasetItem) writeField102(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdatedBy() {
		if err = oprot.WriteFieldBegin("updated_by", thrift.STRING, 102); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.UpdatedBy); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 end error: ", p), err)
}
func (p *DatasetItem) writeField103(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdatedAt() {
		if err = oprot.WriteFieldBegin("updated_at", thrift.I64, 103); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.UpdatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 103 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 103 end error: ", p), err)
}
func (p *DatasetItem) writeField150(oprot thrift.TProtocol) (err error) {
	if p.IsSetDataOmitted() {
		if err = oprot.WriteFieldBegin("data_omitted", thrift.BOOL, 150); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.DataOmitted); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 150 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 150 end error: ", p), err)
}

func (p *DatasetItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DatasetItem(%+v)", *p)

}

func (p *DatasetItem) DeepEqual(ano *DatasetItem) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field2DeepEqual(ano.AppID) {
		return false
	}
	if !p.Field3DeepEqual(ano.SpaceID) {
		return false
	}
	if !p.Field4DeepEqual(ano.DatasetID) {
		return false
	}
	if !p.Field5DeepEqual(ano.SchemaID) {
		return false
	}
	if !p.Field6DeepEqual(ano.ItemID) {
		return false
	}
	if !p.Field10DeepEqual(ano.ItemKey) {
		return false
	}
	if !p.Field11DeepEqual(ano.Data) {
		return false
	}
	if !p.Field12DeepEqual(ano.RepeatedData) {
		return false
	}
	if !p.Field100DeepEqual(ano.CreatedBy) {
		return false
	}
	if !p.Field101DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field102DeepEqual(ano.UpdatedBy) {
		return false
	}
	if !p.Field103DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field150DeepEqual(ano.DataOmitted) {
		return false
	}
	return true
}

func (p *DatasetItem) Field1DeepEqual(src *int64) bool {

	if p.ID == src {
		return true
	} else if p.ID == nil || src == nil {
		return false
	}
	if *p.ID != *src {
		return false
	}
	return true
}
func (p *DatasetItem) Field2DeepEqual(src *int32) bool {

	if p.AppID == src {
		return true
	} else if p.AppID == nil || src == nil {
		return false
	}
	if *p.AppID != *src {
		return false
	}
	return true
}
func (p *DatasetItem) Field3DeepEqual(src *int64) bool {

	if p.SpaceID == src {
		return true
	} else if p.SpaceID == nil || src == nil {
		return false
	}
	if *p.SpaceID != *src {
		return false
	}
	return true
}
func (p *DatasetItem) Field4DeepEqual(src *int64) bool {

	if p.DatasetID == src {
		return true
	} else if p.DatasetID == nil || src == nil {
		return false
	}
	if *p.DatasetID != *src {
		return false
	}
	return true
}
func (p *DatasetItem) Field5DeepEqual(src *int64) bool {

	if p.SchemaID == src {
		return true
	} else if p.SchemaID == nil || src == nil {
		return false
	}
	if *p.SchemaID != *src {
		return false
	}
	return true
}
func (p *DatasetItem) Field6DeepEqual(src *int64) bool {

	if p.ItemID == src {
		return true
	} else if p.ItemID == nil || src == nil {
		return false
	}
	if *p.ItemID != *src {
		return false
	}
	return true
}
func (p *DatasetItem) Field10DeepEqual(src *string) bool {

	if p.ItemKey == src {
		return true
	} else if p.ItemKey == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ItemKey, *src) != 0 {
		return false
	}
	return true
}
func (p *DatasetItem) Field11DeepEqual(src []*FieldData) bool {

	if len(p.Data) != len(src) {
		return false
	}
	for i, v := range p.Data {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *DatasetItem) Field12DeepEqual(src []*ItemData) bool {

	if len(p.RepeatedData) != len(src) {
		return false
	}
	for i, v := range p.RepeatedData {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *DatasetItem) Field100DeepEqual(src *string) bool {

	if p.CreatedBy == src {
		return true
	} else if p.CreatedBy == nil || src == nil {
		return false
	}
	if strings.Compare(*p.CreatedBy, *src) != 0 {
		return false
	}
	return true
}
func (p *DatasetItem) Field101DeepEqual(src *int64) bool {

	if p.CreatedAt == src {
		return true
	} else if p.CreatedAt == nil || src == nil {
		return false
	}
	if *p.CreatedAt != *src {
		return false
	}
	return true
}
func (p *DatasetItem) Field102DeepEqual(src *string) bool {

	if p.UpdatedBy == src {
		return true
	} else if p.UpdatedBy == nil || src == nil {
		return false
	}
	if strings.Compare(*p.UpdatedBy, *src) != 0 {
		return false
	}
	return true
}
func (p *DatasetItem) Field103DeepEqual(src *int64) bool {

	if p.UpdatedAt == src {
		return true
	} else if p.UpdatedAt == nil || src == nil {
		return false
	}
	if *p.UpdatedAt != *src {
		return false
	}
	return true
}
func (p *DatasetItem) Field150DeepEqual(src *bool) bool {

	if p.DataOmitted == src {
		return true
	} else if p.DataOmitted == nil || src == nil {
		return false
	}
	if *p.DataOmitted != *src {
		return false
	}
	return true
}

type ItemData struct {
	ID   *int64       `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id" form:"id" query:"id"`
	Data []*FieldData `thrift:"data,2,optional" frugal:"2,optional,list<FieldData>" form:"data" json:"data,omitempty" query:"data"`
}

func NewItemData() *ItemData {
	return &ItemData{}
}

func (p *ItemData) InitDefault() {
}

var ItemData_ID_DEFAULT int64

func (p *ItemData) GetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetID() {
		return ItemData_ID_DEFAULT
	}
	return *p.ID
}

var ItemData_Data_DEFAULT []*FieldData

func (p *ItemData) GetData() (v []*FieldData) {
	if p == nil {
		return
	}
	if !p.IsSetData() {
		return ItemData_Data_DEFAULT
	}
	return p.Data
}
func (p *ItemData) SetID(val *int64) {
	p.ID = val
}
func (p *ItemData) SetData(val []*FieldData) {
	p.Data = val
}

var fieldIDToName_ItemData = map[int16]string{
	1: "id",
	2: "data",
}

func (p *ItemData) IsSetID() bool {
	return p.ID != nil
}

func (p *ItemData) IsSetData() bool {
	return p.Data != nil
}

func (p *ItemData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ItemData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ItemData) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ID = _field
	return nil
}
func (p *ItemData) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*FieldData, 0, size)
	values := make([]FieldData, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Data = _field
	return nil
}

func (p *ItemData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ItemData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ItemData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ItemData) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Data)); err != nil {
			return err
		}
		for _, v := range p.Data {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ItemData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ItemData(%+v)", *p)

}

func (p *ItemData) DeepEqual(ano *ItemData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Data) {
		return false
	}
	return true
}

func (p *ItemData) Field1DeepEqual(src *int64) bool {

	if p.ID == src {
		return true
	} else if p.ID == nil || src == nil {
		return false
	}
	if *p.ID != *src {
		return false
	}
	return true
}
func (p *ItemData) Field2DeepEqual(src []*FieldData) bool {

	if len(p.Data) != len(src) {
		return false
	}
	for i, v := range p.Data {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type FieldData struct {
	Key *string `thrift:"key,1,optional" frugal:"1,optional,string" form:"key" json:"key,omitempty" query:"key"`
	// 字段名，写入 Item 时 key 与 name 提供其一即可，同时提供时以 key 为准
	Name        *string      `thrift:"name,2,optional" frugal:"2,optional,string" form:"name" json:"name,omitempty" query:"name"`
	ContentType *ContentType `thrift:"content_type,3,optional" frugal:"3,optional,ContentType" form:"content_type" json:"content_type,omitempty" query:"content_type"`
	Content     *string      `thrift:"content,4,optional" frugal:"4,optional,string" form:"content" json:"content,omitempty" query:"content"`
	// 外部存储信息
	Attachments []*ObjectStorage `thrift:"attachments,5,optional" frugal:"5,optional,list<ObjectStorage>" form:"attachments" json:"attachments,omitempty" query:"attachments"`
	// 数据的渲染格式
	Format *FieldDisplayFormat `thrift:"format,6,optional" frugal:"6,optional,FieldDisplayFormat" form:"format" json:"format,omitempty" query:"format"`
	// 图文混排时，图文内容
	Parts []*FieldData `thrift:"parts,7,optional" frugal:"7,optional,list<FieldData>" form:"parts" json:"parts,omitempty" query:"parts"`
}

func NewFieldData() *FieldData {
	return &FieldData{}
}

func (p *FieldData) InitDefault() {
}

var FieldData_Key_DEFAULT string

func (p *FieldData) GetKey() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetKey() {
		return FieldData_Key_DEFAULT
	}
	return *p.Key
}

var FieldData_Name_DEFAULT string

func (p *FieldData) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return FieldData_Name_DEFAULT
	}
	return *p.Name
}

var FieldData_ContentType_DEFAULT ContentType

func (p *FieldData) GetContentType() (v ContentType) {
	if p == nil {
		return
	}
	if !p.IsSetContentType() {
		return FieldData_ContentType_DEFAULT
	}
	return *p.ContentType
}

var FieldData_Content_DEFAULT string

func (p *FieldData) GetContent() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetContent() {
		return FieldData_Content_DEFAULT
	}
	return *p.Content
}

var FieldData_Attachments_DEFAULT []*ObjectStorage

func (p *FieldData) GetAttachments() (v []*ObjectStorage) {
	if p == nil {
		return
	}
	if !p.IsSetAttachments() {
		return FieldData_Attachments_DEFAULT
	}
	return p.Attachments
}

var FieldData_Format_DEFAULT FieldDisplayFormat

func (p *FieldData) GetFormat() (v FieldDisplayFormat) {
	if p == nil {
		return
	}
	if !p.IsSetFormat() {
		return FieldData_Format_DEFAULT
	}
	return *p.Format
}

var FieldData_Parts_DEFAULT []*FieldData

func (p *FieldData) GetParts() (v []*FieldData) {
	if p == nil {
		return
	}
	if !p.IsSetParts() {
		return FieldData_Parts_DEFAULT
	}
	return p.Parts
}
func (p *FieldData) SetKey(val *string) {
	p.Key = val
}
func (p *FieldData) SetName(val *string) {
	p.Name = val
}
func (p *FieldData) SetContentType(val *ContentType) {
	p.ContentType = val
}
func (p *FieldData) SetContent(val *string) {
	p.Content = val
}
func (p *FieldData) SetAttachments(val []*ObjectStorage) {
	p.Attachments = val
}
func (p *FieldData) SetFormat(val *FieldDisplayFormat) {
	p.Format = val
}
func (p *FieldData) SetParts(val []*FieldData) {
	p.Parts = val
}

var fieldIDToName_FieldData = map[int16]string{
	1: "key",
	2: "name",
	3: "content_type",
	4: "content",
	5: "attachments",
	6: "format",
	7: "parts",
}

func (p *FieldData) IsSetKey() bool {
	return p.Key != nil
}

func (p *FieldData) IsSetName() bool {
	return p.Name != nil
}

func (p *FieldData) IsSetContentType() bool {
	return p.ContentType != nil
}

func (p *FieldData) IsSetContent() bool {
	return p.Content != nil
}

func (p *FieldData) IsSetAttachments() bool {
	return p.Attachments != nil
}

func (p *FieldData) IsSetFormat() bool {
	return p.Format != nil
}

func (p *FieldData) IsSetParts() bool {
	return p.Parts != nil
}

func (p *FieldData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FieldData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FieldData) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Key = _field
	return nil
}
func (p *FieldData) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *FieldData) ReadField3(iprot thrift.TProtocol) error {

	var _field *ContentType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := ContentType(v)
		_field = &tmp
	}
	p.ContentType = _field
	return nil
}
func (p *FieldData) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Content = _field
	return nil
}
func (p *FieldData) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ObjectStorage, 0, size)
	values := make([]ObjectStorage, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Attachments = _field
	return nil
}
func (p *FieldData) ReadField6(iprot thrift.TProtocol) error {

	var _field *FieldDisplayFormat
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := FieldDisplayFormat(v)
		_field = &tmp
	}
	p.Format = _field
	return nil
}
func (p *FieldData) ReadField7(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*FieldData, 0, size)
	values := make([]FieldData, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Parts = _field
	return nil
}

func (p *FieldData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FieldData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FieldData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetKey() {
		if err = oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Key); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *FieldData) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *FieldData) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetContentType() {
		if err = oprot.WriteFieldBegin("content_type", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.ContentType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *FieldData) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetContent() {
		if err = oprot.WriteFieldBegin("content", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Content); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *FieldData) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetAttachments() {
		if err = oprot.WriteFieldBegin("attachments", thrift.LIST, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Attachments)); err != nil {
			return err
		}
		for _, v := range p.Attachments {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *FieldData) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetFormat() {
		if err = oprot.WriteFieldBegin("format", thrift.I32, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Format)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *FieldData) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetParts() {
		if err = oprot.WriteFieldBegin("parts", thrift.LIST, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Parts)); err != nil {
			return err
		}
		for _, v := range p.Parts {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *FieldData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FieldData(%+v)", *p)

}

func (p *FieldData) DeepEqual(ano *FieldData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Key) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.ContentType) {
		return false
	}
	if !p.Field4DeepEqual(ano.Content) {
		return false
	}
	if !p.Field5DeepEqual(ano.Attachments) {
		return false
	}
	if !p.Field6DeepEqual(ano.Format) {
		return false
	}
	if !p.Field7DeepEqual(ano.Parts) {
		return false
	}
	return true
}

func (p *FieldData) Field1DeepEqual(src *string) bool {

	if p.Key == src {
		return true
	} else if p.Key == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Key, *src) != 0 {
		return false
	}
	return true
}
func (p *FieldData) Field2DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *FieldData) Field3DeepEqual(src *ContentType) bool {

	if p.ContentType == src {
		return true
	} else if p.ContentType == nil || src == nil {
		return false
	}
	if *p.ContentType != *src {
		return false
	}
	return true
}
func (p *FieldData) Field4DeepEqual(src *string) bool {

	if p.Content == src {
		return true
	} else if p.Content == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Content, *src) != 0 {
		return false
	}
	return true
}
func (p *FieldData) Field5DeepEqual(src []*ObjectStorage) bool {

	if len(p.Attachments) != len(src) {
		return false
	}
	for i, v := range p.Attachments {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *FieldData) Field6DeepEqual(src *FieldDisplayFormat) bool {

	if p.Format == src {
		return true
	} else if p.Format == nil || src == nil {
		return false
	}
	if *p.Format != *src {
		return false
	}
	return true
}
func (p *FieldData) Field7DeepEqual(src []*FieldData) bool {

	if len(p.Parts) != len(src) {
		return false
	}
	for i, v := range p.Parts {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type ObjectStorage struct {
	Provider *StorageProvider `thrift:"provider,1,optional" frugal:"1,optional,StorageProvider" form:"provider" json:"provider,omitempty" query:"provider"`
	Name     *string          `thrift:"name,2,optional" frugal:"2,optional,string" form:"name" json:"name,omitempty" query:"name"`
	URI      *string          `thrift:"uri,3,optional" frugal:"3,optional,string" form:"uri" json:"uri,omitempty" query:"uri"`
	URL      *string          `thrift:"url,4,optional" frugal:"4,optional,string" form:"url" json:"url,omitempty" query:"url"`
	ThumbURL *string          `thrift:"thumb_url,5,optional" frugal:"5,optional,string" form:"thumb_url" json:"thumb_url,omitempty" query:"thumb_url"`
}

func NewObjectStorage() *ObjectStorage {
	return &ObjectStorage{}
}

func (p *ObjectStorage) InitDefault() {
}

var ObjectStorage_Provider_DEFAULT StorageProvider

func (p *ObjectStorage) GetProvider() (v StorageProvider) {
	if p == nil {
		return
	}
	if !p.IsSetProvider() {
		return ObjectStorage_Provider_DEFAULT
	}
	return *p.Provider
}

var ObjectStorage_Name_DEFAULT string

func (p *ObjectStorage) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return ObjectStorage_Name_DEFAULT
	}
	return *p.Name
}

var ObjectStorage_URI_DEFAULT string

func (p *ObjectStorage) GetURI() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetURI() {
		return ObjectStorage_URI_DEFAULT
	}
	return *p.URI
}

var ObjectStorage_URL_DEFAULT string

func (p *ObjectStorage) GetURL() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetURL() {
		return ObjectStorage_URL_DEFAULT
	}
	return *p.URL
}

var ObjectStorage_ThumbURL_DEFAULT string

func (p *ObjectStorage) GetThumbURL() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetThumbURL() {
		return ObjectStorage_ThumbURL_DEFAULT
	}
	return *p.ThumbURL
}
func (p *ObjectStorage) SetProvider(val *StorageProvider) {
	p.Provider = val
}
func (p *ObjectStorage) SetName(val *string) {
	p.Name = val
}
func (p *ObjectStorage) SetURI(val *string) {
	p.URI = val
}
func (p *ObjectStorage) SetURL(val *string) {
	p.URL = val
}
func (p *ObjectStorage) SetThumbURL(val *string) {
	p.ThumbURL = val
}

var fieldIDToName_ObjectStorage = map[int16]string{
	1: "provider",
	2: "name",
	3: "uri",
	4: "url",
	5: "thumb_url",
}

func (p *ObjectStorage) IsSetProvider() bool {
	return p.Provider != nil
}

func (p *ObjectStorage) IsSetName() bool {
	return p.Name != nil
}

func (p *ObjectStorage) IsSetURI() bool {
	return p.URI != nil
}

func (p *ObjectStorage) IsSetURL() bool {
	return p.URL != nil
}

func (p *ObjectStorage) IsSetThumbURL() bool {
	return p.ThumbURL != nil
}

func (p *ObjectStorage) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ObjectStorage[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ObjectStorage) ReadField1(iprot thrift.TProtocol) error {

	var _field *StorageProvider
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := StorageProvider(v)
		_field = &tmp
	}
	p.Provider = _field
	return nil
}
func (p *ObjectStorage) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *ObjectStorage) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.URI = _field
	return nil
}
func (p *ObjectStorage) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.URL = _field
	return nil
}
func (p *ObjectStorage) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ThumbURL = _field
	return nil
}

func (p *ObjectStorage) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ObjectStorage"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ObjectStorage) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetProvider() {
		if err = oprot.WriteFieldBegin("provider", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Provider)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ObjectStorage) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ObjectStorage) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetURI() {
		if err = oprot.WriteFieldBegin("uri", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.URI); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ObjectStorage) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetURL() {
		if err = oprot.WriteFieldBegin("url", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.URL); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *ObjectStorage) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetThumbURL() {
		if err = oprot.WriteFieldBegin("thumb_url", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ThumbURL); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ObjectStorage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ObjectStorage(%+v)", *p)

}

func (p *ObjectStorage) DeepEqual(ano *ObjectStorage) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Provider) {
		return false
	}
	if !p.Field2DeepEqual(ano.Name) {
		return false
	}
	if !p.Field3DeepEqual(ano.URI) {
		return false
	}
	if !p.Field4DeepEqual(ano.URL) {
		return false
	}
	if !p.Field5DeepEqual(ano.ThumbURL) {
		return false
	}
	return true
}

func (p *ObjectStorage) Field1DeepEqual(src *StorageProvider) bool {

	if p.Provider == src {
		return true
	} else if p.Provider == nil || src == nil {
		return false
	}
	if *p.Provider != *src {
		return false
	}
	return true
}
func (p *ObjectStorage) Field2DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *ObjectStorage) Field3DeepEqual(src *string) bool {

	if p.URI == src {
		return true
	} else if p.URI == nil || src == nil {
		return false
	}
	if strings.Compare(*p.URI, *src) != 0 {
		return false
	}
	return true
}
func (p *ObjectStorage) Field4DeepEqual(src *string) bool {

	if p.URL == src {
		return true
	} else if p.URL == nil || src == nil {
		return false
	}
	if strings.Compare(*p.URL, *src) != 0 {
		return false
	}
	return true
}
func (p *ObjectStorage) Field5DeepEqual(src *string) bool {

	if p.ThumbURL == src {
		return true
	} else if p.ThumbURL == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ThumbURL, *src) != 0 {
		return false
	}
	return true
}

type OrderBy struct {
	// 排序字段
	Field *string `thrift:"field,1,optional" frugal:"1,optional,string" form:"field" json:"field,omitempty" query:"field"`
	// 升序，默认倒序
	IsAsc *bool `thrift:"is_asc,2,optional" frugal:"2,optional,bool" form:"is_asc" json:"is_asc,omitempty" query:"is_asc"`
}

func NewOrderBy() *OrderBy {
	return &OrderBy{}
}

func (p *OrderBy) InitDefault() {
}

var OrderBy_Field_DEFAULT string

func (p *OrderBy) GetField() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetField() {
		return OrderBy_Field_DEFAULT
	}
	return *p.Field
}

var OrderBy_IsAsc_DEFAULT bool

func (p *OrderBy) GetIsAsc() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetIsAsc() {
		return OrderBy_IsAsc_DEFAULT
	}
	return *p.IsAsc
}
func (p *OrderBy) SetField(val *string) {
	p.Field = val
}
func (p *OrderBy) SetIsAsc(val *bool) {
	p.IsAsc = val
}

var fieldIDToName_OrderBy = map[int16]string{
	1: "field",
	2: "is_asc",
}

func (p *OrderBy) IsSetField() bool {
	return p.Field != nil
}

func (p *OrderBy) IsSetIsAsc() bool {
	return p.IsAsc != nil
}

func (p *OrderBy) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_OrderBy[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *OrderBy) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Field = _field
	return nil
}
func (p *OrderBy) ReadField2(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsAsc = _field
	return nil
}

func (p *OrderBy) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("OrderBy"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *OrderBy) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetField() {
		if err = oprot.WriteFieldBegin("field", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Field); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *OrderBy) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsAsc() {
		if err = oprot.WriteFieldBegin("is_asc", thrift.BOOL, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsAsc); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *OrderBy) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderBy(%+v)", *p)

}

func (p *OrderBy) DeepEqual(ano *OrderBy) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Field) {
		return false
	}
	if !p.Field2DeepEqual(ano.IsAsc) {
		return false
	}
	return true
}

func (p *OrderBy) Field1DeepEqual(src *string) bool {

	if p.Field == src {
		return true
	} else if p.Field == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Field, *src) != 0 {
		return false
	}
	return true
}
func (p *OrderBy) Field2DeepEqual(src *bool) bool {

	if p.IsAsc == src {
		return true
	} else if p.IsAsc == nil || src == nil {
		return false
	}
	if *p.IsAsc != *src {
		return false
	}
	return true
}

type FileUploadToken struct {
	AccessKeyID     *string `thrift:"access_key_id,1,optional" frugal:"1,optional,string" form:"access_key_id" json:"access_key_id,omitempty" query:"access_key_id"`
	SecretAccessKey *string `thrift:"secret_access_key,2,optional" frugal:"2,optional,string" form:"secret_access_key" json:"secret_access_key,omitempty" query:"secret_access_key"`
	SessionToken    *string `thrift:"session_token,3,optional" frugal:"3,optional,string" form:"session_token" json:"session_token,omitempty" query:"session_token"`
	ExpiredTime     *string `thrift:"expired_time,4,optional" frugal:"4,optional,string" form:"expired_time" json:"expired_time,omitempty" query:"expired_time"`
	CurrentTime     *string `thrift:"current_time,5,optional" frugal:"5,optional,string" form:"current_time" json:"current_time,omitempty" query:"current_time"`
}

func NewFileUploadToken() *FileUploadToken {
	return &FileUploadToken{}
}

func (p *FileUploadToken) InitDefault() {
}

var FileUploadToken_AccessKeyID_DEFAULT string

func (p *FileUploadToken) GetAccessKeyID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetAccessKeyID() {
		return FileUploadToken_AccessKeyID_DEFAULT
	}
	return *p.AccessKeyID
}

var FileUploadToken_SecretAccessKey_DEFAULT string

func (p *FileUploadToken) GetSecretAccessKey() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetSecretAccessKey() {
		return FileUploadToken_SecretAccessKey_DEFAULT
	}
	return *p.SecretAccessKey
}

var FileUploadToken_SessionToken_DEFAULT string

func (p *FileUploadToken) GetSessionToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetSessionToken() {
		return FileUploadToken_SessionToken_DEFAULT
	}
	return *p.SessionToken
}

var FileUploadToken_ExpiredTime_DEFAULT string

func (p *FileUploadToken) GetExpiredTime() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetExpiredTime() {
		return FileUploadToken_ExpiredTime_DEFAULT
	}
	return *p.ExpiredTime
}

var FileUploadToken_CurrentTime_DEFAULT string

func (p *FileUploadToken) GetCurrentTime() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetCurrentTime() {
		return FileUploadToken_CurrentTime_DEFAULT
	}
	return *p.CurrentTime
}
func (p *FileUploadToken) SetAccessKeyID(val *string) {
	p.AccessKeyID = val
}
func (p *FileUploadToken) SetSecretAccessKey(val *string) {
	p.SecretAccessKey = val
}
func (p *FileUploadToken) SetSessionToken(val *string) {
	p.SessionToken = val
}
func (p *FileUploadToken) SetExpiredTime(val *string) {
	p.ExpiredTime = val
}
func (p *FileUploadToken) SetCurrentTime(val *string) {
	p.CurrentTime = val
}

var fieldIDToName_FileUploadToken = map[int16]string{
	1: "access_key_id",
	2: "secret_access_key",
	3: "session_token",
	4: "expired_time",
	5: "current_time",
}

func (p *FileUploadToken) IsSetAccessKeyID() bool {
	return p.AccessKeyID != nil
}

func (p *FileUploadToken) IsSetSecretAccessKey() bool {
	return p.SecretAccessKey != nil
}

func (p *FileUploadToken) IsSetSessionToken() bool {
	return p.SessionToken != nil
}

func (p *FileUploadToken) IsSetExpiredTime() bool {
	return p.ExpiredTime != nil
}

func (p *FileUploadToken) IsSetCurrentTime() bool {
	return p.CurrentTime != nil
}

func (p *FileUploadToken) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FileUploadToken[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FileUploadToken) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AccessKeyID = _field
	return nil
}
func (p *FileUploadToken) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SecretAccessKey = _field
	return nil
}
func (p *FileUploadToken) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SessionToken = _field
	return nil
}
func (p *FileUploadToken) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ExpiredTime = _field
	return nil
}
func (p *FileUploadToken) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CurrentTime = _field
	return nil
}

func (p *FileUploadToken) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FileUploadToken"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FileUploadToken) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAccessKeyID() {
		if err = oprot.WriteFieldBegin("access_key_id", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.AccessKeyID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *FileUploadToken) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSecretAccessKey() {
		if err = oprot.WriteFieldBegin("secret_access_key", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.SecretAccessKey); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *FileUploadToken) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSessionToken() {
		if err = oprot.WriteFieldBegin("session_token", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.SessionToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *FileUploadToken) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetExpiredTime() {
		if err = oprot.WriteFieldBegin("expired_time", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ExpiredTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *FileUploadToken) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetCurrentTime() {
		if err = oprot.WriteFieldBegin("current_time", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CurrentTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *FileUploadToken) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FileUploadToken(%+v)", *p)

}

func (p *FileUploadToken) DeepEqual(ano *FileUploadToken) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AccessKeyID) {
		return false
	}
	if !p.Field2DeepEqual(ano.SecretAccessKey) {
		return false
	}
	if !p.Field3DeepEqual(ano.SessionToken) {
		return false
	}
	if !p.Field4DeepEqual(ano.ExpiredTime) {
		return false
	}
	if !p.Field5DeepEqual(ano.CurrentTime) {
		return false
	}
	return true
}

func (p *FileUploadToken) Field1DeepEqual(src *string) bool {

	if p.AccessKeyID == src {
		return true
	} else if p.AccessKeyID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.AccessKeyID, *src) != 0 {
		return false
	}
	return true
}
func (p *FileUploadToken) Field2DeepEqual(src *string) bool {

	if p.SecretAccessKey == src {
		return true
	} else if p.SecretAccessKey == nil || src == nil {
		return false
	}
	if strings.Compare(*p.SecretAccessKey, *src) != 0 {
		return false
	}
	return true
}
func (p *FileUploadToken) Field3DeepEqual(src *string) bool {

	if p.SessionToken == src {
		return true
	} else if p.SessionToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.SessionToken, *src) != 0 {
		return false
	}
	return true
}
func (p *FileUploadToken) Field4DeepEqual(src *string) bool {

	if p.ExpiredTime == src {
		return true
	} else if p.ExpiredTime == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ExpiredTime, *src) != 0 {
		return false
	}
	return true
}
func (p *FileUploadToken) Field5DeepEqual(src *string) bool {

	if p.CurrentTime == src {
		return true
	} else if p.CurrentTime == nil || src == nil {
		return false
	}
	if strings.Compare(*p.CurrentTime, *src) != 0 {
		return false
	}
	return true
}

type ItemErrorDetail struct {
	Message *string `thrift:"message,1,optional" frugal:"1,optional,string" form:"message" json:"message,omitempty" query:"message"`
	// 单条错误数据在输入数据中的索引。从 0 开始，下同
	Index *int32 `thrift:"index,2,optional" frugal:"2,optional,i32" form:"index" json:"index,omitempty" query:"index"`
	// [startIndex, endIndex] 表示区间错误范围, 如 ExceedDatasetCapacity 错误时
	StartIndex *int32 `thrift:"start_index,3,optional" frugal:"3,optional,i32" form:"start_index" json:"start_index,omitempty" query:"start_index"`
	EndIndex   *int32 `thrift:"end_index,4,optional" frugal:"4,optional,i32" form:"end_index" json:"end_index,omitempty" query:"end_index"`
}

func NewItemErrorDetail() *ItemErrorDetail {
	return &ItemErrorDetail{}
}

func (p *ItemErrorDetail) InitDefault() {
}

var ItemErrorDetail_Message_DEFAULT string

func (p *ItemErrorDetail) GetMessage() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMessage() {
		return ItemErrorDetail_Message_DEFAULT
	}
	return *p.Message
}

var ItemErrorDetail_Index_DEFAULT int32

func (p *ItemErrorDetail) GetIndex() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetIndex() {
		return ItemErrorDetail_Index_DEFAULT
	}
	return *p.Index
}

var ItemErrorDetail_StartIndex_DEFAULT int32

func (p *ItemErrorDetail) GetStartIndex() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetStartIndex() {
		return ItemErrorDetail_StartIndex_DEFAULT
	}
	return *p.StartIndex
}

var ItemErrorDetail_EndIndex_DEFAULT int32

func (p *ItemErrorDetail) GetEndIndex() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetEndIndex() {
		return ItemErrorDetail_EndIndex_DEFAULT
	}
	return *p.EndIndex
}
func (p *ItemErrorDetail) SetMessage(val *string) {
	p.Message = val
}
func (p *ItemErrorDetail) SetIndex(val *int32) {
	p.Index = val
}
func (p *ItemErrorDetail) SetStartIndex(val *int32) {
	p.StartIndex = val
}
func (p *ItemErrorDetail) SetEndIndex(val *int32) {
	p.EndIndex = val
}

var fieldIDToName_ItemErrorDetail = map[int16]string{
	1: "message",
	2: "index",
	3: "start_index",
	4: "end_index",
}

func (p *ItemErrorDetail) IsSetMessage() bool {
	return p.Message != nil
}

func (p *ItemErrorDetail) IsSetIndex() bool {
	return p.Index != nil
}

func (p *ItemErrorDetail) IsSetStartIndex() bool {
	return p.StartIndex != nil
}

func (p *ItemErrorDetail) IsSetEndIndex() bool {
	return p.EndIndex != nil
}

func (p *ItemErrorDetail) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ItemErrorDetail[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ItemErrorDetail) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Message = _field
	return nil
}
func (p *ItemErrorDetail) ReadField2(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Index = _field
	return nil
}
func (p *ItemErrorDetail) ReadField3(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.StartIndex = _field
	return nil
}
func (p *ItemErrorDetail) ReadField4(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EndIndex = _field
	return nil
}

func (p *ItemErrorDetail) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ItemErrorDetail"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ItemErrorDetail) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err = oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Message); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ItemErrorDetail) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIndex() {
		if err = oprot.WriteFieldBegin("index", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Index); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ItemErrorDetail) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartIndex() {
		if err = oprot.WriteFieldBegin("start_index", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.StartIndex); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ItemErrorDetail) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndIndex() {
		if err = oprot.WriteFieldBegin("end_index", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.EndIndex); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ItemErrorDetail) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ItemErrorDetail(%+v)", *p)

}

func (p *ItemErrorDetail) DeepEqual(ano *ItemErrorDetail) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Message) {
		return false
	}
	if !p.Field2DeepEqual(ano.Index) {
		return false
	}
	if !p.Field3DeepEqual(ano.StartIndex) {
		return false
	}
	if !p.Field4DeepEqual(ano.EndIndex) {
		return false
	}
	return true
}

func (p *ItemErrorDetail) Field1DeepEqual(src *string) bool {

	if p.Message == src {
		return true
	} else if p.Message == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Message, *src) != 0 {
		return false
	}
	return true
}
func (p *ItemErrorDetail) Field2DeepEqual(src *int32) bool {

	if p.Index == src {
		return true
	} else if p.Index == nil || src == nil {
		return false
	}
	if *p.Index != *src {
		return false
	}
	return true
}
func (p *ItemErrorDetail) Field3DeepEqual(src *int32) bool {

	if p.StartIndex == src {
		return true
	} else if p.StartIndex == nil || src == nil {
		return false
	}
	if *p.StartIndex != *src {
		return false
	}
	return true
}
func (p *ItemErrorDetail) Field4DeepEqual(src *int32) bool {

	if p.EndIndex == src {
		return true
	} else if p.EndIndex == nil || src == nil {
		return false
	}
	if *p.EndIndex != *src {
		return false
	}
	return true
}

type ItemErrorGroup struct {
	Type    *ItemErrorType `thrift:"type,1,optional" frugal:"1,optional,ItemErrorType" form:"type" json:"type,omitempty" query:"type"`
	Summary *string        `thrift:"summary,2,optional" frugal:"2,optional,string" form:"summary" json:"summary,omitempty" query:"summary"`
	// 错误条数
	ErrorCount *int32 `thrift:"error_count,3,optional" frugal:"3,optional,i32" form:"error_count" json:"error_count,omitempty" query:"error_count"`
	// 批量写入时，每类错误至多提供 5 个错误详情；导入任务，至多提供 10 个错误详情
	Details []*ItemErrorDetail `thrift:"details,4,optional" frugal:"4,optional,list<ItemErrorDetail>" form:"details" json:"details,omitempty" query:"details"`
}

func NewItemErrorGroup() *ItemErrorGroup {
	return &ItemErrorGroup{}
}

func (p *ItemErrorGroup) InitDefault() {
}

var ItemErrorGroup_Type_DEFAULT ItemErrorType

func (p *ItemErrorGroup) GetType() (v ItemErrorType) {
	if p == nil {
		return
	}
	if !p.IsSetType() {
		return ItemErrorGroup_Type_DEFAULT
	}
	return *p.Type
}

var ItemErrorGroup_Summary_DEFAULT string

func (p *ItemErrorGroup) GetSummary() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetSummary() {
		return ItemErrorGroup_Summary_DEFAULT
	}
	return *p.Summary
}

var ItemErrorGroup_ErrorCount_DEFAULT int32

func (p *ItemErrorGroup) GetErrorCount() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetErrorCount() {
		return ItemErrorGroup_ErrorCount_DEFAULT
	}
	return *p.ErrorCount
}

var ItemErrorGroup_Details_DEFAULT []*ItemErrorDetail

func (p *ItemErrorGroup) GetDetails() (v []*ItemErrorDetail) {
	if p == nil {
		return
	}
	if !p.IsSetDetails() {
		return ItemErrorGroup_Details_DEFAULT
	}
	return p.Details
}
func (p *ItemErrorGroup) SetType(val *ItemErrorType) {
	p.Type = val
}
func (p *ItemErrorGroup) SetSummary(val *string) {
	p.Summary = val
}
func (p *ItemErrorGroup) SetErrorCount(val *int32) {
	p.ErrorCount = val
}
func (p *ItemErrorGroup) SetDetails(val []*ItemErrorDetail) {
	p.Details = val
}

var fieldIDToName_ItemErrorGroup = map[int16]string{
	1: "type",
	2: "summary",
	3: "error_count",
	4: "details",
}

func (p *ItemErrorGroup) IsSetType() bool {
	return p.Type != nil
}

func (p *ItemErrorGroup) IsSetSummary() bool {
	return p.Summary != nil
}

func (p *ItemErrorGroup) IsSetErrorCount() bool {
	return p.ErrorCount != nil
}

func (p *ItemErrorGroup) IsSetDetails() bool {
	return p.Details != nil
}

func (p *ItemErrorGroup) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ItemErrorGroup[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ItemErrorGroup) ReadField1(iprot thrift.TProtocol) error {

	var _field *ItemErrorType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := ItemErrorType(v)
		_field = &tmp
	}
	p.Type = _field
	return nil
}
func (p *ItemErrorGroup) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Summary = _field
	return nil
}
func (p *ItemErrorGroup) ReadField3(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ErrorCount = _field
	return nil
}
func (p *ItemErrorGroup) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ItemErrorDetail, 0, size)
	values := make([]ItemErrorDetail, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Details = _field
	return nil
}

func (p *ItemErrorGroup) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ItemErrorGroup"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ItemErrorGroup) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("type", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.Type)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ItemErrorGroup) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSummary() {
		if err = oprot.WriteFieldBegin("summary", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Summary); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ItemErrorGroup) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetErrorCount() {
		if err = oprot.WriteFieldBegin("error_count", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.ErrorCount); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ItemErrorGroup) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetDetails() {
		if err = oprot.WriteFieldBegin("details", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Details)); err != nil {
			return err
		}
		for _, v := range p.Details {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ItemErrorGroup) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ItemErrorGroup(%+v)", *p)

}

func (p *ItemErrorGroup) DeepEqual(ano *ItemErrorGroup) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Type) {
		return false
	}
	if !p.Field2DeepEqual(ano.Summary) {
		return false
	}
	if !p.Field3DeepEqual(ano.ErrorCount) {
		return false
	}
	if !p.Field4DeepEqual(ano.Details) {
		return false
	}
	return true
}

func (p *ItemErrorGroup) Field1DeepEqual(src *ItemErrorType) bool {

	if p.Type == src {
		return true
	} else if p.Type == nil || src == nil {
		return false
	}
	if *p.Type != *src {
		return false
	}
	return true
}
func (p *ItemErrorGroup) Field2DeepEqual(src *string) bool {

	if p.Summary == src {
		return true
	} else if p.Summary == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Summary, *src) != 0 {
		return false
	}
	return true
}
func (p *ItemErrorGroup) Field3DeepEqual(src *int32) bool {

	if p.ErrorCount == src {
		return true
	} else if p.ErrorCount == nil || src == nil {
		return false
	}
	if *p.ErrorCount != *src {
		return false
	}
	return true
}
func (p *ItemErrorGroup) Field4DeepEqual(src []*ItemErrorDetail) bool {

	if len(p.Details) != len(src) {
		return false
	}
	for i, v := range p.Details {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
