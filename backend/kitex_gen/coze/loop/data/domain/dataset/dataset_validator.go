// Code generated by Validator v0.2.6. DO NOT EDIT.

package dataset

import (
	"bytes"
	"fmt"
	"reflect"
	"regexp"
	"strings"
	"time"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
	_ = (*bytes.Buffer)(nil)
	_ = (*strings.Builder)(nil)
	_ = reflect.Type(nil)
	_ = (*regexp.Regexp)(nil)
	_ = time.Nanosecond
)

func (p *DatasetFeatures) IsValid() error {
	return nil
}
func (p *Dataset) IsValid() error {
	if p.Schema != nil {
		if err := p.Schema.IsValid(); err != nil {
			return fmt.Errorf("field Schema not valid, %w", err)
		}
	}
	if p.Spec != nil {
		if err := p.Spec.IsValid(); err != nil {
			return fmt.Errorf("field Spec not valid, %w", err)
		}
	}
	if p.Features != nil {
		if err := p.Features.IsValid(); err != nil {
			return fmt.Errorf("field Features not valid, %w", err)
		}
	}
	return nil
}
func (p *DatasetSpec) IsValid() error {
	return nil
}
func (p *DatasetVersion) IsValid() error {
	return nil
}
func (p *DatasetSchema) IsValid() error {
	return nil
}
func (p *FieldSchema) IsValid() error {
	if p.Name != nil {
		if len(*p.Name) < int(1) {
			return fmt.Errorf("field Name min_len rule failed, current value: %d", len(*p.Name))
		}
		if len(*p.Name) > int(128) {
			return fmt.Errorf("field Name max_len rule failed, current value: %d", len(*p.Name))
		}
	}
	if p.Description != nil {
		if len(*p.Description) > int(1024) {
			return fmt.Errorf("field Description max_len rule failed, current value: %d", len(*p.Description))
		}
	}
	if p.ContentType == nil {
		return fmt.Errorf("field ContentType not_nil rule failed")
	}
	if p.ContentType.String() == "<UNSET>" {
		return fmt.Errorf("field ContentType defined_only rule failed")
	}
	if p.DefaultFormat != nil {
		if p.DefaultFormat.String() == "<UNSET>" {
			return fmt.Errorf("field DefaultFormat defined_only rule failed")
		}
	}
	if p.MultiModelSpec != nil {
		if err := p.MultiModelSpec.IsValid(); err != nil {
			return fmt.Errorf("field MultiModelSpec not valid, %w", err)
		}
	}
	return nil
}
func (p *FieldTransformationConfig) IsValid() error {
	return nil
}
func (p *MultiModalSpec) IsValid() error {
	return nil
}
func (p *DatasetItem) IsValid() error {
	if p.ItemKey != nil {
		if len(*p.ItemKey) > int(255) {
			return fmt.Errorf("field ItemKey max_len rule failed, current value: %d", len(*p.ItemKey))
		}
	}
	for i := 0; i < len(p.Data); i++ {
		_elem := p.Data[i]
		if _elem == nil {
			return fmt.Errorf("field _elem not_nil rule failed")
		}
		if err := _elem.IsValid(); err != nil {
			return fmt.Errorf("field _elem not valid, %w", err)
		}
	}
	for i := 0; i < len(p.RepeatedData); i++ {
		_elem1 := p.RepeatedData[i]
		if _elem1 == nil {
			return fmt.Errorf("field _elem1 not_nil rule failed")
		}
		if err := _elem1.IsValid(); err != nil {
			return fmt.Errorf("field _elem1 not valid, %w", err)
		}
	}
	return nil
}
func (p *ItemData) IsValid() error {
	return nil
}
func (p *FieldData) IsValid() error {
	return nil
}
func (p *ObjectStorage) IsValid() error {
	if p.Provider != nil {
		if p.Provider.String() == "<UNSET>" {
			return fmt.Errorf("field Provider defined_only rule failed")
		}
	}
	if p.URI != nil {
		if len(*p.URI) < int(1) {
			return fmt.Errorf("field URI min_len rule failed, current value: %d", len(*p.URI))
		}
	}
	return nil
}
func (p *OrderBy) IsValid() error {
	return nil
}
func (p *FileUploadToken) IsValid() error {
	return nil
}
func (p *ItemErrorDetail) IsValid() error {
	return nil
}
func (p *ItemErrorGroup) IsValid() error {
	return nil
}
