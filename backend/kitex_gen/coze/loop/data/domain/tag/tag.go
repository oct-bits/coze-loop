// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package tag

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/data/domain/common"
	"strings"
)

const (
	TagStatusActive = "active"

	TagStatusInactive = "inactive"

	TagStatusDeprecated = "deprecated"

	TagTypeTag = "tag"

	TagTypeOption = "option"

	OperationTypeCreate = "create"

	OperationTypeUpdate = "update"

	OperationTypeDelete = "delete"

	ChangeTargetTypeTag = "tag"

	ChangeTargetTypeTagName = "tag_name"

	ChangeTargetTypeTagDescription = "tag_description"

	ChangeTargetTypeTagStatus = "tag_status"

	ChangeTargetTypeTagType = "tag_type"

	ChangeTargetTypeTagContentType = "tag_content_type"

	ChangeTargetTypeTagValueName = "tag_value_name"

	ChangeTargetTypeTagValueStatus = "tag_value_status"

	TagDomainTypeData = "data"

	TagDomainTypeObserve = "observe"

	TagDomainTypeEvaluation = "evaluation"

	TagContentTypeCategorical = "categorical"

	TagContentTypeBoolean = "boolean"

	TagContentTypeContinuousNumber = "continuous_number"

	TagContentTypeFreeText = "free_text"
)

type TagStatus = string

type TagType = string

type OperationType = string

type ChangeTargetType = string

type TagDomainType = string

type TagContentType = string

type TagContentSpec struct {
	ContinuousNumberSpec *ContinuousNumberSpec `thrift:"continuous_number_spec,1,optional" frugal:"1,optional,ContinuousNumberSpec" form:"continuous_number_spec" json:"continuous_number_spec,omitempty" query:"continuous_number_spec"`
}

func NewTagContentSpec() *TagContentSpec {
	return &TagContentSpec{}
}

func (p *TagContentSpec) InitDefault() {
}

var TagContentSpec_ContinuousNumberSpec_DEFAULT *ContinuousNumberSpec

func (p *TagContentSpec) GetContinuousNumberSpec() (v *ContinuousNumberSpec) {
	if p == nil {
		return
	}
	if !p.IsSetContinuousNumberSpec() {
		return TagContentSpec_ContinuousNumberSpec_DEFAULT
	}
	return p.ContinuousNumberSpec
}
func (p *TagContentSpec) SetContinuousNumberSpec(val *ContinuousNumberSpec) {
	p.ContinuousNumberSpec = val
}

var fieldIDToName_TagContentSpec = map[int16]string{
	1: "continuous_number_spec",
}

func (p *TagContentSpec) IsSetContinuousNumberSpec() bool {
	return p.ContinuousNumberSpec != nil
}

func (p *TagContentSpec) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TagContentSpec[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TagContentSpec) ReadField1(iprot thrift.TProtocol) error {
	_field := NewContinuousNumberSpec()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ContinuousNumberSpec = _field
	return nil
}

func (p *TagContentSpec) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TagContentSpec"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TagContentSpec) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetContinuousNumberSpec() {
		if err = oprot.WriteFieldBegin("continuous_number_spec", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ContinuousNumberSpec.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TagContentSpec) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TagContentSpec(%+v)", *p)

}

func (p *TagContentSpec) DeepEqual(ano *TagContentSpec) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ContinuousNumberSpec) {
		return false
	}
	return true
}

func (p *TagContentSpec) Field1DeepEqual(src *ContinuousNumberSpec) bool {

	if !p.ContinuousNumberSpec.DeepEqual(src) {
		return false
	}
	return true
}

type ContinuousNumberSpec struct {
	MinValue            *float64 `thrift:"min_value,1,optional" frugal:"1,optional,double" form:"min_value" json:"min_value,omitempty" query:"min_value"`
	MinValueDescription *string  `thrift:"min_value_description,2,optional" frugal:"2,optional,string" form:"min_value_description" json:"min_value_description,omitempty" query:"min_value_description"`
	MaxValue            *float64 `thrift:"max_value,3,optional" frugal:"3,optional,double" form:"max_value" json:"max_value,omitempty" query:"max_value"`
	MaxValueDescription *string  `thrift:"max_value_description,4,optional" frugal:"4,optional,string" form:"max_value_description" json:"max_value_description,omitempty" query:"max_value_description"`
}

func NewContinuousNumberSpec() *ContinuousNumberSpec {
	return &ContinuousNumberSpec{}
}

func (p *ContinuousNumberSpec) InitDefault() {
}

var ContinuousNumberSpec_MinValue_DEFAULT float64

func (p *ContinuousNumberSpec) GetMinValue() (v float64) {
	if p == nil {
		return
	}
	if !p.IsSetMinValue() {
		return ContinuousNumberSpec_MinValue_DEFAULT
	}
	return *p.MinValue
}

var ContinuousNumberSpec_MinValueDescription_DEFAULT string

func (p *ContinuousNumberSpec) GetMinValueDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMinValueDescription() {
		return ContinuousNumberSpec_MinValueDescription_DEFAULT
	}
	return *p.MinValueDescription
}

var ContinuousNumberSpec_MaxValue_DEFAULT float64

func (p *ContinuousNumberSpec) GetMaxValue() (v float64) {
	if p == nil {
		return
	}
	if !p.IsSetMaxValue() {
		return ContinuousNumberSpec_MaxValue_DEFAULT
	}
	return *p.MaxValue
}

var ContinuousNumberSpec_MaxValueDescription_DEFAULT string

func (p *ContinuousNumberSpec) GetMaxValueDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMaxValueDescription() {
		return ContinuousNumberSpec_MaxValueDescription_DEFAULT
	}
	return *p.MaxValueDescription
}
func (p *ContinuousNumberSpec) SetMinValue(val *float64) {
	p.MinValue = val
}
func (p *ContinuousNumberSpec) SetMinValueDescription(val *string) {
	p.MinValueDescription = val
}
func (p *ContinuousNumberSpec) SetMaxValue(val *float64) {
	p.MaxValue = val
}
func (p *ContinuousNumberSpec) SetMaxValueDescription(val *string) {
	p.MaxValueDescription = val
}

var fieldIDToName_ContinuousNumberSpec = map[int16]string{
	1: "min_value",
	2: "min_value_description",
	3: "max_value",
	4: "max_value_description",
}

func (p *ContinuousNumberSpec) IsSetMinValue() bool {
	return p.MinValue != nil
}

func (p *ContinuousNumberSpec) IsSetMinValueDescription() bool {
	return p.MinValueDescription != nil
}

func (p *ContinuousNumberSpec) IsSetMaxValue() bool {
	return p.MaxValue != nil
}

func (p *ContinuousNumberSpec) IsSetMaxValueDescription() bool {
	return p.MaxValueDescription != nil
}

func (p *ContinuousNumberSpec) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ContinuousNumberSpec[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ContinuousNumberSpec) ReadField1(iprot thrift.TProtocol) error {

	var _field *float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MinValue = _field
	return nil
}
func (p *ContinuousNumberSpec) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MinValueDescription = _field
	return nil
}
func (p *ContinuousNumberSpec) ReadField3(iprot thrift.TProtocol) error {

	var _field *float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MaxValue = _field
	return nil
}
func (p *ContinuousNumberSpec) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MaxValueDescription = _field
	return nil
}

func (p *ContinuousNumberSpec) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ContinuousNumberSpec"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ContinuousNumberSpec) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMinValue() {
		if err = oprot.WriteFieldBegin("min_value", thrift.DOUBLE, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.MinValue); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ContinuousNumberSpec) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMinValueDescription() {
		if err = oprot.WriteFieldBegin("min_value_description", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.MinValueDescription); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ContinuousNumberSpec) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxValue() {
		if err = oprot.WriteFieldBegin("max_value", thrift.DOUBLE, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.MaxValue); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ContinuousNumberSpec) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxValueDescription() {
		if err = oprot.WriteFieldBegin("max_value_description", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.MaxValueDescription); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ContinuousNumberSpec) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContinuousNumberSpec(%+v)", *p)

}

func (p *ContinuousNumberSpec) DeepEqual(ano *ContinuousNumberSpec) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.MinValue) {
		return false
	}
	if !p.Field2DeepEqual(ano.MinValueDescription) {
		return false
	}
	if !p.Field3DeepEqual(ano.MaxValue) {
		return false
	}
	if !p.Field4DeepEqual(ano.MaxValueDescription) {
		return false
	}
	return true
}

func (p *ContinuousNumberSpec) Field1DeepEqual(src *float64) bool {

	if p.MinValue == src {
		return true
	} else if p.MinValue == nil || src == nil {
		return false
	}
	if *p.MinValue != *src {
		return false
	}
	return true
}
func (p *ContinuousNumberSpec) Field2DeepEqual(src *string) bool {

	if p.MinValueDescription == src {
		return true
	} else if p.MinValueDescription == nil || src == nil {
		return false
	}
	if strings.Compare(*p.MinValueDescription, *src) != 0 {
		return false
	}
	return true
}
func (p *ContinuousNumberSpec) Field3DeepEqual(src *float64) bool {

	if p.MaxValue == src {
		return true
	} else if p.MaxValue == nil || src == nil {
		return false
	}
	if *p.MaxValue != *src {
		return false
	}
	return true
}
func (p *ContinuousNumberSpec) Field4DeepEqual(src *string) bool {

	if p.MaxValueDescription == src {
		return true
	} else if p.MaxValueDescription == nil || src == nil {
		return false
	}
	if strings.Compare(*p.MaxValueDescription, *src) != 0 {
		return false
	}
	return true
}

type TagInfo struct {
	ID          *int64 `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id" form:"id" query:"id"`
	AppID       *int32 `thrift:"appID,2,optional" frugal:"2,optional,i32" form:"appID" json:"appID,omitempty" query:"appID"`
	WorkspaceID *int64 `thrift:"workspace_id,3,optional" frugal:"3,optional,i64" json:"workspace_id" form:"workspace_id" query:"workspace_id"`
	// 数字版本号
	VersionNum *int32 `thrift:"version_num,4,optional" frugal:"4,optional,i32" form:"version_num" json:"version_num,omitempty" query:"version_num"`
	// SemVer 三段式版本号
	Version *string `thrift:"version,5,optional" frugal:"5,optional,string" form:"version" json:"version,omitempty" query:"version"`
	// tag key id
	TagKeyID *int64 `thrift:"tag_key_id,6,optional" frugal:"6,optional,i64" json:"tag_key_id" form:"tag_key_id" query:"tag_key_id"`
	// tag key name
	TagKeyName *string `thrift:"tag_key_name,7,optional" frugal:"7,optional,string" form:"tag_key_name" json:"tag_key_name,omitempty" query:"tag_key_name"`
	// 描述
	Description *string `thrift:"description,8,optional" frugal:"8,optional,string" form:"description" json:"description,omitempty" query:"description"`
	// 状态，启用active、禁用inactive、弃用deprecated(最新版之前的版本的状态)
	Status *TagStatus `thrift:"status,9,optional" frugal:"9,optional,string" form:"status" json:"status,omitempty" query:"status"`
	// 类型: tag: 标签管理中的标签类型; option: 临时单选类型
	TagType        *TagType `thrift:"tag_type,10,optional" frugal:"10,optional,string" form:"tag_type" json:"tag_type,omitempty" query:"tag_type"`
	ParentTagKeyID *int64   `thrift:"parent_tag_key_id,11,optional" frugal:"11,optional,i64" json:"parent_tag_key_id" form:"parent_tag_key_id" query:"parent_tag_key_id"`
	// 标签值
	TagValues []*TagValue `thrift:"tag_values,12,optional" frugal:"12,optional,list<TagValue>" form:"tag_values" json:"tag_values,omitempty" query:"tag_values"`
	// 变更历史
	ChangeLogs []*ChangeLog `thrift:"change_logs,13,optional" frugal:"13,optional,list<ChangeLog>" form:"change_logs" json:"change_logs,omitempty" query:"change_logs"`
	// 内容类型
	ContentType *TagContentType `thrift:"content_type,14,optional" frugal:"14,optional,string" form:"content_type" json:"content_type,omitempty" query:"content_type"`
	// 内容约束
	ContentSpec *TagContentSpec `thrift:"content_spec,15,optional" frugal:"15,optional,TagContentSpec" form:"content_spec" json:"content_spec,omitempty" query:"content_spec"`
	// 应用领域
	DomainTypeList []TagDomainType `thrift:"domain_type_list,16,optional" frugal:"16,optional,list<string>" form:"domain_type_list" json:"domain_type_list,omitempty" query:"domain_type_list"`
	// 基础信息
	BaseInfo *common.BaseInfo `thrift:"base_info,100,optional" frugal:"100,optional,common.BaseInfo" form:"base_info" json:"base_info,omitempty" query:"base_info"`
}

func NewTagInfo() *TagInfo {
	return &TagInfo{}
}

func (p *TagInfo) InitDefault() {
}

var TagInfo_ID_DEFAULT int64

func (p *TagInfo) GetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetID() {
		return TagInfo_ID_DEFAULT
	}
	return *p.ID
}

var TagInfo_AppID_DEFAULT int32

func (p *TagInfo) GetAppID() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetAppID() {
		return TagInfo_AppID_DEFAULT
	}
	return *p.AppID
}

var TagInfo_WorkspaceID_DEFAULT int64

func (p *TagInfo) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return TagInfo_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var TagInfo_VersionNum_DEFAULT int32

func (p *TagInfo) GetVersionNum() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetVersionNum() {
		return TagInfo_VersionNum_DEFAULT
	}
	return *p.VersionNum
}

var TagInfo_Version_DEFAULT string

func (p *TagInfo) GetVersion() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetVersion() {
		return TagInfo_Version_DEFAULT
	}
	return *p.Version
}

var TagInfo_TagKeyID_DEFAULT int64

func (p *TagInfo) GetTagKeyID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTagKeyID() {
		return TagInfo_TagKeyID_DEFAULT
	}
	return *p.TagKeyID
}

var TagInfo_TagKeyName_DEFAULT string

func (p *TagInfo) GetTagKeyName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetTagKeyName() {
		return TagInfo_TagKeyName_DEFAULT
	}
	return *p.TagKeyName
}

var TagInfo_Description_DEFAULT string

func (p *TagInfo) GetDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDescription() {
		return TagInfo_Description_DEFAULT
	}
	return *p.Description
}

var TagInfo_Status_DEFAULT TagStatus

func (p *TagInfo) GetStatus() (v TagStatus) {
	if p == nil {
		return
	}
	if !p.IsSetStatus() {
		return TagInfo_Status_DEFAULT
	}
	return *p.Status
}

var TagInfo_TagType_DEFAULT TagType

func (p *TagInfo) GetTagType() (v TagType) {
	if p == nil {
		return
	}
	if !p.IsSetTagType() {
		return TagInfo_TagType_DEFAULT
	}
	return *p.TagType
}

var TagInfo_ParentTagKeyID_DEFAULT int64

func (p *TagInfo) GetParentTagKeyID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetParentTagKeyID() {
		return TagInfo_ParentTagKeyID_DEFAULT
	}
	return *p.ParentTagKeyID
}

var TagInfo_TagValues_DEFAULT []*TagValue

func (p *TagInfo) GetTagValues() (v []*TagValue) {
	if p == nil {
		return
	}
	if !p.IsSetTagValues() {
		return TagInfo_TagValues_DEFAULT
	}
	return p.TagValues
}

var TagInfo_ChangeLogs_DEFAULT []*ChangeLog

func (p *TagInfo) GetChangeLogs() (v []*ChangeLog) {
	if p == nil {
		return
	}
	if !p.IsSetChangeLogs() {
		return TagInfo_ChangeLogs_DEFAULT
	}
	return p.ChangeLogs
}

var TagInfo_ContentType_DEFAULT TagContentType

func (p *TagInfo) GetContentType() (v TagContentType) {
	if p == nil {
		return
	}
	if !p.IsSetContentType() {
		return TagInfo_ContentType_DEFAULT
	}
	return *p.ContentType
}

var TagInfo_ContentSpec_DEFAULT *TagContentSpec

func (p *TagInfo) GetContentSpec() (v *TagContentSpec) {
	if p == nil {
		return
	}
	if !p.IsSetContentSpec() {
		return TagInfo_ContentSpec_DEFAULT
	}
	return p.ContentSpec
}

var TagInfo_DomainTypeList_DEFAULT []TagDomainType

func (p *TagInfo) GetDomainTypeList() (v []TagDomainType) {
	if p == nil {
		return
	}
	if !p.IsSetDomainTypeList() {
		return TagInfo_DomainTypeList_DEFAULT
	}
	return p.DomainTypeList
}

var TagInfo_BaseInfo_DEFAULT *common.BaseInfo

func (p *TagInfo) GetBaseInfo() (v *common.BaseInfo) {
	if p == nil {
		return
	}
	if !p.IsSetBaseInfo() {
		return TagInfo_BaseInfo_DEFAULT
	}
	return p.BaseInfo
}
func (p *TagInfo) SetID(val *int64) {
	p.ID = val
}
func (p *TagInfo) SetAppID(val *int32) {
	p.AppID = val
}
func (p *TagInfo) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *TagInfo) SetVersionNum(val *int32) {
	p.VersionNum = val
}
func (p *TagInfo) SetVersion(val *string) {
	p.Version = val
}
func (p *TagInfo) SetTagKeyID(val *int64) {
	p.TagKeyID = val
}
func (p *TagInfo) SetTagKeyName(val *string) {
	p.TagKeyName = val
}
func (p *TagInfo) SetDescription(val *string) {
	p.Description = val
}
func (p *TagInfo) SetStatus(val *TagStatus) {
	p.Status = val
}
func (p *TagInfo) SetTagType(val *TagType) {
	p.TagType = val
}
func (p *TagInfo) SetParentTagKeyID(val *int64) {
	p.ParentTagKeyID = val
}
func (p *TagInfo) SetTagValues(val []*TagValue) {
	p.TagValues = val
}
func (p *TagInfo) SetChangeLogs(val []*ChangeLog) {
	p.ChangeLogs = val
}
func (p *TagInfo) SetContentType(val *TagContentType) {
	p.ContentType = val
}
func (p *TagInfo) SetContentSpec(val *TagContentSpec) {
	p.ContentSpec = val
}
func (p *TagInfo) SetDomainTypeList(val []TagDomainType) {
	p.DomainTypeList = val
}
func (p *TagInfo) SetBaseInfo(val *common.BaseInfo) {
	p.BaseInfo = val
}

var fieldIDToName_TagInfo = map[int16]string{
	1:   "id",
	2:   "appID",
	3:   "workspace_id",
	4:   "version_num",
	5:   "version",
	6:   "tag_key_id",
	7:   "tag_key_name",
	8:   "description",
	9:   "status",
	10:  "tag_type",
	11:  "parent_tag_key_id",
	12:  "tag_values",
	13:  "change_logs",
	14:  "content_type",
	15:  "content_spec",
	16:  "domain_type_list",
	100: "base_info",
}

func (p *TagInfo) IsSetID() bool {
	return p.ID != nil
}

func (p *TagInfo) IsSetAppID() bool {
	return p.AppID != nil
}

func (p *TagInfo) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *TagInfo) IsSetVersionNum() bool {
	return p.VersionNum != nil
}

func (p *TagInfo) IsSetVersion() bool {
	return p.Version != nil
}

func (p *TagInfo) IsSetTagKeyID() bool {
	return p.TagKeyID != nil
}

func (p *TagInfo) IsSetTagKeyName() bool {
	return p.TagKeyName != nil
}

func (p *TagInfo) IsSetDescription() bool {
	return p.Description != nil
}

func (p *TagInfo) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TagInfo) IsSetTagType() bool {
	return p.TagType != nil
}

func (p *TagInfo) IsSetParentTagKeyID() bool {
	return p.ParentTagKeyID != nil
}

func (p *TagInfo) IsSetTagValues() bool {
	return p.TagValues != nil
}

func (p *TagInfo) IsSetChangeLogs() bool {
	return p.ChangeLogs != nil
}

func (p *TagInfo) IsSetContentType() bool {
	return p.ContentType != nil
}

func (p *TagInfo) IsSetContentSpec() bool {
	return p.ContentSpec != nil
}

func (p *TagInfo) IsSetDomainTypeList() bool {
	return p.DomainTypeList != nil
}

func (p *TagInfo) IsSetBaseInfo() bool {
	return p.BaseInfo != nil
}

func (p *TagInfo) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TagInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TagInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ID = _field
	return nil
}
func (p *TagInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AppID = _field
	return nil
}
func (p *TagInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *TagInfo) ReadField4(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.VersionNum = _field
	return nil
}
func (p *TagInfo) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Version = _field
	return nil
}
func (p *TagInfo) ReadField6(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TagKeyID = _field
	return nil
}
func (p *TagInfo) ReadField7(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TagKeyName = _field
	return nil
}
func (p *TagInfo) ReadField8(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}
func (p *TagInfo) ReadField9(iprot thrift.TProtocol) error {

	var _field *TagStatus
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Status = _field
	return nil
}
func (p *TagInfo) ReadField10(iprot thrift.TProtocol) error {

	var _field *TagType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TagType = _field
	return nil
}
func (p *TagInfo) ReadField11(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ParentTagKeyID = _field
	return nil
}
func (p *TagInfo) ReadField12(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TagValue, 0, size)
	values := make([]TagValue, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.TagValues = _field
	return nil
}
func (p *TagInfo) ReadField13(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ChangeLog, 0, size)
	values := make([]ChangeLog, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ChangeLogs = _field
	return nil
}
func (p *TagInfo) ReadField14(iprot thrift.TProtocol) error {

	var _field *TagContentType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ContentType = _field
	return nil
}
func (p *TagInfo) ReadField15(iprot thrift.TProtocol) error {
	_field := NewTagContentSpec()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ContentSpec = _field
	return nil
}
func (p *TagInfo) ReadField16(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]TagDomainType, 0, size)
	for i := 0; i < size; i++ {

		var _elem TagDomainType
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.DomainTypeList = _field
	return nil
}
func (p *TagInfo) ReadField100(iprot thrift.TProtocol) error {
	_field := common.NewBaseInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseInfo = _field
	return nil
}

func (p *TagInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TagInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TagInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *TagInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppID() {
		if err = oprot.WriteFieldBegin("appID", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.AppID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *TagInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *TagInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersionNum() {
		if err = oprot.WriteFieldBegin("version_num", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.VersionNum); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *TagInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err = oprot.WriteFieldBegin("version", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Version); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *TagInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagKeyID() {
		if err = oprot.WriteFieldBegin("tag_key_id", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TagKeyID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *TagInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagKeyName() {
		if err = oprot.WriteFieldBegin("tag_key_name", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TagKeyName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}
func (p *TagInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}
func (p *TagInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Status); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}
func (p *TagInfo) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagType() {
		if err = oprot.WriteFieldBegin("tag_type", thrift.STRING, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TagType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}
func (p *TagInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetParentTagKeyID() {
		if err = oprot.WriteFieldBegin("parent_tag_key_id", thrift.I64, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ParentTagKeyID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}
func (p *TagInfo) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagValues() {
		if err = oprot.WriteFieldBegin("tag_values", thrift.LIST, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TagValues)); err != nil {
			return err
		}
		for _, v := range p.TagValues {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}
func (p *TagInfo) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetChangeLogs() {
		if err = oprot.WriteFieldBegin("change_logs", thrift.LIST, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ChangeLogs)); err != nil {
			return err
		}
		for _, v := range p.ChangeLogs {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}
func (p *TagInfo) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetContentType() {
		if err = oprot.WriteFieldBegin("content_type", thrift.STRING, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ContentType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}
func (p *TagInfo) writeField15(oprot thrift.TProtocol) (err error) {
	if p.IsSetContentSpec() {
		if err = oprot.WriteFieldBegin("content_spec", thrift.STRUCT, 15); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ContentSpec.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}
func (p *TagInfo) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetDomainTypeList() {
		if err = oprot.WriteFieldBegin("domain_type_list", thrift.LIST, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.DomainTypeList)); err != nil {
			return err
		}
		for _, v := range p.DomainTypeList {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}
func (p *TagInfo) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseInfo() {
		if err = oprot.WriteFieldBegin("base_info", thrift.STRUCT, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseInfo.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}

func (p *TagInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TagInfo(%+v)", *p)

}

func (p *TagInfo) DeepEqual(ano *TagInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field2DeepEqual(ano.AppID) {
		return false
	}
	if !p.Field3DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field4DeepEqual(ano.VersionNum) {
		return false
	}
	if !p.Field5DeepEqual(ano.Version) {
		return false
	}
	if !p.Field6DeepEqual(ano.TagKeyID) {
		return false
	}
	if !p.Field7DeepEqual(ano.TagKeyName) {
		return false
	}
	if !p.Field8DeepEqual(ano.Description) {
		return false
	}
	if !p.Field9DeepEqual(ano.Status) {
		return false
	}
	if !p.Field10DeepEqual(ano.TagType) {
		return false
	}
	if !p.Field11DeepEqual(ano.ParentTagKeyID) {
		return false
	}
	if !p.Field12DeepEqual(ano.TagValues) {
		return false
	}
	if !p.Field13DeepEqual(ano.ChangeLogs) {
		return false
	}
	if !p.Field14DeepEqual(ano.ContentType) {
		return false
	}
	if !p.Field15DeepEqual(ano.ContentSpec) {
		return false
	}
	if !p.Field16DeepEqual(ano.DomainTypeList) {
		return false
	}
	if !p.Field100DeepEqual(ano.BaseInfo) {
		return false
	}
	return true
}

func (p *TagInfo) Field1DeepEqual(src *int64) bool {

	if p.ID == src {
		return true
	} else if p.ID == nil || src == nil {
		return false
	}
	if *p.ID != *src {
		return false
	}
	return true
}
func (p *TagInfo) Field2DeepEqual(src *int32) bool {

	if p.AppID == src {
		return true
	} else if p.AppID == nil || src == nil {
		return false
	}
	if *p.AppID != *src {
		return false
	}
	return true
}
func (p *TagInfo) Field3DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *TagInfo) Field4DeepEqual(src *int32) bool {

	if p.VersionNum == src {
		return true
	} else if p.VersionNum == nil || src == nil {
		return false
	}
	if *p.VersionNum != *src {
		return false
	}
	return true
}
func (p *TagInfo) Field5DeepEqual(src *string) bool {

	if p.Version == src {
		return true
	} else if p.Version == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Version, *src) != 0 {
		return false
	}
	return true
}
func (p *TagInfo) Field6DeepEqual(src *int64) bool {

	if p.TagKeyID == src {
		return true
	} else if p.TagKeyID == nil || src == nil {
		return false
	}
	if *p.TagKeyID != *src {
		return false
	}
	return true
}
func (p *TagInfo) Field7DeepEqual(src *string) bool {

	if p.TagKeyName == src {
		return true
	} else if p.TagKeyName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TagKeyName, *src) != 0 {
		return false
	}
	return true
}
func (p *TagInfo) Field8DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *TagInfo) Field9DeepEqual(src *TagStatus) bool {

	if p.Status == src {
		return true
	} else if p.Status == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Status, *src) != 0 {
		return false
	}
	return true
}
func (p *TagInfo) Field10DeepEqual(src *TagType) bool {

	if p.TagType == src {
		return true
	} else if p.TagType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TagType, *src) != 0 {
		return false
	}
	return true
}
func (p *TagInfo) Field11DeepEqual(src *int64) bool {

	if p.ParentTagKeyID == src {
		return true
	} else if p.ParentTagKeyID == nil || src == nil {
		return false
	}
	if *p.ParentTagKeyID != *src {
		return false
	}
	return true
}
func (p *TagInfo) Field12DeepEqual(src []*TagValue) bool {

	if len(p.TagValues) != len(src) {
		return false
	}
	for i, v := range p.TagValues {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TagInfo) Field13DeepEqual(src []*ChangeLog) bool {

	if len(p.ChangeLogs) != len(src) {
		return false
	}
	for i, v := range p.ChangeLogs {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TagInfo) Field14DeepEqual(src *TagContentType) bool {

	if p.ContentType == src {
		return true
	} else if p.ContentType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ContentType, *src) != 0 {
		return false
	}
	return true
}
func (p *TagInfo) Field15DeepEqual(src *TagContentSpec) bool {

	if !p.ContentSpec.DeepEqual(src) {
		return false
	}
	return true
}
func (p *TagInfo) Field16DeepEqual(src []TagDomainType) bool {

	if len(p.DomainTypeList) != len(src) {
		return false
	}
	for i, v := range p.DomainTypeList {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *TagInfo) Field100DeepEqual(src *common.BaseInfo) bool {

	if !p.BaseInfo.DeepEqual(src) {
		return false
	}
	return true
}

type TagValue struct {
	// 主键
	ID          *int64 `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id" form:"id" query:"id"`
	AppID       *int32 `thrift:"app_id,2,optional" frugal:"2,optional,i32" form:"app_id" json:"app_id,omitempty" query:"app_id"`
	WorkspaceID *int64 `thrift:"workspace_id,3,optional" frugal:"3,optional,i64" json:"workspace_id" form:"workspace_id" query:"workspace_id"`
	// tag_key_id
	TagKeyID *int64 `thrift:"tag_key_id,4,optional" frugal:"4,optional,i64" json:"tag_key_id" form:"tag_key_id" query:"tag_key_id"`
	// tag_value_id
	TagValueID *int64 `thrift:"tag_value_id,5,optional" frugal:"5,optional,i64" json:"tag_value_id" form:"tag_value_id" query:"tag_value_id"`
	// 标签值
	TagValueName *string `thrift:"tag_value_name,6,optional" frugal:"6,optional,string" form:"tag_value_name" json:"tag_value_name,omitempty" query:"tag_value_name"`
	// 描述
	Description *string `thrift:"description,7,optional" frugal:"7,optional,string" form:"description" json:"description,omitempty" query:"description"`
	// 状态
	Status *TagStatus `thrift:"status,8,optional" frugal:"8,optional,string" form:"status" json:"status,omitempty" query:"status"`
	// 数字版本号
	VersionNum *int32 `thrift:"version_num,9,optional" frugal:"9,optional,i32" form:"version_num" json:"version_num,omitempty" query:"version_num"`
	// 父标签选项的ID
	ParentTagValueID *int64 `thrift:"parent_tag_value_id,10,optional" frugal:"10,optional,i64" json:"parent_tag_value_id" form:"parent_tag_value_id" query:"parent_tag_value_id"`
	// 子标签
	Children []*TagValue `thrift:"children,11,optional" frugal:"11,optional,list<TagValue>" form:"children" json:"children,omitempty" query:"children"`
	// 是否是系统标签而非用户标签
	IsSystem *bool `thrift:"is_system,12,optional" frugal:"12,optional,bool" form:"is_system" json:"is_system,omitempty" query:"is_system"`
	// 基础信息
	BaseInfo *common.BaseInfo `thrift:"base_info,100,optional" frugal:"100,optional,common.BaseInfo" form:"base_info" json:"base_info,omitempty" query:"base_info"`
}

func NewTagValue() *TagValue {
	return &TagValue{}
}

func (p *TagValue) InitDefault() {
}

var TagValue_ID_DEFAULT int64

func (p *TagValue) GetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetID() {
		return TagValue_ID_DEFAULT
	}
	return *p.ID
}

var TagValue_AppID_DEFAULT int32

func (p *TagValue) GetAppID() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetAppID() {
		return TagValue_AppID_DEFAULT
	}
	return *p.AppID
}

var TagValue_WorkspaceID_DEFAULT int64

func (p *TagValue) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return TagValue_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var TagValue_TagKeyID_DEFAULT int64

func (p *TagValue) GetTagKeyID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTagKeyID() {
		return TagValue_TagKeyID_DEFAULT
	}
	return *p.TagKeyID
}

var TagValue_TagValueID_DEFAULT int64

func (p *TagValue) GetTagValueID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTagValueID() {
		return TagValue_TagValueID_DEFAULT
	}
	return *p.TagValueID
}

var TagValue_TagValueName_DEFAULT string

func (p *TagValue) GetTagValueName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetTagValueName() {
		return TagValue_TagValueName_DEFAULT
	}
	return *p.TagValueName
}

var TagValue_Description_DEFAULT string

func (p *TagValue) GetDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDescription() {
		return TagValue_Description_DEFAULT
	}
	return *p.Description
}

var TagValue_Status_DEFAULT TagStatus

func (p *TagValue) GetStatus() (v TagStatus) {
	if p == nil {
		return
	}
	if !p.IsSetStatus() {
		return TagValue_Status_DEFAULT
	}
	return *p.Status
}

var TagValue_VersionNum_DEFAULT int32

func (p *TagValue) GetVersionNum() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetVersionNum() {
		return TagValue_VersionNum_DEFAULT
	}
	return *p.VersionNum
}

var TagValue_ParentTagValueID_DEFAULT int64

func (p *TagValue) GetParentTagValueID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetParentTagValueID() {
		return TagValue_ParentTagValueID_DEFAULT
	}
	return *p.ParentTagValueID
}

var TagValue_Children_DEFAULT []*TagValue

func (p *TagValue) GetChildren() (v []*TagValue) {
	if p == nil {
		return
	}
	if !p.IsSetChildren() {
		return TagValue_Children_DEFAULT
	}
	return p.Children
}

var TagValue_IsSystem_DEFAULT bool

func (p *TagValue) GetIsSystem() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetIsSystem() {
		return TagValue_IsSystem_DEFAULT
	}
	return *p.IsSystem
}

var TagValue_BaseInfo_DEFAULT *common.BaseInfo

func (p *TagValue) GetBaseInfo() (v *common.BaseInfo) {
	if p == nil {
		return
	}
	if !p.IsSetBaseInfo() {
		return TagValue_BaseInfo_DEFAULT
	}
	return p.BaseInfo
}
func (p *TagValue) SetID(val *int64) {
	p.ID = val
}
func (p *TagValue) SetAppID(val *int32) {
	p.AppID = val
}
func (p *TagValue) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *TagValue) SetTagKeyID(val *int64) {
	p.TagKeyID = val
}
func (p *TagValue) SetTagValueID(val *int64) {
	p.TagValueID = val
}
func (p *TagValue) SetTagValueName(val *string) {
	p.TagValueName = val
}
func (p *TagValue) SetDescription(val *string) {
	p.Description = val
}
func (p *TagValue) SetStatus(val *TagStatus) {
	p.Status = val
}
func (p *TagValue) SetVersionNum(val *int32) {
	p.VersionNum = val
}
func (p *TagValue) SetParentTagValueID(val *int64) {
	p.ParentTagValueID = val
}
func (p *TagValue) SetChildren(val []*TagValue) {
	p.Children = val
}
func (p *TagValue) SetIsSystem(val *bool) {
	p.IsSystem = val
}
func (p *TagValue) SetBaseInfo(val *common.BaseInfo) {
	p.BaseInfo = val
}

var fieldIDToName_TagValue = map[int16]string{
	1:   "id",
	2:   "app_id",
	3:   "workspace_id",
	4:   "tag_key_id",
	5:   "tag_value_id",
	6:   "tag_value_name",
	7:   "description",
	8:   "status",
	9:   "version_num",
	10:  "parent_tag_value_id",
	11:  "children",
	12:  "is_system",
	100: "base_info",
}

func (p *TagValue) IsSetID() bool {
	return p.ID != nil
}

func (p *TagValue) IsSetAppID() bool {
	return p.AppID != nil
}

func (p *TagValue) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *TagValue) IsSetTagKeyID() bool {
	return p.TagKeyID != nil
}

func (p *TagValue) IsSetTagValueID() bool {
	return p.TagValueID != nil
}

func (p *TagValue) IsSetTagValueName() bool {
	return p.TagValueName != nil
}

func (p *TagValue) IsSetDescription() bool {
	return p.Description != nil
}

func (p *TagValue) IsSetStatus() bool {
	return p.Status != nil
}

func (p *TagValue) IsSetVersionNum() bool {
	return p.VersionNum != nil
}

func (p *TagValue) IsSetParentTagValueID() bool {
	return p.ParentTagValueID != nil
}

func (p *TagValue) IsSetChildren() bool {
	return p.Children != nil
}

func (p *TagValue) IsSetIsSystem() bool {
	return p.IsSystem != nil
}

func (p *TagValue) IsSetBaseInfo() bool {
	return p.BaseInfo != nil
}

func (p *TagValue) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TagValue[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TagValue) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ID = _field
	return nil
}
func (p *TagValue) ReadField2(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AppID = _field
	return nil
}
func (p *TagValue) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *TagValue) ReadField4(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TagKeyID = _field
	return nil
}
func (p *TagValue) ReadField5(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TagValueID = _field
	return nil
}
func (p *TagValue) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TagValueName = _field
	return nil
}
func (p *TagValue) ReadField7(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}
func (p *TagValue) ReadField8(iprot thrift.TProtocol) error {

	var _field *TagStatus
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Status = _field
	return nil
}
func (p *TagValue) ReadField9(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.VersionNum = _field
	return nil
}
func (p *TagValue) ReadField10(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ParentTagValueID = _field
	return nil
}
func (p *TagValue) ReadField11(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TagValue, 0, size)
	values := make([]TagValue, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Children = _field
	return nil
}
func (p *TagValue) ReadField12(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsSystem = _field
	return nil
}
func (p *TagValue) ReadField100(iprot thrift.TProtocol) error {
	_field := common.NewBaseInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseInfo = _field
	return nil
}

func (p *TagValue) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TagValue"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TagValue) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *TagValue) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAppID() {
		if err = oprot.WriteFieldBegin("app_id", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.AppID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *TagValue) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *TagValue) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagKeyID() {
		if err = oprot.WriteFieldBegin("tag_key_id", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TagKeyID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *TagValue) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagValueID() {
		if err = oprot.WriteFieldBegin("tag_value_id", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TagValueID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *TagValue) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagValueName() {
		if err = oprot.WriteFieldBegin("tag_value_name", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TagValueName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *TagValue) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}
func (p *TagValue) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Status); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}
func (p *TagValue) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersionNum() {
		if err = oprot.WriteFieldBegin("version_num", thrift.I32, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.VersionNum); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}
func (p *TagValue) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetParentTagValueID() {
		if err = oprot.WriteFieldBegin("parent_tag_value_id", thrift.I64, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ParentTagValueID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}
func (p *TagValue) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetChildren() {
		if err = oprot.WriteFieldBegin("children", thrift.LIST, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Children)); err != nil {
			return err
		}
		for _, v := range p.Children {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}
func (p *TagValue) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsSystem() {
		if err = oprot.WriteFieldBegin("is_system", thrift.BOOL, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsSystem); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}
func (p *TagValue) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseInfo() {
		if err = oprot.WriteFieldBegin("base_info", thrift.STRUCT, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseInfo.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}

func (p *TagValue) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TagValue(%+v)", *p)

}

func (p *TagValue) DeepEqual(ano *TagValue) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field2DeepEqual(ano.AppID) {
		return false
	}
	if !p.Field3DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field4DeepEqual(ano.TagKeyID) {
		return false
	}
	if !p.Field5DeepEqual(ano.TagValueID) {
		return false
	}
	if !p.Field6DeepEqual(ano.TagValueName) {
		return false
	}
	if !p.Field7DeepEqual(ano.Description) {
		return false
	}
	if !p.Field8DeepEqual(ano.Status) {
		return false
	}
	if !p.Field9DeepEqual(ano.VersionNum) {
		return false
	}
	if !p.Field10DeepEqual(ano.ParentTagValueID) {
		return false
	}
	if !p.Field11DeepEqual(ano.Children) {
		return false
	}
	if !p.Field12DeepEqual(ano.IsSystem) {
		return false
	}
	if !p.Field100DeepEqual(ano.BaseInfo) {
		return false
	}
	return true
}

func (p *TagValue) Field1DeepEqual(src *int64) bool {

	if p.ID == src {
		return true
	} else if p.ID == nil || src == nil {
		return false
	}
	if *p.ID != *src {
		return false
	}
	return true
}
func (p *TagValue) Field2DeepEqual(src *int32) bool {

	if p.AppID == src {
		return true
	} else if p.AppID == nil || src == nil {
		return false
	}
	if *p.AppID != *src {
		return false
	}
	return true
}
func (p *TagValue) Field3DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *TagValue) Field4DeepEqual(src *int64) bool {

	if p.TagKeyID == src {
		return true
	} else if p.TagKeyID == nil || src == nil {
		return false
	}
	if *p.TagKeyID != *src {
		return false
	}
	return true
}
func (p *TagValue) Field5DeepEqual(src *int64) bool {

	if p.TagValueID == src {
		return true
	} else if p.TagValueID == nil || src == nil {
		return false
	}
	if *p.TagValueID != *src {
		return false
	}
	return true
}
func (p *TagValue) Field6DeepEqual(src *string) bool {

	if p.TagValueName == src {
		return true
	} else if p.TagValueName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TagValueName, *src) != 0 {
		return false
	}
	return true
}
func (p *TagValue) Field7DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *TagValue) Field8DeepEqual(src *TagStatus) bool {

	if p.Status == src {
		return true
	} else if p.Status == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Status, *src) != 0 {
		return false
	}
	return true
}
func (p *TagValue) Field9DeepEqual(src *int32) bool {

	if p.VersionNum == src {
		return true
	} else if p.VersionNum == nil || src == nil {
		return false
	}
	if *p.VersionNum != *src {
		return false
	}
	return true
}
func (p *TagValue) Field10DeepEqual(src *int64) bool {

	if p.ParentTagValueID == src {
		return true
	} else if p.ParentTagValueID == nil || src == nil {
		return false
	}
	if *p.ParentTagValueID != *src {
		return false
	}
	return true
}
func (p *TagValue) Field11DeepEqual(src []*TagValue) bool {

	if len(p.Children) != len(src) {
		return false
	}
	for i, v := range p.Children {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *TagValue) Field12DeepEqual(src *bool) bool {

	if p.IsSystem == src {
		return true
	} else if p.IsSystem == nil || src == nil {
		return false
	}
	if *p.IsSystem != *src {
		return false
	}
	return true
}
func (p *TagValue) Field100DeepEqual(src *common.BaseInfo) bool {

	if !p.BaseInfo.DeepEqual(src) {
		return false
	}
	return true
}

type ChangeLog struct {
	// 变更的属性
	Target *ChangeTargetType `thrift:"target,1,optional" frugal:"1,optional,string" form:"target" json:"target,omitempty" query:"target"`
	// 变更类型: create, update, delete
	Operation *OperationType `thrift:"operation,2,optional" frugal:"2,optional,string" form:"operation" json:"operation,omitempty" query:"operation"`
	// 变更前的值
	BeforeValue *string `thrift:"before_value,3,optional" frugal:"3,optional,string" form:"before_value" json:"before_value,omitempty" query:"before_value"`
	// 变更后的值
	AfterValue *string `thrift:"after_value,4,optional" frugal:"4,optional,string" form:"after_value" json:"after_value,omitempty" query:"after_value"`
	// 变更属性的值：如果是标签选项变更，该值为变更属选项值名字
	TargetValue *string `thrift:"target_value,5,optional" frugal:"5,optional,string" form:"target_value" json:"target_value,omitempty" query:"target_value"`
}

func NewChangeLog() *ChangeLog {
	return &ChangeLog{}
}

func (p *ChangeLog) InitDefault() {
}

var ChangeLog_Target_DEFAULT ChangeTargetType

func (p *ChangeLog) GetTarget() (v ChangeTargetType) {
	if p == nil {
		return
	}
	if !p.IsSetTarget() {
		return ChangeLog_Target_DEFAULT
	}
	return *p.Target
}

var ChangeLog_Operation_DEFAULT OperationType

func (p *ChangeLog) GetOperation() (v OperationType) {
	if p == nil {
		return
	}
	if !p.IsSetOperation() {
		return ChangeLog_Operation_DEFAULT
	}
	return *p.Operation
}

var ChangeLog_BeforeValue_DEFAULT string

func (p *ChangeLog) GetBeforeValue() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetBeforeValue() {
		return ChangeLog_BeforeValue_DEFAULT
	}
	return *p.BeforeValue
}

var ChangeLog_AfterValue_DEFAULT string

func (p *ChangeLog) GetAfterValue() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetAfterValue() {
		return ChangeLog_AfterValue_DEFAULT
	}
	return *p.AfterValue
}

var ChangeLog_TargetValue_DEFAULT string

func (p *ChangeLog) GetTargetValue() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetTargetValue() {
		return ChangeLog_TargetValue_DEFAULT
	}
	return *p.TargetValue
}
func (p *ChangeLog) SetTarget(val *ChangeTargetType) {
	p.Target = val
}
func (p *ChangeLog) SetOperation(val *OperationType) {
	p.Operation = val
}
func (p *ChangeLog) SetBeforeValue(val *string) {
	p.BeforeValue = val
}
func (p *ChangeLog) SetAfterValue(val *string) {
	p.AfterValue = val
}
func (p *ChangeLog) SetTargetValue(val *string) {
	p.TargetValue = val
}

var fieldIDToName_ChangeLog = map[int16]string{
	1: "target",
	2: "operation",
	3: "before_value",
	4: "after_value",
	5: "target_value",
}

func (p *ChangeLog) IsSetTarget() bool {
	return p.Target != nil
}

func (p *ChangeLog) IsSetOperation() bool {
	return p.Operation != nil
}

func (p *ChangeLog) IsSetBeforeValue() bool {
	return p.BeforeValue != nil
}

func (p *ChangeLog) IsSetAfterValue() bool {
	return p.AfterValue != nil
}

func (p *ChangeLog) IsSetTargetValue() bool {
	return p.TargetValue != nil
}

func (p *ChangeLog) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ChangeLog[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ChangeLog) ReadField1(iprot thrift.TProtocol) error {

	var _field *ChangeTargetType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Target = _field
	return nil
}
func (p *ChangeLog) ReadField2(iprot thrift.TProtocol) error {

	var _field *OperationType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Operation = _field
	return nil
}
func (p *ChangeLog) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BeforeValue = _field
	return nil
}
func (p *ChangeLog) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AfterValue = _field
	return nil
}
func (p *ChangeLog) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TargetValue = _field
	return nil
}

func (p *ChangeLog) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ChangeLog"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ChangeLog) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTarget() {
		if err = oprot.WriteFieldBegin("target", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Target); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ChangeLog) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOperation() {
		if err = oprot.WriteFieldBegin("operation", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Operation); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ChangeLog) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetBeforeValue() {
		if err = oprot.WriteFieldBegin("before_value", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.BeforeValue); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ChangeLog) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetAfterValue() {
		if err = oprot.WriteFieldBegin("after_value", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.AfterValue); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *ChangeLog) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTargetValue() {
		if err = oprot.WriteFieldBegin("target_value", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TargetValue); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *ChangeLog) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ChangeLog(%+v)", *p)

}

func (p *ChangeLog) DeepEqual(ano *ChangeLog) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Target) {
		return false
	}
	if !p.Field2DeepEqual(ano.Operation) {
		return false
	}
	if !p.Field3DeepEqual(ano.BeforeValue) {
		return false
	}
	if !p.Field4DeepEqual(ano.AfterValue) {
		return false
	}
	if !p.Field5DeepEqual(ano.TargetValue) {
		return false
	}
	return true
}

func (p *ChangeLog) Field1DeepEqual(src *ChangeTargetType) bool {

	if p.Target == src {
		return true
	} else if p.Target == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Target, *src) != 0 {
		return false
	}
	return true
}
func (p *ChangeLog) Field2DeepEqual(src *OperationType) bool {

	if p.Operation == src {
		return true
	} else if p.Operation == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Operation, *src) != 0 {
		return false
	}
	return true
}
func (p *ChangeLog) Field3DeepEqual(src *string) bool {

	if p.BeforeValue == src {
		return true
	} else if p.BeforeValue == nil || src == nil {
		return false
	}
	if strings.Compare(*p.BeforeValue, *src) != 0 {
		return false
	}
	return true
}
func (p *ChangeLog) Field4DeepEqual(src *string) bool {

	if p.AfterValue == src {
		return true
	} else if p.AfterValue == nil || src == nil {
		return false
	}
	if strings.Compare(*p.AfterValue, *src) != 0 {
		return false
	}
	return true
}
func (p *ChangeLog) Field5DeepEqual(src *string) bool {

	if p.TargetValue == src {
		return true
	} else if p.TargetValue == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TargetValue, *src) != 0 {
		return false
	}
	return true
}
