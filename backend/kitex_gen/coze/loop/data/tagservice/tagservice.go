// Code generated by Kitex v0.13.1. DO NOT EDIT.

package tagservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	data "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/data"
	tag "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/data/tag"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateTag": kitex.NewMethodInfo(
		createTagHandler,
		newTagServiceCreateTagArgs,
		newTagServiceCreateTagResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateTag": kitex.NewMethodInfo(
		updateTagHandler,
		newTagServiceUpdateTagArgs,
		newTagServiceUpdateTagResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"BatchUpdateTagStatus": kitex.NewMethodInfo(
		batchUpdateTagStatusHandler,
		newTagServiceBatchUpdateTagStatusArgs,
		newTagServiceBatchUpdateTagStatusResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"SearchTags": kitex.NewMethodInfo(
		searchTagsHandler,
		newTagServiceSearchTagsArgs,
		newTagServiceSearchTagsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetTagDetail": kitex.NewMethodInfo(
		getTagDetailHandler,
		newTagServiceGetTagDetailArgs,
		newTagServiceGetTagDetailResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetTagSpec": kitex.NewMethodInfo(
		getTagSpecHandler,
		newTagServiceGetTagSpecArgs,
		newTagServiceGetTagSpecResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"BatchGetTags": kitex.NewMethodInfo(
		batchGetTagsHandler,
		newTagServiceBatchGetTagsArgs,
		newTagServiceBatchGetTagsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	tagServiceServiceInfo = NewServiceInfo()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return tagServiceServiceInfo
}

// NewServiceInfo creates a new ServiceInfo
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo()
}

func newServiceInfo() *kitex.ServiceInfo {
	serviceName := "TagService"
	handlerType := (*data.TagService)(nil)
	extra := map[string]interface{}{
		"PackageName": "data",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         serviceMethods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.13.1",
		Extra:           extra,
	}
	return svcInfo
}

func createTagHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*tag.TagServiceCreateTagArgs)
	realResult := result.(*tag.TagServiceCreateTagResult)
	success, err := handler.(tag.TagService).CreateTag(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newTagServiceCreateTagArgs() interface{} {
	return tag.NewTagServiceCreateTagArgs()
}

func newTagServiceCreateTagResult() interface{} {
	return tag.NewTagServiceCreateTagResult()
}

func updateTagHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*tag.TagServiceUpdateTagArgs)
	realResult := result.(*tag.TagServiceUpdateTagResult)
	success, err := handler.(tag.TagService).UpdateTag(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newTagServiceUpdateTagArgs() interface{} {
	return tag.NewTagServiceUpdateTagArgs()
}

func newTagServiceUpdateTagResult() interface{} {
	return tag.NewTagServiceUpdateTagResult()
}

func batchUpdateTagStatusHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*tag.TagServiceBatchUpdateTagStatusArgs)
	realResult := result.(*tag.TagServiceBatchUpdateTagStatusResult)
	success, err := handler.(tag.TagService).BatchUpdateTagStatus(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newTagServiceBatchUpdateTagStatusArgs() interface{} {
	return tag.NewTagServiceBatchUpdateTagStatusArgs()
}

func newTagServiceBatchUpdateTagStatusResult() interface{} {
	return tag.NewTagServiceBatchUpdateTagStatusResult()
}

func searchTagsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*tag.TagServiceSearchTagsArgs)
	realResult := result.(*tag.TagServiceSearchTagsResult)
	success, err := handler.(tag.TagService).SearchTags(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newTagServiceSearchTagsArgs() interface{} {
	return tag.NewTagServiceSearchTagsArgs()
}

func newTagServiceSearchTagsResult() interface{} {
	return tag.NewTagServiceSearchTagsResult()
}

func getTagDetailHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*tag.TagServiceGetTagDetailArgs)
	realResult := result.(*tag.TagServiceGetTagDetailResult)
	success, err := handler.(tag.TagService).GetTagDetail(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newTagServiceGetTagDetailArgs() interface{} {
	return tag.NewTagServiceGetTagDetailArgs()
}

func newTagServiceGetTagDetailResult() interface{} {
	return tag.NewTagServiceGetTagDetailResult()
}

func getTagSpecHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*tag.TagServiceGetTagSpecArgs)
	realResult := result.(*tag.TagServiceGetTagSpecResult)
	success, err := handler.(tag.TagService).GetTagSpec(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newTagServiceGetTagSpecArgs() interface{} {
	return tag.NewTagServiceGetTagSpecArgs()
}

func newTagServiceGetTagSpecResult() interface{} {
	return tag.NewTagServiceGetTagSpecResult()
}

func batchGetTagsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*tag.TagServiceBatchGetTagsArgs)
	realResult := result.(*tag.TagServiceBatchGetTagsResult)
	success, err := handler.(tag.TagService).BatchGetTags(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newTagServiceBatchGetTagsArgs() interface{} {
	return tag.NewTagServiceBatchGetTagsArgs()
}

func newTagServiceBatchGetTagsResult() interface{} {
	return tag.NewTagServiceBatchGetTagsResult()
}

type kClient struct {
	c  client.Client
	sc client.Streaming
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c:  c,
		sc: c.(client.Streaming),
	}
}

func (p *kClient) CreateTag(ctx context.Context, req *tag.CreateTagRequest) (r *tag.CreateTagResponse, err error) {
	var _args tag.TagServiceCreateTagArgs
	_args.Req = req
	var _result tag.TagServiceCreateTagResult
	if err = p.c.Call(ctx, "CreateTag", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateTag(ctx context.Context, req *tag.UpdateTagRequest) (r *tag.UpdateTagResponse, err error) {
	var _args tag.TagServiceUpdateTagArgs
	_args.Req = req
	var _result tag.TagServiceUpdateTagResult
	if err = p.c.Call(ctx, "UpdateTag", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BatchUpdateTagStatus(ctx context.Context, req *tag.BatchUpdateTagStatusRequest) (r *tag.BatchUpdateTagStatusResponse, err error) {
	var _args tag.TagServiceBatchUpdateTagStatusArgs
	_args.Req = req
	var _result tag.TagServiceBatchUpdateTagStatusResult
	if err = p.c.Call(ctx, "BatchUpdateTagStatus", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) SearchTags(ctx context.Context, req *tag.SearchTagsRequest) (r *tag.SearchTagsResponse, err error) {
	var _args tag.TagServiceSearchTagsArgs
	_args.Req = req
	var _result tag.TagServiceSearchTagsResult
	if err = p.c.Call(ctx, "SearchTags", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetTagDetail(ctx context.Context, req *tag.GetTagDetailRequest) (r *tag.GetTagDetailResponse, err error) {
	var _args tag.TagServiceGetTagDetailArgs
	_args.Req = req
	var _result tag.TagServiceGetTagDetailResult
	if err = p.c.Call(ctx, "GetTagDetail", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetTagSpec(ctx context.Context, req *tag.GetTagSpecRequest) (r *tag.GetTagSpecResponse, err error) {
	var _args tag.TagServiceGetTagSpecArgs
	_args.Req = req
	var _result tag.TagServiceGetTagSpecResult
	if err = p.c.Call(ctx, "GetTagSpec", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BatchGetTags(ctx context.Context, req *tag.BatchGetTagsRequest) (r *tag.BatchGetTagsResponse, err error) {
	var _args tag.TagServiceBatchGetTagsArgs
	_args.Req = req
	var _result tag.TagServiceBatchGetTagsResult
	if err = p.c.Call(ctx, "BatchGetTags", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
