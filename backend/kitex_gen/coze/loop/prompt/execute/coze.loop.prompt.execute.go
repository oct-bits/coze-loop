// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package execute

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/base"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/prompt/domain/prompt"
	"strings"
)

type ExecuteInternalRequest struct {
	PromptID             *int64                       `thrift:"prompt_id,1,optional" frugal:"1,optional,i64" json:"prompt_id" form:"prompt_id" query:"prompt_id"`
	WorkspaceID          *int64                       `thrift:"workspace_id,2,optional" frugal:"2,optional,i64" json:"workspace_id" form:"workspace_id" query:"workspace_id"`
	Version              *string                      `thrift:"version,3,optional" frugal:"3,optional,string" form:"version" json:"version,omitempty" query:"version"`
	Messages             []*prompt.Message            `thrift:"messages,4,optional" frugal:"4,optional,list<prompt.Message>" form:"messages" json:"messages,omitempty" query:"messages"`
	VariableVals         []*prompt.VariableVal        `thrift:"variable_vals,5,optional" frugal:"5,optional,list<prompt.VariableVal>" form:"variable_vals" json:"variable_vals,omitempty" query:"variable_vals"`
	OverridePromptParams *prompt.OverridePromptParams `thrift:"override_prompt_params,6,optional" frugal:"6,optional,prompt.OverridePromptParams" form:"override_prompt_params" json:"override_prompt_params,omitempty" query:"override_prompt_params"`
	Scenario             *prompt.Scenario             `thrift:"scenario,101,optional" frugal:"101,optional,string" form:"scenario" json:"scenario,omitempty" query:"scenario"`
	Base                 *base.Base                   `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewExecuteInternalRequest() *ExecuteInternalRequest {
	return &ExecuteInternalRequest{}
}

func (p *ExecuteInternalRequest) InitDefault() {
}

var ExecuteInternalRequest_PromptID_DEFAULT int64

func (p *ExecuteInternalRequest) GetPromptID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetPromptID() {
		return ExecuteInternalRequest_PromptID_DEFAULT
	}
	return *p.PromptID
}

var ExecuteInternalRequest_WorkspaceID_DEFAULT int64

func (p *ExecuteInternalRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return ExecuteInternalRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var ExecuteInternalRequest_Version_DEFAULT string

func (p *ExecuteInternalRequest) GetVersion() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetVersion() {
		return ExecuteInternalRequest_Version_DEFAULT
	}
	return *p.Version
}

var ExecuteInternalRequest_Messages_DEFAULT []*prompt.Message

func (p *ExecuteInternalRequest) GetMessages() (v []*prompt.Message) {
	if p == nil {
		return
	}
	if !p.IsSetMessages() {
		return ExecuteInternalRequest_Messages_DEFAULT
	}
	return p.Messages
}

var ExecuteInternalRequest_VariableVals_DEFAULT []*prompt.VariableVal

func (p *ExecuteInternalRequest) GetVariableVals() (v []*prompt.VariableVal) {
	if p == nil {
		return
	}
	if !p.IsSetVariableVals() {
		return ExecuteInternalRequest_VariableVals_DEFAULT
	}
	return p.VariableVals
}

var ExecuteInternalRequest_OverridePromptParams_DEFAULT *prompt.OverridePromptParams

func (p *ExecuteInternalRequest) GetOverridePromptParams() (v *prompt.OverridePromptParams) {
	if p == nil {
		return
	}
	if !p.IsSetOverridePromptParams() {
		return ExecuteInternalRequest_OverridePromptParams_DEFAULT
	}
	return p.OverridePromptParams
}

var ExecuteInternalRequest_Scenario_DEFAULT prompt.Scenario

func (p *ExecuteInternalRequest) GetScenario() (v prompt.Scenario) {
	if p == nil {
		return
	}
	if !p.IsSetScenario() {
		return ExecuteInternalRequest_Scenario_DEFAULT
	}
	return *p.Scenario
}

var ExecuteInternalRequest_Base_DEFAULT *base.Base

func (p *ExecuteInternalRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return ExecuteInternalRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ExecuteInternalRequest) SetPromptID(val *int64) {
	p.PromptID = val
}
func (p *ExecuteInternalRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *ExecuteInternalRequest) SetVersion(val *string) {
	p.Version = val
}
func (p *ExecuteInternalRequest) SetMessages(val []*prompt.Message) {
	p.Messages = val
}
func (p *ExecuteInternalRequest) SetVariableVals(val []*prompt.VariableVal) {
	p.VariableVals = val
}
func (p *ExecuteInternalRequest) SetOverridePromptParams(val *prompt.OverridePromptParams) {
	p.OverridePromptParams = val
}
func (p *ExecuteInternalRequest) SetScenario(val *prompt.Scenario) {
	p.Scenario = val
}
func (p *ExecuteInternalRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ExecuteInternalRequest = map[int16]string{
	1:   "prompt_id",
	2:   "workspace_id",
	3:   "version",
	4:   "messages",
	5:   "variable_vals",
	6:   "override_prompt_params",
	101: "scenario",
	255: "Base",
}

func (p *ExecuteInternalRequest) IsSetPromptID() bool {
	return p.PromptID != nil
}

func (p *ExecuteInternalRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *ExecuteInternalRequest) IsSetVersion() bool {
	return p.Version != nil
}

func (p *ExecuteInternalRequest) IsSetMessages() bool {
	return p.Messages != nil
}

func (p *ExecuteInternalRequest) IsSetVariableVals() bool {
	return p.VariableVals != nil
}

func (p *ExecuteInternalRequest) IsSetOverridePromptParams() bool {
	return p.OverridePromptParams != nil
}

func (p *ExecuteInternalRequest) IsSetScenario() bool {
	return p.Scenario != nil
}

func (p *ExecuteInternalRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ExecuteInternalRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExecuteInternalRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExecuteInternalRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PromptID = _field
	return nil
}
func (p *ExecuteInternalRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *ExecuteInternalRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Version = _field
	return nil
}
func (p *ExecuteInternalRequest) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*prompt.Message, 0, size)
	values := make([]prompt.Message, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Messages = _field
	return nil
}
func (p *ExecuteInternalRequest) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*prompt.VariableVal, 0, size)
	values := make([]prompt.VariableVal, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.VariableVals = _field
	return nil
}
func (p *ExecuteInternalRequest) ReadField6(iprot thrift.TProtocol) error {
	_field := prompt.NewOverridePromptParams()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.OverridePromptParams = _field
	return nil
}
func (p *ExecuteInternalRequest) ReadField101(iprot thrift.TProtocol) error {

	var _field *prompt.Scenario
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Scenario = _field
	return nil
}
func (p *ExecuteInternalRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *ExecuteInternalRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ExecuteInternalRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExecuteInternalRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPromptID() {
		if err = oprot.WriteFieldBegin("prompt_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PromptID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ExecuteInternalRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ExecuteInternalRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err = oprot.WriteFieldBegin("version", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Version); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ExecuteInternalRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessages() {
		if err = oprot.WriteFieldBegin("messages", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Messages)); err != nil {
			return err
		}
		for _, v := range p.Messages {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *ExecuteInternalRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetVariableVals() {
		if err = oprot.WriteFieldBegin("variable_vals", thrift.LIST, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.VariableVals)); err != nil {
			return err
		}
		for _, v := range p.VariableVals {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *ExecuteInternalRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetOverridePromptParams() {
		if err = oprot.WriteFieldBegin("override_prompt_params", thrift.STRUCT, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.OverridePromptParams.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *ExecuteInternalRequest) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetScenario() {
		if err = oprot.WriteFieldBegin("scenario", thrift.STRING, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Scenario); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}
func (p *ExecuteInternalRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ExecuteInternalRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExecuteInternalRequest(%+v)", *p)

}

func (p *ExecuteInternalRequest) DeepEqual(ano *ExecuteInternalRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PromptID) {
		return false
	}
	if !p.Field2DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field3DeepEqual(ano.Version) {
		return false
	}
	if !p.Field4DeepEqual(ano.Messages) {
		return false
	}
	if !p.Field5DeepEqual(ano.VariableVals) {
		return false
	}
	if !p.Field6DeepEqual(ano.OverridePromptParams) {
		return false
	}
	if !p.Field101DeepEqual(ano.Scenario) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ExecuteInternalRequest) Field1DeepEqual(src *int64) bool {

	if p.PromptID == src {
		return true
	} else if p.PromptID == nil || src == nil {
		return false
	}
	if *p.PromptID != *src {
		return false
	}
	return true
}
func (p *ExecuteInternalRequest) Field2DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *ExecuteInternalRequest) Field3DeepEqual(src *string) bool {

	if p.Version == src {
		return true
	} else if p.Version == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Version, *src) != 0 {
		return false
	}
	return true
}
func (p *ExecuteInternalRequest) Field4DeepEqual(src []*prompt.Message) bool {

	if len(p.Messages) != len(src) {
		return false
	}
	for i, v := range p.Messages {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ExecuteInternalRequest) Field5DeepEqual(src []*prompt.VariableVal) bool {

	if len(p.VariableVals) != len(src) {
		return false
	}
	for i, v := range p.VariableVals {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ExecuteInternalRequest) Field6DeepEqual(src *prompt.OverridePromptParams) bool {

	if !p.OverridePromptParams.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ExecuteInternalRequest) Field101DeepEqual(src *prompt.Scenario) bool {

	if p.Scenario == src {
		return true
	} else if p.Scenario == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Scenario, *src) != 0 {
		return false
	}
	return true
}
func (p *ExecuteInternalRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ExecuteInternalResponse struct {
	Message      *prompt.Message    `thrift:"message,1,optional" frugal:"1,optional,prompt.Message" form:"message" json:"message,omitempty" query:"message"`
	FinishReason *string            `thrift:"finish_reason,2,optional" frugal:"2,optional,string" form:"finish_reason" json:"finish_reason,omitempty" query:"finish_reason"`
	Usage        *prompt.TokenUsage `thrift:"usage,3,optional" frugal:"3,optional,prompt.TokenUsage" form:"usage" json:"usage,omitempty" query:"usage"`
	BaseResp     *base.BaseResp     `thrift:"BaseResp,255,optional" frugal:"255,optional,base.BaseResp" form:"BaseResp" json:"BaseResp,omitempty" query:"BaseResp"`
}

func NewExecuteInternalResponse() *ExecuteInternalResponse {
	return &ExecuteInternalResponse{}
}

func (p *ExecuteInternalResponse) InitDefault() {
}

var ExecuteInternalResponse_Message_DEFAULT *prompt.Message

func (p *ExecuteInternalResponse) GetMessage() (v *prompt.Message) {
	if p == nil {
		return
	}
	if !p.IsSetMessage() {
		return ExecuteInternalResponse_Message_DEFAULT
	}
	return p.Message
}

var ExecuteInternalResponse_FinishReason_DEFAULT string

func (p *ExecuteInternalResponse) GetFinishReason() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetFinishReason() {
		return ExecuteInternalResponse_FinishReason_DEFAULT
	}
	return *p.FinishReason
}

var ExecuteInternalResponse_Usage_DEFAULT *prompt.TokenUsage

func (p *ExecuteInternalResponse) GetUsage() (v *prompt.TokenUsage) {
	if p == nil {
		return
	}
	if !p.IsSetUsage() {
		return ExecuteInternalResponse_Usage_DEFAULT
	}
	return p.Usage
}

var ExecuteInternalResponse_BaseResp_DEFAULT *base.BaseResp

func (p *ExecuteInternalResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return ExecuteInternalResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ExecuteInternalResponse) SetMessage(val *prompt.Message) {
	p.Message = val
}
func (p *ExecuteInternalResponse) SetFinishReason(val *string) {
	p.FinishReason = val
}
func (p *ExecuteInternalResponse) SetUsage(val *prompt.TokenUsage) {
	p.Usage = val
}
func (p *ExecuteInternalResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_ExecuteInternalResponse = map[int16]string{
	1:   "message",
	2:   "finish_reason",
	3:   "usage",
	255: "BaseResp",
}

func (p *ExecuteInternalResponse) IsSetMessage() bool {
	return p.Message != nil
}

func (p *ExecuteInternalResponse) IsSetFinishReason() bool {
	return p.FinishReason != nil
}

func (p *ExecuteInternalResponse) IsSetUsage() bool {
	return p.Usage != nil
}

func (p *ExecuteInternalResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ExecuteInternalResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ExecuteInternalResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ExecuteInternalResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := prompt.NewMessage()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Message = _field
	return nil
}
func (p *ExecuteInternalResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FinishReason = _field
	return nil
}
func (p *ExecuteInternalResponse) ReadField3(iprot thrift.TProtocol) error {
	_field := prompt.NewTokenUsage()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Usage = _field
	return nil
}
func (p *ExecuteInternalResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *ExecuteInternalResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ExecuteInternalResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ExecuteInternalResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessage() {
		if err = oprot.WriteFieldBegin("message", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Message.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ExecuteInternalResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetFinishReason() {
		if err = oprot.WriteFieldBegin("finish_reason", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.FinishReason); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ExecuteInternalResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetUsage() {
		if err = oprot.WriteFieldBegin("usage", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Usage.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ExecuteInternalResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseResp() {
		if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseResp.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ExecuteInternalResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ExecuteInternalResponse(%+v)", *p)

}

func (p *ExecuteInternalResponse) DeepEqual(ano *ExecuteInternalResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Message) {
		return false
	}
	if !p.Field2DeepEqual(ano.FinishReason) {
		return false
	}
	if !p.Field3DeepEqual(ano.Usage) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *ExecuteInternalResponse) Field1DeepEqual(src *prompt.Message) bool {

	if !p.Message.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ExecuteInternalResponse) Field2DeepEqual(src *string) bool {

	if p.FinishReason == src {
		return true
	} else if p.FinishReason == nil || src == nil {
		return false
	}
	if strings.Compare(*p.FinishReason, *src) != 0 {
		return false
	}
	return true
}
func (p *ExecuteInternalResponse) Field3DeepEqual(src *prompt.TokenUsage) bool {

	if !p.Usage.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ExecuteInternalResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type PromptExecuteService interface {
	ExecuteInternal(ctx context.Context, req *ExecuteInternalRequest) (r *ExecuteInternalResponse, err error)
}

type PromptExecuteServiceClient struct {
	c thrift.TClient
}

func NewPromptExecuteServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *PromptExecuteServiceClient {
	return &PromptExecuteServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewPromptExecuteServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *PromptExecuteServiceClient {
	return &PromptExecuteServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewPromptExecuteServiceClient(c thrift.TClient) *PromptExecuteServiceClient {
	return &PromptExecuteServiceClient{
		c: c,
	}
}

func (p *PromptExecuteServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *PromptExecuteServiceClient) ExecuteInternal(ctx context.Context, req *ExecuteInternalRequest) (r *ExecuteInternalResponse, err error) {
	var _args PromptExecuteServiceExecuteInternalArgs
	_args.Req = req
	var _result PromptExecuteServiceExecuteInternalResult
	if err = p.Client_().Call(ctx, "ExecuteInternal", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type PromptExecuteServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      PromptExecuteService
}

func (p *PromptExecuteServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *PromptExecuteServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *PromptExecuteServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewPromptExecuteServiceProcessor(handler PromptExecuteService) *PromptExecuteServiceProcessor {
	self := &PromptExecuteServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("ExecuteInternal", &promptExecuteServiceProcessorExecuteInternal{handler: handler})
	return self
}
func (p *PromptExecuteServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type promptExecuteServiceProcessorExecuteInternal struct {
	handler PromptExecuteService
}

func (p *promptExecuteServiceProcessorExecuteInternal) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PromptExecuteServiceExecuteInternalArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ExecuteInternal", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PromptExecuteServiceExecuteInternalResult{}
	var retval *ExecuteInternalResponse
	if retval, err2 = p.handler.ExecuteInternal(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ExecuteInternal: "+err2.Error())
		oprot.WriteMessageBegin("ExecuteInternal", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ExecuteInternal", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type PromptExecuteServiceExecuteInternalArgs struct {
	Req *ExecuteInternalRequest `thrift:"req,1" frugal:"1,default,ExecuteInternalRequest"`
}

func NewPromptExecuteServiceExecuteInternalArgs() *PromptExecuteServiceExecuteInternalArgs {
	return &PromptExecuteServiceExecuteInternalArgs{}
}

func (p *PromptExecuteServiceExecuteInternalArgs) InitDefault() {
}

var PromptExecuteServiceExecuteInternalArgs_Req_DEFAULT *ExecuteInternalRequest

func (p *PromptExecuteServiceExecuteInternalArgs) GetReq() (v *ExecuteInternalRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return PromptExecuteServiceExecuteInternalArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *PromptExecuteServiceExecuteInternalArgs) SetReq(val *ExecuteInternalRequest) {
	p.Req = val
}

var fieldIDToName_PromptExecuteServiceExecuteInternalArgs = map[int16]string{
	1: "req",
}

func (p *PromptExecuteServiceExecuteInternalArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PromptExecuteServiceExecuteInternalArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PromptExecuteServiceExecuteInternalArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PromptExecuteServiceExecuteInternalArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewExecuteInternalRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *PromptExecuteServiceExecuteInternalArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ExecuteInternal_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PromptExecuteServiceExecuteInternalArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PromptExecuteServiceExecuteInternalArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PromptExecuteServiceExecuteInternalArgs(%+v)", *p)

}

func (p *PromptExecuteServiceExecuteInternalArgs) DeepEqual(ano *PromptExecuteServiceExecuteInternalArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *PromptExecuteServiceExecuteInternalArgs) Field1DeepEqual(src *ExecuteInternalRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type PromptExecuteServiceExecuteInternalResult struct {
	Success *ExecuteInternalResponse `thrift:"success,0,optional" frugal:"0,optional,ExecuteInternalResponse"`
}

func NewPromptExecuteServiceExecuteInternalResult() *PromptExecuteServiceExecuteInternalResult {
	return &PromptExecuteServiceExecuteInternalResult{}
}

func (p *PromptExecuteServiceExecuteInternalResult) InitDefault() {
}

var PromptExecuteServiceExecuteInternalResult_Success_DEFAULT *ExecuteInternalResponse

func (p *PromptExecuteServiceExecuteInternalResult) GetSuccess() (v *ExecuteInternalResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return PromptExecuteServiceExecuteInternalResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PromptExecuteServiceExecuteInternalResult) SetSuccess(x interface{}) {
	p.Success = x.(*ExecuteInternalResponse)
}

var fieldIDToName_PromptExecuteServiceExecuteInternalResult = map[int16]string{
	0: "success",
}

func (p *PromptExecuteServiceExecuteInternalResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PromptExecuteServiceExecuteInternalResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PromptExecuteServiceExecuteInternalResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PromptExecuteServiceExecuteInternalResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewExecuteInternalResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *PromptExecuteServiceExecuteInternalResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ExecuteInternal_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PromptExecuteServiceExecuteInternalResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PromptExecuteServiceExecuteInternalResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PromptExecuteServiceExecuteInternalResult(%+v)", *p)

}

func (p *PromptExecuteServiceExecuteInternalResult) DeepEqual(ano *PromptExecuteServiceExecuteInternalResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PromptExecuteServiceExecuteInternalResult) Field0DeepEqual(src *ExecuteInternalResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
