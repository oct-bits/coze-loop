// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package prompt

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

const (
	TemplateTypeNormal = "normal"

	ToolTypeFunction = "function"

	ToolChoiceTypeNone = "none"

	ToolChoiceTypeAuto = "auto"

	RoleSystem = "system"

	RoleUser = "user"

	RoleAssistant = "assistant"

	RoleTool = "tool"

	RolePlaceholder = "placeholder"

	ContentTypeText = "text"

	ContentTypeImageURL = "image_url"

	VariableTypeString = "string"

	VariableTypePlaceholder = "placeholder"

	ScenarioDefault = "default"

	ScenarioEvalTarget = "eval_target"
)

type TemplateType = string

type ToolType = string

type ToolChoiceType = string

type Role = string

type ContentType = string

type VariableType = string

type Scenario = string

type Prompt struct {
	ID           *int64        `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id" form:"id" query:"id"`
	WorkspaceID  *int64        `thrift:"workspace_id,2,optional" frugal:"2,optional,i64" json:"workspace_id" form:"workspace_id" query:"workspace_id"`
	PromptKey    *string       `thrift:"prompt_key,3,optional" frugal:"3,optional,string" form:"prompt_key" json:"prompt_key,omitempty" query:"prompt_key"`
	PromptBasic  *PromptBasic  `thrift:"prompt_basic,4,optional" frugal:"4,optional,PromptBasic" form:"prompt_basic" json:"prompt_basic,omitempty" query:"prompt_basic"`
	PromptDraft  *PromptDraft  `thrift:"prompt_draft,5,optional" frugal:"5,optional,PromptDraft" form:"prompt_draft" json:"prompt_draft,omitempty" query:"prompt_draft"`
	PromptCommit *PromptCommit `thrift:"prompt_commit,6,optional" frugal:"6,optional,PromptCommit" form:"prompt_commit" json:"prompt_commit,omitempty" query:"prompt_commit"`
}

func NewPrompt() *Prompt {
	return &Prompt{}
}

func (p *Prompt) InitDefault() {
}

var Prompt_ID_DEFAULT int64

func (p *Prompt) GetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetID() {
		return Prompt_ID_DEFAULT
	}
	return *p.ID
}

var Prompt_WorkspaceID_DEFAULT int64

func (p *Prompt) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return Prompt_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var Prompt_PromptKey_DEFAULT string

func (p *Prompt) GetPromptKey() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetPromptKey() {
		return Prompt_PromptKey_DEFAULT
	}
	return *p.PromptKey
}

var Prompt_PromptBasic_DEFAULT *PromptBasic

func (p *Prompt) GetPromptBasic() (v *PromptBasic) {
	if p == nil {
		return
	}
	if !p.IsSetPromptBasic() {
		return Prompt_PromptBasic_DEFAULT
	}
	return p.PromptBasic
}

var Prompt_PromptDraft_DEFAULT *PromptDraft

func (p *Prompt) GetPromptDraft() (v *PromptDraft) {
	if p == nil {
		return
	}
	if !p.IsSetPromptDraft() {
		return Prompt_PromptDraft_DEFAULT
	}
	return p.PromptDraft
}

var Prompt_PromptCommit_DEFAULT *PromptCommit

func (p *Prompt) GetPromptCommit() (v *PromptCommit) {
	if p == nil {
		return
	}
	if !p.IsSetPromptCommit() {
		return Prompt_PromptCommit_DEFAULT
	}
	return p.PromptCommit
}
func (p *Prompt) SetID(val *int64) {
	p.ID = val
}
func (p *Prompt) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *Prompt) SetPromptKey(val *string) {
	p.PromptKey = val
}
func (p *Prompt) SetPromptBasic(val *PromptBasic) {
	p.PromptBasic = val
}
func (p *Prompt) SetPromptDraft(val *PromptDraft) {
	p.PromptDraft = val
}
func (p *Prompt) SetPromptCommit(val *PromptCommit) {
	p.PromptCommit = val
}

var fieldIDToName_Prompt = map[int16]string{
	1: "id",
	2: "workspace_id",
	3: "prompt_key",
	4: "prompt_basic",
	5: "prompt_draft",
	6: "prompt_commit",
}

func (p *Prompt) IsSetID() bool {
	return p.ID != nil
}

func (p *Prompt) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *Prompt) IsSetPromptKey() bool {
	return p.PromptKey != nil
}

func (p *Prompt) IsSetPromptBasic() bool {
	return p.PromptBasic != nil
}

func (p *Prompt) IsSetPromptDraft() bool {
	return p.PromptDraft != nil
}

func (p *Prompt) IsSetPromptCommit() bool {
	return p.PromptCommit != nil
}

func (p *Prompt) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Prompt[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Prompt) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ID = _field
	return nil
}
func (p *Prompt) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *Prompt) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PromptKey = _field
	return nil
}
func (p *Prompt) ReadField4(iprot thrift.TProtocol) error {
	_field := NewPromptBasic()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.PromptBasic = _field
	return nil
}
func (p *Prompt) ReadField5(iprot thrift.TProtocol) error {
	_field := NewPromptDraft()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.PromptDraft = _field
	return nil
}
func (p *Prompt) ReadField6(iprot thrift.TProtocol) error {
	_field := NewPromptCommit()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.PromptCommit = _field
	return nil
}

func (p *Prompt) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Prompt"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Prompt) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *Prompt) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *Prompt) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPromptKey() {
		if err = oprot.WriteFieldBegin("prompt_key", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PromptKey); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *Prompt) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPromptBasic() {
		if err = oprot.WriteFieldBegin("prompt_basic", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.PromptBasic.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *Prompt) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetPromptDraft() {
		if err = oprot.WriteFieldBegin("prompt_draft", thrift.STRUCT, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.PromptDraft.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *Prompt) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetPromptCommit() {
		if err = oprot.WriteFieldBegin("prompt_commit", thrift.STRUCT, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.PromptCommit.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *Prompt) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Prompt(%+v)", *p)

}

func (p *Prompt) DeepEqual(ano *Prompt) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field2DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field3DeepEqual(ano.PromptKey) {
		return false
	}
	if !p.Field4DeepEqual(ano.PromptBasic) {
		return false
	}
	if !p.Field5DeepEqual(ano.PromptDraft) {
		return false
	}
	if !p.Field6DeepEqual(ano.PromptCommit) {
		return false
	}
	return true
}

func (p *Prompt) Field1DeepEqual(src *int64) bool {

	if p.ID == src {
		return true
	} else if p.ID == nil || src == nil {
		return false
	}
	if *p.ID != *src {
		return false
	}
	return true
}
func (p *Prompt) Field2DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *Prompt) Field3DeepEqual(src *string) bool {

	if p.PromptKey == src {
		return true
	} else if p.PromptKey == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PromptKey, *src) != 0 {
		return false
	}
	return true
}
func (p *Prompt) Field4DeepEqual(src *PromptBasic) bool {

	if !p.PromptBasic.DeepEqual(src) {
		return false
	}
	return true
}
func (p *Prompt) Field5DeepEqual(src *PromptDraft) bool {

	if !p.PromptDraft.DeepEqual(src) {
		return false
	}
	return true
}
func (p *Prompt) Field6DeepEqual(src *PromptCommit) bool {

	if !p.PromptCommit.DeepEqual(src) {
		return false
	}
	return true
}

type PromptBasic struct {
	DisplayName       *string `thrift:"display_name,1,optional" frugal:"1,optional,string" form:"display_name" json:"display_name,omitempty" query:"display_name"`
	Description       *string `thrift:"description,2,optional" frugal:"2,optional,string" form:"description" json:"description,omitempty" query:"description"`
	LatestVersion     *string `thrift:"latest_version,3,optional" frugal:"3,optional,string" form:"latest_version" json:"latest_version,omitempty" query:"latest_version"`
	CreatedBy         *string `thrift:"created_by,4,optional" frugal:"4,optional,string" form:"created_by" json:"created_by,omitempty" query:"created_by"`
	UpdatedBy         *string `thrift:"updated_by,5,optional" frugal:"5,optional,string" form:"updated_by" json:"updated_by,omitempty" query:"updated_by"`
	CreatedAt         *int64  `thrift:"created_at,6,optional" frugal:"6,optional,i64" json:"created_at" form:"created_at" query:"created_at"`
	UpdatedAt         *int64  `thrift:"updated_at,7,optional" frugal:"7,optional,i64" json:"updated_at" form:"updated_at" query:"updated_at"`
	LatestCommittedAt *int64  `thrift:"latest_committed_at,8,optional" frugal:"8,optional,i64" json:"latest_committed_at" form:"latest_committed_at" query:"latest_committed_at"`
}

func NewPromptBasic() *PromptBasic {
	return &PromptBasic{}
}

func (p *PromptBasic) InitDefault() {
}

var PromptBasic_DisplayName_DEFAULT string

func (p *PromptBasic) GetDisplayName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDisplayName() {
		return PromptBasic_DisplayName_DEFAULT
	}
	return *p.DisplayName
}

var PromptBasic_Description_DEFAULT string

func (p *PromptBasic) GetDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDescription() {
		return PromptBasic_Description_DEFAULT
	}
	return *p.Description
}

var PromptBasic_LatestVersion_DEFAULT string

func (p *PromptBasic) GetLatestVersion() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetLatestVersion() {
		return PromptBasic_LatestVersion_DEFAULT
	}
	return *p.LatestVersion
}

var PromptBasic_CreatedBy_DEFAULT string

func (p *PromptBasic) GetCreatedBy() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetCreatedBy() {
		return PromptBasic_CreatedBy_DEFAULT
	}
	return *p.CreatedBy
}

var PromptBasic_UpdatedBy_DEFAULT string

func (p *PromptBasic) GetUpdatedBy() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetUpdatedBy() {
		return PromptBasic_UpdatedBy_DEFAULT
	}
	return *p.UpdatedBy
}

var PromptBasic_CreatedAt_DEFAULT int64

func (p *PromptBasic) GetCreatedAt() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetCreatedAt() {
		return PromptBasic_CreatedAt_DEFAULT
	}
	return *p.CreatedAt
}

var PromptBasic_UpdatedAt_DEFAULT int64

func (p *PromptBasic) GetUpdatedAt() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetUpdatedAt() {
		return PromptBasic_UpdatedAt_DEFAULT
	}
	return *p.UpdatedAt
}

var PromptBasic_LatestCommittedAt_DEFAULT int64

func (p *PromptBasic) GetLatestCommittedAt() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetLatestCommittedAt() {
		return PromptBasic_LatestCommittedAt_DEFAULT
	}
	return *p.LatestCommittedAt
}
func (p *PromptBasic) SetDisplayName(val *string) {
	p.DisplayName = val
}
func (p *PromptBasic) SetDescription(val *string) {
	p.Description = val
}
func (p *PromptBasic) SetLatestVersion(val *string) {
	p.LatestVersion = val
}
func (p *PromptBasic) SetCreatedBy(val *string) {
	p.CreatedBy = val
}
func (p *PromptBasic) SetUpdatedBy(val *string) {
	p.UpdatedBy = val
}
func (p *PromptBasic) SetCreatedAt(val *int64) {
	p.CreatedAt = val
}
func (p *PromptBasic) SetUpdatedAt(val *int64) {
	p.UpdatedAt = val
}
func (p *PromptBasic) SetLatestCommittedAt(val *int64) {
	p.LatestCommittedAt = val
}

var fieldIDToName_PromptBasic = map[int16]string{
	1: "display_name",
	2: "description",
	3: "latest_version",
	4: "created_by",
	5: "updated_by",
	6: "created_at",
	7: "updated_at",
	8: "latest_committed_at",
}

func (p *PromptBasic) IsSetDisplayName() bool {
	return p.DisplayName != nil
}

func (p *PromptBasic) IsSetDescription() bool {
	return p.Description != nil
}

func (p *PromptBasic) IsSetLatestVersion() bool {
	return p.LatestVersion != nil
}

func (p *PromptBasic) IsSetCreatedBy() bool {
	return p.CreatedBy != nil
}

func (p *PromptBasic) IsSetUpdatedBy() bool {
	return p.UpdatedBy != nil
}

func (p *PromptBasic) IsSetCreatedAt() bool {
	return p.CreatedAt != nil
}

func (p *PromptBasic) IsSetUpdatedAt() bool {
	return p.UpdatedAt != nil
}

func (p *PromptBasic) IsSetLatestCommittedAt() bool {
	return p.LatestCommittedAt != nil
}

func (p *PromptBasic) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PromptBasic[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PromptBasic) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DisplayName = _field
	return nil
}
func (p *PromptBasic) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}
func (p *PromptBasic) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LatestVersion = _field
	return nil
}
func (p *PromptBasic) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CreatedBy = _field
	return nil
}
func (p *PromptBasic) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UpdatedBy = _field
	return nil
}
func (p *PromptBasic) ReadField6(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CreatedAt = _field
	return nil
}
func (p *PromptBasic) ReadField7(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UpdatedAt = _field
	return nil
}
func (p *PromptBasic) ReadField8(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LatestCommittedAt = _field
	return nil
}

func (p *PromptBasic) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PromptBasic"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PromptBasic) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDisplayName() {
		if err = oprot.WriteFieldBegin("display_name", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.DisplayName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *PromptBasic) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *PromptBasic) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetLatestVersion() {
		if err = oprot.WriteFieldBegin("latest_version", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.LatestVersion); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *PromptBasic) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedBy() {
		if err = oprot.WriteFieldBegin("created_by", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CreatedBy); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *PromptBasic) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdatedBy() {
		if err = oprot.WriteFieldBegin("updated_by", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.UpdatedBy); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *PromptBasic) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedAt() {
		if err = oprot.WriteFieldBegin("created_at", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CreatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *PromptBasic) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdatedAt() {
		if err = oprot.WriteFieldBegin("updated_at", thrift.I64, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.UpdatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}
func (p *PromptBasic) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetLatestCommittedAt() {
		if err = oprot.WriteFieldBegin("latest_committed_at", thrift.I64, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.LatestCommittedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *PromptBasic) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PromptBasic(%+v)", *p)

}

func (p *PromptBasic) DeepEqual(ano *PromptBasic) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.DisplayName) {
		return false
	}
	if !p.Field2DeepEqual(ano.Description) {
		return false
	}
	if !p.Field3DeepEqual(ano.LatestVersion) {
		return false
	}
	if !p.Field4DeepEqual(ano.CreatedBy) {
		return false
	}
	if !p.Field5DeepEqual(ano.UpdatedBy) {
		return false
	}
	if !p.Field6DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field7DeepEqual(ano.UpdatedAt) {
		return false
	}
	if !p.Field8DeepEqual(ano.LatestCommittedAt) {
		return false
	}
	return true
}

func (p *PromptBasic) Field1DeepEqual(src *string) bool {

	if p.DisplayName == src {
		return true
	} else if p.DisplayName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.DisplayName, *src) != 0 {
		return false
	}
	return true
}
func (p *PromptBasic) Field2DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *PromptBasic) Field3DeepEqual(src *string) bool {

	if p.LatestVersion == src {
		return true
	} else if p.LatestVersion == nil || src == nil {
		return false
	}
	if strings.Compare(*p.LatestVersion, *src) != 0 {
		return false
	}
	return true
}
func (p *PromptBasic) Field4DeepEqual(src *string) bool {

	if p.CreatedBy == src {
		return true
	} else if p.CreatedBy == nil || src == nil {
		return false
	}
	if strings.Compare(*p.CreatedBy, *src) != 0 {
		return false
	}
	return true
}
func (p *PromptBasic) Field5DeepEqual(src *string) bool {

	if p.UpdatedBy == src {
		return true
	} else if p.UpdatedBy == nil || src == nil {
		return false
	}
	if strings.Compare(*p.UpdatedBy, *src) != 0 {
		return false
	}
	return true
}
func (p *PromptBasic) Field6DeepEqual(src *int64) bool {

	if p.CreatedAt == src {
		return true
	} else if p.CreatedAt == nil || src == nil {
		return false
	}
	if *p.CreatedAt != *src {
		return false
	}
	return true
}
func (p *PromptBasic) Field7DeepEqual(src *int64) bool {

	if p.UpdatedAt == src {
		return true
	} else if p.UpdatedAt == nil || src == nil {
		return false
	}
	if *p.UpdatedAt != *src {
		return false
	}
	return true
}
func (p *PromptBasic) Field8DeepEqual(src *int64) bool {

	if p.LatestCommittedAt == src {
		return true
	} else if p.LatestCommittedAt == nil || src == nil {
		return false
	}
	if *p.LatestCommittedAt != *src {
		return false
	}
	return true
}

type PromptCommit struct {
	Detail     *PromptDetail `thrift:"detail,1,optional" frugal:"1,optional,PromptDetail" form:"detail" json:"detail,omitempty" query:"detail"`
	CommitInfo *CommitInfo   `thrift:"commit_info,2,optional" frugal:"2,optional,CommitInfo" form:"commit_info" json:"commit_info,omitempty" query:"commit_info"`
}

func NewPromptCommit() *PromptCommit {
	return &PromptCommit{}
}

func (p *PromptCommit) InitDefault() {
}

var PromptCommit_Detail_DEFAULT *PromptDetail

func (p *PromptCommit) GetDetail() (v *PromptDetail) {
	if p == nil {
		return
	}
	if !p.IsSetDetail() {
		return PromptCommit_Detail_DEFAULT
	}
	return p.Detail
}

var PromptCommit_CommitInfo_DEFAULT *CommitInfo

func (p *PromptCommit) GetCommitInfo() (v *CommitInfo) {
	if p == nil {
		return
	}
	if !p.IsSetCommitInfo() {
		return PromptCommit_CommitInfo_DEFAULT
	}
	return p.CommitInfo
}
func (p *PromptCommit) SetDetail(val *PromptDetail) {
	p.Detail = val
}
func (p *PromptCommit) SetCommitInfo(val *CommitInfo) {
	p.CommitInfo = val
}

var fieldIDToName_PromptCommit = map[int16]string{
	1: "detail",
	2: "commit_info",
}

func (p *PromptCommit) IsSetDetail() bool {
	return p.Detail != nil
}

func (p *PromptCommit) IsSetCommitInfo() bool {
	return p.CommitInfo != nil
}

func (p *PromptCommit) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PromptCommit[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PromptCommit) ReadField1(iprot thrift.TProtocol) error {
	_field := NewPromptDetail()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Detail = _field
	return nil
}
func (p *PromptCommit) ReadField2(iprot thrift.TProtocol) error {
	_field := NewCommitInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.CommitInfo = _field
	return nil
}

func (p *PromptCommit) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PromptCommit"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PromptCommit) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDetail() {
		if err = oprot.WriteFieldBegin("detail", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Detail.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *PromptCommit) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCommitInfo() {
		if err = oprot.WriteFieldBegin("commit_info", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.CommitInfo.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *PromptCommit) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PromptCommit(%+v)", *p)

}

func (p *PromptCommit) DeepEqual(ano *PromptCommit) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Detail) {
		return false
	}
	if !p.Field2DeepEqual(ano.CommitInfo) {
		return false
	}
	return true
}

func (p *PromptCommit) Field1DeepEqual(src *PromptDetail) bool {

	if !p.Detail.DeepEqual(src) {
		return false
	}
	return true
}
func (p *PromptCommit) Field2DeepEqual(src *CommitInfo) bool {

	if !p.CommitInfo.DeepEqual(src) {
		return false
	}
	return true
}

type CommitInfo struct {
	Version     *string `thrift:"version,1,optional" frugal:"1,optional,string" form:"version" json:"version,omitempty" query:"version"`
	BaseVersion *string `thrift:"base_version,2,optional" frugal:"2,optional,string" form:"base_version" json:"base_version,omitempty" query:"base_version"`
	Description *string `thrift:"description,3,optional" frugal:"3,optional,string" form:"description" json:"description,omitempty" query:"description"`
	CommittedBy *string `thrift:"committed_by,4,optional" frugal:"4,optional,string" form:"committed_by" json:"committed_by,omitempty" query:"committed_by"`
	CommittedAt *int64  `thrift:"committed_at,5,optional" frugal:"5,optional,i64" json:"committed_at" form:"committed_at" query:"committed_at"`
}

func NewCommitInfo() *CommitInfo {
	return &CommitInfo{}
}

func (p *CommitInfo) InitDefault() {
}

var CommitInfo_Version_DEFAULT string

func (p *CommitInfo) GetVersion() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetVersion() {
		return CommitInfo_Version_DEFAULT
	}
	return *p.Version
}

var CommitInfo_BaseVersion_DEFAULT string

func (p *CommitInfo) GetBaseVersion() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetBaseVersion() {
		return CommitInfo_BaseVersion_DEFAULT
	}
	return *p.BaseVersion
}

var CommitInfo_Description_DEFAULT string

func (p *CommitInfo) GetDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDescription() {
		return CommitInfo_Description_DEFAULT
	}
	return *p.Description
}

var CommitInfo_CommittedBy_DEFAULT string

func (p *CommitInfo) GetCommittedBy() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetCommittedBy() {
		return CommitInfo_CommittedBy_DEFAULT
	}
	return *p.CommittedBy
}

var CommitInfo_CommittedAt_DEFAULT int64

func (p *CommitInfo) GetCommittedAt() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetCommittedAt() {
		return CommitInfo_CommittedAt_DEFAULT
	}
	return *p.CommittedAt
}
func (p *CommitInfo) SetVersion(val *string) {
	p.Version = val
}
func (p *CommitInfo) SetBaseVersion(val *string) {
	p.BaseVersion = val
}
func (p *CommitInfo) SetDescription(val *string) {
	p.Description = val
}
func (p *CommitInfo) SetCommittedBy(val *string) {
	p.CommittedBy = val
}
func (p *CommitInfo) SetCommittedAt(val *int64) {
	p.CommittedAt = val
}

var fieldIDToName_CommitInfo = map[int16]string{
	1: "version",
	2: "base_version",
	3: "description",
	4: "committed_by",
	5: "committed_at",
}

func (p *CommitInfo) IsSetVersion() bool {
	return p.Version != nil
}

func (p *CommitInfo) IsSetBaseVersion() bool {
	return p.BaseVersion != nil
}

func (p *CommitInfo) IsSetDescription() bool {
	return p.Description != nil
}

func (p *CommitInfo) IsSetCommittedBy() bool {
	return p.CommittedBy != nil
}

func (p *CommitInfo) IsSetCommittedAt() bool {
	return p.CommittedAt != nil
}

func (p *CommitInfo) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CommitInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CommitInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Version = _field
	return nil
}
func (p *CommitInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BaseVersion = _field
	return nil
}
func (p *CommitInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}
func (p *CommitInfo) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CommittedBy = _field
	return nil
}
func (p *CommitInfo) ReadField5(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CommittedAt = _field
	return nil
}

func (p *CommitInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CommitInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CommitInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err = oprot.WriteFieldBegin("version", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Version); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CommitInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseVersion() {
		if err = oprot.WriteFieldBegin("base_version", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.BaseVersion); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *CommitInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *CommitInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetCommittedBy() {
		if err = oprot.WriteFieldBegin("committed_by", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CommittedBy); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *CommitInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetCommittedAt() {
		if err = oprot.WriteFieldBegin("committed_at", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CommittedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *CommitInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommitInfo(%+v)", *p)

}

func (p *CommitInfo) DeepEqual(ano *CommitInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Version) {
		return false
	}
	if !p.Field2DeepEqual(ano.BaseVersion) {
		return false
	}
	if !p.Field3DeepEqual(ano.Description) {
		return false
	}
	if !p.Field4DeepEqual(ano.CommittedBy) {
		return false
	}
	if !p.Field5DeepEqual(ano.CommittedAt) {
		return false
	}
	return true
}

func (p *CommitInfo) Field1DeepEqual(src *string) bool {

	if p.Version == src {
		return true
	} else if p.Version == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Version, *src) != 0 {
		return false
	}
	return true
}
func (p *CommitInfo) Field2DeepEqual(src *string) bool {

	if p.BaseVersion == src {
		return true
	} else if p.BaseVersion == nil || src == nil {
		return false
	}
	if strings.Compare(*p.BaseVersion, *src) != 0 {
		return false
	}
	return true
}
func (p *CommitInfo) Field3DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *CommitInfo) Field4DeepEqual(src *string) bool {

	if p.CommittedBy == src {
		return true
	} else if p.CommittedBy == nil || src == nil {
		return false
	}
	if strings.Compare(*p.CommittedBy, *src) != 0 {
		return false
	}
	return true
}
func (p *CommitInfo) Field5DeepEqual(src *int64) bool {

	if p.CommittedAt == src {
		return true
	} else if p.CommittedAt == nil || src == nil {
		return false
	}
	if *p.CommittedAt != *src {
		return false
	}
	return true
}

type PromptDraft struct {
	Detail    *PromptDetail `thrift:"detail,1,optional" frugal:"1,optional,PromptDetail" form:"detail" json:"detail,omitempty" query:"detail"`
	DraftInfo *DraftInfo    `thrift:"draft_info,2,optional" frugal:"2,optional,DraftInfo" form:"draft_info" json:"draft_info,omitempty" query:"draft_info"`
}

func NewPromptDraft() *PromptDraft {
	return &PromptDraft{}
}

func (p *PromptDraft) InitDefault() {
}

var PromptDraft_Detail_DEFAULT *PromptDetail

func (p *PromptDraft) GetDetail() (v *PromptDetail) {
	if p == nil {
		return
	}
	if !p.IsSetDetail() {
		return PromptDraft_Detail_DEFAULT
	}
	return p.Detail
}

var PromptDraft_DraftInfo_DEFAULT *DraftInfo

func (p *PromptDraft) GetDraftInfo() (v *DraftInfo) {
	if p == nil {
		return
	}
	if !p.IsSetDraftInfo() {
		return PromptDraft_DraftInfo_DEFAULT
	}
	return p.DraftInfo
}
func (p *PromptDraft) SetDetail(val *PromptDetail) {
	p.Detail = val
}
func (p *PromptDraft) SetDraftInfo(val *DraftInfo) {
	p.DraftInfo = val
}

var fieldIDToName_PromptDraft = map[int16]string{
	1: "detail",
	2: "draft_info",
}

func (p *PromptDraft) IsSetDetail() bool {
	return p.Detail != nil
}

func (p *PromptDraft) IsSetDraftInfo() bool {
	return p.DraftInfo != nil
}

func (p *PromptDraft) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PromptDraft[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PromptDraft) ReadField1(iprot thrift.TProtocol) error {
	_field := NewPromptDetail()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Detail = _field
	return nil
}
func (p *PromptDraft) ReadField2(iprot thrift.TProtocol) error {
	_field := NewDraftInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.DraftInfo = _field
	return nil
}

func (p *PromptDraft) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PromptDraft"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PromptDraft) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDetail() {
		if err = oprot.WriteFieldBegin("detail", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Detail.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *PromptDraft) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDraftInfo() {
		if err = oprot.WriteFieldBegin("draft_info", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.DraftInfo.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *PromptDraft) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PromptDraft(%+v)", *p)

}

func (p *PromptDraft) DeepEqual(ano *PromptDraft) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Detail) {
		return false
	}
	if !p.Field2DeepEqual(ano.DraftInfo) {
		return false
	}
	return true
}

func (p *PromptDraft) Field1DeepEqual(src *PromptDetail) bool {

	if !p.Detail.DeepEqual(src) {
		return false
	}
	return true
}
func (p *PromptDraft) Field2DeepEqual(src *DraftInfo) bool {

	if !p.DraftInfo.DeepEqual(src) {
		return false
	}
	return true
}

type DraftInfo struct {
	UserID      *string `thrift:"user_id,1,optional" frugal:"1,optional,string" form:"user_id" json:"user_id,omitempty" query:"user_id"`
	BaseVersion *string `thrift:"base_version,2,optional" frugal:"2,optional,string" form:"base_version" json:"base_version,omitempty" query:"base_version"`
	IsModified  *bool   `thrift:"is_modified,3,optional" frugal:"3,optional,bool" form:"is_modified" json:"is_modified,omitempty" query:"is_modified"`
	CreatedAt   *int64  `thrift:"created_at,11,optional" frugal:"11,optional,i64" json:"created_at" form:"created_at" query:"created_at"`
	UpdatedAt   *int64  `thrift:"updated_at,12,optional" frugal:"12,optional,i64" json:"updated_at" form:"updated_at" query:"updated_at"`
}

func NewDraftInfo() *DraftInfo {
	return &DraftInfo{}
}

func (p *DraftInfo) InitDefault() {
}

var DraftInfo_UserID_DEFAULT string

func (p *DraftInfo) GetUserID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetUserID() {
		return DraftInfo_UserID_DEFAULT
	}
	return *p.UserID
}

var DraftInfo_BaseVersion_DEFAULT string

func (p *DraftInfo) GetBaseVersion() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetBaseVersion() {
		return DraftInfo_BaseVersion_DEFAULT
	}
	return *p.BaseVersion
}

var DraftInfo_IsModified_DEFAULT bool

func (p *DraftInfo) GetIsModified() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetIsModified() {
		return DraftInfo_IsModified_DEFAULT
	}
	return *p.IsModified
}

var DraftInfo_CreatedAt_DEFAULT int64

func (p *DraftInfo) GetCreatedAt() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetCreatedAt() {
		return DraftInfo_CreatedAt_DEFAULT
	}
	return *p.CreatedAt
}

var DraftInfo_UpdatedAt_DEFAULT int64

func (p *DraftInfo) GetUpdatedAt() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetUpdatedAt() {
		return DraftInfo_UpdatedAt_DEFAULT
	}
	return *p.UpdatedAt
}
func (p *DraftInfo) SetUserID(val *string) {
	p.UserID = val
}
func (p *DraftInfo) SetBaseVersion(val *string) {
	p.BaseVersion = val
}
func (p *DraftInfo) SetIsModified(val *bool) {
	p.IsModified = val
}
func (p *DraftInfo) SetCreatedAt(val *int64) {
	p.CreatedAt = val
}
func (p *DraftInfo) SetUpdatedAt(val *int64) {
	p.UpdatedAt = val
}

var fieldIDToName_DraftInfo = map[int16]string{
	1:  "user_id",
	2:  "base_version",
	3:  "is_modified",
	11: "created_at",
	12: "updated_at",
}

func (p *DraftInfo) IsSetUserID() bool {
	return p.UserID != nil
}

func (p *DraftInfo) IsSetBaseVersion() bool {
	return p.BaseVersion != nil
}

func (p *DraftInfo) IsSetIsModified() bool {
	return p.IsModified != nil
}

func (p *DraftInfo) IsSetCreatedAt() bool {
	return p.CreatedAt != nil
}

func (p *DraftInfo) IsSetUpdatedAt() bool {
	return p.UpdatedAt != nil
}

func (p *DraftInfo) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DraftInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DraftInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UserID = _field
	return nil
}
func (p *DraftInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.BaseVersion = _field
	return nil
}
func (p *DraftInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsModified = _field
	return nil
}
func (p *DraftInfo) ReadField11(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CreatedAt = _field
	return nil
}
func (p *DraftInfo) ReadField12(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UpdatedAt = _field
	return nil
}

func (p *DraftInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DraftInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DraftInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserID() {
		if err = oprot.WriteFieldBegin("user_id", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.UserID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *DraftInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseVersion() {
		if err = oprot.WriteFieldBegin("base_version", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.BaseVersion); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *DraftInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsModified() {
		if err = oprot.WriteFieldBegin("is_modified", thrift.BOOL, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsModified); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *DraftInfo) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedAt() {
		if err = oprot.WriteFieldBegin("created_at", thrift.I64, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CreatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}
func (p *DraftInfo) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdatedAt() {
		if err = oprot.WriteFieldBegin("updated_at", thrift.I64, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.UpdatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *DraftInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DraftInfo(%+v)", *p)

}

func (p *DraftInfo) DeepEqual(ano *DraftInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.UserID) {
		return false
	}
	if !p.Field2DeepEqual(ano.BaseVersion) {
		return false
	}
	if !p.Field3DeepEqual(ano.IsModified) {
		return false
	}
	if !p.Field11DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field12DeepEqual(ano.UpdatedAt) {
		return false
	}
	return true
}

func (p *DraftInfo) Field1DeepEqual(src *string) bool {

	if p.UserID == src {
		return true
	} else if p.UserID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.UserID, *src) != 0 {
		return false
	}
	return true
}
func (p *DraftInfo) Field2DeepEqual(src *string) bool {

	if p.BaseVersion == src {
		return true
	} else if p.BaseVersion == nil || src == nil {
		return false
	}
	if strings.Compare(*p.BaseVersion, *src) != 0 {
		return false
	}
	return true
}
func (p *DraftInfo) Field3DeepEqual(src *bool) bool {

	if p.IsModified == src {
		return true
	} else if p.IsModified == nil || src == nil {
		return false
	}
	if *p.IsModified != *src {
		return false
	}
	return true
}
func (p *DraftInfo) Field11DeepEqual(src *int64) bool {

	if p.CreatedAt == src {
		return true
	} else if p.CreatedAt == nil || src == nil {
		return false
	}
	if *p.CreatedAt != *src {
		return false
	}
	return true
}
func (p *DraftInfo) Field12DeepEqual(src *int64) bool {

	if p.UpdatedAt == src {
		return true
	} else if p.UpdatedAt == nil || src == nil {
		return false
	}
	if *p.UpdatedAt != *src {
		return false
	}
	return true
}

type PromptDetail struct {
	PromptTemplate *PromptTemplate `thrift:"prompt_template,1,optional" frugal:"1,optional,PromptTemplate" form:"prompt_template" json:"prompt_template,omitempty" query:"prompt_template"`
	Tools          []*Tool         `thrift:"tools,2,optional" frugal:"2,optional,list<Tool>" form:"tools" json:"tools,omitempty" query:"tools"`
	ToolCallConfig *ToolCallConfig `thrift:"tool_call_config,3,optional" frugal:"3,optional,ToolCallConfig" form:"tool_call_config" json:"tool_call_config,omitempty" query:"tool_call_config"`
	ModelConfig    *ModelConfig    `thrift:"model_config,4,optional" frugal:"4,optional,ModelConfig" form:"model_config" json:"model_config,omitempty" query:"model_config"`
}

func NewPromptDetail() *PromptDetail {
	return &PromptDetail{}
}

func (p *PromptDetail) InitDefault() {
}

var PromptDetail_PromptTemplate_DEFAULT *PromptTemplate

func (p *PromptDetail) GetPromptTemplate() (v *PromptTemplate) {
	if p == nil {
		return
	}
	if !p.IsSetPromptTemplate() {
		return PromptDetail_PromptTemplate_DEFAULT
	}
	return p.PromptTemplate
}

var PromptDetail_Tools_DEFAULT []*Tool

func (p *PromptDetail) GetTools() (v []*Tool) {
	if p == nil {
		return
	}
	if !p.IsSetTools() {
		return PromptDetail_Tools_DEFAULT
	}
	return p.Tools
}

var PromptDetail_ToolCallConfig_DEFAULT *ToolCallConfig

func (p *PromptDetail) GetToolCallConfig() (v *ToolCallConfig) {
	if p == nil {
		return
	}
	if !p.IsSetToolCallConfig() {
		return PromptDetail_ToolCallConfig_DEFAULT
	}
	return p.ToolCallConfig
}

var PromptDetail_ModelConfig_DEFAULT *ModelConfig

func (p *PromptDetail) GetModelConfig() (v *ModelConfig) {
	if p == nil {
		return
	}
	if !p.IsSetModelConfig() {
		return PromptDetail_ModelConfig_DEFAULT
	}
	return p.ModelConfig
}
func (p *PromptDetail) SetPromptTemplate(val *PromptTemplate) {
	p.PromptTemplate = val
}
func (p *PromptDetail) SetTools(val []*Tool) {
	p.Tools = val
}
func (p *PromptDetail) SetToolCallConfig(val *ToolCallConfig) {
	p.ToolCallConfig = val
}
func (p *PromptDetail) SetModelConfig(val *ModelConfig) {
	p.ModelConfig = val
}

var fieldIDToName_PromptDetail = map[int16]string{
	1: "prompt_template",
	2: "tools",
	3: "tool_call_config",
	4: "model_config",
}

func (p *PromptDetail) IsSetPromptTemplate() bool {
	return p.PromptTemplate != nil
}

func (p *PromptDetail) IsSetTools() bool {
	return p.Tools != nil
}

func (p *PromptDetail) IsSetToolCallConfig() bool {
	return p.ToolCallConfig != nil
}

func (p *PromptDetail) IsSetModelConfig() bool {
	return p.ModelConfig != nil
}

func (p *PromptDetail) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PromptDetail[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PromptDetail) ReadField1(iprot thrift.TProtocol) error {
	_field := NewPromptTemplate()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.PromptTemplate = _field
	return nil
}
func (p *PromptDetail) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*Tool, 0, size)
	values := make([]Tool, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Tools = _field
	return nil
}
func (p *PromptDetail) ReadField3(iprot thrift.TProtocol) error {
	_field := NewToolCallConfig()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ToolCallConfig = _field
	return nil
}
func (p *PromptDetail) ReadField4(iprot thrift.TProtocol) error {
	_field := NewModelConfig()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ModelConfig = _field
	return nil
}

func (p *PromptDetail) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PromptDetail"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PromptDetail) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPromptTemplate() {
		if err = oprot.WriteFieldBegin("prompt_template", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.PromptTemplate.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *PromptDetail) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTools() {
		if err = oprot.WriteFieldBegin("tools", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tools)); err != nil {
			return err
		}
		for _, v := range p.Tools {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *PromptDetail) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetToolCallConfig() {
		if err = oprot.WriteFieldBegin("tool_call_config", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ToolCallConfig.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *PromptDetail) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetModelConfig() {
		if err = oprot.WriteFieldBegin("model_config", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ModelConfig.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *PromptDetail) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PromptDetail(%+v)", *p)

}

func (p *PromptDetail) DeepEqual(ano *PromptDetail) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PromptTemplate) {
		return false
	}
	if !p.Field2DeepEqual(ano.Tools) {
		return false
	}
	if !p.Field3DeepEqual(ano.ToolCallConfig) {
		return false
	}
	if !p.Field4DeepEqual(ano.ModelConfig) {
		return false
	}
	return true
}

func (p *PromptDetail) Field1DeepEqual(src *PromptTemplate) bool {

	if !p.PromptTemplate.DeepEqual(src) {
		return false
	}
	return true
}
func (p *PromptDetail) Field2DeepEqual(src []*Tool) bool {

	if len(p.Tools) != len(src) {
		return false
	}
	for i, v := range p.Tools {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *PromptDetail) Field3DeepEqual(src *ToolCallConfig) bool {

	if !p.ToolCallConfig.DeepEqual(src) {
		return false
	}
	return true
}
func (p *PromptDetail) Field4DeepEqual(src *ModelConfig) bool {

	if !p.ModelConfig.DeepEqual(src) {
		return false
	}
	return true
}

type PromptTemplate struct {
	TemplateType *TemplateType  `thrift:"template_type,1,optional" frugal:"1,optional,string" form:"template_type" json:"template_type,omitempty" query:"template_type"`
	Messages     []*Message     `thrift:"messages,2,optional" frugal:"2,optional,list<Message>" form:"messages" json:"messages,omitempty" query:"messages"`
	VariableDefs []*VariableDef `thrift:"variable_defs,3,optional" frugal:"3,optional,list<VariableDef>" form:"variable_defs" json:"variable_defs,omitempty" query:"variable_defs"`
}

func NewPromptTemplate() *PromptTemplate {
	return &PromptTemplate{}
}

func (p *PromptTemplate) InitDefault() {
}

var PromptTemplate_TemplateType_DEFAULT TemplateType

func (p *PromptTemplate) GetTemplateType() (v TemplateType) {
	if p == nil {
		return
	}
	if !p.IsSetTemplateType() {
		return PromptTemplate_TemplateType_DEFAULT
	}
	return *p.TemplateType
}

var PromptTemplate_Messages_DEFAULT []*Message

func (p *PromptTemplate) GetMessages() (v []*Message) {
	if p == nil {
		return
	}
	if !p.IsSetMessages() {
		return PromptTemplate_Messages_DEFAULT
	}
	return p.Messages
}

var PromptTemplate_VariableDefs_DEFAULT []*VariableDef

func (p *PromptTemplate) GetVariableDefs() (v []*VariableDef) {
	if p == nil {
		return
	}
	if !p.IsSetVariableDefs() {
		return PromptTemplate_VariableDefs_DEFAULT
	}
	return p.VariableDefs
}
func (p *PromptTemplate) SetTemplateType(val *TemplateType) {
	p.TemplateType = val
}
func (p *PromptTemplate) SetMessages(val []*Message) {
	p.Messages = val
}
func (p *PromptTemplate) SetVariableDefs(val []*VariableDef) {
	p.VariableDefs = val
}

var fieldIDToName_PromptTemplate = map[int16]string{
	1: "template_type",
	2: "messages",
	3: "variable_defs",
}

func (p *PromptTemplate) IsSetTemplateType() bool {
	return p.TemplateType != nil
}

func (p *PromptTemplate) IsSetMessages() bool {
	return p.Messages != nil
}

func (p *PromptTemplate) IsSetVariableDefs() bool {
	return p.VariableDefs != nil
}

func (p *PromptTemplate) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PromptTemplate[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PromptTemplate) ReadField1(iprot thrift.TProtocol) error {

	var _field *TemplateType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TemplateType = _field
	return nil
}
func (p *PromptTemplate) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*Message, 0, size)
	values := make([]Message, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Messages = _field
	return nil
}
func (p *PromptTemplate) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*VariableDef, 0, size)
	values := make([]VariableDef, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.VariableDefs = _field
	return nil
}

func (p *PromptTemplate) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PromptTemplate"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PromptTemplate) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTemplateType() {
		if err = oprot.WriteFieldBegin("template_type", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TemplateType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *PromptTemplate) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessages() {
		if err = oprot.WriteFieldBegin("messages", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Messages)); err != nil {
			return err
		}
		for _, v := range p.Messages {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *PromptTemplate) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetVariableDefs() {
		if err = oprot.WriteFieldBegin("variable_defs", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.VariableDefs)); err != nil {
			return err
		}
		for _, v := range p.VariableDefs {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *PromptTemplate) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PromptTemplate(%+v)", *p)

}

func (p *PromptTemplate) DeepEqual(ano *PromptTemplate) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TemplateType) {
		return false
	}
	if !p.Field2DeepEqual(ano.Messages) {
		return false
	}
	if !p.Field3DeepEqual(ano.VariableDefs) {
		return false
	}
	return true
}

func (p *PromptTemplate) Field1DeepEqual(src *TemplateType) bool {

	if p.TemplateType == src {
		return true
	} else if p.TemplateType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TemplateType, *src) != 0 {
		return false
	}
	return true
}
func (p *PromptTemplate) Field2DeepEqual(src []*Message) bool {

	if len(p.Messages) != len(src) {
		return false
	}
	for i, v := range p.Messages {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *PromptTemplate) Field3DeepEqual(src []*VariableDef) bool {

	if len(p.VariableDefs) != len(src) {
		return false
	}
	for i, v := range p.VariableDefs {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type Tool struct {
	Type     *ToolType `thrift:"type,1,optional" frugal:"1,optional,string" form:"type" json:"type,omitempty" query:"type"`
	Function *Function `thrift:"function,2,optional" frugal:"2,optional,Function" form:"function" json:"function,omitempty" query:"function"`
}

func NewTool() *Tool {
	return &Tool{}
}

func (p *Tool) InitDefault() {
}

var Tool_Type_DEFAULT ToolType

func (p *Tool) GetType() (v ToolType) {
	if p == nil {
		return
	}
	if !p.IsSetType() {
		return Tool_Type_DEFAULT
	}
	return *p.Type
}

var Tool_Function_DEFAULT *Function

func (p *Tool) GetFunction() (v *Function) {
	if p == nil {
		return
	}
	if !p.IsSetFunction() {
		return Tool_Function_DEFAULT
	}
	return p.Function
}
func (p *Tool) SetType(val *ToolType) {
	p.Type = val
}
func (p *Tool) SetFunction(val *Function) {
	p.Function = val
}

var fieldIDToName_Tool = map[int16]string{
	1: "type",
	2: "function",
}

func (p *Tool) IsSetType() bool {
	return p.Type != nil
}

func (p *Tool) IsSetFunction() bool {
	return p.Function != nil
}

func (p *Tool) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Tool[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Tool) ReadField1(iprot thrift.TProtocol) error {

	var _field *ToolType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Type = _field
	return nil
}
func (p *Tool) ReadField2(iprot thrift.TProtocol) error {
	_field := NewFunction()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Function = _field
	return nil
}

func (p *Tool) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Tool"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Tool) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("type", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Type); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *Tool) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetFunction() {
		if err = oprot.WriteFieldBegin("function", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Function.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Tool) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Tool(%+v)", *p)

}

func (p *Tool) DeepEqual(ano *Tool) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Type) {
		return false
	}
	if !p.Field2DeepEqual(ano.Function) {
		return false
	}
	return true
}

func (p *Tool) Field1DeepEqual(src *ToolType) bool {

	if p.Type == src {
		return true
	} else if p.Type == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Type, *src) != 0 {
		return false
	}
	return true
}
func (p *Tool) Field2DeepEqual(src *Function) bool {

	if !p.Function.DeepEqual(src) {
		return false
	}
	return true
}

type Function struct {
	Name        *string `thrift:"name,1,optional" frugal:"1,optional,string" form:"name" json:"name,omitempty" query:"name"`
	Description *string `thrift:"description,2,optional" frugal:"2,optional,string" form:"description" json:"description,omitempty" query:"description"`
	Parameters  *string `thrift:"parameters,3,optional" frugal:"3,optional,string" form:"parameters" json:"parameters,omitempty" query:"parameters"`
}

func NewFunction() *Function {
	return &Function{}
}

func (p *Function) InitDefault() {
}

var Function_Name_DEFAULT string

func (p *Function) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return Function_Name_DEFAULT
	}
	return *p.Name
}

var Function_Description_DEFAULT string

func (p *Function) GetDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDescription() {
		return Function_Description_DEFAULT
	}
	return *p.Description
}

var Function_Parameters_DEFAULT string

func (p *Function) GetParameters() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetParameters() {
		return Function_Parameters_DEFAULT
	}
	return *p.Parameters
}
func (p *Function) SetName(val *string) {
	p.Name = val
}
func (p *Function) SetDescription(val *string) {
	p.Description = val
}
func (p *Function) SetParameters(val *string) {
	p.Parameters = val
}

var fieldIDToName_Function = map[int16]string{
	1: "name",
	2: "description",
	3: "parameters",
}

func (p *Function) IsSetName() bool {
	return p.Name != nil
}

func (p *Function) IsSetDescription() bool {
	return p.Description != nil
}

func (p *Function) IsSetParameters() bool {
	return p.Parameters != nil
}

func (p *Function) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Function[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Function) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *Function) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}
func (p *Function) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Parameters = _field
	return nil
}

func (p *Function) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Function"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Function) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *Function) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *Function) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetParameters() {
		if err = oprot.WriteFieldBegin("parameters", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Parameters); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Function) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Function(%+v)", *p)

}

func (p *Function) DeepEqual(ano *Function) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Description) {
		return false
	}
	if !p.Field3DeepEqual(ano.Parameters) {
		return false
	}
	return true
}

func (p *Function) Field1DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *Function) Field2DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *Function) Field3DeepEqual(src *string) bool {

	if p.Parameters == src {
		return true
	} else if p.Parameters == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Parameters, *src) != 0 {
		return false
	}
	return true
}

type ToolCallConfig struct {
	ToolChoice *ToolChoiceType `thrift:"tool_choice,1,optional" frugal:"1,optional,string" form:"tool_choice" json:"tool_choice,omitempty" query:"tool_choice"`
}

func NewToolCallConfig() *ToolCallConfig {
	return &ToolCallConfig{}
}

func (p *ToolCallConfig) InitDefault() {
}

var ToolCallConfig_ToolChoice_DEFAULT ToolChoiceType

func (p *ToolCallConfig) GetToolChoice() (v ToolChoiceType) {
	if p == nil {
		return
	}
	if !p.IsSetToolChoice() {
		return ToolCallConfig_ToolChoice_DEFAULT
	}
	return *p.ToolChoice
}
func (p *ToolCallConfig) SetToolChoice(val *ToolChoiceType) {
	p.ToolChoice = val
}

var fieldIDToName_ToolCallConfig = map[int16]string{
	1: "tool_choice",
}

func (p *ToolCallConfig) IsSetToolChoice() bool {
	return p.ToolChoice != nil
}

func (p *ToolCallConfig) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ToolCallConfig[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ToolCallConfig) ReadField1(iprot thrift.TProtocol) error {

	var _field *ToolChoiceType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ToolChoice = _field
	return nil
}

func (p *ToolCallConfig) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ToolCallConfig"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ToolCallConfig) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetToolChoice() {
		if err = oprot.WriteFieldBegin("tool_choice", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ToolChoice); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ToolCallConfig) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ToolCallConfig(%+v)", *p)

}

func (p *ToolCallConfig) DeepEqual(ano *ToolCallConfig) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ToolChoice) {
		return false
	}
	return true
}

func (p *ToolCallConfig) Field1DeepEqual(src *ToolChoiceType) bool {

	if p.ToolChoice == src {
		return true
	} else if p.ToolChoice == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ToolChoice, *src) != 0 {
		return false
	}
	return true
}

type ModelConfig struct {
	ModelID          *int64   `thrift:"model_id,1,optional" frugal:"1,optional,i64" json:"model_id" form:"model_id" query:"model_id"`
	MaxTokens        *int32   `thrift:"max_tokens,2,optional" frugal:"2,optional,i32" form:"max_tokens" json:"max_tokens,omitempty" query:"max_tokens"`
	Temperature      *float64 `thrift:"temperature,3,optional" frugal:"3,optional,double" form:"temperature" json:"temperature,omitempty" query:"temperature"`
	TopK             *int32   `thrift:"top_k,4,optional" frugal:"4,optional,i32" form:"top_k" json:"top_k,omitempty" query:"top_k"`
	TopP             *float64 `thrift:"top_p,5,optional" frugal:"5,optional,double" form:"top_p" json:"top_p,omitempty" query:"top_p"`
	PresencePenalty  *float64 `thrift:"presence_penalty,6,optional" frugal:"6,optional,double" form:"presence_penalty" json:"presence_penalty,omitempty" query:"presence_penalty"`
	FrequencyPenalty *float64 `thrift:"frequency_penalty,7,optional" frugal:"7,optional,double" form:"frequency_penalty" json:"frequency_penalty,omitempty" query:"frequency_penalty"`
	JSONMode         *bool    `thrift:"json_mode,8,optional" frugal:"8,optional,bool" form:"json_mode" json:"json_mode,omitempty" query:"json_mode"`
}

func NewModelConfig() *ModelConfig {
	return &ModelConfig{}
}

func (p *ModelConfig) InitDefault() {
}

var ModelConfig_ModelID_DEFAULT int64

func (p *ModelConfig) GetModelID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetModelID() {
		return ModelConfig_ModelID_DEFAULT
	}
	return *p.ModelID
}

var ModelConfig_MaxTokens_DEFAULT int32

func (p *ModelConfig) GetMaxTokens() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetMaxTokens() {
		return ModelConfig_MaxTokens_DEFAULT
	}
	return *p.MaxTokens
}

var ModelConfig_Temperature_DEFAULT float64

func (p *ModelConfig) GetTemperature() (v float64) {
	if p == nil {
		return
	}
	if !p.IsSetTemperature() {
		return ModelConfig_Temperature_DEFAULT
	}
	return *p.Temperature
}

var ModelConfig_TopK_DEFAULT int32

func (p *ModelConfig) GetTopK() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetTopK() {
		return ModelConfig_TopK_DEFAULT
	}
	return *p.TopK
}

var ModelConfig_TopP_DEFAULT float64

func (p *ModelConfig) GetTopP() (v float64) {
	if p == nil {
		return
	}
	if !p.IsSetTopP() {
		return ModelConfig_TopP_DEFAULT
	}
	return *p.TopP
}

var ModelConfig_PresencePenalty_DEFAULT float64

func (p *ModelConfig) GetPresencePenalty() (v float64) {
	if p == nil {
		return
	}
	if !p.IsSetPresencePenalty() {
		return ModelConfig_PresencePenalty_DEFAULT
	}
	return *p.PresencePenalty
}

var ModelConfig_FrequencyPenalty_DEFAULT float64

func (p *ModelConfig) GetFrequencyPenalty() (v float64) {
	if p == nil {
		return
	}
	if !p.IsSetFrequencyPenalty() {
		return ModelConfig_FrequencyPenalty_DEFAULT
	}
	return *p.FrequencyPenalty
}

var ModelConfig_JSONMode_DEFAULT bool

func (p *ModelConfig) GetJSONMode() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetJSONMode() {
		return ModelConfig_JSONMode_DEFAULT
	}
	return *p.JSONMode
}
func (p *ModelConfig) SetModelID(val *int64) {
	p.ModelID = val
}
func (p *ModelConfig) SetMaxTokens(val *int32) {
	p.MaxTokens = val
}
func (p *ModelConfig) SetTemperature(val *float64) {
	p.Temperature = val
}
func (p *ModelConfig) SetTopK(val *int32) {
	p.TopK = val
}
func (p *ModelConfig) SetTopP(val *float64) {
	p.TopP = val
}
func (p *ModelConfig) SetPresencePenalty(val *float64) {
	p.PresencePenalty = val
}
func (p *ModelConfig) SetFrequencyPenalty(val *float64) {
	p.FrequencyPenalty = val
}
func (p *ModelConfig) SetJSONMode(val *bool) {
	p.JSONMode = val
}

var fieldIDToName_ModelConfig = map[int16]string{
	1: "model_id",
	2: "max_tokens",
	3: "temperature",
	4: "top_k",
	5: "top_p",
	6: "presence_penalty",
	7: "frequency_penalty",
	8: "json_mode",
}

func (p *ModelConfig) IsSetModelID() bool {
	return p.ModelID != nil
}

func (p *ModelConfig) IsSetMaxTokens() bool {
	return p.MaxTokens != nil
}

func (p *ModelConfig) IsSetTemperature() bool {
	return p.Temperature != nil
}

func (p *ModelConfig) IsSetTopK() bool {
	return p.TopK != nil
}

func (p *ModelConfig) IsSetTopP() bool {
	return p.TopP != nil
}

func (p *ModelConfig) IsSetPresencePenalty() bool {
	return p.PresencePenalty != nil
}

func (p *ModelConfig) IsSetFrequencyPenalty() bool {
	return p.FrequencyPenalty != nil
}

func (p *ModelConfig) IsSetJSONMode() bool {
	return p.JSONMode != nil
}

func (p *ModelConfig) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ModelConfig[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ModelConfig) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ModelID = _field
	return nil
}
func (p *ModelConfig) ReadField2(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MaxTokens = _field
	return nil
}
func (p *ModelConfig) ReadField3(iprot thrift.TProtocol) error {

	var _field *float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Temperature = _field
	return nil
}
func (p *ModelConfig) ReadField4(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TopK = _field
	return nil
}
func (p *ModelConfig) ReadField5(iprot thrift.TProtocol) error {

	var _field *float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TopP = _field
	return nil
}
func (p *ModelConfig) ReadField6(iprot thrift.TProtocol) error {

	var _field *float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PresencePenalty = _field
	return nil
}
func (p *ModelConfig) ReadField7(iprot thrift.TProtocol) error {

	var _field *float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FrequencyPenalty = _field
	return nil
}
func (p *ModelConfig) ReadField8(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.JSONMode = _field
	return nil
}

func (p *ModelConfig) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ModelConfig"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ModelConfig) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetModelID() {
		if err = oprot.WriteFieldBegin("model_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ModelID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ModelConfig) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxTokens() {
		if err = oprot.WriteFieldBegin("max_tokens", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.MaxTokens); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ModelConfig) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTemperature() {
		if err = oprot.WriteFieldBegin("temperature", thrift.DOUBLE, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.Temperature); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ModelConfig) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTopK() {
		if err = oprot.WriteFieldBegin("top_k", thrift.I32, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.TopK); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *ModelConfig) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTopP() {
		if err = oprot.WriteFieldBegin("top_p", thrift.DOUBLE, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.TopP); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *ModelConfig) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetPresencePenalty() {
		if err = oprot.WriteFieldBegin("presence_penalty", thrift.DOUBLE, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.PresencePenalty); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *ModelConfig) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetFrequencyPenalty() {
		if err = oprot.WriteFieldBegin("frequency_penalty", thrift.DOUBLE, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.FrequencyPenalty); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}
func (p *ModelConfig) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetJSONMode() {
		if err = oprot.WriteFieldBegin("json_mode", thrift.BOOL, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.JSONMode); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *ModelConfig) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ModelConfig(%+v)", *p)

}

func (p *ModelConfig) DeepEqual(ano *ModelConfig) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ModelID) {
		return false
	}
	if !p.Field2DeepEqual(ano.MaxTokens) {
		return false
	}
	if !p.Field3DeepEqual(ano.Temperature) {
		return false
	}
	if !p.Field4DeepEqual(ano.TopK) {
		return false
	}
	if !p.Field5DeepEqual(ano.TopP) {
		return false
	}
	if !p.Field6DeepEqual(ano.PresencePenalty) {
		return false
	}
	if !p.Field7DeepEqual(ano.FrequencyPenalty) {
		return false
	}
	if !p.Field8DeepEqual(ano.JSONMode) {
		return false
	}
	return true
}

func (p *ModelConfig) Field1DeepEqual(src *int64) bool {

	if p.ModelID == src {
		return true
	} else if p.ModelID == nil || src == nil {
		return false
	}
	if *p.ModelID != *src {
		return false
	}
	return true
}
func (p *ModelConfig) Field2DeepEqual(src *int32) bool {

	if p.MaxTokens == src {
		return true
	} else if p.MaxTokens == nil || src == nil {
		return false
	}
	if *p.MaxTokens != *src {
		return false
	}
	return true
}
func (p *ModelConfig) Field3DeepEqual(src *float64) bool {

	if p.Temperature == src {
		return true
	} else if p.Temperature == nil || src == nil {
		return false
	}
	if *p.Temperature != *src {
		return false
	}
	return true
}
func (p *ModelConfig) Field4DeepEqual(src *int32) bool {

	if p.TopK == src {
		return true
	} else if p.TopK == nil || src == nil {
		return false
	}
	if *p.TopK != *src {
		return false
	}
	return true
}
func (p *ModelConfig) Field5DeepEqual(src *float64) bool {

	if p.TopP == src {
		return true
	} else if p.TopP == nil || src == nil {
		return false
	}
	if *p.TopP != *src {
		return false
	}
	return true
}
func (p *ModelConfig) Field6DeepEqual(src *float64) bool {

	if p.PresencePenalty == src {
		return true
	} else if p.PresencePenalty == nil || src == nil {
		return false
	}
	if *p.PresencePenalty != *src {
		return false
	}
	return true
}
func (p *ModelConfig) Field7DeepEqual(src *float64) bool {

	if p.FrequencyPenalty == src {
		return true
	} else if p.FrequencyPenalty == nil || src == nil {
		return false
	}
	if *p.FrequencyPenalty != *src {
		return false
	}
	return true
}
func (p *ModelConfig) Field8DeepEqual(src *bool) bool {

	if p.JSONMode == src {
		return true
	} else if p.JSONMode == nil || src == nil {
		return false
	}
	if *p.JSONMode != *src {
		return false
	}
	return true
}

type Message struct {
	Role             *Role          `thrift:"role,1,optional" frugal:"1,optional,string" form:"role" json:"role,omitempty" query:"role"`
	ReasoningContent *string        `thrift:"reasoning_content,2,optional" frugal:"2,optional,string" form:"reasoning_content" json:"reasoning_content,omitempty" query:"reasoning_content"`
	Content          *string        `thrift:"content,3,optional" frugal:"3,optional,string" form:"content" json:"content,omitempty" query:"content"`
	Parts            []*ContentPart `thrift:"parts,4,optional" frugal:"4,optional,list<ContentPart>" form:"parts" json:"parts,omitempty" query:"parts"`
	ToolCallID       *string        `thrift:"tool_call_id,5,optional" frugal:"5,optional,string" form:"tool_call_id" json:"tool_call_id,omitempty" query:"tool_call_id"`
	ToolCalls        []*ToolCall    `thrift:"tool_calls,6,optional" frugal:"6,optional,list<ToolCall>" form:"tool_calls" json:"tool_calls,omitempty" query:"tool_calls"`
}

func NewMessage() *Message {
	return &Message{}
}

func (p *Message) InitDefault() {
}

var Message_Role_DEFAULT Role

func (p *Message) GetRole() (v Role) {
	if p == nil {
		return
	}
	if !p.IsSetRole() {
		return Message_Role_DEFAULT
	}
	return *p.Role
}

var Message_ReasoningContent_DEFAULT string

func (p *Message) GetReasoningContent() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetReasoningContent() {
		return Message_ReasoningContent_DEFAULT
	}
	return *p.ReasoningContent
}

var Message_Content_DEFAULT string

func (p *Message) GetContent() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetContent() {
		return Message_Content_DEFAULT
	}
	return *p.Content
}

var Message_Parts_DEFAULT []*ContentPart

func (p *Message) GetParts() (v []*ContentPart) {
	if p == nil {
		return
	}
	if !p.IsSetParts() {
		return Message_Parts_DEFAULT
	}
	return p.Parts
}

var Message_ToolCallID_DEFAULT string

func (p *Message) GetToolCallID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetToolCallID() {
		return Message_ToolCallID_DEFAULT
	}
	return *p.ToolCallID
}

var Message_ToolCalls_DEFAULT []*ToolCall

func (p *Message) GetToolCalls() (v []*ToolCall) {
	if p == nil {
		return
	}
	if !p.IsSetToolCalls() {
		return Message_ToolCalls_DEFAULT
	}
	return p.ToolCalls
}
func (p *Message) SetRole(val *Role) {
	p.Role = val
}
func (p *Message) SetReasoningContent(val *string) {
	p.ReasoningContent = val
}
func (p *Message) SetContent(val *string) {
	p.Content = val
}
func (p *Message) SetParts(val []*ContentPart) {
	p.Parts = val
}
func (p *Message) SetToolCallID(val *string) {
	p.ToolCallID = val
}
func (p *Message) SetToolCalls(val []*ToolCall) {
	p.ToolCalls = val
}

var fieldIDToName_Message = map[int16]string{
	1: "role",
	2: "reasoning_content",
	3: "content",
	4: "parts",
	5: "tool_call_id",
	6: "tool_calls",
}

func (p *Message) IsSetRole() bool {
	return p.Role != nil
}

func (p *Message) IsSetReasoningContent() bool {
	return p.ReasoningContent != nil
}

func (p *Message) IsSetContent() bool {
	return p.Content != nil
}

func (p *Message) IsSetParts() bool {
	return p.Parts != nil
}

func (p *Message) IsSetToolCallID() bool {
	return p.ToolCallID != nil
}

func (p *Message) IsSetToolCalls() bool {
	return p.ToolCalls != nil
}

func (p *Message) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Message[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Message) ReadField1(iprot thrift.TProtocol) error {

	var _field *Role
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Role = _field
	return nil
}
func (p *Message) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ReasoningContent = _field
	return nil
}
func (p *Message) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Content = _field
	return nil
}
func (p *Message) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ContentPart, 0, size)
	values := make([]ContentPart, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Parts = _field
	return nil
}
func (p *Message) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ToolCallID = _field
	return nil
}
func (p *Message) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ToolCall, 0, size)
	values := make([]ToolCall, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ToolCalls = _field
	return nil
}

func (p *Message) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Message"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Message) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRole() {
		if err = oprot.WriteFieldBegin("role", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Role); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *Message) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetReasoningContent() {
		if err = oprot.WriteFieldBegin("reasoning_content", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ReasoningContent); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *Message) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetContent() {
		if err = oprot.WriteFieldBegin("content", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Content); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *Message) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetParts() {
		if err = oprot.WriteFieldBegin("parts", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Parts)); err != nil {
			return err
		}
		for _, v := range p.Parts {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *Message) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetToolCallID() {
		if err = oprot.WriteFieldBegin("tool_call_id", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ToolCallID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *Message) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetToolCalls() {
		if err = oprot.WriteFieldBegin("tool_calls", thrift.LIST, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ToolCalls)); err != nil {
			return err
		}
		for _, v := range p.ToolCalls {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *Message) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Message(%+v)", *p)

}

func (p *Message) DeepEqual(ano *Message) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Role) {
		return false
	}
	if !p.Field2DeepEqual(ano.ReasoningContent) {
		return false
	}
	if !p.Field3DeepEqual(ano.Content) {
		return false
	}
	if !p.Field4DeepEqual(ano.Parts) {
		return false
	}
	if !p.Field5DeepEqual(ano.ToolCallID) {
		return false
	}
	if !p.Field6DeepEqual(ano.ToolCalls) {
		return false
	}
	return true
}

func (p *Message) Field1DeepEqual(src *Role) bool {

	if p.Role == src {
		return true
	} else if p.Role == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Role, *src) != 0 {
		return false
	}
	return true
}
func (p *Message) Field2DeepEqual(src *string) bool {

	if p.ReasoningContent == src {
		return true
	} else if p.ReasoningContent == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ReasoningContent, *src) != 0 {
		return false
	}
	return true
}
func (p *Message) Field3DeepEqual(src *string) bool {

	if p.Content == src {
		return true
	} else if p.Content == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Content, *src) != 0 {
		return false
	}
	return true
}
func (p *Message) Field4DeepEqual(src []*ContentPart) bool {

	if len(p.Parts) != len(src) {
		return false
	}
	for i, v := range p.Parts {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *Message) Field5DeepEqual(src *string) bool {

	if p.ToolCallID == src {
		return true
	} else if p.ToolCallID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ToolCallID, *src) != 0 {
		return false
	}
	return true
}
func (p *Message) Field6DeepEqual(src []*ToolCall) bool {

	if len(p.ToolCalls) != len(src) {
		return false
	}
	for i, v := range p.ToolCalls {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type ContentPart struct {
	Type     *ContentType `thrift:"type,1,optional" frugal:"1,optional,string" form:"type" json:"type,omitempty" query:"type"`
	Text     *string      `thrift:"text,2,optional" frugal:"2,optional,string" form:"text" json:"text,omitempty" query:"text"`
	ImageURL *ImageURL    `thrift:"image_url,3,optional" frugal:"3,optional,ImageURL" form:"image_url" json:"image_url,omitempty" query:"image_url"`
}

func NewContentPart() *ContentPart {
	return &ContentPart{}
}

func (p *ContentPart) InitDefault() {
}

var ContentPart_Type_DEFAULT ContentType

func (p *ContentPart) GetType() (v ContentType) {
	if p == nil {
		return
	}
	if !p.IsSetType() {
		return ContentPart_Type_DEFAULT
	}
	return *p.Type
}

var ContentPart_Text_DEFAULT string

func (p *ContentPart) GetText() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetText() {
		return ContentPart_Text_DEFAULT
	}
	return *p.Text
}

var ContentPart_ImageURL_DEFAULT *ImageURL

func (p *ContentPart) GetImageURL() (v *ImageURL) {
	if p == nil {
		return
	}
	if !p.IsSetImageURL() {
		return ContentPart_ImageURL_DEFAULT
	}
	return p.ImageURL
}
func (p *ContentPart) SetType(val *ContentType) {
	p.Type = val
}
func (p *ContentPart) SetText(val *string) {
	p.Text = val
}
func (p *ContentPart) SetImageURL(val *ImageURL) {
	p.ImageURL = val
}

var fieldIDToName_ContentPart = map[int16]string{
	1: "type",
	2: "text",
	3: "image_url",
}

func (p *ContentPart) IsSetType() bool {
	return p.Type != nil
}

func (p *ContentPart) IsSetText() bool {
	return p.Text != nil
}

func (p *ContentPart) IsSetImageURL() bool {
	return p.ImageURL != nil
}

func (p *ContentPart) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ContentPart[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ContentPart) ReadField1(iprot thrift.TProtocol) error {

	var _field *ContentType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Type = _field
	return nil
}
func (p *ContentPart) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Text = _field
	return nil
}
func (p *ContentPart) ReadField3(iprot thrift.TProtocol) error {
	_field := NewImageURL()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ImageURL = _field
	return nil
}

func (p *ContentPart) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ContentPart"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ContentPart) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("type", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Type); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ContentPart) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetText() {
		if err = oprot.WriteFieldBegin("text", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Text); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ContentPart) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetImageURL() {
		if err = oprot.WriteFieldBegin("image_url", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ImageURL.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *ContentPart) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ContentPart(%+v)", *p)

}

func (p *ContentPart) DeepEqual(ano *ContentPart) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Type) {
		return false
	}
	if !p.Field2DeepEqual(ano.Text) {
		return false
	}
	if !p.Field3DeepEqual(ano.ImageURL) {
		return false
	}
	return true
}

func (p *ContentPart) Field1DeepEqual(src *ContentType) bool {

	if p.Type == src {
		return true
	} else if p.Type == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Type, *src) != 0 {
		return false
	}
	return true
}
func (p *ContentPart) Field2DeepEqual(src *string) bool {

	if p.Text == src {
		return true
	} else if p.Text == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Text, *src) != 0 {
		return false
	}
	return true
}
func (p *ContentPart) Field3DeepEqual(src *ImageURL) bool {

	if !p.ImageURL.DeepEqual(src) {
		return false
	}
	return true
}

type ImageURL struct {
	URI *string `thrift:"uri,1,optional" frugal:"1,optional,string" form:"uri" json:"uri,omitempty" query:"uri"`
	URL *string `thrift:"url,2,optional" frugal:"2,optional,string" form:"url" json:"url,omitempty" query:"url"`
}

func NewImageURL() *ImageURL {
	return &ImageURL{}
}

func (p *ImageURL) InitDefault() {
}

var ImageURL_URI_DEFAULT string

func (p *ImageURL) GetURI() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetURI() {
		return ImageURL_URI_DEFAULT
	}
	return *p.URI
}

var ImageURL_URL_DEFAULT string

func (p *ImageURL) GetURL() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetURL() {
		return ImageURL_URL_DEFAULT
	}
	return *p.URL
}
func (p *ImageURL) SetURI(val *string) {
	p.URI = val
}
func (p *ImageURL) SetURL(val *string) {
	p.URL = val
}

var fieldIDToName_ImageURL = map[int16]string{
	1: "uri",
	2: "url",
}

func (p *ImageURL) IsSetURI() bool {
	return p.URI != nil
}

func (p *ImageURL) IsSetURL() bool {
	return p.URL != nil
}

func (p *ImageURL) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ImageURL[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ImageURL) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.URI = _field
	return nil
}
func (p *ImageURL) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.URL = _field
	return nil
}

func (p *ImageURL) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ImageURL"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ImageURL) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetURI() {
		if err = oprot.WriteFieldBegin("uri", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.URI); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ImageURL) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetURL() {
		if err = oprot.WriteFieldBegin("url", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.URL); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ImageURL) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ImageURL(%+v)", *p)

}

func (p *ImageURL) DeepEqual(ano *ImageURL) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.URI) {
		return false
	}
	if !p.Field2DeepEqual(ano.URL) {
		return false
	}
	return true
}

func (p *ImageURL) Field1DeepEqual(src *string) bool {

	if p.URI == src {
		return true
	} else if p.URI == nil || src == nil {
		return false
	}
	if strings.Compare(*p.URI, *src) != 0 {
		return false
	}
	return true
}
func (p *ImageURL) Field2DeepEqual(src *string) bool {

	if p.URL == src {
		return true
	} else if p.URL == nil || src == nil {
		return false
	}
	if strings.Compare(*p.URL, *src) != 0 {
		return false
	}
	return true
}

type ToolCall struct {
	Index        *int64        `thrift:"index,1,optional" frugal:"1,optional,i64" json:"index" form:"index" query:"index"`
	ID           *string       `thrift:"id,2,optional" frugal:"2,optional,string" form:"id" json:"id,omitempty" query:"id"`
	Type         *ToolType     `thrift:"type,3,optional" frugal:"3,optional,string" form:"type" json:"type,omitempty" query:"type"`
	FunctionCall *FunctionCall `thrift:"function_call,4,optional" frugal:"4,optional,FunctionCall" form:"function_call" json:"function_call,omitempty" query:"function_call"`
}

func NewToolCall() *ToolCall {
	return &ToolCall{}
}

func (p *ToolCall) InitDefault() {
}

var ToolCall_Index_DEFAULT int64

func (p *ToolCall) GetIndex() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetIndex() {
		return ToolCall_Index_DEFAULT
	}
	return *p.Index
}

var ToolCall_ID_DEFAULT string

func (p *ToolCall) GetID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetID() {
		return ToolCall_ID_DEFAULT
	}
	return *p.ID
}

var ToolCall_Type_DEFAULT ToolType

func (p *ToolCall) GetType() (v ToolType) {
	if p == nil {
		return
	}
	if !p.IsSetType() {
		return ToolCall_Type_DEFAULT
	}
	return *p.Type
}

var ToolCall_FunctionCall_DEFAULT *FunctionCall

func (p *ToolCall) GetFunctionCall() (v *FunctionCall) {
	if p == nil {
		return
	}
	if !p.IsSetFunctionCall() {
		return ToolCall_FunctionCall_DEFAULT
	}
	return p.FunctionCall
}
func (p *ToolCall) SetIndex(val *int64) {
	p.Index = val
}
func (p *ToolCall) SetID(val *string) {
	p.ID = val
}
func (p *ToolCall) SetType(val *ToolType) {
	p.Type = val
}
func (p *ToolCall) SetFunctionCall(val *FunctionCall) {
	p.FunctionCall = val
}

var fieldIDToName_ToolCall = map[int16]string{
	1: "index",
	2: "id",
	3: "type",
	4: "function_call",
}

func (p *ToolCall) IsSetIndex() bool {
	return p.Index != nil
}

func (p *ToolCall) IsSetID() bool {
	return p.ID != nil
}

func (p *ToolCall) IsSetType() bool {
	return p.Type != nil
}

func (p *ToolCall) IsSetFunctionCall() bool {
	return p.FunctionCall != nil
}

func (p *ToolCall) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ToolCall[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ToolCall) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Index = _field
	return nil
}
func (p *ToolCall) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ID = _field
	return nil
}
func (p *ToolCall) ReadField3(iprot thrift.TProtocol) error {

	var _field *ToolType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Type = _field
	return nil
}
func (p *ToolCall) ReadField4(iprot thrift.TProtocol) error {
	_field := NewFunctionCall()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.FunctionCall = _field
	return nil
}

func (p *ToolCall) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ToolCall"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ToolCall) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIndex() {
		if err = oprot.WriteFieldBegin("index", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Index); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ToolCall) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ToolCall) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("type", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Type); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ToolCall) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetFunctionCall() {
		if err = oprot.WriteFieldBegin("function_call", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.FunctionCall.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ToolCall) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ToolCall(%+v)", *p)

}

func (p *ToolCall) DeepEqual(ano *ToolCall) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Index) {
		return false
	}
	if !p.Field2DeepEqual(ano.ID) {
		return false
	}
	if !p.Field3DeepEqual(ano.Type) {
		return false
	}
	if !p.Field4DeepEqual(ano.FunctionCall) {
		return false
	}
	return true
}

func (p *ToolCall) Field1DeepEqual(src *int64) bool {

	if p.Index == src {
		return true
	} else if p.Index == nil || src == nil {
		return false
	}
	if *p.Index != *src {
		return false
	}
	return true
}
func (p *ToolCall) Field2DeepEqual(src *string) bool {

	if p.ID == src {
		return true
	} else if p.ID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ID, *src) != 0 {
		return false
	}
	return true
}
func (p *ToolCall) Field3DeepEqual(src *ToolType) bool {

	if p.Type == src {
		return true
	} else if p.Type == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Type, *src) != 0 {
		return false
	}
	return true
}
func (p *ToolCall) Field4DeepEqual(src *FunctionCall) bool {

	if !p.FunctionCall.DeepEqual(src) {
		return false
	}
	return true
}

type FunctionCall struct {
	Name      *string `thrift:"name,1,optional" frugal:"1,optional,string" form:"name" json:"name,omitempty" query:"name"`
	Arguments *string `thrift:"arguments,2,optional" frugal:"2,optional,string" form:"arguments" json:"arguments,omitempty" query:"arguments"`
}

func NewFunctionCall() *FunctionCall {
	return &FunctionCall{}
}

func (p *FunctionCall) InitDefault() {
}

var FunctionCall_Name_DEFAULT string

func (p *FunctionCall) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return FunctionCall_Name_DEFAULT
	}
	return *p.Name
}

var FunctionCall_Arguments_DEFAULT string

func (p *FunctionCall) GetArguments() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetArguments() {
		return FunctionCall_Arguments_DEFAULT
	}
	return *p.Arguments
}
func (p *FunctionCall) SetName(val *string) {
	p.Name = val
}
func (p *FunctionCall) SetArguments(val *string) {
	p.Arguments = val
}

var fieldIDToName_FunctionCall = map[int16]string{
	1: "name",
	2: "arguments",
}

func (p *FunctionCall) IsSetName() bool {
	return p.Name != nil
}

func (p *FunctionCall) IsSetArguments() bool {
	return p.Arguments != nil
}

func (p *FunctionCall) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FunctionCall[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *FunctionCall) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *FunctionCall) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Arguments = _field
	return nil
}

func (p *FunctionCall) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FunctionCall"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FunctionCall) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *FunctionCall) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetArguments() {
		if err = oprot.WriteFieldBegin("arguments", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Arguments); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *FunctionCall) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FunctionCall(%+v)", *p)

}

func (p *FunctionCall) DeepEqual(ano *FunctionCall) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Arguments) {
		return false
	}
	return true
}

func (p *FunctionCall) Field1DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *FunctionCall) Field2DeepEqual(src *string) bool {

	if p.Arguments == src {
		return true
	} else if p.Arguments == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Arguments, *src) != 0 {
		return false
	}
	return true
}

type VariableDef struct {
	Key  *string       `thrift:"key,1,optional" frugal:"1,optional,string" form:"key" json:"key,omitempty" query:"key"`
	Desc *string       `thrift:"desc,2,optional" frugal:"2,optional,string" form:"desc" json:"desc,omitempty" query:"desc"`
	Type *VariableType `thrift:"type,3,optional" frugal:"3,optional,string" form:"type" json:"type,omitempty" query:"type"`
}

func NewVariableDef() *VariableDef {
	return &VariableDef{}
}

func (p *VariableDef) InitDefault() {
}

var VariableDef_Key_DEFAULT string

func (p *VariableDef) GetKey() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetKey() {
		return VariableDef_Key_DEFAULT
	}
	return *p.Key
}

var VariableDef_Desc_DEFAULT string

func (p *VariableDef) GetDesc() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDesc() {
		return VariableDef_Desc_DEFAULT
	}
	return *p.Desc
}

var VariableDef_Type_DEFAULT VariableType

func (p *VariableDef) GetType() (v VariableType) {
	if p == nil {
		return
	}
	if !p.IsSetType() {
		return VariableDef_Type_DEFAULT
	}
	return *p.Type
}
func (p *VariableDef) SetKey(val *string) {
	p.Key = val
}
func (p *VariableDef) SetDesc(val *string) {
	p.Desc = val
}
func (p *VariableDef) SetType(val *VariableType) {
	p.Type = val
}

var fieldIDToName_VariableDef = map[int16]string{
	1: "key",
	2: "desc",
	3: "type",
}

func (p *VariableDef) IsSetKey() bool {
	return p.Key != nil
}

func (p *VariableDef) IsSetDesc() bool {
	return p.Desc != nil
}

func (p *VariableDef) IsSetType() bool {
	return p.Type != nil
}

func (p *VariableDef) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VariableDef[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VariableDef) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Key = _field
	return nil
}
func (p *VariableDef) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Desc = _field
	return nil
}
func (p *VariableDef) ReadField3(iprot thrift.TProtocol) error {

	var _field *VariableType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Type = _field
	return nil
}

func (p *VariableDef) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VariableDef"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VariableDef) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetKey() {
		if err = oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Key); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *VariableDef) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDesc() {
		if err = oprot.WriteFieldBegin("desc", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Desc); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *VariableDef) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("type", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Type); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *VariableDef) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VariableDef(%+v)", *p)

}

func (p *VariableDef) DeepEqual(ano *VariableDef) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Key) {
		return false
	}
	if !p.Field2DeepEqual(ano.Desc) {
		return false
	}
	if !p.Field3DeepEqual(ano.Type) {
		return false
	}
	return true
}

func (p *VariableDef) Field1DeepEqual(src *string) bool {

	if p.Key == src {
		return true
	} else if p.Key == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Key, *src) != 0 {
		return false
	}
	return true
}
func (p *VariableDef) Field2DeepEqual(src *string) bool {

	if p.Desc == src {
		return true
	} else if p.Desc == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Desc, *src) != 0 {
		return false
	}
	return true
}
func (p *VariableDef) Field3DeepEqual(src *VariableType) bool {

	if p.Type == src {
		return true
	} else if p.Type == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Type, *src) != 0 {
		return false
	}
	return true
}

type VariableVal struct {
	Key                 *string    `thrift:"key,1,optional" frugal:"1,optional,string" form:"key" json:"key,omitempty" query:"key"`
	Value               *string    `thrift:"value,2,optional" frugal:"2,optional,string" form:"value" json:"value,omitempty" query:"value"`
	PlaceholderMessages []*Message `thrift:"placeholder_messages,3,optional" frugal:"3,optional,list<Message>" form:"placeholder_messages" json:"placeholder_messages,omitempty" query:"placeholder_messages"`
}

func NewVariableVal() *VariableVal {
	return &VariableVal{}
}

func (p *VariableVal) InitDefault() {
}

var VariableVal_Key_DEFAULT string

func (p *VariableVal) GetKey() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetKey() {
		return VariableVal_Key_DEFAULT
	}
	return *p.Key
}

var VariableVal_Value_DEFAULT string

func (p *VariableVal) GetValue() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetValue() {
		return VariableVal_Value_DEFAULT
	}
	return *p.Value
}

var VariableVal_PlaceholderMessages_DEFAULT []*Message

func (p *VariableVal) GetPlaceholderMessages() (v []*Message) {
	if p == nil {
		return
	}
	if !p.IsSetPlaceholderMessages() {
		return VariableVal_PlaceholderMessages_DEFAULT
	}
	return p.PlaceholderMessages
}
func (p *VariableVal) SetKey(val *string) {
	p.Key = val
}
func (p *VariableVal) SetValue(val *string) {
	p.Value = val
}
func (p *VariableVal) SetPlaceholderMessages(val []*Message) {
	p.PlaceholderMessages = val
}

var fieldIDToName_VariableVal = map[int16]string{
	1: "key",
	2: "value",
	3: "placeholder_messages",
}

func (p *VariableVal) IsSetKey() bool {
	return p.Key != nil
}

func (p *VariableVal) IsSetValue() bool {
	return p.Value != nil
}

func (p *VariableVal) IsSetPlaceholderMessages() bool {
	return p.PlaceholderMessages != nil
}

func (p *VariableVal) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VariableVal[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VariableVal) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Key = _field
	return nil
}
func (p *VariableVal) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Value = _field
	return nil
}
func (p *VariableVal) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*Message, 0, size)
	values := make([]Message, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.PlaceholderMessages = _field
	return nil
}

func (p *VariableVal) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VariableVal"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VariableVal) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetKey() {
		if err = oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Key); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *VariableVal) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetValue() {
		if err = oprot.WriteFieldBegin("value", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Value); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *VariableVal) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPlaceholderMessages() {
		if err = oprot.WriteFieldBegin("placeholder_messages", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PlaceholderMessages)); err != nil {
			return err
		}
		for _, v := range p.PlaceholderMessages {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *VariableVal) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VariableVal(%+v)", *p)

}

func (p *VariableVal) DeepEqual(ano *VariableVal) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Key) {
		return false
	}
	if !p.Field2DeepEqual(ano.Value) {
		return false
	}
	if !p.Field3DeepEqual(ano.PlaceholderMessages) {
		return false
	}
	return true
}

func (p *VariableVal) Field1DeepEqual(src *string) bool {

	if p.Key == src {
		return true
	} else if p.Key == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Key, *src) != 0 {
		return false
	}
	return true
}
func (p *VariableVal) Field2DeepEqual(src *string) bool {

	if p.Value == src {
		return true
	} else if p.Value == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Value, *src) != 0 {
		return false
	}
	return true
}
func (p *VariableVal) Field3DeepEqual(src []*Message) bool {

	if len(p.PlaceholderMessages) != len(src) {
		return false
	}
	for i, v := range p.PlaceholderMessages {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type TokenUsage struct {
	InputTokens  *int64 `thrift:"input_tokens,1,optional" frugal:"1,optional,i64" json:"input_tokens" form:"input_tokens" query:"input_tokens"`
	OutputTokens *int64 `thrift:"output_tokens,2,optional" frugal:"2,optional,i64" json:"output_tokens" form:"output_tokens" query:"output_tokens"`
}

func NewTokenUsage() *TokenUsage {
	return &TokenUsage{}
}

func (p *TokenUsage) InitDefault() {
}

var TokenUsage_InputTokens_DEFAULT int64

func (p *TokenUsage) GetInputTokens() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetInputTokens() {
		return TokenUsage_InputTokens_DEFAULT
	}
	return *p.InputTokens
}

var TokenUsage_OutputTokens_DEFAULT int64

func (p *TokenUsage) GetOutputTokens() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetOutputTokens() {
		return TokenUsage_OutputTokens_DEFAULT
	}
	return *p.OutputTokens
}
func (p *TokenUsage) SetInputTokens(val *int64) {
	p.InputTokens = val
}
func (p *TokenUsage) SetOutputTokens(val *int64) {
	p.OutputTokens = val
}

var fieldIDToName_TokenUsage = map[int16]string{
	1: "input_tokens",
	2: "output_tokens",
}

func (p *TokenUsage) IsSetInputTokens() bool {
	return p.InputTokens != nil
}

func (p *TokenUsage) IsSetOutputTokens() bool {
	return p.OutputTokens != nil
}

func (p *TokenUsage) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TokenUsage[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TokenUsage) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.InputTokens = _field
	return nil
}
func (p *TokenUsage) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.OutputTokens = _field
	return nil
}

func (p *TokenUsage) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TokenUsage"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TokenUsage) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetInputTokens() {
		if err = oprot.WriteFieldBegin("input_tokens", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.InputTokens); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *TokenUsage) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutputTokens() {
		if err = oprot.WriteFieldBegin("output_tokens", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.OutputTokens); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TokenUsage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TokenUsage(%+v)", *p)

}

func (p *TokenUsage) DeepEqual(ano *TokenUsage) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.InputTokens) {
		return false
	}
	if !p.Field2DeepEqual(ano.OutputTokens) {
		return false
	}
	return true
}

func (p *TokenUsage) Field1DeepEqual(src *int64) bool {

	if p.InputTokens == src {
		return true
	} else if p.InputTokens == nil || src == nil {
		return false
	}
	if *p.InputTokens != *src {
		return false
	}
	return true
}
func (p *TokenUsage) Field2DeepEqual(src *int64) bool {

	if p.OutputTokens == src {
		return true
	} else if p.OutputTokens == nil || src == nil {
		return false
	}
	if *p.OutputTokens != *src {
		return false
	}
	return true
}

type DebugContext struct {
	DebugCore     *DebugCore     `thrift:"debug_core,1,optional" frugal:"1,optional,DebugCore" form:"debug_core" json:"debug_core,omitempty" query:"debug_core"`
	DebugConfig   *DebugConfig   `thrift:"debug_config,2,optional" frugal:"2,optional,DebugConfig" form:"debug_config" json:"debug_config,omitempty" query:"debug_config"`
	CompareConfig *CompareConfig `thrift:"compare_config,101,optional" frugal:"101,optional,CompareConfig" form:"compare_config" json:"compare_config,omitempty" query:"compare_config"`
}

func NewDebugContext() *DebugContext {
	return &DebugContext{}
}

func (p *DebugContext) InitDefault() {
}

var DebugContext_DebugCore_DEFAULT *DebugCore

func (p *DebugContext) GetDebugCore() (v *DebugCore) {
	if p == nil {
		return
	}
	if !p.IsSetDebugCore() {
		return DebugContext_DebugCore_DEFAULT
	}
	return p.DebugCore
}

var DebugContext_DebugConfig_DEFAULT *DebugConfig

func (p *DebugContext) GetDebugConfig() (v *DebugConfig) {
	if p == nil {
		return
	}
	if !p.IsSetDebugConfig() {
		return DebugContext_DebugConfig_DEFAULT
	}
	return p.DebugConfig
}

var DebugContext_CompareConfig_DEFAULT *CompareConfig

func (p *DebugContext) GetCompareConfig() (v *CompareConfig) {
	if p == nil {
		return
	}
	if !p.IsSetCompareConfig() {
		return DebugContext_CompareConfig_DEFAULT
	}
	return p.CompareConfig
}
func (p *DebugContext) SetDebugCore(val *DebugCore) {
	p.DebugCore = val
}
func (p *DebugContext) SetDebugConfig(val *DebugConfig) {
	p.DebugConfig = val
}
func (p *DebugContext) SetCompareConfig(val *CompareConfig) {
	p.CompareConfig = val
}

var fieldIDToName_DebugContext = map[int16]string{
	1:   "debug_core",
	2:   "debug_config",
	101: "compare_config",
}

func (p *DebugContext) IsSetDebugCore() bool {
	return p.DebugCore != nil
}

func (p *DebugContext) IsSetDebugConfig() bool {
	return p.DebugConfig != nil
}

func (p *DebugContext) IsSetCompareConfig() bool {
	return p.CompareConfig != nil
}

func (p *DebugContext) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DebugContext[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DebugContext) ReadField1(iprot thrift.TProtocol) error {
	_field := NewDebugCore()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.DebugCore = _field
	return nil
}
func (p *DebugContext) ReadField2(iprot thrift.TProtocol) error {
	_field := NewDebugConfig()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.DebugConfig = _field
	return nil
}
func (p *DebugContext) ReadField101(iprot thrift.TProtocol) error {
	_field := NewCompareConfig()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.CompareConfig = _field
	return nil
}

func (p *DebugContext) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DebugContext"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DebugContext) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDebugCore() {
		if err = oprot.WriteFieldBegin("debug_core", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.DebugCore.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *DebugContext) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDebugConfig() {
		if err = oprot.WriteFieldBegin("debug_config", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.DebugConfig.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *DebugContext) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetCompareConfig() {
		if err = oprot.WriteFieldBegin("compare_config", thrift.STRUCT, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.CompareConfig.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}

func (p *DebugContext) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DebugContext(%+v)", *p)

}

func (p *DebugContext) DeepEqual(ano *DebugContext) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.DebugCore) {
		return false
	}
	if !p.Field2DeepEqual(ano.DebugConfig) {
		return false
	}
	if !p.Field101DeepEqual(ano.CompareConfig) {
		return false
	}
	return true
}

func (p *DebugContext) Field1DeepEqual(src *DebugCore) bool {

	if !p.DebugCore.DeepEqual(src) {
		return false
	}
	return true
}
func (p *DebugContext) Field2DeepEqual(src *DebugConfig) bool {

	if !p.DebugConfig.DeepEqual(src) {
		return false
	}
	return true
}
func (p *DebugContext) Field101DeepEqual(src *CompareConfig) bool {

	if !p.CompareConfig.DeepEqual(src) {
		return false
	}
	return true
}

type DebugCore struct {
	MockContexts  []*DebugMessage `thrift:"mock_contexts,1,optional" frugal:"1,optional,list<DebugMessage>" form:"mock_contexts" json:"mock_contexts,omitempty" query:"mock_contexts"`
	MockVariables []*VariableVal  `thrift:"mock_variables,2,optional" frugal:"2,optional,list<VariableVal>" form:"mock_variables" json:"mock_variables,omitempty" query:"mock_variables"`
	MockTools     []*MockTool     `thrift:"mock_tools,3,optional" frugal:"3,optional,list<MockTool>" form:"mock_tools" json:"mock_tools,omitempty" query:"mock_tools"`
}

func NewDebugCore() *DebugCore {
	return &DebugCore{}
}

func (p *DebugCore) InitDefault() {
}

var DebugCore_MockContexts_DEFAULT []*DebugMessage

func (p *DebugCore) GetMockContexts() (v []*DebugMessage) {
	if p == nil {
		return
	}
	if !p.IsSetMockContexts() {
		return DebugCore_MockContexts_DEFAULT
	}
	return p.MockContexts
}

var DebugCore_MockVariables_DEFAULT []*VariableVal

func (p *DebugCore) GetMockVariables() (v []*VariableVal) {
	if p == nil {
		return
	}
	if !p.IsSetMockVariables() {
		return DebugCore_MockVariables_DEFAULT
	}
	return p.MockVariables
}

var DebugCore_MockTools_DEFAULT []*MockTool

func (p *DebugCore) GetMockTools() (v []*MockTool) {
	if p == nil {
		return
	}
	if !p.IsSetMockTools() {
		return DebugCore_MockTools_DEFAULT
	}
	return p.MockTools
}
func (p *DebugCore) SetMockContexts(val []*DebugMessage) {
	p.MockContexts = val
}
func (p *DebugCore) SetMockVariables(val []*VariableVal) {
	p.MockVariables = val
}
func (p *DebugCore) SetMockTools(val []*MockTool) {
	p.MockTools = val
}

var fieldIDToName_DebugCore = map[int16]string{
	1: "mock_contexts",
	2: "mock_variables",
	3: "mock_tools",
}

func (p *DebugCore) IsSetMockContexts() bool {
	return p.MockContexts != nil
}

func (p *DebugCore) IsSetMockVariables() bool {
	return p.MockVariables != nil
}

func (p *DebugCore) IsSetMockTools() bool {
	return p.MockTools != nil
}

func (p *DebugCore) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DebugCore[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DebugCore) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*DebugMessage, 0, size)
	values := make([]DebugMessage, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.MockContexts = _field
	return nil
}
func (p *DebugCore) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*VariableVal, 0, size)
	values := make([]VariableVal, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.MockVariables = _field
	return nil
}
func (p *DebugCore) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*MockTool, 0, size)
	values := make([]MockTool, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.MockTools = _field
	return nil
}

func (p *DebugCore) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DebugCore"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DebugCore) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMockContexts() {
		if err = oprot.WriteFieldBegin("mock_contexts", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MockContexts)); err != nil {
			return err
		}
		for _, v := range p.MockContexts {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *DebugCore) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMockVariables() {
		if err = oprot.WriteFieldBegin("mock_variables", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MockVariables)); err != nil {
			return err
		}
		for _, v := range p.MockVariables {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *DebugCore) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMockTools() {
		if err = oprot.WriteFieldBegin("mock_tools", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.MockTools)); err != nil {
			return err
		}
		for _, v := range p.MockTools {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *DebugCore) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DebugCore(%+v)", *p)

}

func (p *DebugCore) DeepEqual(ano *DebugCore) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.MockContexts) {
		return false
	}
	if !p.Field2DeepEqual(ano.MockVariables) {
		return false
	}
	if !p.Field3DeepEqual(ano.MockTools) {
		return false
	}
	return true
}

func (p *DebugCore) Field1DeepEqual(src []*DebugMessage) bool {

	if len(p.MockContexts) != len(src) {
		return false
	}
	for i, v := range p.MockContexts {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *DebugCore) Field2DeepEqual(src []*VariableVal) bool {

	if len(p.MockVariables) != len(src) {
		return false
	}
	for i, v := range p.MockVariables {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *DebugCore) Field3DeepEqual(src []*MockTool) bool {

	if len(p.MockTools) != len(src) {
		return false
	}
	for i, v := range p.MockTools {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type CompareConfig struct {
	Groups []*CompareGroup `thrift:"groups,1,optional" frugal:"1,optional,list<CompareGroup>" form:"groups" json:"groups,omitempty" query:"groups"`
}

func NewCompareConfig() *CompareConfig {
	return &CompareConfig{}
}

func (p *CompareConfig) InitDefault() {
}

var CompareConfig_Groups_DEFAULT []*CompareGroup

func (p *CompareConfig) GetGroups() (v []*CompareGroup) {
	if p == nil {
		return
	}
	if !p.IsSetGroups() {
		return CompareConfig_Groups_DEFAULT
	}
	return p.Groups
}
func (p *CompareConfig) SetGroups(val []*CompareGroup) {
	p.Groups = val
}

var fieldIDToName_CompareConfig = map[int16]string{
	1: "groups",
}

func (p *CompareConfig) IsSetGroups() bool {
	return p.Groups != nil
}

func (p *CompareConfig) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CompareConfig[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CompareConfig) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*CompareGroup, 0, size)
	values := make([]CompareGroup, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Groups = _field
	return nil
}

func (p *CompareConfig) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CompareConfig"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CompareConfig) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetGroups() {
		if err = oprot.WriteFieldBegin("groups", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Groups)); err != nil {
			return err
		}
		for _, v := range p.Groups {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *CompareConfig) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CompareConfig(%+v)", *p)

}

func (p *CompareConfig) DeepEqual(ano *CompareConfig) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Groups) {
		return false
	}
	return true
}

func (p *CompareConfig) Field1DeepEqual(src []*CompareGroup) bool {

	if len(p.Groups) != len(src) {
		return false
	}
	for i, v := range p.Groups {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type CompareGroup struct {
	PromptDetail *PromptDetail `thrift:"prompt_detail,1,optional" frugal:"1,optional,PromptDetail" form:"prompt_detail" json:"prompt_detail,omitempty" query:"prompt_detail"`
	DebugCore    *DebugCore    `thrift:"debug_core,2,optional" frugal:"2,optional,DebugCore" form:"debug_core" json:"debug_core,omitempty" query:"debug_core"`
}

func NewCompareGroup() *CompareGroup {
	return &CompareGroup{}
}

func (p *CompareGroup) InitDefault() {
}

var CompareGroup_PromptDetail_DEFAULT *PromptDetail

func (p *CompareGroup) GetPromptDetail() (v *PromptDetail) {
	if p == nil {
		return
	}
	if !p.IsSetPromptDetail() {
		return CompareGroup_PromptDetail_DEFAULT
	}
	return p.PromptDetail
}

var CompareGroup_DebugCore_DEFAULT *DebugCore

func (p *CompareGroup) GetDebugCore() (v *DebugCore) {
	if p == nil {
		return
	}
	if !p.IsSetDebugCore() {
		return CompareGroup_DebugCore_DEFAULT
	}
	return p.DebugCore
}
func (p *CompareGroup) SetPromptDetail(val *PromptDetail) {
	p.PromptDetail = val
}
func (p *CompareGroup) SetDebugCore(val *DebugCore) {
	p.DebugCore = val
}

var fieldIDToName_CompareGroup = map[int16]string{
	1: "prompt_detail",
	2: "debug_core",
}

func (p *CompareGroup) IsSetPromptDetail() bool {
	return p.PromptDetail != nil
}

func (p *CompareGroup) IsSetDebugCore() bool {
	return p.DebugCore != nil
}

func (p *CompareGroup) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CompareGroup[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CompareGroup) ReadField1(iprot thrift.TProtocol) error {
	_field := NewPromptDetail()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.PromptDetail = _field
	return nil
}
func (p *CompareGroup) ReadField2(iprot thrift.TProtocol) error {
	_field := NewDebugCore()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.DebugCore = _field
	return nil
}

func (p *CompareGroup) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CompareGroup"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CompareGroup) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPromptDetail() {
		if err = oprot.WriteFieldBegin("prompt_detail", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.PromptDetail.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CompareGroup) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDebugCore() {
		if err = oprot.WriteFieldBegin("debug_core", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.DebugCore.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *CompareGroup) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CompareGroup(%+v)", *p)

}

func (p *CompareGroup) DeepEqual(ano *CompareGroup) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PromptDetail) {
		return false
	}
	if !p.Field2DeepEqual(ano.DebugCore) {
		return false
	}
	return true
}

func (p *CompareGroup) Field1DeepEqual(src *PromptDetail) bool {

	if !p.PromptDetail.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CompareGroup) Field2DeepEqual(src *DebugCore) bool {

	if !p.DebugCore.DeepEqual(src) {
		return false
	}
	return true
}

type DebugMessage struct {
	Role             *Role            `thrift:"role,1,optional" frugal:"1,optional,string" form:"role" json:"role,omitempty" query:"role"`
	Content          *string          `thrift:"content,2,optional" frugal:"2,optional,string" form:"content" json:"content,omitempty" query:"content"`
	ReasoningContent *string          `thrift:"reasoning_content,3,optional" frugal:"3,optional,string" form:"reasoning_content" json:"reasoning_content,omitempty" query:"reasoning_content"`
	Parts            []*ContentPart   `thrift:"parts,4,optional" frugal:"4,optional,list<ContentPart>" form:"parts" json:"parts,omitempty" query:"parts"`
	ToolCallID       *string          `thrift:"tool_call_id,5,optional" frugal:"5,optional,string" form:"tool_call_id" json:"tool_call_id,omitempty" query:"tool_call_id"`
	ToolCalls        []*DebugToolCall `thrift:"tool_calls,6,optional" frugal:"6,optional,list<DebugToolCall>" form:"tool_calls" json:"tool_calls,omitempty" query:"tool_calls"`
	DebugID          *string          `thrift:"debug_id,101,optional" frugal:"101,optional,string" form:"debug_id" json:"debug_id,omitempty" query:"debug_id"`
	InputTokens      *int64           `thrift:"input_tokens,102,optional" frugal:"102,optional,i64" json:"input_tokens" form:"input_tokens" query:"input_tokens"`
	OutputTokens     *int64           `thrift:"output_tokens,103,optional" frugal:"103,optional,i64" json:"output_tokens" form:"output_tokens" query:"output_tokens"`
	CostMs           *int64           `thrift:"cost_ms,104,optional" frugal:"104,optional,i64" json:"cost_ms" form:"cost_ms" query:"cost_ms"`
}

func NewDebugMessage() *DebugMessage {
	return &DebugMessage{}
}

func (p *DebugMessage) InitDefault() {
}

var DebugMessage_Role_DEFAULT Role

func (p *DebugMessage) GetRole() (v Role) {
	if p == nil {
		return
	}
	if !p.IsSetRole() {
		return DebugMessage_Role_DEFAULT
	}
	return *p.Role
}

var DebugMessage_Content_DEFAULT string

func (p *DebugMessage) GetContent() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetContent() {
		return DebugMessage_Content_DEFAULT
	}
	return *p.Content
}

var DebugMessage_ReasoningContent_DEFAULT string

func (p *DebugMessage) GetReasoningContent() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetReasoningContent() {
		return DebugMessage_ReasoningContent_DEFAULT
	}
	return *p.ReasoningContent
}

var DebugMessage_Parts_DEFAULT []*ContentPart

func (p *DebugMessage) GetParts() (v []*ContentPart) {
	if p == nil {
		return
	}
	if !p.IsSetParts() {
		return DebugMessage_Parts_DEFAULT
	}
	return p.Parts
}

var DebugMessage_ToolCallID_DEFAULT string

func (p *DebugMessage) GetToolCallID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetToolCallID() {
		return DebugMessage_ToolCallID_DEFAULT
	}
	return *p.ToolCallID
}

var DebugMessage_ToolCalls_DEFAULT []*DebugToolCall

func (p *DebugMessage) GetToolCalls() (v []*DebugToolCall) {
	if p == nil {
		return
	}
	if !p.IsSetToolCalls() {
		return DebugMessage_ToolCalls_DEFAULT
	}
	return p.ToolCalls
}

var DebugMessage_DebugID_DEFAULT string

func (p *DebugMessage) GetDebugID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDebugID() {
		return DebugMessage_DebugID_DEFAULT
	}
	return *p.DebugID
}

var DebugMessage_InputTokens_DEFAULT int64

func (p *DebugMessage) GetInputTokens() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetInputTokens() {
		return DebugMessage_InputTokens_DEFAULT
	}
	return *p.InputTokens
}

var DebugMessage_OutputTokens_DEFAULT int64

func (p *DebugMessage) GetOutputTokens() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetOutputTokens() {
		return DebugMessage_OutputTokens_DEFAULT
	}
	return *p.OutputTokens
}

var DebugMessage_CostMs_DEFAULT int64

func (p *DebugMessage) GetCostMs() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetCostMs() {
		return DebugMessage_CostMs_DEFAULT
	}
	return *p.CostMs
}
func (p *DebugMessage) SetRole(val *Role) {
	p.Role = val
}
func (p *DebugMessage) SetContent(val *string) {
	p.Content = val
}
func (p *DebugMessage) SetReasoningContent(val *string) {
	p.ReasoningContent = val
}
func (p *DebugMessage) SetParts(val []*ContentPart) {
	p.Parts = val
}
func (p *DebugMessage) SetToolCallID(val *string) {
	p.ToolCallID = val
}
func (p *DebugMessage) SetToolCalls(val []*DebugToolCall) {
	p.ToolCalls = val
}
func (p *DebugMessage) SetDebugID(val *string) {
	p.DebugID = val
}
func (p *DebugMessage) SetInputTokens(val *int64) {
	p.InputTokens = val
}
func (p *DebugMessage) SetOutputTokens(val *int64) {
	p.OutputTokens = val
}
func (p *DebugMessage) SetCostMs(val *int64) {
	p.CostMs = val
}

var fieldIDToName_DebugMessage = map[int16]string{
	1:   "role",
	2:   "content",
	3:   "reasoning_content",
	4:   "parts",
	5:   "tool_call_id",
	6:   "tool_calls",
	101: "debug_id",
	102: "input_tokens",
	103: "output_tokens",
	104: "cost_ms",
}

func (p *DebugMessage) IsSetRole() bool {
	return p.Role != nil
}

func (p *DebugMessage) IsSetContent() bool {
	return p.Content != nil
}

func (p *DebugMessage) IsSetReasoningContent() bool {
	return p.ReasoningContent != nil
}

func (p *DebugMessage) IsSetParts() bool {
	return p.Parts != nil
}

func (p *DebugMessage) IsSetToolCallID() bool {
	return p.ToolCallID != nil
}

func (p *DebugMessage) IsSetToolCalls() bool {
	return p.ToolCalls != nil
}

func (p *DebugMessage) IsSetDebugID() bool {
	return p.DebugID != nil
}

func (p *DebugMessage) IsSetInputTokens() bool {
	return p.InputTokens != nil
}

func (p *DebugMessage) IsSetOutputTokens() bool {
	return p.OutputTokens != nil
}

func (p *DebugMessage) IsSetCostMs() bool {
	return p.CostMs != nil
}

func (p *DebugMessage) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 102:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField102(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 103:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField103(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 104:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField104(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DebugMessage[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DebugMessage) ReadField1(iprot thrift.TProtocol) error {

	var _field *Role
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Role = _field
	return nil
}
func (p *DebugMessage) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Content = _field
	return nil
}
func (p *DebugMessage) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ReasoningContent = _field
	return nil
}
func (p *DebugMessage) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*ContentPart, 0, size)
	values := make([]ContentPart, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Parts = _field
	return nil
}
func (p *DebugMessage) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ToolCallID = _field
	return nil
}
func (p *DebugMessage) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*DebugToolCall, 0, size)
	values := make([]DebugToolCall, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.ToolCalls = _field
	return nil
}
func (p *DebugMessage) ReadField101(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DebugID = _field
	return nil
}
func (p *DebugMessage) ReadField102(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.InputTokens = _field
	return nil
}
func (p *DebugMessage) ReadField103(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.OutputTokens = _field
	return nil
}
func (p *DebugMessage) ReadField104(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CostMs = _field
	return nil
}

func (p *DebugMessage) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DebugMessage"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField102(oprot); err != nil {
			fieldId = 102
			goto WriteFieldError
		}
		if err = p.writeField103(oprot); err != nil {
			fieldId = 103
			goto WriteFieldError
		}
		if err = p.writeField104(oprot); err != nil {
			fieldId = 104
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DebugMessage) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRole() {
		if err = oprot.WriteFieldBegin("role", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Role); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *DebugMessage) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetContent() {
		if err = oprot.WriteFieldBegin("content", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Content); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *DebugMessage) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetReasoningContent() {
		if err = oprot.WriteFieldBegin("reasoning_content", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ReasoningContent); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *DebugMessage) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetParts() {
		if err = oprot.WriteFieldBegin("parts", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Parts)); err != nil {
			return err
		}
		for _, v := range p.Parts {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *DebugMessage) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetToolCallID() {
		if err = oprot.WriteFieldBegin("tool_call_id", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ToolCallID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *DebugMessage) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetToolCalls() {
		if err = oprot.WriteFieldBegin("tool_calls", thrift.LIST, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.ToolCalls)); err != nil {
			return err
		}
		for _, v := range p.ToolCalls {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *DebugMessage) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetDebugID() {
		if err = oprot.WriteFieldBegin("debug_id", thrift.STRING, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.DebugID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}
func (p *DebugMessage) writeField102(oprot thrift.TProtocol) (err error) {
	if p.IsSetInputTokens() {
		if err = oprot.WriteFieldBegin("input_tokens", thrift.I64, 102); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.InputTokens); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 end error: ", p), err)
}
func (p *DebugMessage) writeField103(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutputTokens() {
		if err = oprot.WriteFieldBegin("output_tokens", thrift.I64, 103); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.OutputTokens); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 103 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 103 end error: ", p), err)
}
func (p *DebugMessage) writeField104(oprot thrift.TProtocol) (err error) {
	if p.IsSetCostMs() {
		if err = oprot.WriteFieldBegin("cost_ms", thrift.I64, 104); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CostMs); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 104 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 104 end error: ", p), err)
}

func (p *DebugMessage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DebugMessage(%+v)", *p)

}

func (p *DebugMessage) DeepEqual(ano *DebugMessage) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Role) {
		return false
	}
	if !p.Field2DeepEqual(ano.Content) {
		return false
	}
	if !p.Field3DeepEqual(ano.ReasoningContent) {
		return false
	}
	if !p.Field4DeepEqual(ano.Parts) {
		return false
	}
	if !p.Field5DeepEqual(ano.ToolCallID) {
		return false
	}
	if !p.Field6DeepEqual(ano.ToolCalls) {
		return false
	}
	if !p.Field101DeepEqual(ano.DebugID) {
		return false
	}
	if !p.Field102DeepEqual(ano.InputTokens) {
		return false
	}
	if !p.Field103DeepEqual(ano.OutputTokens) {
		return false
	}
	if !p.Field104DeepEqual(ano.CostMs) {
		return false
	}
	return true
}

func (p *DebugMessage) Field1DeepEqual(src *Role) bool {

	if p.Role == src {
		return true
	} else if p.Role == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Role, *src) != 0 {
		return false
	}
	return true
}
func (p *DebugMessage) Field2DeepEqual(src *string) bool {

	if p.Content == src {
		return true
	} else if p.Content == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Content, *src) != 0 {
		return false
	}
	return true
}
func (p *DebugMessage) Field3DeepEqual(src *string) bool {

	if p.ReasoningContent == src {
		return true
	} else if p.ReasoningContent == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ReasoningContent, *src) != 0 {
		return false
	}
	return true
}
func (p *DebugMessage) Field4DeepEqual(src []*ContentPart) bool {

	if len(p.Parts) != len(src) {
		return false
	}
	for i, v := range p.Parts {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *DebugMessage) Field5DeepEqual(src *string) bool {

	if p.ToolCallID == src {
		return true
	} else if p.ToolCallID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ToolCallID, *src) != 0 {
		return false
	}
	return true
}
func (p *DebugMessage) Field6DeepEqual(src []*DebugToolCall) bool {

	if len(p.ToolCalls) != len(src) {
		return false
	}
	for i, v := range p.ToolCalls {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *DebugMessage) Field101DeepEqual(src *string) bool {

	if p.DebugID == src {
		return true
	} else if p.DebugID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.DebugID, *src) != 0 {
		return false
	}
	return true
}
func (p *DebugMessage) Field102DeepEqual(src *int64) bool {

	if p.InputTokens == src {
		return true
	} else if p.InputTokens == nil || src == nil {
		return false
	}
	if *p.InputTokens != *src {
		return false
	}
	return true
}
func (p *DebugMessage) Field103DeepEqual(src *int64) bool {

	if p.OutputTokens == src {
		return true
	} else if p.OutputTokens == nil || src == nil {
		return false
	}
	if *p.OutputTokens != *src {
		return false
	}
	return true
}
func (p *DebugMessage) Field104DeepEqual(src *int64) bool {

	if p.CostMs == src {
		return true
	} else if p.CostMs == nil || src == nil {
		return false
	}
	if *p.CostMs != *src {
		return false
	}
	return true
}

type DebugToolCall struct {
	ToolCall      *ToolCall `thrift:"tool_call,1,optional" frugal:"1,optional,ToolCall" form:"tool_call" json:"tool_call,omitempty" query:"tool_call"`
	MockResponse  *string   `thrift:"mock_response,2,optional" frugal:"2,optional,string" form:"mock_response" json:"mock_response,omitempty" query:"mock_response"`
	DebugTraceKey *string   `thrift:"debug_trace_key,3,optional" frugal:"3,optional,string" form:"debug_trace_key" json:"debug_trace_key,omitempty" query:"debug_trace_key"`
}

func NewDebugToolCall() *DebugToolCall {
	return &DebugToolCall{}
}

func (p *DebugToolCall) InitDefault() {
}

var DebugToolCall_ToolCall_DEFAULT *ToolCall

func (p *DebugToolCall) GetToolCall() (v *ToolCall) {
	if p == nil {
		return
	}
	if !p.IsSetToolCall() {
		return DebugToolCall_ToolCall_DEFAULT
	}
	return p.ToolCall
}

var DebugToolCall_MockResponse_DEFAULT string

func (p *DebugToolCall) GetMockResponse() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMockResponse() {
		return DebugToolCall_MockResponse_DEFAULT
	}
	return *p.MockResponse
}

var DebugToolCall_DebugTraceKey_DEFAULT string

func (p *DebugToolCall) GetDebugTraceKey() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDebugTraceKey() {
		return DebugToolCall_DebugTraceKey_DEFAULT
	}
	return *p.DebugTraceKey
}
func (p *DebugToolCall) SetToolCall(val *ToolCall) {
	p.ToolCall = val
}
func (p *DebugToolCall) SetMockResponse(val *string) {
	p.MockResponse = val
}
func (p *DebugToolCall) SetDebugTraceKey(val *string) {
	p.DebugTraceKey = val
}

var fieldIDToName_DebugToolCall = map[int16]string{
	1: "tool_call",
	2: "mock_response",
	3: "debug_trace_key",
}

func (p *DebugToolCall) IsSetToolCall() bool {
	return p.ToolCall != nil
}

func (p *DebugToolCall) IsSetMockResponse() bool {
	return p.MockResponse != nil
}

func (p *DebugToolCall) IsSetDebugTraceKey() bool {
	return p.DebugTraceKey != nil
}

func (p *DebugToolCall) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DebugToolCall[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DebugToolCall) ReadField1(iprot thrift.TProtocol) error {
	_field := NewToolCall()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ToolCall = _field
	return nil
}
func (p *DebugToolCall) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MockResponse = _field
	return nil
}
func (p *DebugToolCall) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DebugTraceKey = _field
	return nil
}

func (p *DebugToolCall) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DebugToolCall"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DebugToolCall) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetToolCall() {
		if err = oprot.WriteFieldBegin("tool_call", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ToolCall.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *DebugToolCall) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMockResponse() {
		if err = oprot.WriteFieldBegin("mock_response", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.MockResponse); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *DebugToolCall) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetDebugTraceKey() {
		if err = oprot.WriteFieldBegin("debug_trace_key", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.DebugTraceKey); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *DebugToolCall) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DebugToolCall(%+v)", *p)

}

func (p *DebugToolCall) DeepEqual(ano *DebugToolCall) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ToolCall) {
		return false
	}
	if !p.Field2DeepEqual(ano.MockResponse) {
		return false
	}
	if !p.Field3DeepEqual(ano.DebugTraceKey) {
		return false
	}
	return true
}

func (p *DebugToolCall) Field1DeepEqual(src *ToolCall) bool {

	if !p.ToolCall.DeepEqual(src) {
		return false
	}
	return true
}
func (p *DebugToolCall) Field2DeepEqual(src *string) bool {

	if p.MockResponse == src {
		return true
	} else if p.MockResponse == nil || src == nil {
		return false
	}
	if strings.Compare(*p.MockResponse, *src) != 0 {
		return false
	}
	return true
}
func (p *DebugToolCall) Field3DeepEqual(src *string) bool {

	if p.DebugTraceKey == src {
		return true
	} else if p.DebugTraceKey == nil || src == nil {
		return false
	}
	if strings.Compare(*p.DebugTraceKey, *src) != 0 {
		return false
	}
	return true
}

type MockTool struct {
	Name         *string `thrift:"name,1,optional" frugal:"1,optional,string" form:"name" json:"name,omitempty" query:"name"`
	MockResponse *string `thrift:"mock_response,2,optional" frugal:"2,optional,string" form:"mock_response" json:"mock_response,omitempty" query:"mock_response"`
}

func NewMockTool() *MockTool {
	return &MockTool{}
}

func (p *MockTool) InitDefault() {
}

var MockTool_Name_DEFAULT string

func (p *MockTool) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return MockTool_Name_DEFAULT
	}
	return *p.Name
}

var MockTool_MockResponse_DEFAULT string

func (p *MockTool) GetMockResponse() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMockResponse() {
		return MockTool_MockResponse_DEFAULT
	}
	return *p.MockResponse
}
func (p *MockTool) SetName(val *string) {
	p.Name = val
}
func (p *MockTool) SetMockResponse(val *string) {
	p.MockResponse = val
}

var fieldIDToName_MockTool = map[int16]string{
	1: "name",
	2: "mock_response",
}

func (p *MockTool) IsSetName() bool {
	return p.Name != nil
}

func (p *MockTool) IsSetMockResponse() bool {
	return p.MockResponse != nil
}

func (p *MockTool) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_MockTool[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *MockTool) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *MockTool) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MockResponse = _field
	return nil
}

func (p *MockTool) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("MockTool"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *MockTool) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *MockTool) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMockResponse() {
		if err = oprot.WriteFieldBegin("mock_response", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.MockResponse); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *MockTool) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MockTool(%+v)", *p)

}

func (p *MockTool) DeepEqual(ano *MockTool) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.MockResponse) {
		return false
	}
	return true
}

func (p *MockTool) Field1DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *MockTool) Field2DeepEqual(src *string) bool {

	if p.MockResponse == src {
		return true
	} else if p.MockResponse == nil || src == nil {
		return false
	}
	if strings.Compare(*p.MockResponse, *src) != 0 {
		return false
	}
	return true
}

type DebugConfig struct {
	SingleStepDebug *bool `thrift:"single_step_debug,1,optional" frugal:"1,optional,bool" form:"single_step_debug" json:"single_step_debug,omitempty" query:"single_step_debug"`
}

func NewDebugConfig() *DebugConfig {
	return &DebugConfig{}
}

func (p *DebugConfig) InitDefault() {
}

var DebugConfig_SingleStepDebug_DEFAULT bool

func (p *DebugConfig) GetSingleStepDebug() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetSingleStepDebug() {
		return DebugConfig_SingleStepDebug_DEFAULT
	}
	return *p.SingleStepDebug
}
func (p *DebugConfig) SetSingleStepDebug(val *bool) {
	p.SingleStepDebug = val
}

var fieldIDToName_DebugConfig = map[int16]string{
	1: "single_step_debug",
}

func (p *DebugConfig) IsSetSingleStepDebug() bool {
	return p.SingleStepDebug != nil
}

func (p *DebugConfig) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DebugConfig[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DebugConfig) ReadField1(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SingleStepDebug = _field
	return nil
}

func (p *DebugConfig) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DebugConfig"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DebugConfig) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSingleStepDebug() {
		if err = oprot.WriteFieldBegin("single_step_debug", thrift.BOOL, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.SingleStepDebug); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *DebugConfig) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DebugConfig(%+v)", *p)

}

func (p *DebugConfig) DeepEqual(ano *DebugConfig) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SingleStepDebug) {
		return false
	}
	return true
}

func (p *DebugConfig) Field1DeepEqual(src *bool) bool {

	if p.SingleStepDebug == src {
		return true
	} else if p.SingleStepDebug == nil || src == nil {
		return false
	}
	if *p.SingleStepDebug != *src {
		return false
	}
	return true
}

type DebugLog struct {
	ID           *int64  `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id" form:"id" query:"id"`
	PromptID     *int64  `thrift:"prompt_id,2,optional" frugal:"2,optional,i64" json:"prompt_id" form:"prompt_id" query:"prompt_id"`
	WorkspaceID  *int64  `thrift:"workspace_id,3,optional" frugal:"3,optional,i64" json:"workspace_id" form:"workspace_id" query:"workspace_id"`
	PromptKey    *string `thrift:"prompt_key,4,optional" frugal:"4,optional,string" form:"prompt_key" json:"prompt_key,omitempty" query:"prompt_key"`
	Version      *string `thrift:"version,5,optional" frugal:"5,optional,string" form:"version" json:"version,omitempty" query:"version"`
	InputTokens  *int64  `thrift:"input_tokens,6,optional" frugal:"6,optional,i64" json:"input_tokens" form:"input_tokens" query:"input_tokens"`
	OutputTokens *int64  `thrift:"output_tokens,7,optional" frugal:"7,optional,i64" json:"output_tokens" form:"output_tokens" query:"output_tokens"`
	CostMs       *int64  `thrift:"cost_ms,8,optional" frugal:"8,optional,i64" json:"cost_ms" form:"cost_ms" query:"cost_ms"`
	StatusCode   *int32  `thrift:"status_code,9,optional" frugal:"9,optional,i32" form:"status_code" json:"status_code,omitempty" query:"status_code"`
	DebuggedBy   *string `thrift:"debugged_by,10,optional" frugal:"10,optional,string" form:"debugged_by" json:"debugged_by,omitempty" query:"debugged_by"`
	DebugID      *int64  `thrift:"debug_id,11,optional" frugal:"11,optional,i64" json:"debug_id" form:"debug_id" query:"debug_id"`
	DebugStep    *int32  `thrift:"debug_step,12,optional" frugal:"12,optional,i32" form:"debug_step" json:"debug_step,omitempty" query:"debug_step"`
	StartedAt    *int64  `thrift:"started_at,13,optional" frugal:"13,optional,i64" json:"started_at" form:"started_at" query:"started_at"`
	EndedAt      *int64  `thrift:"ended_at,14,optional" frugal:"14,optional,i64" json:"ended_at" form:"ended_at" query:"ended_at"`
}

func NewDebugLog() *DebugLog {
	return &DebugLog{}
}

func (p *DebugLog) InitDefault() {
}

var DebugLog_ID_DEFAULT int64

func (p *DebugLog) GetID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetID() {
		return DebugLog_ID_DEFAULT
	}
	return *p.ID
}

var DebugLog_PromptID_DEFAULT int64

func (p *DebugLog) GetPromptID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetPromptID() {
		return DebugLog_PromptID_DEFAULT
	}
	return *p.PromptID
}

var DebugLog_WorkspaceID_DEFAULT int64

func (p *DebugLog) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return DebugLog_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var DebugLog_PromptKey_DEFAULT string

func (p *DebugLog) GetPromptKey() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetPromptKey() {
		return DebugLog_PromptKey_DEFAULT
	}
	return *p.PromptKey
}

var DebugLog_Version_DEFAULT string

func (p *DebugLog) GetVersion() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetVersion() {
		return DebugLog_Version_DEFAULT
	}
	return *p.Version
}

var DebugLog_InputTokens_DEFAULT int64

func (p *DebugLog) GetInputTokens() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetInputTokens() {
		return DebugLog_InputTokens_DEFAULT
	}
	return *p.InputTokens
}

var DebugLog_OutputTokens_DEFAULT int64

func (p *DebugLog) GetOutputTokens() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetOutputTokens() {
		return DebugLog_OutputTokens_DEFAULT
	}
	return *p.OutputTokens
}

var DebugLog_CostMs_DEFAULT int64

func (p *DebugLog) GetCostMs() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetCostMs() {
		return DebugLog_CostMs_DEFAULT
	}
	return *p.CostMs
}

var DebugLog_StatusCode_DEFAULT int32

func (p *DebugLog) GetStatusCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetStatusCode() {
		return DebugLog_StatusCode_DEFAULT
	}
	return *p.StatusCode
}

var DebugLog_DebuggedBy_DEFAULT string

func (p *DebugLog) GetDebuggedBy() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDebuggedBy() {
		return DebugLog_DebuggedBy_DEFAULT
	}
	return *p.DebuggedBy
}

var DebugLog_DebugID_DEFAULT int64

func (p *DebugLog) GetDebugID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetDebugID() {
		return DebugLog_DebugID_DEFAULT
	}
	return *p.DebugID
}

var DebugLog_DebugStep_DEFAULT int32

func (p *DebugLog) GetDebugStep() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetDebugStep() {
		return DebugLog_DebugStep_DEFAULT
	}
	return *p.DebugStep
}

var DebugLog_StartedAt_DEFAULT int64

func (p *DebugLog) GetStartedAt() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetStartedAt() {
		return DebugLog_StartedAt_DEFAULT
	}
	return *p.StartedAt
}

var DebugLog_EndedAt_DEFAULT int64

func (p *DebugLog) GetEndedAt() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetEndedAt() {
		return DebugLog_EndedAt_DEFAULT
	}
	return *p.EndedAt
}
func (p *DebugLog) SetID(val *int64) {
	p.ID = val
}
func (p *DebugLog) SetPromptID(val *int64) {
	p.PromptID = val
}
func (p *DebugLog) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *DebugLog) SetPromptKey(val *string) {
	p.PromptKey = val
}
func (p *DebugLog) SetVersion(val *string) {
	p.Version = val
}
func (p *DebugLog) SetInputTokens(val *int64) {
	p.InputTokens = val
}
func (p *DebugLog) SetOutputTokens(val *int64) {
	p.OutputTokens = val
}
func (p *DebugLog) SetCostMs(val *int64) {
	p.CostMs = val
}
func (p *DebugLog) SetStatusCode(val *int32) {
	p.StatusCode = val
}
func (p *DebugLog) SetDebuggedBy(val *string) {
	p.DebuggedBy = val
}
func (p *DebugLog) SetDebugID(val *int64) {
	p.DebugID = val
}
func (p *DebugLog) SetDebugStep(val *int32) {
	p.DebugStep = val
}
func (p *DebugLog) SetStartedAt(val *int64) {
	p.StartedAt = val
}
func (p *DebugLog) SetEndedAt(val *int64) {
	p.EndedAt = val
}

var fieldIDToName_DebugLog = map[int16]string{
	1:  "id",
	2:  "prompt_id",
	3:  "workspace_id",
	4:  "prompt_key",
	5:  "version",
	6:  "input_tokens",
	7:  "output_tokens",
	8:  "cost_ms",
	9:  "status_code",
	10: "debugged_by",
	11: "debug_id",
	12: "debug_step",
	13: "started_at",
	14: "ended_at",
}

func (p *DebugLog) IsSetID() bool {
	return p.ID != nil
}

func (p *DebugLog) IsSetPromptID() bool {
	return p.PromptID != nil
}

func (p *DebugLog) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *DebugLog) IsSetPromptKey() bool {
	return p.PromptKey != nil
}

func (p *DebugLog) IsSetVersion() bool {
	return p.Version != nil
}

func (p *DebugLog) IsSetInputTokens() bool {
	return p.InputTokens != nil
}

func (p *DebugLog) IsSetOutputTokens() bool {
	return p.OutputTokens != nil
}

func (p *DebugLog) IsSetCostMs() bool {
	return p.CostMs != nil
}

func (p *DebugLog) IsSetStatusCode() bool {
	return p.StatusCode != nil
}

func (p *DebugLog) IsSetDebuggedBy() bool {
	return p.DebuggedBy != nil
}

func (p *DebugLog) IsSetDebugID() bool {
	return p.DebugID != nil
}

func (p *DebugLog) IsSetDebugStep() bool {
	return p.DebugStep != nil
}

func (p *DebugLog) IsSetStartedAt() bool {
	return p.StartedAt != nil
}

func (p *DebugLog) IsSetEndedAt() bool {
	return p.EndedAt != nil
}

func (p *DebugLog) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DebugLog[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DebugLog) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ID = _field
	return nil
}
func (p *DebugLog) ReadField2(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PromptID = _field
	return nil
}
func (p *DebugLog) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *DebugLog) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PromptKey = _field
	return nil
}
func (p *DebugLog) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Version = _field
	return nil
}
func (p *DebugLog) ReadField6(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.InputTokens = _field
	return nil
}
func (p *DebugLog) ReadField7(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.OutputTokens = _field
	return nil
}
func (p *DebugLog) ReadField8(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CostMs = _field
	return nil
}
func (p *DebugLog) ReadField9(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.StatusCode = _field
	return nil
}
func (p *DebugLog) ReadField10(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DebuggedBy = _field
	return nil
}
func (p *DebugLog) ReadField11(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DebugID = _field
	return nil
}
func (p *DebugLog) ReadField12(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DebugStep = _field
	return nil
}
func (p *DebugLog) ReadField13(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.StartedAt = _field
	return nil
}
func (p *DebugLog) ReadField14(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EndedAt = _field
	return nil
}

func (p *DebugLog) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DebugLog"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DebugLog) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *DebugLog) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPromptID() {
		if err = oprot.WriteFieldBegin("prompt_id", thrift.I64, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PromptID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *DebugLog) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *DebugLog) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPromptKey() {
		if err = oprot.WriteFieldBegin("prompt_key", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PromptKey); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *DebugLog) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err = oprot.WriteFieldBegin("version", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Version); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *DebugLog) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetInputTokens() {
		if err = oprot.WriteFieldBegin("input_tokens", thrift.I64, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.InputTokens); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *DebugLog) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutputTokens() {
		if err = oprot.WriteFieldBegin("output_tokens", thrift.I64, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.OutputTokens); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}
func (p *DebugLog) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetCostMs() {
		if err = oprot.WriteFieldBegin("cost_ms", thrift.I64, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CostMs); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}
func (p *DebugLog) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatusCode() {
		if err = oprot.WriteFieldBegin("status_code", thrift.I32, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.StatusCode); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}
func (p *DebugLog) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetDebuggedBy() {
		if err = oprot.WriteFieldBegin("debugged_by", thrift.STRING, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.DebuggedBy); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}
func (p *DebugLog) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetDebugID() {
		if err = oprot.WriteFieldBegin("debug_id", thrift.I64, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.DebugID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}
func (p *DebugLog) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetDebugStep() {
		if err = oprot.WriteFieldBegin("debug_step", thrift.I32, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.DebugStep); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}
func (p *DebugLog) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartedAt() {
		if err = oprot.WriteFieldBegin("started_at", thrift.I64, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.StartedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}
func (p *DebugLog) writeField14(oprot thrift.TProtocol) (err error) {
	if p.IsSetEndedAt() {
		if err = oprot.WriteFieldBegin("ended_at", thrift.I64, 14); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.EndedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *DebugLog) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DebugLog(%+v)", *p)

}

func (p *DebugLog) DeepEqual(ano *DebugLog) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field2DeepEqual(ano.PromptID) {
		return false
	}
	if !p.Field3DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field4DeepEqual(ano.PromptKey) {
		return false
	}
	if !p.Field5DeepEqual(ano.Version) {
		return false
	}
	if !p.Field6DeepEqual(ano.InputTokens) {
		return false
	}
	if !p.Field7DeepEqual(ano.OutputTokens) {
		return false
	}
	if !p.Field8DeepEqual(ano.CostMs) {
		return false
	}
	if !p.Field9DeepEqual(ano.StatusCode) {
		return false
	}
	if !p.Field10DeepEqual(ano.DebuggedBy) {
		return false
	}
	if !p.Field11DeepEqual(ano.DebugID) {
		return false
	}
	if !p.Field12DeepEqual(ano.DebugStep) {
		return false
	}
	if !p.Field13DeepEqual(ano.StartedAt) {
		return false
	}
	if !p.Field14DeepEqual(ano.EndedAt) {
		return false
	}
	return true
}

func (p *DebugLog) Field1DeepEqual(src *int64) bool {

	if p.ID == src {
		return true
	} else if p.ID == nil || src == nil {
		return false
	}
	if *p.ID != *src {
		return false
	}
	return true
}
func (p *DebugLog) Field2DeepEqual(src *int64) bool {

	if p.PromptID == src {
		return true
	} else if p.PromptID == nil || src == nil {
		return false
	}
	if *p.PromptID != *src {
		return false
	}
	return true
}
func (p *DebugLog) Field3DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *DebugLog) Field4DeepEqual(src *string) bool {

	if p.PromptKey == src {
		return true
	} else if p.PromptKey == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PromptKey, *src) != 0 {
		return false
	}
	return true
}
func (p *DebugLog) Field5DeepEqual(src *string) bool {

	if p.Version == src {
		return true
	} else if p.Version == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Version, *src) != 0 {
		return false
	}
	return true
}
func (p *DebugLog) Field6DeepEqual(src *int64) bool {

	if p.InputTokens == src {
		return true
	} else if p.InputTokens == nil || src == nil {
		return false
	}
	if *p.InputTokens != *src {
		return false
	}
	return true
}
func (p *DebugLog) Field7DeepEqual(src *int64) bool {

	if p.OutputTokens == src {
		return true
	} else if p.OutputTokens == nil || src == nil {
		return false
	}
	if *p.OutputTokens != *src {
		return false
	}
	return true
}
func (p *DebugLog) Field8DeepEqual(src *int64) bool {

	if p.CostMs == src {
		return true
	} else if p.CostMs == nil || src == nil {
		return false
	}
	if *p.CostMs != *src {
		return false
	}
	return true
}
func (p *DebugLog) Field9DeepEqual(src *int32) bool {

	if p.StatusCode == src {
		return true
	} else if p.StatusCode == nil || src == nil {
		return false
	}
	if *p.StatusCode != *src {
		return false
	}
	return true
}
func (p *DebugLog) Field10DeepEqual(src *string) bool {

	if p.DebuggedBy == src {
		return true
	} else if p.DebuggedBy == nil || src == nil {
		return false
	}
	if strings.Compare(*p.DebuggedBy, *src) != 0 {
		return false
	}
	return true
}
func (p *DebugLog) Field11DeepEqual(src *int64) bool {

	if p.DebugID == src {
		return true
	} else if p.DebugID == nil || src == nil {
		return false
	}
	if *p.DebugID != *src {
		return false
	}
	return true
}
func (p *DebugLog) Field12DeepEqual(src *int32) bool {

	if p.DebugStep == src {
		return true
	} else if p.DebugStep == nil || src == nil {
		return false
	}
	if *p.DebugStep != *src {
		return false
	}
	return true
}
func (p *DebugLog) Field13DeepEqual(src *int64) bool {

	if p.StartedAt == src {
		return true
	} else if p.StartedAt == nil || src == nil {
		return false
	}
	if *p.StartedAt != *src {
		return false
	}
	return true
}
func (p *DebugLog) Field14DeepEqual(src *int64) bool {

	if p.EndedAt == src {
		return true
	} else if p.EndedAt == nil || src == nil {
		return false
	}
	if *p.EndedAt != *src {
		return false
	}
	return true
}

type OverridePromptParams struct {
	ModelConfig *ModelConfig `thrift:"model_config,1,optional" frugal:"1,optional,ModelConfig" form:"model_config" json:"model_config,omitempty" query:"model_config"`
}

func NewOverridePromptParams() *OverridePromptParams {
	return &OverridePromptParams{}
}

func (p *OverridePromptParams) InitDefault() {
}

var OverridePromptParams_ModelConfig_DEFAULT *ModelConfig

func (p *OverridePromptParams) GetModelConfig() (v *ModelConfig) {
	if p == nil {
		return
	}
	if !p.IsSetModelConfig() {
		return OverridePromptParams_ModelConfig_DEFAULT
	}
	return p.ModelConfig
}
func (p *OverridePromptParams) SetModelConfig(val *ModelConfig) {
	p.ModelConfig = val
}

var fieldIDToName_OverridePromptParams = map[int16]string{
	1: "model_config",
}

func (p *OverridePromptParams) IsSetModelConfig() bool {
	return p.ModelConfig != nil
}

func (p *OverridePromptParams) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_OverridePromptParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *OverridePromptParams) ReadField1(iprot thrift.TProtocol) error {
	_field := NewModelConfig()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ModelConfig = _field
	return nil
}

func (p *OverridePromptParams) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("OverridePromptParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *OverridePromptParams) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetModelConfig() {
		if err = oprot.WriteFieldBegin("model_config", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ModelConfig.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *OverridePromptParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OverridePromptParams(%+v)", *p)

}

func (p *OverridePromptParams) DeepEqual(ano *OverridePromptParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ModelConfig) {
		return false
	}
	return true
}

func (p *OverridePromptParams) Field1DeepEqual(src *ModelConfig) bool {

	if !p.ModelConfig.DeepEqual(src) {
		return false
	}
	return true
}
