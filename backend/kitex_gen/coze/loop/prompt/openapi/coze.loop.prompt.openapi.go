// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package openapi

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/base"
	"strings"
)

const (
	TemplateTypeNormal = "normal"

	ToolChoiceTypeAuto = "auto"

	ToolChoiceTypeNone = "none"

	VariableTypeString = "string"

	VariableTypePlaceholder = "placeholder"

	RoleSystem = "system"

	RoleUser = "user"

	RoleAssistant = "assistant"

	RoleTool = "tool"

	RolePlaceholder = "placeholder"

	ToolTypeFunction = "function"
)

type TemplateType = string

type ToolChoiceType = string

type VariableType = string

type Role = string

type ToolType = string

type BatchGetPromptByPromptKeyRequest struct {
	WorkspaceID *int64         `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" form:"workspace_id" `
	Queries     []*PromptQuery `thrift:"queries,2,optional" frugal:"2,optional,list<PromptQuery>" form:"queries" json:"queries,omitempty"`
	Base        *base.Base     `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewBatchGetPromptByPromptKeyRequest() *BatchGetPromptByPromptKeyRequest {
	return &BatchGetPromptByPromptKeyRequest{}
}

func (p *BatchGetPromptByPromptKeyRequest) InitDefault() {
}

var BatchGetPromptByPromptKeyRequest_WorkspaceID_DEFAULT int64

func (p *BatchGetPromptByPromptKeyRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return BatchGetPromptByPromptKeyRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var BatchGetPromptByPromptKeyRequest_Queries_DEFAULT []*PromptQuery

func (p *BatchGetPromptByPromptKeyRequest) GetQueries() (v []*PromptQuery) {
	if p == nil {
		return
	}
	if !p.IsSetQueries() {
		return BatchGetPromptByPromptKeyRequest_Queries_DEFAULT
	}
	return p.Queries
}

var BatchGetPromptByPromptKeyRequest_Base_DEFAULT *base.Base

func (p *BatchGetPromptByPromptKeyRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return BatchGetPromptByPromptKeyRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *BatchGetPromptByPromptKeyRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *BatchGetPromptByPromptKeyRequest) SetQueries(val []*PromptQuery) {
	p.Queries = val
}
func (p *BatchGetPromptByPromptKeyRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_BatchGetPromptByPromptKeyRequest = map[int16]string{
	1:   "workspace_id",
	2:   "queries",
	255: "Base",
}

func (p *BatchGetPromptByPromptKeyRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *BatchGetPromptByPromptKeyRequest) IsSetQueries() bool {
	return p.Queries != nil
}

func (p *BatchGetPromptByPromptKeyRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *BatchGetPromptByPromptKeyRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchGetPromptByPromptKeyRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchGetPromptByPromptKeyRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *BatchGetPromptByPromptKeyRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*PromptQuery, 0, size)
	values := make([]PromptQuery, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Queries = _field
	return nil
}
func (p *BatchGetPromptByPromptKeyRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *BatchGetPromptByPromptKeyRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetPromptByPromptKeyRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchGetPromptByPromptKeyRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchGetPromptByPromptKeyRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueries() {
		if err = oprot.WriteFieldBegin("queries", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Queries)); err != nil {
			return err
		}
		for _, v := range p.Queries {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BatchGetPromptByPromptKeyRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchGetPromptByPromptKeyRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchGetPromptByPromptKeyRequest(%+v)", *p)

}

func (p *BatchGetPromptByPromptKeyRequest) DeepEqual(ano *BatchGetPromptByPromptKeyRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Queries) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *BatchGetPromptByPromptKeyRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *BatchGetPromptByPromptKeyRequest) Field2DeepEqual(src []*PromptQuery) bool {

	if len(p.Queries) != len(src) {
		return false
	}
	for i, v := range p.Queries {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *BatchGetPromptByPromptKeyRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type BatchGetPromptByPromptKeyResponse struct {
	Code     *int32            `thrift:"code,1,optional" frugal:"1,optional,i32" form:"code" json:"code,omitempty" query:"code"`
	Msg      *string           `thrift:"msg,2,optional" frugal:"2,optional,string" form:"msg" json:"msg,omitempty" query:"msg"`
	Data     *PromptResultData `thrift:"data,3,optional" frugal:"3,optional,PromptResultData" form:"data" json:"data,omitempty" query:"data"`
	BaseResp *base.BaseResp    `thrift:"BaseResp,255,optional" frugal:"255,optional,base.BaseResp" form:"BaseResp" json:"BaseResp,omitempty" query:"BaseResp"`
}

func NewBatchGetPromptByPromptKeyResponse() *BatchGetPromptByPromptKeyResponse {
	return &BatchGetPromptByPromptKeyResponse{}
}

func (p *BatchGetPromptByPromptKeyResponse) InitDefault() {
}

var BatchGetPromptByPromptKeyResponse_Code_DEFAULT int32

func (p *BatchGetPromptByPromptKeyResponse) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return BatchGetPromptByPromptKeyResponse_Code_DEFAULT
	}
	return *p.Code
}

var BatchGetPromptByPromptKeyResponse_Msg_DEFAULT string

func (p *BatchGetPromptByPromptKeyResponse) GetMsg() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMsg() {
		return BatchGetPromptByPromptKeyResponse_Msg_DEFAULT
	}
	return *p.Msg
}

var BatchGetPromptByPromptKeyResponse_Data_DEFAULT *PromptResultData

func (p *BatchGetPromptByPromptKeyResponse) GetData() (v *PromptResultData) {
	if p == nil {
		return
	}
	if !p.IsSetData() {
		return BatchGetPromptByPromptKeyResponse_Data_DEFAULT
	}
	return p.Data
}

var BatchGetPromptByPromptKeyResponse_BaseResp_DEFAULT *base.BaseResp

func (p *BatchGetPromptByPromptKeyResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return BatchGetPromptByPromptKeyResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *BatchGetPromptByPromptKeyResponse) SetCode(val *int32) {
	p.Code = val
}
func (p *BatchGetPromptByPromptKeyResponse) SetMsg(val *string) {
	p.Msg = val
}
func (p *BatchGetPromptByPromptKeyResponse) SetData(val *PromptResultData) {
	p.Data = val
}
func (p *BatchGetPromptByPromptKeyResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_BatchGetPromptByPromptKeyResponse = map[int16]string{
	1:   "code",
	2:   "msg",
	3:   "data",
	255: "BaseResp",
}

func (p *BatchGetPromptByPromptKeyResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *BatchGetPromptByPromptKeyResponse) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *BatchGetPromptByPromptKeyResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *BatchGetPromptByPromptKeyResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *BatchGetPromptByPromptKeyResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchGetPromptByPromptKeyResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchGetPromptByPromptKeyResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *BatchGetPromptByPromptKeyResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Msg = _field
	return nil
}
func (p *BatchGetPromptByPromptKeyResponse) ReadField3(iprot thrift.TProtocol) error {
	_field := NewPromptResultData()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Data = _field
	return nil
}
func (p *BatchGetPromptByPromptKeyResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *BatchGetPromptByPromptKeyResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetPromptByPromptKeyResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchGetPromptByPromptKeyResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchGetPromptByPromptKeyResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Msg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BatchGetPromptByPromptKeyResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetData() {
		if err = oprot.WriteFieldBegin("data", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Data.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *BatchGetPromptByPromptKeyResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseResp() {
		if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseResp.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchGetPromptByPromptKeyResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchGetPromptByPromptKeyResponse(%+v)", *p)

}

func (p *BatchGetPromptByPromptKeyResponse) DeepEqual(ano *BatchGetPromptByPromptKeyResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field3DeepEqual(ano.Data) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *BatchGetPromptByPromptKeyResponse) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *BatchGetPromptByPromptKeyResponse) Field2DeepEqual(src *string) bool {

	if p.Msg == src {
		return true
	} else if p.Msg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Msg, *src) != 0 {
		return false
	}
	return true
}
func (p *BatchGetPromptByPromptKeyResponse) Field3DeepEqual(src *PromptResultData) bool {

	if !p.Data.DeepEqual(src) {
		return false
	}
	return true
}
func (p *BatchGetPromptByPromptKeyResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type PromptResultData struct {
	Items []*PromptResult_ `thrift:"items,1,optional" frugal:"1,optional,list<PromptResult_>" form:"items" json:"items,omitempty" query:"items"`
}

func NewPromptResultData() *PromptResultData {
	return &PromptResultData{}
}

func (p *PromptResultData) InitDefault() {
}

var PromptResultData_Items_DEFAULT []*PromptResult_

func (p *PromptResultData) GetItems() (v []*PromptResult_) {
	if p == nil {
		return
	}
	if !p.IsSetItems() {
		return PromptResultData_Items_DEFAULT
	}
	return p.Items
}
func (p *PromptResultData) SetItems(val []*PromptResult_) {
	p.Items = val
}

var fieldIDToName_PromptResultData = map[int16]string{
	1: "items",
}

func (p *PromptResultData) IsSetItems() bool {
	return p.Items != nil
}

func (p *PromptResultData) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PromptResultData[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PromptResultData) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*PromptResult_, 0, size)
	values := make([]PromptResult_, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Items = _field
	return nil
}

func (p *PromptResultData) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PromptResultData"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PromptResultData) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetItems() {
		if err = oprot.WriteFieldBegin("items", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Items)); err != nil {
			return err
		}
		for _, v := range p.Items {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PromptResultData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PromptResultData(%+v)", *p)

}

func (p *PromptResultData) DeepEqual(ano *PromptResultData) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Items) {
		return false
	}
	return true
}

func (p *PromptResultData) Field1DeepEqual(src []*PromptResult_) bool {

	if len(p.Items) != len(src) {
		return false
	}
	for i, v := range p.Items {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type PromptQuery struct {
	PromptKey *string `thrift:"prompt_key,1,optional" frugal:"1,optional,string" form:"prompt_key" json:"prompt_key,omitempty" query:"prompt_key"`
	Version   *string `thrift:"version,2,optional" frugal:"2,optional,string" form:"version" json:"version,omitempty" query:"version"`
}

func NewPromptQuery() *PromptQuery {
	return &PromptQuery{}
}

func (p *PromptQuery) InitDefault() {
}

var PromptQuery_PromptKey_DEFAULT string

func (p *PromptQuery) GetPromptKey() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetPromptKey() {
		return PromptQuery_PromptKey_DEFAULT
	}
	return *p.PromptKey
}

var PromptQuery_Version_DEFAULT string

func (p *PromptQuery) GetVersion() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetVersion() {
		return PromptQuery_Version_DEFAULT
	}
	return *p.Version
}
func (p *PromptQuery) SetPromptKey(val *string) {
	p.PromptKey = val
}
func (p *PromptQuery) SetVersion(val *string) {
	p.Version = val
}

var fieldIDToName_PromptQuery = map[int16]string{
	1: "prompt_key",
	2: "version",
}

func (p *PromptQuery) IsSetPromptKey() bool {
	return p.PromptKey != nil
}

func (p *PromptQuery) IsSetVersion() bool {
	return p.Version != nil
}

func (p *PromptQuery) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PromptQuery[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PromptQuery) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PromptKey = _field
	return nil
}
func (p *PromptQuery) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Version = _field
	return nil
}

func (p *PromptQuery) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PromptQuery"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PromptQuery) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPromptKey() {
		if err = oprot.WriteFieldBegin("prompt_key", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PromptKey); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *PromptQuery) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err = oprot.WriteFieldBegin("version", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Version); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *PromptQuery) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PromptQuery(%+v)", *p)

}

func (p *PromptQuery) DeepEqual(ano *PromptQuery) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PromptKey) {
		return false
	}
	if !p.Field2DeepEqual(ano.Version) {
		return false
	}
	return true
}

func (p *PromptQuery) Field1DeepEqual(src *string) bool {

	if p.PromptKey == src {
		return true
	} else if p.PromptKey == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PromptKey, *src) != 0 {
		return false
	}
	return true
}
func (p *PromptQuery) Field2DeepEqual(src *string) bool {

	if p.Version == src {
		return true
	} else if p.Version == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Version, *src) != 0 {
		return false
	}
	return true
}

type PromptResult_ struct {
	Query  *PromptQuery `thrift:"query,1,optional" frugal:"1,optional,PromptQuery" form:"query" json:"query,omitempty" query:"query"`
	Prompt *Prompt      `thrift:"prompt,2,optional" frugal:"2,optional,Prompt" form:"prompt" json:"prompt,omitempty" query:"prompt"`
}

func NewPromptResult_() *PromptResult_ {
	return &PromptResult_{}
}

func (p *PromptResult_) InitDefault() {
}

var PromptResult__Query_DEFAULT *PromptQuery

func (p *PromptResult_) GetQuery() (v *PromptQuery) {
	if p == nil {
		return
	}
	if !p.IsSetQuery() {
		return PromptResult__Query_DEFAULT
	}
	return p.Query
}

var PromptResult__Prompt_DEFAULT *Prompt

func (p *PromptResult_) GetPrompt() (v *Prompt) {
	if p == nil {
		return
	}
	if !p.IsSetPrompt() {
		return PromptResult__Prompt_DEFAULT
	}
	return p.Prompt
}
func (p *PromptResult_) SetQuery(val *PromptQuery) {
	p.Query = val
}
func (p *PromptResult_) SetPrompt(val *Prompt) {
	p.Prompt = val
}

var fieldIDToName_PromptResult_ = map[int16]string{
	1: "query",
	2: "prompt",
}

func (p *PromptResult_) IsSetQuery() bool {
	return p.Query != nil
}

func (p *PromptResult_) IsSetPrompt() bool {
	return p.Prompt != nil
}

func (p *PromptResult_) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PromptResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PromptResult_) ReadField1(iprot thrift.TProtocol) error {
	_field := NewPromptQuery()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Query = _field
	return nil
}
func (p *PromptResult_) ReadField2(iprot thrift.TProtocol) error {
	_field := NewPrompt()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Prompt = _field
	return nil
}

func (p *PromptResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PromptResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PromptResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetQuery() {
		if err = oprot.WriteFieldBegin("query", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Query.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *PromptResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrompt() {
		if err = oprot.WriteFieldBegin("prompt", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Prompt.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *PromptResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PromptResult_(%+v)", *p)

}

func (p *PromptResult_) DeepEqual(ano *PromptResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Query) {
		return false
	}
	if !p.Field2DeepEqual(ano.Prompt) {
		return false
	}
	return true
}

func (p *PromptResult_) Field1DeepEqual(src *PromptQuery) bool {

	if !p.Query.DeepEqual(src) {
		return false
	}
	return true
}
func (p *PromptResult_) Field2DeepEqual(src *Prompt) bool {

	if !p.Prompt.DeepEqual(src) {
		return false
	}
	return true
}

type Prompt struct {
	// 空间ID
	WorkspaceID *int64 `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" form:"workspace_id" query:"workspace_id"`
	// 唯一标识
	PromptKey *string `thrift:"prompt_key,2,optional" frugal:"2,optional,string" form:"prompt_key" json:"prompt_key,omitempty" query:"prompt_key"`
	// 版本
	Version *string `thrift:"version,3,optional" frugal:"3,optional,string" form:"version" json:"version,omitempty" query:"version"`
	// Prompt模板
	PromptTemplate *PromptTemplate `thrift:"prompt_template,4,optional" frugal:"4,optional,PromptTemplate" form:"prompt_template" json:"prompt_template,omitempty" query:"prompt_template"`
	// tool定义
	Tools []*Tool `thrift:"tools,5,optional" frugal:"5,optional,list<Tool>" form:"tools" json:"tools,omitempty" query:"tools"`
	// tool调用配置
	ToolCallConfig *ToolCallConfig `thrift:"tool_call_config,6,optional" frugal:"6,optional,ToolCallConfig" form:"tool_call_config" json:"tool_call_config,omitempty" query:"tool_call_config"`
	// 模型配置
	LlmConfig *LLMConfig `thrift:"llm_config,7,optional" frugal:"7,optional,LLMConfig" form:"llm_config" json:"llm_config,omitempty" query:"llm_config"`
}

func NewPrompt() *Prompt {
	return &Prompt{}
}

func (p *Prompt) InitDefault() {
}

var Prompt_WorkspaceID_DEFAULT int64

func (p *Prompt) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return Prompt_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var Prompt_PromptKey_DEFAULT string

func (p *Prompt) GetPromptKey() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetPromptKey() {
		return Prompt_PromptKey_DEFAULT
	}
	return *p.PromptKey
}

var Prompt_Version_DEFAULT string

func (p *Prompt) GetVersion() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetVersion() {
		return Prompt_Version_DEFAULT
	}
	return *p.Version
}

var Prompt_PromptTemplate_DEFAULT *PromptTemplate

func (p *Prompt) GetPromptTemplate() (v *PromptTemplate) {
	if p == nil {
		return
	}
	if !p.IsSetPromptTemplate() {
		return Prompt_PromptTemplate_DEFAULT
	}
	return p.PromptTemplate
}

var Prompt_Tools_DEFAULT []*Tool

func (p *Prompt) GetTools() (v []*Tool) {
	if p == nil {
		return
	}
	if !p.IsSetTools() {
		return Prompt_Tools_DEFAULT
	}
	return p.Tools
}

var Prompt_ToolCallConfig_DEFAULT *ToolCallConfig

func (p *Prompt) GetToolCallConfig() (v *ToolCallConfig) {
	if p == nil {
		return
	}
	if !p.IsSetToolCallConfig() {
		return Prompt_ToolCallConfig_DEFAULT
	}
	return p.ToolCallConfig
}

var Prompt_LlmConfig_DEFAULT *LLMConfig

func (p *Prompt) GetLlmConfig() (v *LLMConfig) {
	if p == nil {
		return
	}
	if !p.IsSetLlmConfig() {
		return Prompt_LlmConfig_DEFAULT
	}
	return p.LlmConfig
}
func (p *Prompt) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *Prompt) SetPromptKey(val *string) {
	p.PromptKey = val
}
func (p *Prompt) SetVersion(val *string) {
	p.Version = val
}
func (p *Prompt) SetPromptTemplate(val *PromptTemplate) {
	p.PromptTemplate = val
}
func (p *Prompt) SetTools(val []*Tool) {
	p.Tools = val
}
func (p *Prompt) SetToolCallConfig(val *ToolCallConfig) {
	p.ToolCallConfig = val
}
func (p *Prompt) SetLlmConfig(val *LLMConfig) {
	p.LlmConfig = val
}

var fieldIDToName_Prompt = map[int16]string{
	1: "workspace_id",
	2: "prompt_key",
	3: "version",
	4: "prompt_template",
	5: "tools",
	6: "tool_call_config",
	7: "llm_config",
}

func (p *Prompt) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *Prompt) IsSetPromptKey() bool {
	return p.PromptKey != nil
}

func (p *Prompt) IsSetVersion() bool {
	return p.Version != nil
}

func (p *Prompt) IsSetPromptTemplate() bool {
	return p.PromptTemplate != nil
}

func (p *Prompt) IsSetTools() bool {
	return p.Tools != nil
}

func (p *Prompt) IsSetToolCallConfig() bool {
	return p.ToolCallConfig != nil
}

func (p *Prompt) IsSetLlmConfig() bool {
	return p.LlmConfig != nil
}

func (p *Prompt) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Prompt[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Prompt) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *Prompt) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PromptKey = _field
	return nil
}
func (p *Prompt) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Version = _field
	return nil
}
func (p *Prompt) ReadField4(iprot thrift.TProtocol) error {
	_field := NewPromptTemplate()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.PromptTemplate = _field
	return nil
}
func (p *Prompt) ReadField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*Tool, 0, size)
	values := make([]Tool, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Tools = _field
	return nil
}
func (p *Prompt) ReadField6(iprot thrift.TProtocol) error {
	_field := NewToolCallConfig()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ToolCallConfig = _field
	return nil
}
func (p *Prompt) ReadField7(iprot thrift.TProtocol) error {
	_field := NewLLMConfig()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.LlmConfig = _field
	return nil
}

func (p *Prompt) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Prompt"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Prompt) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *Prompt) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPromptKey() {
		if err = oprot.WriteFieldBegin("prompt_key", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PromptKey); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *Prompt) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetVersion() {
		if err = oprot.WriteFieldBegin("version", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Version); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *Prompt) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPromptTemplate() {
		if err = oprot.WriteFieldBegin("prompt_template", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.PromptTemplate.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *Prompt) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTools() {
		if err = oprot.WriteFieldBegin("tools", thrift.LIST, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Tools)); err != nil {
			return err
		}
		for _, v := range p.Tools {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *Prompt) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetToolCallConfig() {
		if err = oprot.WriteFieldBegin("tool_call_config", thrift.STRUCT, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ToolCallConfig.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *Prompt) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetLlmConfig() {
		if err = oprot.WriteFieldBegin("llm_config", thrift.STRUCT, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.LlmConfig.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *Prompt) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Prompt(%+v)", *p)

}

func (p *Prompt) DeepEqual(ano *Prompt) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.PromptKey) {
		return false
	}
	if !p.Field3DeepEqual(ano.Version) {
		return false
	}
	if !p.Field4DeepEqual(ano.PromptTemplate) {
		return false
	}
	if !p.Field5DeepEqual(ano.Tools) {
		return false
	}
	if !p.Field6DeepEqual(ano.ToolCallConfig) {
		return false
	}
	if !p.Field7DeepEqual(ano.LlmConfig) {
		return false
	}
	return true
}

func (p *Prompt) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *Prompt) Field2DeepEqual(src *string) bool {

	if p.PromptKey == src {
		return true
	} else if p.PromptKey == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PromptKey, *src) != 0 {
		return false
	}
	return true
}
func (p *Prompt) Field3DeepEqual(src *string) bool {

	if p.Version == src {
		return true
	} else if p.Version == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Version, *src) != 0 {
		return false
	}
	return true
}
func (p *Prompt) Field4DeepEqual(src *PromptTemplate) bool {

	if !p.PromptTemplate.DeepEqual(src) {
		return false
	}
	return true
}
func (p *Prompt) Field5DeepEqual(src []*Tool) bool {

	if len(p.Tools) != len(src) {
		return false
	}
	for i, v := range p.Tools {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *Prompt) Field6DeepEqual(src *ToolCallConfig) bool {

	if !p.ToolCallConfig.DeepEqual(src) {
		return false
	}
	return true
}
func (p *Prompt) Field7DeepEqual(src *LLMConfig) bool {

	if !p.LlmConfig.DeepEqual(src) {
		return false
	}
	return true
}

type PromptTemplate struct {
	// 模板类型
	TemplateType *TemplateType `thrift:"template_type,1,optional" frugal:"1,optional,string" form:"template_type" json:"template_type,omitempty" query:"template_type"`
	// 只支持message list形式托管
	Messages []*Message `thrift:"messages,2,optional" frugal:"2,optional,list<Message>" form:"messages" json:"messages,omitempty" query:"messages"`
	// 变量定义
	VariableDefs []*VariableDef `thrift:"variable_defs,3,optional" frugal:"3,optional,list<VariableDef>" form:"variable_defs" json:"variable_defs,omitempty" query:"variable_defs"`
}

func NewPromptTemplate() *PromptTemplate {
	return &PromptTemplate{}
}

func (p *PromptTemplate) InitDefault() {
}

var PromptTemplate_TemplateType_DEFAULT TemplateType

func (p *PromptTemplate) GetTemplateType() (v TemplateType) {
	if p == nil {
		return
	}
	if !p.IsSetTemplateType() {
		return PromptTemplate_TemplateType_DEFAULT
	}
	return *p.TemplateType
}

var PromptTemplate_Messages_DEFAULT []*Message

func (p *PromptTemplate) GetMessages() (v []*Message) {
	if p == nil {
		return
	}
	if !p.IsSetMessages() {
		return PromptTemplate_Messages_DEFAULT
	}
	return p.Messages
}

var PromptTemplate_VariableDefs_DEFAULT []*VariableDef

func (p *PromptTemplate) GetVariableDefs() (v []*VariableDef) {
	if p == nil {
		return
	}
	if !p.IsSetVariableDefs() {
		return PromptTemplate_VariableDefs_DEFAULT
	}
	return p.VariableDefs
}
func (p *PromptTemplate) SetTemplateType(val *TemplateType) {
	p.TemplateType = val
}
func (p *PromptTemplate) SetMessages(val []*Message) {
	p.Messages = val
}
func (p *PromptTemplate) SetVariableDefs(val []*VariableDef) {
	p.VariableDefs = val
}

var fieldIDToName_PromptTemplate = map[int16]string{
	1: "template_type",
	2: "messages",
	3: "variable_defs",
}

func (p *PromptTemplate) IsSetTemplateType() bool {
	return p.TemplateType != nil
}

func (p *PromptTemplate) IsSetMessages() bool {
	return p.Messages != nil
}

func (p *PromptTemplate) IsSetVariableDefs() bool {
	return p.VariableDefs != nil
}

func (p *PromptTemplate) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PromptTemplate[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PromptTemplate) ReadField1(iprot thrift.TProtocol) error {

	var _field *TemplateType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TemplateType = _field
	return nil
}
func (p *PromptTemplate) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*Message, 0, size)
	values := make([]Message, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Messages = _field
	return nil
}
func (p *PromptTemplate) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*VariableDef, 0, size)
	values := make([]VariableDef, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.VariableDefs = _field
	return nil
}

func (p *PromptTemplate) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PromptTemplate"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PromptTemplate) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTemplateType() {
		if err = oprot.WriteFieldBegin("template_type", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TemplateType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *PromptTemplate) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMessages() {
		if err = oprot.WriteFieldBegin("messages", thrift.LIST, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Messages)); err != nil {
			return err
		}
		for _, v := range p.Messages {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *PromptTemplate) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetVariableDefs() {
		if err = oprot.WriteFieldBegin("variable_defs", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.VariableDefs)); err != nil {
			return err
		}
		for _, v := range p.VariableDefs {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *PromptTemplate) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PromptTemplate(%+v)", *p)

}

func (p *PromptTemplate) DeepEqual(ano *PromptTemplate) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TemplateType) {
		return false
	}
	if !p.Field2DeepEqual(ano.Messages) {
		return false
	}
	if !p.Field3DeepEqual(ano.VariableDefs) {
		return false
	}
	return true
}

func (p *PromptTemplate) Field1DeepEqual(src *TemplateType) bool {

	if p.TemplateType == src {
		return true
	} else if p.TemplateType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TemplateType, *src) != 0 {
		return false
	}
	return true
}
func (p *PromptTemplate) Field2DeepEqual(src []*Message) bool {

	if len(p.Messages) != len(src) {
		return false
	}
	for i, v := range p.Messages {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *PromptTemplate) Field3DeepEqual(src []*VariableDef) bool {

	if len(p.VariableDefs) != len(src) {
		return false
	}
	for i, v := range p.VariableDefs {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type ToolCallConfig struct {
	ToolChoice *ToolChoiceType `thrift:"tool_choice,1,optional" frugal:"1,optional,string" form:"tool_choice" json:"tool_choice,omitempty" query:"tool_choice"`
}

func NewToolCallConfig() *ToolCallConfig {
	return &ToolCallConfig{}
}

func (p *ToolCallConfig) InitDefault() {
}

var ToolCallConfig_ToolChoice_DEFAULT ToolChoiceType

func (p *ToolCallConfig) GetToolChoice() (v ToolChoiceType) {
	if p == nil {
		return
	}
	if !p.IsSetToolChoice() {
		return ToolCallConfig_ToolChoice_DEFAULT
	}
	return *p.ToolChoice
}
func (p *ToolCallConfig) SetToolChoice(val *ToolChoiceType) {
	p.ToolChoice = val
}

var fieldIDToName_ToolCallConfig = map[int16]string{
	1: "tool_choice",
}

func (p *ToolCallConfig) IsSetToolChoice() bool {
	return p.ToolChoice != nil
}

func (p *ToolCallConfig) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ToolCallConfig[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ToolCallConfig) ReadField1(iprot thrift.TProtocol) error {

	var _field *ToolChoiceType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ToolChoice = _field
	return nil
}

func (p *ToolCallConfig) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ToolCallConfig"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ToolCallConfig) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetToolChoice() {
		if err = oprot.WriteFieldBegin("tool_choice", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ToolChoice); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ToolCallConfig) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ToolCallConfig(%+v)", *p)

}

func (p *ToolCallConfig) DeepEqual(ano *ToolCallConfig) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ToolChoice) {
		return false
	}
	return true
}

func (p *ToolCallConfig) Field1DeepEqual(src *ToolChoiceType) bool {

	if p.ToolChoice == src {
		return true
	} else if p.ToolChoice == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ToolChoice, *src) != 0 {
		return false
	}
	return true
}

type Message struct {
	Role    *Role   `thrift:"role,1,optional" frugal:"1,optional,string" form:"role" json:"role,omitempty" query:"role"`
	Content *string `thrift:"content,2,optional" frugal:"2,optional,string" form:"content" json:"content,omitempty" query:"content"`
}

func NewMessage() *Message {
	return &Message{}
}

func (p *Message) InitDefault() {
}

var Message_Role_DEFAULT Role

func (p *Message) GetRole() (v Role) {
	if p == nil {
		return
	}
	if !p.IsSetRole() {
		return Message_Role_DEFAULT
	}
	return *p.Role
}

var Message_Content_DEFAULT string

func (p *Message) GetContent() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetContent() {
		return Message_Content_DEFAULT
	}
	return *p.Content
}
func (p *Message) SetRole(val *Role) {
	p.Role = val
}
func (p *Message) SetContent(val *string) {
	p.Content = val
}

var fieldIDToName_Message = map[int16]string{
	1: "role",
	2: "content",
}

func (p *Message) IsSetRole() bool {
	return p.Role != nil
}

func (p *Message) IsSetContent() bool {
	return p.Content != nil
}

func (p *Message) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Message[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Message) ReadField1(iprot thrift.TProtocol) error {

	var _field *Role
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Role = _field
	return nil
}
func (p *Message) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Content = _field
	return nil
}

func (p *Message) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Message"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Message) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetRole() {
		if err = oprot.WriteFieldBegin("role", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Role); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *Message) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetContent() {
		if err = oprot.WriteFieldBegin("content", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Content); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Message) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Message(%+v)", *p)

}

func (p *Message) DeepEqual(ano *Message) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Role) {
		return false
	}
	if !p.Field2DeepEqual(ano.Content) {
		return false
	}
	return true
}

func (p *Message) Field1DeepEqual(src *Role) bool {

	if p.Role == src {
		return true
	} else if p.Role == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Role, *src) != 0 {
		return false
	}
	return true
}
func (p *Message) Field2DeepEqual(src *string) bool {

	if p.Content == src {
		return true
	} else if p.Content == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Content, *src) != 0 {
		return false
	}
	return true
}

type VariableDef struct {
	// 变量名字
	Key *string `thrift:"key,1,optional" frugal:"1,optional,string" form:"key" json:"key,omitempty" query:"key"`
	// 变量描述
	Desc *string `thrift:"desc,2,optional" frugal:"2,optional,string" form:"desc" json:"desc,omitempty" query:"desc"`
	// 变量类型
	Type *VariableType `thrift:"type,3,optional" frugal:"3,optional,string" form:"type" json:"type,omitempty" query:"type"`
}

func NewVariableDef() *VariableDef {
	return &VariableDef{}
}

func (p *VariableDef) InitDefault() {
}

var VariableDef_Key_DEFAULT string

func (p *VariableDef) GetKey() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetKey() {
		return VariableDef_Key_DEFAULT
	}
	return *p.Key
}

var VariableDef_Desc_DEFAULT string

func (p *VariableDef) GetDesc() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDesc() {
		return VariableDef_Desc_DEFAULT
	}
	return *p.Desc
}

var VariableDef_Type_DEFAULT VariableType

func (p *VariableDef) GetType() (v VariableType) {
	if p == nil {
		return
	}
	if !p.IsSetType() {
		return VariableDef_Type_DEFAULT
	}
	return *p.Type
}
func (p *VariableDef) SetKey(val *string) {
	p.Key = val
}
func (p *VariableDef) SetDesc(val *string) {
	p.Desc = val
}
func (p *VariableDef) SetType(val *VariableType) {
	p.Type = val
}

var fieldIDToName_VariableDef = map[int16]string{
	1: "key",
	2: "desc",
	3: "type",
}

func (p *VariableDef) IsSetKey() bool {
	return p.Key != nil
}

func (p *VariableDef) IsSetDesc() bool {
	return p.Desc != nil
}

func (p *VariableDef) IsSetType() bool {
	return p.Type != nil
}

func (p *VariableDef) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_VariableDef[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *VariableDef) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Key = _field
	return nil
}
func (p *VariableDef) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Desc = _field
	return nil
}
func (p *VariableDef) ReadField3(iprot thrift.TProtocol) error {

	var _field *VariableType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Type = _field
	return nil
}

func (p *VariableDef) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VariableDef"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *VariableDef) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetKey() {
		if err = oprot.WriteFieldBegin("key", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Key); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *VariableDef) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDesc() {
		if err = oprot.WriteFieldBegin("desc", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Desc); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *VariableDef) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("type", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Type); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *VariableDef) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("VariableDef(%+v)", *p)

}

func (p *VariableDef) DeepEqual(ano *VariableDef) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Key) {
		return false
	}
	if !p.Field2DeepEqual(ano.Desc) {
		return false
	}
	if !p.Field3DeepEqual(ano.Type) {
		return false
	}
	return true
}

func (p *VariableDef) Field1DeepEqual(src *string) bool {

	if p.Key == src {
		return true
	} else if p.Key == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Key, *src) != 0 {
		return false
	}
	return true
}
func (p *VariableDef) Field2DeepEqual(src *string) bool {

	if p.Desc == src {
		return true
	} else if p.Desc == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Desc, *src) != 0 {
		return false
	}
	return true
}
func (p *VariableDef) Field3DeepEqual(src *VariableType) bool {

	if p.Type == src {
		return true
	} else if p.Type == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Type, *src) != 0 {
		return false
	}
	return true
}

type Tool struct {
	Type     *ToolType `thrift:"type,1,optional" frugal:"1,optional,string" form:"type" json:"type,omitempty" query:"type"`
	Function *Function `thrift:"function,2,optional" frugal:"2,optional,Function" form:"function" json:"function,omitempty" query:"function"`
}

func NewTool() *Tool {
	return &Tool{}
}

func (p *Tool) InitDefault() {
}

var Tool_Type_DEFAULT ToolType

func (p *Tool) GetType() (v ToolType) {
	if p == nil {
		return
	}
	if !p.IsSetType() {
		return Tool_Type_DEFAULT
	}
	return *p.Type
}

var Tool_Function_DEFAULT *Function

func (p *Tool) GetFunction() (v *Function) {
	if p == nil {
		return
	}
	if !p.IsSetFunction() {
		return Tool_Function_DEFAULT
	}
	return p.Function
}
func (p *Tool) SetType(val *ToolType) {
	p.Type = val
}
func (p *Tool) SetFunction(val *Function) {
	p.Function = val
}

var fieldIDToName_Tool = map[int16]string{
	1: "type",
	2: "function",
}

func (p *Tool) IsSetType() bool {
	return p.Type != nil
}

func (p *Tool) IsSetFunction() bool {
	return p.Function != nil
}

func (p *Tool) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Tool[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Tool) ReadField1(iprot thrift.TProtocol) error {

	var _field *ToolType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Type = _field
	return nil
}
func (p *Tool) ReadField2(iprot thrift.TProtocol) error {
	_field := NewFunction()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Function = _field
	return nil
}

func (p *Tool) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Tool"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Tool) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("type", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Type); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *Tool) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetFunction() {
		if err = oprot.WriteFieldBegin("function", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Function.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Tool) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Tool(%+v)", *p)

}

func (p *Tool) DeepEqual(ano *Tool) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Type) {
		return false
	}
	if !p.Field2DeepEqual(ano.Function) {
		return false
	}
	return true
}

func (p *Tool) Field1DeepEqual(src *ToolType) bool {

	if p.Type == src {
		return true
	} else if p.Type == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Type, *src) != 0 {
		return false
	}
	return true
}
func (p *Tool) Field2DeepEqual(src *Function) bool {

	if !p.Function.DeepEqual(src) {
		return false
	}
	return true
}

type Function struct {
	Name        *string `thrift:"name,1,optional" frugal:"1,optional,string" form:"name" json:"name,omitempty" query:"name"`
	Description *string `thrift:"description,2,optional" frugal:"2,optional,string" form:"description" json:"description,omitempty" query:"description"`
	Parameters  *string `thrift:"parameters,3,optional" frugal:"3,optional,string" form:"parameters" json:"parameters,omitempty" query:"parameters"`
}

func NewFunction() *Function {
	return &Function{}
}

func (p *Function) InitDefault() {
}

var Function_Name_DEFAULT string

func (p *Function) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return Function_Name_DEFAULT
	}
	return *p.Name
}

var Function_Description_DEFAULT string

func (p *Function) GetDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDescription() {
		return Function_Description_DEFAULT
	}
	return *p.Description
}

var Function_Parameters_DEFAULT string

func (p *Function) GetParameters() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetParameters() {
		return Function_Parameters_DEFAULT
	}
	return *p.Parameters
}
func (p *Function) SetName(val *string) {
	p.Name = val
}
func (p *Function) SetDescription(val *string) {
	p.Description = val
}
func (p *Function) SetParameters(val *string) {
	p.Parameters = val
}

var fieldIDToName_Function = map[int16]string{
	1: "name",
	2: "description",
	3: "parameters",
}

func (p *Function) IsSetName() bool {
	return p.Name != nil
}

func (p *Function) IsSetDescription() bool {
	return p.Description != nil
}

func (p *Function) IsSetParameters() bool {
	return p.Parameters != nil
}

func (p *Function) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Function[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Function) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *Function) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Description = _field
	return nil
}
func (p *Function) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Parameters = _field
	return nil
}

func (p *Function) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Function"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Function) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *Function) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescription() {
		if err = oprot.WriteFieldBegin("description", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Description); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *Function) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetParameters() {
		if err = oprot.WriteFieldBegin("parameters", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Parameters); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Function) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Function(%+v)", *p)

}

func (p *Function) DeepEqual(ano *Function) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.Description) {
		return false
	}
	if !p.Field3DeepEqual(ano.Parameters) {
		return false
	}
	return true
}

func (p *Function) Field1DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *Function) Field2DeepEqual(src *string) bool {

	if p.Description == src {
		return true
	} else if p.Description == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Description, *src) != 0 {
		return false
	}
	return true
}
func (p *Function) Field3DeepEqual(src *string) bool {

	if p.Parameters == src {
		return true
	} else if p.Parameters == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Parameters, *src) != 0 {
		return false
	}
	return true
}

type LLMConfig struct {
	Temperature      *float64 `thrift:"temperature,1,optional" frugal:"1,optional,double" form:"temperature" json:"temperature,omitempty" query:"temperature"`
	MaxTokens        *int32   `thrift:"max_tokens,2,optional" frugal:"2,optional,i32" form:"max_tokens" json:"max_tokens,omitempty" query:"max_tokens"`
	TopK             *int32   `thrift:"top_k,3,optional" frugal:"3,optional,i32" form:"top_k" json:"top_k,omitempty" query:"top_k"`
	TopP             *float64 `thrift:"top_p,4,optional" frugal:"4,optional,double" form:"top_p" json:"top_p,omitempty" query:"top_p"`
	PresencePenalty  *float64 `thrift:"presence_penalty,5,optional" frugal:"5,optional,double" form:"presence_penalty" json:"presence_penalty,omitempty" query:"presence_penalty"`
	FrequencyPenalty *float64 `thrift:"frequency_penalty,6,optional" frugal:"6,optional,double" form:"frequency_penalty" json:"frequency_penalty,omitempty" query:"frequency_penalty"`
	JSONMode         *bool    `thrift:"json_mode,7,optional" frugal:"7,optional,bool" form:"json_mode" json:"json_mode,omitempty" query:"json_mode"`
}

func NewLLMConfig() *LLMConfig {
	return &LLMConfig{}
}

func (p *LLMConfig) InitDefault() {
}

var LLMConfig_Temperature_DEFAULT float64

func (p *LLMConfig) GetTemperature() (v float64) {
	if p == nil {
		return
	}
	if !p.IsSetTemperature() {
		return LLMConfig_Temperature_DEFAULT
	}
	return *p.Temperature
}

var LLMConfig_MaxTokens_DEFAULT int32

func (p *LLMConfig) GetMaxTokens() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetMaxTokens() {
		return LLMConfig_MaxTokens_DEFAULT
	}
	return *p.MaxTokens
}

var LLMConfig_TopK_DEFAULT int32

func (p *LLMConfig) GetTopK() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetTopK() {
		return LLMConfig_TopK_DEFAULT
	}
	return *p.TopK
}

var LLMConfig_TopP_DEFAULT float64

func (p *LLMConfig) GetTopP() (v float64) {
	if p == nil {
		return
	}
	if !p.IsSetTopP() {
		return LLMConfig_TopP_DEFAULT
	}
	return *p.TopP
}

var LLMConfig_PresencePenalty_DEFAULT float64

func (p *LLMConfig) GetPresencePenalty() (v float64) {
	if p == nil {
		return
	}
	if !p.IsSetPresencePenalty() {
		return LLMConfig_PresencePenalty_DEFAULT
	}
	return *p.PresencePenalty
}

var LLMConfig_FrequencyPenalty_DEFAULT float64

func (p *LLMConfig) GetFrequencyPenalty() (v float64) {
	if p == nil {
		return
	}
	if !p.IsSetFrequencyPenalty() {
		return LLMConfig_FrequencyPenalty_DEFAULT
	}
	return *p.FrequencyPenalty
}

var LLMConfig_JSONMode_DEFAULT bool

func (p *LLMConfig) GetJSONMode() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetJSONMode() {
		return LLMConfig_JSONMode_DEFAULT
	}
	return *p.JSONMode
}
func (p *LLMConfig) SetTemperature(val *float64) {
	p.Temperature = val
}
func (p *LLMConfig) SetMaxTokens(val *int32) {
	p.MaxTokens = val
}
func (p *LLMConfig) SetTopK(val *int32) {
	p.TopK = val
}
func (p *LLMConfig) SetTopP(val *float64) {
	p.TopP = val
}
func (p *LLMConfig) SetPresencePenalty(val *float64) {
	p.PresencePenalty = val
}
func (p *LLMConfig) SetFrequencyPenalty(val *float64) {
	p.FrequencyPenalty = val
}
func (p *LLMConfig) SetJSONMode(val *bool) {
	p.JSONMode = val
}

var fieldIDToName_LLMConfig = map[int16]string{
	1: "temperature",
	2: "max_tokens",
	3: "top_k",
	4: "top_p",
	5: "presence_penalty",
	6: "frequency_penalty",
	7: "json_mode",
}

func (p *LLMConfig) IsSetTemperature() bool {
	return p.Temperature != nil
}

func (p *LLMConfig) IsSetMaxTokens() bool {
	return p.MaxTokens != nil
}

func (p *LLMConfig) IsSetTopK() bool {
	return p.TopK != nil
}

func (p *LLMConfig) IsSetTopP() bool {
	return p.TopP != nil
}

func (p *LLMConfig) IsSetPresencePenalty() bool {
	return p.PresencePenalty != nil
}

func (p *LLMConfig) IsSetFrequencyPenalty() bool {
	return p.FrequencyPenalty != nil
}

func (p *LLMConfig) IsSetJSONMode() bool {
	return p.JSONMode != nil
}

func (p *LLMConfig) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_LLMConfig[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *LLMConfig) ReadField1(iprot thrift.TProtocol) error {

	var _field *float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Temperature = _field
	return nil
}
func (p *LLMConfig) ReadField2(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.MaxTokens = _field
	return nil
}
func (p *LLMConfig) ReadField3(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TopK = _field
	return nil
}
func (p *LLMConfig) ReadField4(iprot thrift.TProtocol) error {

	var _field *float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TopP = _field
	return nil
}
func (p *LLMConfig) ReadField5(iprot thrift.TProtocol) error {

	var _field *float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PresencePenalty = _field
	return nil
}
func (p *LLMConfig) ReadField6(iprot thrift.TProtocol) error {

	var _field *float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.FrequencyPenalty = _field
	return nil
}
func (p *LLMConfig) ReadField7(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.JSONMode = _field
	return nil
}

func (p *LLMConfig) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("LLMConfig"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *LLMConfig) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetTemperature() {
		if err = oprot.WriteFieldBegin("temperature", thrift.DOUBLE, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.Temperature); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *LLMConfig) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxTokens() {
		if err = oprot.WriteFieldBegin("max_tokens", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.MaxTokens); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *LLMConfig) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTopK() {
		if err = oprot.WriteFieldBegin("top_k", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.TopK); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *LLMConfig) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTopP() {
		if err = oprot.WriteFieldBegin("top_p", thrift.DOUBLE, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.TopP); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *LLMConfig) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetPresencePenalty() {
		if err = oprot.WriteFieldBegin("presence_penalty", thrift.DOUBLE, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.PresencePenalty); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *LLMConfig) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetFrequencyPenalty() {
		if err = oprot.WriteFieldBegin("frequency_penalty", thrift.DOUBLE, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.FrequencyPenalty); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *LLMConfig) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetJSONMode() {
		if err = oprot.WriteFieldBegin("json_mode", thrift.BOOL, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.JSONMode); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *LLMConfig) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LLMConfig(%+v)", *p)

}

func (p *LLMConfig) DeepEqual(ano *LLMConfig) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Temperature) {
		return false
	}
	if !p.Field2DeepEqual(ano.MaxTokens) {
		return false
	}
	if !p.Field3DeepEqual(ano.TopK) {
		return false
	}
	if !p.Field4DeepEqual(ano.TopP) {
		return false
	}
	if !p.Field5DeepEqual(ano.PresencePenalty) {
		return false
	}
	if !p.Field6DeepEqual(ano.FrequencyPenalty) {
		return false
	}
	if !p.Field7DeepEqual(ano.JSONMode) {
		return false
	}
	return true
}

func (p *LLMConfig) Field1DeepEqual(src *float64) bool {

	if p.Temperature == src {
		return true
	} else if p.Temperature == nil || src == nil {
		return false
	}
	if *p.Temperature != *src {
		return false
	}
	return true
}
func (p *LLMConfig) Field2DeepEqual(src *int32) bool {

	if p.MaxTokens == src {
		return true
	} else if p.MaxTokens == nil || src == nil {
		return false
	}
	if *p.MaxTokens != *src {
		return false
	}
	return true
}
func (p *LLMConfig) Field3DeepEqual(src *int32) bool {

	if p.TopK == src {
		return true
	} else if p.TopK == nil || src == nil {
		return false
	}
	if *p.TopK != *src {
		return false
	}
	return true
}
func (p *LLMConfig) Field4DeepEqual(src *float64) bool {

	if p.TopP == src {
		return true
	} else if p.TopP == nil || src == nil {
		return false
	}
	if *p.TopP != *src {
		return false
	}
	return true
}
func (p *LLMConfig) Field5DeepEqual(src *float64) bool {

	if p.PresencePenalty == src {
		return true
	} else if p.PresencePenalty == nil || src == nil {
		return false
	}
	if *p.PresencePenalty != *src {
		return false
	}
	return true
}
func (p *LLMConfig) Field6DeepEqual(src *float64) bool {

	if p.FrequencyPenalty == src {
		return true
	} else if p.FrequencyPenalty == nil || src == nil {
		return false
	}
	if *p.FrequencyPenalty != *src {
		return false
	}
	return true
}
func (p *LLMConfig) Field7DeepEqual(src *bool) bool {

	if p.JSONMode == src {
		return true
	} else if p.JSONMode == nil || src == nil {
		return false
	}
	if *p.JSONMode != *src {
		return false
	}
	return true
}

type PromptOpenAPIService interface {
	BatchGetPromptByPromptKey(ctx context.Context, req *BatchGetPromptByPromptKeyRequest) (r *BatchGetPromptByPromptKeyResponse, err error)
}

type PromptOpenAPIServiceClient struct {
	c thrift.TClient
}

func NewPromptOpenAPIServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *PromptOpenAPIServiceClient {
	return &PromptOpenAPIServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewPromptOpenAPIServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *PromptOpenAPIServiceClient {
	return &PromptOpenAPIServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewPromptOpenAPIServiceClient(c thrift.TClient) *PromptOpenAPIServiceClient {
	return &PromptOpenAPIServiceClient{
		c: c,
	}
}

func (p *PromptOpenAPIServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *PromptOpenAPIServiceClient) BatchGetPromptByPromptKey(ctx context.Context, req *BatchGetPromptByPromptKeyRequest) (r *BatchGetPromptByPromptKeyResponse, err error) {
	var _args PromptOpenAPIServiceBatchGetPromptByPromptKeyArgs
	_args.Req = req
	var _result PromptOpenAPIServiceBatchGetPromptByPromptKeyResult
	if err = p.Client_().Call(ctx, "BatchGetPromptByPromptKey", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type PromptOpenAPIServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      PromptOpenAPIService
}

func (p *PromptOpenAPIServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *PromptOpenAPIServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *PromptOpenAPIServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewPromptOpenAPIServiceProcessor(handler PromptOpenAPIService) *PromptOpenAPIServiceProcessor {
	self := &PromptOpenAPIServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("BatchGetPromptByPromptKey", &promptOpenAPIServiceProcessorBatchGetPromptByPromptKey{handler: handler})
	return self
}
func (p *PromptOpenAPIServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type promptOpenAPIServiceProcessorBatchGetPromptByPromptKey struct {
	handler PromptOpenAPIService
}

func (p *promptOpenAPIServiceProcessorBatchGetPromptByPromptKey) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PromptOpenAPIServiceBatchGetPromptByPromptKeyArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BatchGetPromptByPromptKey", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PromptOpenAPIServiceBatchGetPromptByPromptKeyResult{}
	var retval *BatchGetPromptByPromptKeyResponse
	if retval, err2 = p.handler.BatchGetPromptByPromptKey(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BatchGetPromptByPromptKey: "+err2.Error())
		oprot.WriteMessageBegin("BatchGetPromptByPromptKey", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BatchGetPromptByPromptKey", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type PromptOpenAPIServiceBatchGetPromptByPromptKeyArgs struct {
	Req *BatchGetPromptByPromptKeyRequest `thrift:"req,1" frugal:"1,default,BatchGetPromptByPromptKeyRequest"`
}

func NewPromptOpenAPIServiceBatchGetPromptByPromptKeyArgs() *PromptOpenAPIServiceBatchGetPromptByPromptKeyArgs {
	return &PromptOpenAPIServiceBatchGetPromptByPromptKeyArgs{}
}

func (p *PromptOpenAPIServiceBatchGetPromptByPromptKeyArgs) InitDefault() {
}

var PromptOpenAPIServiceBatchGetPromptByPromptKeyArgs_Req_DEFAULT *BatchGetPromptByPromptKeyRequest

func (p *PromptOpenAPIServiceBatchGetPromptByPromptKeyArgs) GetReq() (v *BatchGetPromptByPromptKeyRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return PromptOpenAPIServiceBatchGetPromptByPromptKeyArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *PromptOpenAPIServiceBatchGetPromptByPromptKeyArgs) SetReq(val *BatchGetPromptByPromptKeyRequest) {
	p.Req = val
}

var fieldIDToName_PromptOpenAPIServiceBatchGetPromptByPromptKeyArgs = map[int16]string{
	1: "req",
}

func (p *PromptOpenAPIServiceBatchGetPromptByPromptKeyArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *PromptOpenAPIServiceBatchGetPromptByPromptKeyArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PromptOpenAPIServiceBatchGetPromptByPromptKeyArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PromptOpenAPIServiceBatchGetPromptByPromptKeyArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewBatchGetPromptByPromptKeyRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *PromptOpenAPIServiceBatchGetPromptByPromptKeyArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetPromptByPromptKey_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PromptOpenAPIServiceBatchGetPromptByPromptKeyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PromptOpenAPIServiceBatchGetPromptByPromptKeyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PromptOpenAPIServiceBatchGetPromptByPromptKeyArgs(%+v)", *p)

}

func (p *PromptOpenAPIServiceBatchGetPromptByPromptKeyArgs) DeepEqual(ano *PromptOpenAPIServiceBatchGetPromptByPromptKeyArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *PromptOpenAPIServiceBatchGetPromptByPromptKeyArgs) Field1DeepEqual(src *BatchGetPromptByPromptKeyRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type PromptOpenAPIServiceBatchGetPromptByPromptKeyResult struct {
	Success *BatchGetPromptByPromptKeyResponse `thrift:"success,0,optional" frugal:"0,optional,BatchGetPromptByPromptKeyResponse"`
}

func NewPromptOpenAPIServiceBatchGetPromptByPromptKeyResult() *PromptOpenAPIServiceBatchGetPromptByPromptKeyResult {
	return &PromptOpenAPIServiceBatchGetPromptByPromptKeyResult{}
}

func (p *PromptOpenAPIServiceBatchGetPromptByPromptKeyResult) InitDefault() {
}

var PromptOpenAPIServiceBatchGetPromptByPromptKeyResult_Success_DEFAULT *BatchGetPromptByPromptKeyResponse

func (p *PromptOpenAPIServiceBatchGetPromptByPromptKeyResult) GetSuccess() (v *BatchGetPromptByPromptKeyResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return PromptOpenAPIServiceBatchGetPromptByPromptKeyResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PromptOpenAPIServiceBatchGetPromptByPromptKeyResult) SetSuccess(x interface{}) {
	p.Success = x.(*BatchGetPromptByPromptKeyResponse)
}

var fieldIDToName_PromptOpenAPIServiceBatchGetPromptByPromptKeyResult = map[int16]string{
	0: "success",
}

func (p *PromptOpenAPIServiceBatchGetPromptByPromptKeyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PromptOpenAPIServiceBatchGetPromptByPromptKeyResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PromptOpenAPIServiceBatchGetPromptByPromptKeyResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PromptOpenAPIServiceBatchGetPromptByPromptKeyResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewBatchGetPromptByPromptKeyResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *PromptOpenAPIServiceBatchGetPromptByPromptKeyResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetPromptByPromptKey_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PromptOpenAPIServiceBatchGetPromptByPromptKeyResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PromptOpenAPIServiceBatchGetPromptByPromptKeyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PromptOpenAPIServiceBatchGetPromptByPromptKeyResult(%+v)", *p)

}

func (p *PromptOpenAPIServiceBatchGetPromptByPromptKeyResult) DeepEqual(ano *PromptOpenAPIServiceBatchGetPromptByPromptKeyResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PromptOpenAPIServiceBatchGetPromptByPromptKeyResult) Field0DeepEqual(src *BatchGetPromptByPromptKeyResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
