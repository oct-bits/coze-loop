// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package manage

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/base"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/prompt/domain/prompt"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/prompt/domain/user"
	"strings"
)

const (
	ListPromptOrderByCommitedAt = "committed_at"

	ListPromptOrderByCreatedAt = "created_at"
)

type ListPromptOrderBy = string

// --------------- Prompt管理 --------------- //
type CreatePromptRequest struct {
	WorkspaceID       *int64               `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" form:"workspace_id" query:"workspace_id"`
	PromptName        *string              `thrift:"prompt_name,11,optional" frugal:"11,optional,string" form:"prompt_name" json:"prompt_name,omitempty" query:"prompt_name"`
	PromptKey         *string              `thrift:"prompt_key,12,optional" frugal:"12,optional,string" form:"prompt_key" json:"prompt_key,omitempty" query:"prompt_key"`
	PromptDescription *string              `thrift:"prompt_description,13,optional" frugal:"13,optional,string" form:"prompt_description" json:"prompt_description,omitempty" query:"prompt_description"`
	DraftDetail       *prompt.PromptDetail `thrift:"draft_detail,21,optional" frugal:"21,optional,prompt.PromptDetail" form:"draft_detail" json:"draft_detail,omitempty" query:"draft_detail"`
	Base              *base.Base           `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewCreatePromptRequest() *CreatePromptRequest {
	return &CreatePromptRequest{}
}

func (p *CreatePromptRequest) InitDefault() {
}

var CreatePromptRequest_WorkspaceID_DEFAULT int64

func (p *CreatePromptRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return CreatePromptRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var CreatePromptRequest_PromptName_DEFAULT string

func (p *CreatePromptRequest) GetPromptName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetPromptName() {
		return CreatePromptRequest_PromptName_DEFAULT
	}
	return *p.PromptName
}

var CreatePromptRequest_PromptKey_DEFAULT string

func (p *CreatePromptRequest) GetPromptKey() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetPromptKey() {
		return CreatePromptRequest_PromptKey_DEFAULT
	}
	return *p.PromptKey
}

var CreatePromptRequest_PromptDescription_DEFAULT string

func (p *CreatePromptRequest) GetPromptDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetPromptDescription() {
		return CreatePromptRequest_PromptDescription_DEFAULT
	}
	return *p.PromptDescription
}

var CreatePromptRequest_DraftDetail_DEFAULT *prompt.PromptDetail

func (p *CreatePromptRequest) GetDraftDetail() (v *prompt.PromptDetail) {
	if p == nil {
		return
	}
	if !p.IsSetDraftDetail() {
		return CreatePromptRequest_DraftDetail_DEFAULT
	}
	return p.DraftDetail
}

var CreatePromptRequest_Base_DEFAULT *base.Base

func (p *CreatePromptRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return CreatePromptRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *CreatePromptRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *CreatePromptRequest) SetPromptName(val *string) {
	p.PromptName = val
}
func (p *CreatePromptRequest) SetPromptKey(val *string) {
	p.PromptKey = val
}
func (p *CreatePromptRequest) SetPromptDescription(val *string) {
	p.PromptDescription = val
}
func (p *CreatePromptRequest) SetDraftDetail(val *prompt.PromptDetail) {
	p.DraftDetail = val
}
func (p *CreatePromptRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_CreatePromptRequest = map[int16]string{
	1:   "workspace_id",
	11:  "prompt_name",
	12:  "prompt_key",
	13:  "prompt_description",
	21:  "draft_detail",
	255: "Base",
}

func (p *CreatePromptRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *CreatePromptRequest) IsSetPromptName() bool {
	return p.PromptName != nil
}

func (p *CreatePromptRequest) IsSetPromptKey() bool {
	return p.PromptKey != nil
}

func (p *CreatePromptRequest) IsSetPromptDescription() bool {
	return p.PromptDescription != nil
}

func (p *CreatePromptRequest) IsSetDraftDetail() bool {
	return p.DraftDetail != nil
}

func (p *CreatePromptRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreatePromptRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreatePromptRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreatePromptRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *CreatePromptRequest) ReadField11(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PromptName = _field
	return nil
}
func (p *CreatePromptRequest) ReadField12(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PromptKey = _field
	return nil
}
func (p *CreatePromptRequest) ReadField13(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PromptDescription = _field
	return nil
}
func (p *CreatePromptRequest) ReadField21(iprot thrift.TProtocol) error {
	_field := prompt.NewPromptDetail()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.DraftDetail = _field
	return nil
}
func (p *CreatePromptRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *CreatePromptRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreatePromptRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreatePromptRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CreatePromptRequest) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetPromptName() {
		if err = oprot.WriteFieldBegin("prompt_name", thrift.STRING, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PromptName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}
func (p *CreatePromptRequest) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetPromptKey() {
		if err = oprot.WriteFieldBegin("prompt_key", thrift.STRING, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PromptKey); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}
func (p *CreatePromptRequest) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetPromptDescription() {
		if err = oprot.WriteFieldBegin("prompt_description", thrift.STRING, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PromptDescription); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}
func (p *CreatePromptRequest) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetDraftDetail() {
		if err = oprot.WriteFieldBegin("draft_detail", thrift.STRUCT, 21); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.DraftDetail.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}
func (p *CreatePromptRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreatePromptRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreatePromptRequest(%+v)", *p)

}

func (p *CreatePromptRequest) DeepEqual(ano *CreatePromptRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field11DeepEqual(ano.PromptName) {
		return false
	}
	if !p.Field12DeepEqual(ano.PromptKey) {
		return false
	}
	if !p.Field13DeepEqual(ano.PromptDescription) {
		return false
	}
	if !p.Field21DeepEqual(ano.DraftDetail) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *CreatePromptRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *CreatePromptRequest) Field11DeepEqual(src *string) bool {

	if p.PromptName == src {
		return true
	} else if p.PromptName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PromptName, *src) != 0 {
		return false
	}
	return true
}
func (p *CreatePromptRequest) Field12DeepEqual(src *string) bool {

	if p.PromptKey == src {
		return true
	} else if p.PromptKey == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PromptKey, *src) != 0 {
		return false
	}
	return true
}
func (p *CreatePromptRequest) Field13DeepEqual(src *string) bool {

	if p.PromptDescription == src {
		return true
	} else if p.PromptDescription == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PromptDescription, *src) != 0 {
		return false
	}
	return true
}
func (p *CreatePromptRequest) Field21DeepEqual(src *prompt.PromptDetail) bool {

	if !p.DraftDetail.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreatePromptRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type CreatePromptResponse struct {
	PromptID *int64         `thrift:"prompt_id,1,optional" frugal:"1,optional,i64" json:"prompt_id" form:"prompt_id" query:"prompt_id"`
	BaseResp *base.BaseResp `thrift:"BaseResp,255,optional" frugal:"255,optional,base.BaseResp" form:"BaseResp" json:"BaseResp,omitempty" query:"BaseResp"`
}

func NewCreatePromptResponse() *CreatePromptResponse {
	return &CreatePromptResponse{}
}

func (p *CreatePromptResponse) InitDefault() {
}

var CreatePromptResponse_PromptID_DEFAULT int64

func (p *CreatePromptResponse) GetPromptID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetPromptID() {
		return CreatePromptResponse_PromptID_DEFAULT
	}
	return *p.PromptID
}

var CreatePromptResponse_BaseResp_DEFAULT *base.BaseResp

func (p *CreatePromptResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return CreatePromptResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CreatePromptResponse) SetPromptID(val *int64) {
	p.PromptID = val
}
func (p *CreatePromptResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_CreatePromptResponse = map[int16]string{
	1:   "prompt_id",
	255: "BaseResp",
}

func (p *CreatePromptResponse) IsSetPromptID() bool {
	return p.PromptID != nil
}

func (p *CreatePromptResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CreatePromptResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreatePromptResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreatePromptResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PromptID = _field
	return nil
}
func (p *CreatePromptResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *CreatePromptResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreatePromptResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreatePromptResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPromptID() {
		if err = oprot.WriteFieldBegin("prompt_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PromptID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CreatePromptResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseResp() {
		if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseResp.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreatePromptResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreatePromptResponse(%+v)", *p)

}

func (p *CreatePromptResponse) DeepEqual(ano *CreatePromptResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PromptID) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *CreatePromptResponse) Field1DeepEqual(src *int64) bool {

	if p.PromptID == src {
		return true
	} else if p.PromptID == nil || src == nil {
		return false
	}
	if *p.PromptID != *src {
		return false
	}
	return true
}
func (p *CreatePromptResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type ClonePromptRequest struct {
	PromptID                *int64     `thrift:"prompt_id,1,optional" frugal:"1,optional,i64" json:"prompt_id" path:"prompt_id" `
	CommitVersion           *string    `thrift:"commit_version,2,optional" frugal:"2,optional,string" form:"commit_version" json:"commit_version,omitempty" query:"commit_version"`
	ClonedPromptName        *string    `thrift:"cloned_prompt_name,11,optional" frugal:"11,optional,string" form:"cloned_prompt_name" json:"cloned_prompt_name,omitempty" query:"cloned_prompt_name"`
	ClonedPromptKey         *string    `thrift:"cloned_prompt_key,12,optional" frugal:"12,optional,string" form:"cloned_prompt_key" json:"cloned_prompt_key,omitempty" query:"cloned_prompt_key"`
	ClonedPromptDescription *string    `thrift:"cloned_prompt_description,13,optional" frugal:"13,optional,string" form:"cloned_prompt_description" json:"cloned_prompt_description,omitempty" query:"cloned_prompt_description"`
	Base                    *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewClonePromptRequest() *ClonePromptRequest {
	return &ClonePromptRequest{}
}

func (p *ClonePromptRequest) InitDefault() {
}

var ClonePromptRequest_PromptID_DEFAULT int64

func (p *ClonePromptRequest) GetPromptID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetPromptID() {
		return ClonePromptRequest_PromptID_DEFAULT
	}
	return *p.PromptID
}

var ClonePromptRequest_CommitVersion_DEFAULT string

func (p *ClonePromptRequest) GetCommitVersion() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetCommitVersion() {
		return ClonePromptRequest_CommitVersion_DEFAULT
	}
	return *p.CommitVersion
}

var ClonePromptRequest_ClonedPromptName_DEFAULT string

func (p *ClonePromptRequest) GetClonedPromptName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetClonedPromptName() {
		return ClonePromptRequest_ClonedPromptName_DEFAULT
	}
	return *p.ClonedPromptName
}

var ClonePromptRequest_ClonedPromptKey_DEFAULT string

func (p *ClonePromptRequest) GetClonedPromptKey() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetClonedPromptKey() {
		return ClonePromptRequest_ClonedPromptKey_DEFAULT
	}
	return *p.ClonedPromptKey
}

var ClonePromptRequest_ClonedPromptDescription_DEFAULT string

func (p *ClonePromptRequest) GetClonedPromptDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetClonedPromptDescription() {
		return ClonePromptRequest_ClonedPromptDescription_DEFAULT
	}
	return *p.ClonedPromptDescription
}

var ClonePromptRequest_Base_DEFAULT *base.Base

func (p *ClonePromptRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return ClonePromptRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ClonePromptRequest) SetPromptID(val *int64) {
	p.PromptID = val
}
func (p *ClonePromptRequest) SetCommitVersion(val *string) {
	p.CommitVersion = val
}
func (p *ClonePromptRequest) SetClonedPromptName(val *string) {
	p.ClonedPromptName = val
}
func (p *ClonePromptRequest) SetClonedPromptKey(val *string) {
	p.ClonedPromptKey = val
}
func (p *ClonePromptRequest) SetClonedPromptDescription(val *string) {
	p.ClonedPromptDescription = val
}
func (p *ClonePromptRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ClonePromptRequest = map[int16]string{
	1:   "prompt_id",
	2:   "commit_version",
	11:  "cloned_prompt_name",
	12:  "cloned_prompt_key",
	13:  "cloned_prompt_description",
	255: "Base",
}

func (p *ClonePromptRequest) IsSetPromptID() bool {
	return p.PromptID != nil
}

func (p *ClonePromptRequest) IsSetCommitVersion() bool {
	return p.CommitVersion != nil
}

func (p *ClonePromptRequest) IsSetClonedPromptName() bool {
	return p.ClonedPromptName != nil
}

func (p *ClonePromptRequest) IsSetClonedPromptKey() bool {
	return p.ClonedPromptKey != nil
}

func (p *ClonePromptRequest) IsSetClonedPromptDescription() bool {
	return p.ClonedPromptDescription != nil
}

func (p *ClonePromptRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ClonePromptRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ClonePromptRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ClonePromptRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PromptID = _field
	return nil
}
func (p *ClonePromptRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CommitVersion = _field
	return nil
}
func (p *ClonePromptRequest) ReadField11(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ClonedPromptName = _field
	return nil
}
func (p *ClonePromptRequest) ReadField12(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ClonedPromptKey = _field
	return nil
}
func (p *ClonePromptRequest) ReadField13(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ClonedPromptDescription = _field
	return nil
}
func (p *ClonePromptRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *ClonePromptRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ClonePromptRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ClonePromptRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPromptID() {
		if err = oprot.WriteFieldBegin("prompt_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PromptID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ClonePromptRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCommitVersion() {
		if err = oprot.WriteFieldBegin("commit_version", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CommitVersion); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ClonePromptRequest) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetClonedPromptName() {
		if err = oprot.WriteFieldBegin("cloned_prompt_name", thrift.STRING, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ClonedPromptName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}
func (p *ClonePromptRequest) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetClonedPromptKey() {
		if err = oprot.WriteFieldBegin("cloned_prompt_key", thrift.STRING, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ClonedPromptKey); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}
func (p *ClonePromptRequest) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetClonedPromptDescription() {
		if err = oprot.WriteFieldBegin("cloned_prompt_description", thrift.STRING, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ClonedPromptDescription); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}
func (p *ClonePromptRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ClonePromptRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClonePromptRequest(%+v)", *p)

}

func (p *ClonePromptRequest) DeepEqual(ano *ClonePromptRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PromptID) {
		return false
	}
	if !p.Field2DeepEqual(ano.CommitVersion) {
		return false
	}
	if !p.Field11DeepEqual(ano.ClonedPromptName) {
		return false
	}
	if !p.Field12DeepEqual(ano.ClonedPromptKey) {
		return false
	}
	if !p.Field13DeepEqual(ano.ClonedPromptDescription) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ClonePromptRequest) Field1DeepEqual(src *int64) bool {

	if p.PromptID == src {
		return true
	} else if p.PromptID == nil || src == nil {
		return false
	}
	if *p.PromptID != *src {
		return false
	}
	return true
}
func (p *ClonePromptRequest) Field2DeepEqual(src *string) bool {

	if p.CommitVersion == src {
		return true
	} else if p.CommitVersion == nil || src == nil {
		return false
	}
	if strings.Compare(*p.CommitVersion, *src) != 0 {
		return false
	}
	return true
}
func (p *ClonePromptRequest) Field11DeepEqual(src *string) bool {

	if p.ClonedPromptName == src {
		return true
	} else if p.ClonedPromptName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ClonedPromptName, *src) != 0 {
		return false
	}
	return true
}
func (p *ClonePromptRequest) Field12DeepEqual(src *string) bool {

	if p.ClonedPromptKey == src {
		return true
	} else if p.ClonedPromptKey == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ClonedPromptKey, *src) != 0 {
		return false
	}
	return true
}
func (p *ClonePromptRequest) Field13DeepEqual(src *string) bool {

	if p.ClonedPromptDescription == src {
		return true
	} else if p.ClonedPromptDescription == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ClonedPromptDescription, *src) != 0 {
		return false
	}
	return true
}
func (p *ClonePromptRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ClonePromptResponse struct {
	ClonedPromptID *int64         `thrift:"cloned_prompt_id,1,optional" frugal:"1,optional,i64" json:"cloned_prompt_id" form:"cloned_prompt_id" query:"cloned_prompt_id"`
	BaseResp       *base.BaseResp `thrift:"BaseResp,255,optional" frugal:"255,optional,base.BaseResp" form:"BaseResp" json:"BaseResp,omitempty" query:"BaseResp"`
}

func NewClonePromptResponse() *ClonePromptResponse {
	return &ClonePromptResponse{}
}

func (p *ClonePromptResponse) InitDefault() {
}

var ClonePromptResponse_ClonedPromptID_DEFAULT int64

func (p *ClonePromptResponse) GetClonedPromptID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetClonedPromptID() {
		return ClonePromptResponse_ClonedPromptID_DEFAULT
	}
	return *p.ClonedPromptID
}

var ClonePromptResponse_BaseResp_DEFAULT *base.BaseResp

func (p *ClonePromptResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return ClonePromptResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ClonePromptResponse) SetClonedPromptID(val *int64) {
	p.ClonedPromptID = val
}
func (p *ClonePromptResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_ClonePromptResponse = map[int16]string{
	1:   "cloned_prompt_id",
	255: "BaseResp",
}

func (p *ClonePromptResponse) IsSetClonedPromptID() bool {
	return p.ClonedPromptID != nil
}

func (p *ClonePromptResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ClonePromptResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ClonePromptResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ClonePromptResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ClonedPromptID = _field
	return nil
}
func (p *ClonePromptResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *ClonePromptResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ClonePromptResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ClonePromptResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetClonedPromptID() {
		if err = oprot.WriteFieldBegin("cloned_prompt_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ClonedPromptID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ClonePromptResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseResp() {
		if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseResp.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ClonePromptResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ClonePromptResponse(%+v)", *p)

}

func (p *ClonePromptResponse) DeepEqual(ano *ClonePromptResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ClonedPromptID) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *ClonePromptResponse) Field1DeepEqual(src *int64) bool {

	if p.ClonedPromptID == src {
		return true
	} else if p.ClonedPromptID == nil || src == nil {
		return false
	}
	if *p.ClonedPromptID != *src {
		return false
	}
	return true
}
func (p *ClonePromptResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type DeletePromptRequest struct {
	PromptID *int64     `thrift:"prompt_id,1,optional" frugal:"1,optional,i64" json:"prompt_id" path:"prompt_id" `
	Base     *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewDeletePromptRequest() *DeletePromptRequest {
	return &DeletePromptRequest{}
}

func (p *DeletePromptRequest) InitDefault() {
}

var DeletePromptRequest_PromptID_DEFAULT int64

func (p *DeletePromptRequest) GetPromptID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetPromptID() {
		return DeletePromptRequest_PromptID_DEFAULT
	}
	return *p.PromptID
}

var DeletePromptRequest_Base_DEFAULT *base.Base

func (p *DeletePromptRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return DeletePromptRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *DeletePromptRequest) SetPromptID(val *int64) {
	p.PromptID = val
}
func (p *DeletePromptRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_DeletePromptRequest = map[int16]string{
	1:   "prompt_id",
	255: "Base",
}

func (p *DeletePromptRequest) IsSetPromptID() bool {
	return p.PromptID != nil
}

func (p *DeletePromptRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *DeletePromptRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeletePromptRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeletePromptRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PromptID = _field
	return nil
}
func (p *DeletePromptRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *DeletePromptRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeletePromptRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeletePromptRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPromptID() {
		if err = oprot.WriteFieldBegin("prompt_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PromptID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *DeletePromptRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *DeletePromptRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeletePromptRequest(%+v)", *p)

}

func (p *DeletePromptRequest) DeepEqual(ano *DeletePromptRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PromptID) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *DeletePromptRequest) Field1DeepEqual(src *int64) bool {

	if p.PromptID == src {
		return true
	} else if p.PromptID == nil || src == nil {
		return false
	}
	if *p.PromptID != *src {
		return false
	}
	return true
}
func (p *DeletePromptRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type DeletePromptResponse struct {
	BaseResp *base.BaseResp `thrift:"BaseResp,255,optional" frugal:"255,optional,base.BaseResp" form:"BaseResp" json:"BaseResp,omitempty" query:"BaseResp"`
}

func NewDeletePromptResponse() *DeletePromptResponse {
	return &DeletePromptResponse{}
}

func (p *DeletePromptResponse) InitDefault() {
}

var DeletePromptResponse_BaseResp_DEFAULT *base.BaseResp

func (p *DeletePromptResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return DeletePromptResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *DeletePromptResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_DeletePromptResponse = map[int16]string{
	255: "BaseResp",
}

func (p *DeletePromptResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *DeletePromptResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeletePromptResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeletePromptResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *DeletePromptResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeletePromptResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeletePromptResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseResp() {
		if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseResp.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *DeletePromptResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeletePromptResponse(%+v)", *p)

}

func (p *DeletePromptResponse) DeepEqual(ano *DeletePromptResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *DeletePromptResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type GetPromptRequest struct {
	PromptID          *int64     `thrift:"prompt_id,1,optional" frugal:"1,optional,i64" json:"prompt_id" path:"prompt_id" `
	WithCommit        *bool      `thrift:"with_commit,11,optional" frugal:"11,optional,bool" json:"with_commit,omitempty" query:"with_commit"`
	CommitVersion     *string    `thrift:"commit_version,12,optional" frugal:"12,optional,string" json:"commit_version,omitempty" query:"commit_version"`
	WithDraft         *bool      `thrift:"with_draft,21,optional" frugal:"21,optional,bool" json:"with_draft,omitempty" query:"with_draft"`
	WithDefaultConfig *bool      `thrift:"with_default_config,31,optional" frugal:"31,optional,bool" json:"with_default_config,omitempty" query:"with_default_config"`
	Base              *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewGetPromptRequest() *GetPromptRequest {
	return &GetPromptRequest{}
}

func (p *GetPromptRequest) InitDefault() {
}

var GetPromptRequest_PromptID_DEFAULT int64

func (p *GetPromptRequest) GetPromptID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetPromptID() {
		return GetPromptRequest_PromptID_DEFAULT
	}
	return *p.PromptID
}

var GetPromptRequest_WithCommit_DEFAULT bool

func (p *GetPromptRequest) GetWithCommit() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetWithCommit() {
		return GetPromptRequest_WithCommit_DEFAULT
	}
	return *p.WithCommit
}

var GetPromptRequest_CommitVersion_DEFAULT string

func (p *GetPromptRequest) GetCommitVersion() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetCommitVersion() {
		return GetPromptRequest_CommitVersion_DEFAULT
	}
	return *p.CommitVersion
}

var GetPromptRequest_WithDraft_DEFAULT bool

func (p *GetPromptRequest) GetWithDraft() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetWithDraft() {
		return GetPromptRequest_WithDraft_DEFAULT
	}
	return *p.WithDraft
}

var GetPromptRequest_WithDefaultConfig_DEFAULT bool

func (p *GetPromptRequest) GetWithDefaultConfig() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetWithDefaultConfig() {
		return GetPromptRequest_WithDefaultConfig_DEFAULT
	}
	return *p.WithDefaultConfig
}

var GetPromptRequest_Base_DEFAULT *base.Base

func (p *GetPromptRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return GetPromptRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetPromptRequest) SetPromptID(val *int64) {
	p.PromptID = val
}
func (p *GetPromptRequest) SetWithCommit(val *bool) {
	p.WithCommit = val
}
func (p *GetPromptRequest) SetCommitVersion(val *string) {
	p.CommitVersion = val
}
func (p *GetPromptRequest) SetWithDraft(val *bool) {
	p.WithDraft = val
}
func (p *GetPromptRequest) SetWithDefaultConfig(val *bool) {
	p.WithDefaultConfig = val
}
func (p *GetPromptRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetPromptRequest = map[int16]string{
	1:   "prompt_id",
	11:  "with_commit",
	12:  "commit_version",
	21:  "with_draft",
	31:  "with_default_config",
	255: "Base",
}

func (p *GetPromptRequest) IsSetPromptID() bool {
	return p.PromptID != nil
}

func (p *GetPromptRequest) IsSetWithCommit() bool {
	return p.WithCommit != nil
}

func (p *GetPromptRequest) IsSetCommitVersion() bool {
	return p.CommitVersion != nil
}

func (p *GetPromptRequest) IsSetWithDraft() bool {
	return p.WithDraft != nil
}

func (p *GetPromptRequest) IsSetWithDefaultConfig() bool {
	return p.WithDefaultConfig != nil
}

func (p *GetPromptRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetPromptRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 31:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField31(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetPromptRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetPromptRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PromptID = _field
	return nil
}
func (p *GetPromptRequest) ReadField11(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WithCommit = _field
	return nil
}
func (p *GetPromptRequest) ReadField12(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CommitVersion = _field
	return nil
}
func (p *GetPromptRequest) ReadField21(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WithDraft = _field
	return nil
}
func (p *GetPromptRequest) ReadField31(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WithDefaultConfig = _field
	return nil
}
func (p *GetPromptRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *GetPromptRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPromptRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField31(oprot); err != nil {
			fieldId = 31
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetPromptRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPromptID() {
		if err = oprot.WriteFieldBegin("prompt_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PromptID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetPromptRequest) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetWithCommit() {
		if err = oprot.WriteFieldBegin("with_commit", thrift.BOOL, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.WithCommit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}
func (p *GetPromptRequest) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetCommitVersion() {
		if err = oprot.WriteFieldBegin("commit_version", thrift.STRING, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CommitVersion); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}
func (p *GetPromptRequest) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetWithDraft() {
		if err = oprot.WriteFieldBegin("with_draft", thrift.BOOL, 21); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.WithDraft); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}
func (p *GetPromptRequest) writeField31(oprot thrift.TProtocol) (err error) {
	if p.IsSetWithDefaultConfig() {
		if err = oprot.WriteFieldBegin("with_default_config", thrift.BOOL, 31); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.WithDefaultConfig); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 31 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 31 end error: ", p), err)
}
func (p *GetPromptRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetPromptRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPromptRequest(%+v)", *p)

}

func (p *GetPromptRequest) DeepEqual(ano *GetPromptRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PromptID) {
		return false
	}
	if !p.Field11DeepEqual(ano.WithCommit) {
		return false
	}
	if !p.Field12DeepEqual(ano.CommitVersion) {
		return false
	}
	if !p.Field21DeepEqual(ano.WithDraft) {
		return false
	}
	if !p.Field31DeepEqual(ano.WithDefaultConfig) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetPromptRequest) Field1DeepEqual(src *int64) bool {

	if p.PromptID == src {
		return true
	} else if p.PromptID == nil || src == nil {
		return false
	}
	if *p.PromptID != *src {
		return false
	}
	return true
}
func (p *GetPromptRequest) Field11DeepEqual(src *bool) bool {

	if p.WithCommit == src {
		return true
	} else if p.WithCommit == nil || src == nil {
		return false
	}
	if *p.WithCommit != *src {
		return false
	}
	return true
}
func (p *GetPromptRequest) Field12DeepEqual(src *string) bool {

	if p.CommitVersion == src {
		return true
	} else if p.CommitVersion == nil || src == nil {
		return false
	}
	if strings.Compare(*p.CommitVersion, *src) != 0 {
		return false
	}
	return true
}
func (p *GetPromptRequest) Field21DeepEqual(src *bool) bool {

	if p.WithDraft == src {
		return true
	} else if p.WithDraft == nil || src == nil {
		return false
	}
	if *p.WithDraft != *src {
		return false
	}
	return true
}
func (p *GetPromptRequest) Field31DeepEqual(src *bool) bool {

	if p.WithDefaultConfig == src {
		return true
	} else if p.WithDefaultConfig == nil || src == nil {
		return false
	}
	if *p.WithDefaultConfig != *src {
		return false
	}
	return true
}
func (p *GetPromptRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetPromptResponse struct {
	Prompt        *prompt.Prompt       `thrift:"prompt,1,optional" frugal:"1,optional,prompt.Prompt" form:"prompt" json:"prompt,omitempty" query:"prompt"`
	DefaultConfig *prompt.PromptDetail `thrift:"default_config,11,optional" frugal:"11,optional,prompt.PromptDetail" form:"default_config" json:"default_config,omitempty" query:"default_config"`
	BaseResp      *base.BaseResp       `thrift:"BaseResp,255,optional" frugal:"255,optional,base.BaseResp" form:"BaseResp" json:"BaseResp,omitempty" query:"BaseResp"`
}

func NewGetPromptResponse() *GetPromptResponse {
	return &GetPromptResponse{}
}

func (p *GetPromptResponse) InitDefault() {
}

var GetPromptResponse_Prompt_DEFAULT *prompt.Prompt

func (p *GetPromptResponse) GetPrompt() (v *prompt.Prompt) {
	if p == nil {
		return
	}
	if !p.IsSetPrompt() {
		return GetPromptResponse_Prompt_DEFAULT
	}
	return p.Prompt
}

var GetPromptResponse_DefaultConfig_DEFAULT *prompt.PromptDetail

func (p *GetPromptResponse) GetDefaultConfig() (v *prompt.PromptDetail) {
	if p == nil {
		return
	}
	if !p.IsSetDefaultConfig() {
		return GetPromptResponse_DefaultConfig_DEFAULT
	}
	return p.DefaultConfig
}

var GetPromptResponse_BaseResp_DEFAULT *base.BaseResp

func (p *GetPromptResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return GetPromptResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetPromptResponse) SetPrompt(val *prompt.Prompt) {
	p.Prompt = val
}
func (p *GetPromptResponse) SetDefaultConfig(val *prompt.PromptDetail) {
	p.DefaultConfig = val
}
func (p *GetPromptResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_GetPromptResponse = map[int16]string{
	1:   "prompt",
	11:  "default_config",
	255: "BaseResp",
}

func (p *GetPromptResponse) IsSetPrompt() bool {
	return p.Prompt != nil
}

func (p *GetPromptResponse) IsSetDefaultConfig() bool {
	return p.DefaultConfig != nil
}

func (p *GetPromptResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetPromptResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetPromptResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetPromptResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := prompt.NewPrompt()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Prompt = _field
	return nil
}
func (p *GetPromptResponse) ReadField11(iprot thrift.TProtocol) error {
	_field := prompt.NewPromptDetail()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.DefaultConfig = _field
	return nil
}
func (p *GetPromptResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *GetPromptResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPromptResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetPromptResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrompt() {
		if err = oprot.WriteFieldBegin("prompt", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Prompt.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetPromptResponse) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetDefaultConfig() {
		if err = oprot.WriteFieldBegin("default_config", thrift.STRUCT, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.DefaultConfig.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}
func (p *GetPromptResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseResp() {
		if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseResp.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetPromptResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetPromptResponse(%+v)", *p)

}

func (p *GetPromptResponse) DeepEqual(ano *GetPromptResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Prompt) {
		return false
	}
	if !p.Field11DeepEqual(ano.DefaultConfig) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *GetPromptResponse) Field1DeepEqual(src *prompt.Prompt) bool {

	if !p.Prompt.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetPromptResponse) Field11DeepEqual(src *prompt.PromptDetail) bool {

	if !p.DefaultConfig.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetPromptResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type PromptQuery struct {
	PromptID      *int64  `thrift:"prompt_id,1,optional" frugal:"1,optional,i64" json:"prompt_id" form:"prompt_id" query:"prompt_id"`
	WithCommit    *bool   `thrift:"with_commit,11,optional" frugal:"11,optional,bool" form:"with_commit" json:"with_commit,omitempty" query:"with_commit"`
	CommitVersion *string `thrift:"commit_version,12,optional" frugal:"12,optional,string" form:"commit_version" json:"commit_version,omitempty" query:"commit_version"`
}

func NewPromptQuery() *PromptQuery {
	return &PromptQuery{}
}

func (p *PromptQuery) InitDefault() {
}

var PromptQuery_PromptID_DEFAULT int64

func (p *PromptQuery) GetPromptID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetPromptID() {
		return PromptQuery_PromptID_DEFAULT
	}
	return *p.PromptID
}

var PromptQuery_WithCommit_DEFAULT bool

func (p *PromptQuery) GetWithCommit() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetWithCommit() {
		return PromptQuery_WithCommit_DEFAULT
	}
	return *p.WithCommit
}

var PromptQuery_CommitVersion_DEFAULT string

func (p *PromptQuery) GetCommitVersion() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetCommitVersion() {
		return PromptQuery_CommitVersion_DEFAULT
	}
	return *p.CommitVersion
}
func (p *PromptQuery) SetPromptID(val *int64) {
	p.PromptID = val
}
func (p *PromptQuery) SetWithCommit(val *bool) {
	p.WithCommit = val
}
func (p *PromptQuery) SetCommitVersion(val *string) {
	p.CommitVersion = val
}

var fieldIDToName_PromptQuery = map[int16]string{
	1:  "prompt_id",
	11: "with_commit",
	12: "commit_version",
}

func (p *PromptQuery) IsSetPromptID() bool {
	return p.PromptID != nil
}

func (p *PromptQuery) IsSetWithCommit() bool {
	return p.WithCommit != nil
}

func (p *PromptQuery) IsSetCommitVersion() bool {
	return p.CommitVersion != nil
}

func (p *PromptQuery) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PromptQuery[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PromptQuery) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PromptID = _field
	return nil
}
func (p *PromptQuery) ReadField11(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WithCommit = _field
	return nil
}
func (p *PromptQuery) ReadField12(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CommitVersion = _field
	return nil
}

func (p *PromptQuery) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PromptQuery"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PromptQuery) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPromptID() {
		if err = oprot.WriteFieldBegin("prompt_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PromptID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *PromptQuery) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetWithCommit() {
		if err = oprot.WriteFieldBegin("with_commit", thrift.BOOL, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.WithCommit); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}
func (p *PromptQuery) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetCommitVersion() {
		if err = oprot.WriteFieldBegin("commit_version", thrift.STRING, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CommitVersion); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *PromptQuery) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PromptQuery(%+v)", *p)

}

func (p *PromptQuery) DeepEqual(ano *PromptQuery) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PromptID) {
		return false
	}
	if !p.Field11DeepEqual(ano.WithCommit) {
		return false
	}
	if !p.Field12DeepEqual(ano.CommitVersion) {
		return false
	}
	return true
}

func (p *PromptQuery) Field1DeepEqual(src *int64) bool {

	if p.PromptID == src {
		return true
	} else if p.PromptID == nil || src == nil {
		return false
	}
	if *p.PromptID != *src {
		return false
	}
	return true
}
func (p *PromptQuery) Field11DeepEqual(src *bool) bool {

	if p.WithCommit == src {
		return true
	} else if p.WithCommit == nil || src == nil {
		return false
	}
	if *p.WithCommit != *src {
		return false
	}
	return true
}
func (p *PromptQuery) Field12DeepEqual(src *string) bool {

	if p.CommitVersion == src {
		return true
	} else if p.CommitVersion == nil || src == nil {
		return false
	}
	if strings.Compare(*p.CommitVersion, *src) != 0 {
		return false
	}
	return true
}

type BatchGetPromptRequest struct {
	Queries []*PromptQuery `thrift:"queries,1,optional" frugal:"1,optional,list<PromptQuery>" form:"queries" json:"queries,omitempty" query:"queries"`
	Base    *base.Base     `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewBatchGetPromptRequest() *BatchGetPromptRequest {
	return &BatchGetPromptRequest{}
}

func (p *BatchGetPromptRequest) InitDefault() {
}

var BatchGetPromptRequest_Queries_DEFAULT []*PromptQuery

func (p *BatchGetPromptRequest) GetQueries() (v []*PromptQuery) {
	if p == nil {
		return
	}
	if !p.IsSetQueries() {
		return BatchGetPromptRequest_Queries_DEFAULT
	}
	return p.Queries
}

var BatchGetPromptRequest_Base_DEFAULT *base.Base

func (p *BatchGetPromptRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return BatchGetPromptRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *BatchGetPromptRequest) SetQueries(val []*PromptQuery) {
	p.Queries = val
}
func (p *BatchGetPromptRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_BatchGetPromptRequest = map[int16]string{
	1:   "queries",
	255: "Base",
}

func (p *BatchGetPromptRequest) IsSetQueries() bool {
	return p.Queries != nil
}

func (p *BatchGetPromptRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *BatchGetPromptRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchGetPromptRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchGetPromptRequest) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*PromptQuery, 0, size)
	values := make([]PromptQuery, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Queries = _field
	return nil
}
func (p *BatchGetPromptRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *BatchGetPromptRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetPromptRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchGetPromptRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueries() {
		if err = oprot.WriteFieldBegin("queries", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Queries)); err != nil {
			return err
		}
		for _, v := range p.Queries {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchGetPromptRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchGetPromptRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchGetPromptRequest(%+v)", *p)

}

func (p *BatchGetPromptRequest) DeepEqual(ano *BatchGetPromptRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Queries) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *BatchGetPromptRequest) Field1DeepEqual(src []*PromptQuery) bool {

	if len(p.Queries) != len(src) {
		return false
	}
	for i, v := range p.Queries {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *BatchGetPromptRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type BatchGetPromptResponse struct {
	Results  []*PromptResult_ `thrift:"results,1,optional" frugal:"1,optional,list<PromptResult_>" form:"results" json:"results,omitempty" query:"results"`
	BaseResp *base.BaseResp   `thrift:"BaseResp,255,optional" frugal:"255,optional,base.BaseResp" form:"BaseResp" json:"BaseResp,omitempty" query:"BaseResp"`
}

func NewBatchGetPromptResponse() *BatchGetPromptResponse {
	return &BatchGetPromptResponse{}
}

func (p *BatchGetPromptResponse) InitDefault() {
}

var BatchGetPromptResponse_Results_DEFAULT []*PromptResult_

func (p *BatchGetPromptResponse) GetResults() (v []*PromptResult_) {
	if p == nil {
		return
	}
	if !p.IsSetResults() {
		return BatchGetPromptResponse_Results_DEFAULT
	}
	return p.Results
}

var BatchGetPromptResponse_BaseResp_DEFAULT *base.BaseResp

func (p *BatchGetPromptResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return BatchGetPromptResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *BatchGetPromptResponse) SetResults(val []*PromptResult_) {
	p.Results = val
}
func (p *BatchGetPromptResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_BatchGetPromptResponse = map[int16]string{
	1:   "results",
	255: "BaseResp",
}

func (p *BatchGetPromptResponse) IsSetResults() bool {
	return p.Results != nil
}

func (p *BatchGetPromptResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *BatchGetPromptResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchGetPromptResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BatchGetPromptResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*PromptResult_, 0, size)
	values := make([]PromptResult_, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Results = _field
	return nil
}
func (p *BatchGetPromptResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *BatchGetPromptResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetPromptResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchGetPromptResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetResults() {
		if err = oprot.WriteFieldBegin("results", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Results)); err != nil {
			return err
		}
		for _, v := range p.Results {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchGetPromptResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseResp() {
		if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseResp.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchGetPromptResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchGetPromptResponse(%+v)", *p)

}

func (p *BatchGetPromptResponse) DeepEqual(ano *BatchGetPromptResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Results) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *BatchGetPromptResponse) Field1DeepEqual(src []*PromptResult_) bool {

	if len(p.Results) != len(src) {
		return false
	}
	for i, v := range p.Results {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *BatchGetPromptResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type PromptResult_ struct {
	Query  *PromptQuery   `thrift:"query,1,optional" frugal:"1,optional,PromptQuery" form:"query" json:"query,omitempty" query:"query"`
	Prompt *prompt.Prompt `thrift:"prompt,2,optional" frugal:"2,optional,prompt.Prompt" form:"prompt" json:"prompt,omitempty" query:"prompt"`
}

func NewPromptResult_() *PromptResult_ {
	return &PromptResult_{}
}

func (p *PromptResult_) InitDefault() {
}

var PromptResult__Query_DEFAULT *PromptQuery

func (p *PromptResult_) GetQuery() (v *PromptQuery) {
	if p == nil {
		return
	}
	if !p.IsSetQuery() {
		return PromptResult__Query_DEFAULT
	}
	return p.Query
}

var PromptResult__Prompt_DEFAULT *prompt.Prompt

func (p *PromptResult_) GetPrompt() (v *prompt.Prompt) {
	if p == nil {
		return
	}
	if !p.IsSetPrompt() {
		return PromptResult__Prompt_DEFAULT
	}
	return p.Prompt
}
func (p *PromptResult_) SetQuery(val *PromptQuery) {
	p.Query = val
}
func (p *PromptResult_) SetPrompt(val *prompt.Prompt) {
	p.Prompt = val
}

var fieldIDToName_PromptResult_ = map[int16]string{
	1: "query",
	2: "prompt",
}

func (p *PromptResult_) IsSetQuery() bool {
	return p.Query != nil
}

func (p *PromptResult_) IsSetPrompt() bool {
	return p.Prompt != nil
}

func (p *PromptResult_) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PromptResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PromptResult_) ReadField1(iprot thrift.TProtocol) error {
	_field := NewPromptQuery()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Query = _field
	return nil
}
func (p *PromptResult_) ReadField2(iprot thrift.TProtocol) error {
	_field := prompt.NewPrompt()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Prompt = _field
	return nil
}

func (p *PromptResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("PromptResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PromptResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetQuery() {
		if err = oprot.WriteFieldBegin("query", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Query.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *PromptResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrompt() {
		if err = oprot.WriteFieldBegin("prompt", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Prompt.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *PromptResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PromptResult_(%+v)", *p)

}

func (p *PromptResult_) DeepEqual(ano *PromptResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Query) {
		return false
	}
	if !p.Field2DeepEqual(ano.Prompt) {
		return false
	}
	return true
}

func (p *PromptResult_) Field1DeepEqual(src *PromptQuery) bool {

	if !p.Query.DeepEqual(src) {
		return false
	}
	return true
}
func (p *PromptResult_) Field2DeepEqual(src *prompt.Prompt) bool {

	if !p.Prompt.DeepEqual(src) {
		return false
	}
	return true
}

type ListPromptRequest struct {
	WorkspaceID   *int64             `thrift:"workspace_id,1,optional" frugal:"1,optional,i64" json:"workspace_id" form:"workspace_id" query:"workspace_id"`
	KeyWord       *string            `thrift:"key_word,11,optional" frugal:"11,optional,string" form:"key_word" json:"key_word,omitempty" query:"key_word"`
	CreatedBys    []string           `thrift:"created_bys,12,optional" frugal:"12,optional,list<string>" form:"created_bys" json:"created_bys,omitempty" query:"created_bys"`
	CommittedOnly *bool              `thrift:"committed_only,13,optional" frugal:"13,optional,bool" form:"committed_only" json:"committed_only,omitempty" query:"committed_only"`
	PageNum       *int32             `thrift:"page_num,127,optional" frugal:"127,optional,i32" form:"page_num" json:"page_num,omitempty" query:"page_num"`
	PageSize      *int32             `thrift:"page_size,128,optional" frugal:"128,optional,i32" form:"page_size" json:"page_size,omitempty" query:"page_size"`
	OrderBy       *ListPromptOrderBy `thrift:"order_by,129,optional" frugal:"129,optional,string" form:"order_by" json:"order_by,omitempty" query:"order_by"`
	Asc           *bool              `thrift:"asc,130,optional" frugal:"130,optional,bool" form:"asc" json:"asc,omitempty" query:"asc"`
	Base          *base.Base         `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewListPromptRequest() *ListPromptRequest {
	return &ListPromptRequest{}
}

func (p *ListPromptRequest) InitDefault() {
}

var ListPromptRequest_WorkspaceID_DEFAULT int64

func (p *ListPromptRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return ListPromptRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var ListPromptRequest_KeyWord_DEFAULT string

func (p *ListPromptRequest) GetKeyWord() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetKeyWord() {
		return ListPromptRequest_KeyWord_DEFAULT
	}
	return *p.KeyWord
}

var ListPromptRequest_CreatedBys_DEFAULT []string

func (p *ListPromptRequest) GetCreatedBys() (v []string) {
	if p == nil {
		return
	}
	if !p.IsSetCreatedBys() {
		return ListPromptRequest_CreatedBys_DEFAULT
	}
	return p.CreatedBys
}

var ListPromptRequest_CommittedOnly_DEFAULT bool

func (p *ListPromptRequest) GetCommittedOnly() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetCommittedOnly() {
		return ListPromptRequest_CommittedOnly_DEFAULT
	}
	return *p.CommittedOnly
}

var ListPromptRequest_PageNum_DEFAULT int32

func (p *ListPromptRequest) GetPageNum() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageNum() {
		return ListPromptRequest_PageNum_DEFAULT
	}
	return *p.PageNum
}

var ListPromptRequest_PageSize_DEFAULT int32

func (p *ListPromptRequest) GetPageSize() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageSize() {
		return ListPromptRequest_PageSize_DEFAULT
	}
	return *p.PageSize
}

var ListPromptRequest_OrderBy_DEFAULT ListPromptOrderBy

func (p *ListPromptRequest) GetOrderBy() (v ListPromptOrderBy) {
	if p == nil {
		return
	}
	if !p.IsSetOrderBy() {
		return ListPromptRequest_OrderBy_DEFAULT
	}
	return *p.OrderBy
}

var ListPromptRequest_Asc_DEFAULT bool

func (p *ListPromptRequest) GetAsc() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetAsc() {
		return ListPromptRequest_Asc_DEFAULT
	}
	return *p.Asc
}

var ListPromptRequest_Base_DEFAULT *base.Base

func (p *ListPromptRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return ListPromptRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ListPromptRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *ListPromptRequest) SetKeyWord(val *string) {
	p.KeyWord = val
}
func (p *ListPromptRequest) SetCreatedBys(val []string) {
	p.CreatedBys = val
}
func (p *ListPromptRequest) SetCommittedOnly(val *bool) {
	p.CommittedOnly = val
}
func (p *ListPromptRequest) SetPageNum(val *int32) {
	p.PageNum = val
}
func (p *ListPromptRequest) SetPageSize(val *int32) {
	p.PageSize = val
}
func (p *ListPromptRequest) SetOrderBy(val *ListPromptOrderBy) {
	p.OrderBy = val
}
func (p *ListPromptRequest) SetAsc(val *bool) {
	p.Asc = val
}
func (p *ListPromptRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListPromptRequest = map[int16]string{
	1:   "workspace_id",
	11:  "key_word",
	12:  "created_bys",
	13:  "committed_only",
	127: "page_num",
	128: "page_size",
	129: "order_by",
	130: "asc",
	255: "Base",
}

func (p *ListPromptRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *ListPromptRequest) IsSetKeyWord() bool {
	return p.KeyWord != nil
}

func (p *ListPromptRequest) IsSetCreatedBys() bool {
	return p.CreatedBys != nil
}

func (p *ListPromptRequest) IsSetCommittedOnly() bool {
	return p.CommittedOnly != nil
}

func (p *ListPromptRequest) IsSetPageNum() bool {
	return p.PageNum != nil
}

func (p *ListPromptRequest) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *ListPromptRequest) IsSetOrderBy() bool {
	return p.OrderBy != nil
}

func (p *ListPromptRequest) IsSetAsc() bool {
	return p.Asc != nil
}

func (p *ListPromptRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListPromptRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 127:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField127(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 128:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField128(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 129:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField129(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 130:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField130(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListPromptRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListPromptRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *ListPromptRequest) ReadField11(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.KeyWord = _field
	return nil
}
func (p *ListPromptRequest) ReadField12(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]string, 0, size)
	for i := 0; i < size; i++ {

		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.CreatedBys = _field
	return nil
}
func (p *ListPromptRequest) ReadField13(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CommittedOnly = _field
	return nil
}
func (p *ListPromptRequest) ReadField127(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageNum = _field
	return nil
}
func (p *ListPromptRequest) ReadField128(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageSize = _field
	return nil
}
func (p *ListPromptRequest) ReadField129(iprot thrift.TProtocol) error {

	var _field *ListPromptOrderBy
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.OrderBy = _field
	return nil
}
func (p *ListPromptRequest) ReadField130(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Asc = _field
	return nil
}
func (p *ListPromptRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *ListPromptRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListPromptRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField127(oprot); err != nil {
			fieldId = 127
			goto WriteFieldError
		}
		if err = p.writeField128(oprot); err != nil {
			fieldId = 128
			goto WriteFieldError
		}
		if err = p.writeField129(oprot); err != nil {
			fieldId = 129
			goto WriteFieldError
		}
		if err = p.writeField130(oprot); err != nil {
			fieldId = 130
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListPromptRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListPromptRequest) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetKeyWord() {
		if err = oprot.WriteFieldBegin("key_word", thrift.STRING, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.KeyWord); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}
func (p *ListPromptRequest) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedBys() {
		if err = oprot.WriteFieldBegin("created_bys", thrift.LIST, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.CreatedBys)); err != nil {
			return err
		}
		for _, v := range p.CreatedBys {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}
func (p *ListPromptRequest) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetCommittedOnly() {
		if err = oprot.WriteFieldBegin("committed_only", thrift.BOOL, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.CommittedOnly); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}
func (p *ListPromptRequest) writeField127(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageNum() {
		if err = oprot.WriteFieldBegin("page_num", thrift.I32, 127); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageNum); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 127 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 127 end error: ", p), err)
}
func (p *ListPromptRequest) writeField128(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("page_size", thrift.I32, 128); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 128 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 128 end error: ", p), err)
}
func (p *ListPromptRequest) writeField129(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrderBy() {
		if err = oprot.WriteFieldBegin("order_by", thrift.STRING, 129); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.OrderBy); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 129 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 129 end error: ", p), err)
}
func (p *ListPromptRequest) writeField130(oprot thrift.TProtocol) (err error) {
	if p.IsSetAsc() {
		if err = oprot.WriteFieldBegin("asc", thrift.BOOL, 130); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.Asc); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 130 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 130 end error: ", p), err)
}
func (p *ListPromptRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListPromptRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListPromptRequest(%+v)", *p)

}

func (p *ListPromptRequest) DeepEqual(ano *ListPromptRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field11DeepEqual(ano.KeyWord) {
		return false
	}
	if !p.Field12DeepEqual(ano.CreatedBys) {
		return false
	}
	if !p.Field13DeepEqual(ano.CommittedOnly) {
		return false
	}
	if !p.Field127DeepEqual(ano.PageNum) {
		return false
	}
	if !p.Field128DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field129DeepEqual(ano.OrderBy) {
		return false
	}
	if !p.Field130DeepEqual(ano.Asc) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListPromptRequest) Field1DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *ListPromptRequest) Field11DeepEqual(src *string) bool {

	if p.KeyWord == src {
		return true
	} else if p.KeyWord == nil || src == nil {
		return false
	}
	if strings.Compare(*p.KeyWord, *src) != 0 {
		return false
	}
	return true
}
func (p *ListPromptRequest) Field12DeepEqual(src []string) bool {

	if len(p.CreatedBys) != len(src) {
		return false
	}
	for i, v := range p.CreatedBys {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *ListPromptRequest) Field13DeepEqual(src *bool) bool {

	if p.CommittedOnly == src {
		return true
	} else if p.CommittedOnly == nil || src == nil {
		return false
	}
	if *p.CommittedOnly != *src {
		return false
	}
	return true
}
func (p *ListPromptRequest) Field127DeepEqual(src *int32) bool {

	if p.PageNum == src {
		return true
	} else if p.PageNum == nil || src == nil {
		return false
	}
	if *p.PageNum != *src {
		return false
	}
	return true
}
func (p *ListPromptRequest) Field128DeepEqual(src *int32) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}
func (p *ListPromptRequest) Field129DeepEqual(src *ListPromptOrderBy) bool {

	if p.OrderBy == src {
		return true
	} else if p.OrderBy == nil || src == nil {
		return false
	}
	if strings.Compare(*p.OrderBy, *src) != 0 {
		return false
	}
	return true
}
func (p *ListPromptRequest) Field130DeepEqual(src *bool) bool {

	if p.Asc == src {
		return true
	} else if p.Asc == nil || src == nil {
		return false
	}
	if *p.Asc != *src {
		return false
	}
	return true
}
func (p *ListPromptRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ListPromptResponse struct {
	Prompts  []*prompt.Prompt       `thrift:"prompts,1,optional" frugal:"1,optional,list<prompt.Prompt>" form:"prompts" json:"prompts,omitempty" query:"prompts"`
	Users    []*user.UserInfoDetail `thrift:"users,11,optional" frugal:"11,optional,list<user.UserInfoDetail>" form:"users" json:"users,omitempty" query:"users"`
	Total    *int32                 `thrift:"total,127,optional" frugal:"127,optional,i32" form:"total" json:"total,omitempty" query:"total"`
	BaseResp *base.BaseResp         `thrift:"BaseResp,255,optional" frugal:"255,optional,base.BaseResp" form:"BaseResp" json:"BaseResp,omitempty" query:"BaseResp"`
}

func NewListPromptResponse() *ListPromptResponse {
	return &ListPromptResponse{}
}

func (p *ListPromptResponse) InitDefault() {
}

var ListPromptResponse_Prompts_DEFAULT []*prompt.Prompt

func (p *ListPromptResponse) GetPrompts() (v []*prompt.Prompt) {
	if p == nil {
		return
	}
	if !p.IsSetPrompts() {
		return ListPromptResponse_Prompts_DEFAULT
	}
	return p.Prompts
}

var ListPromptResponse_Users_DEFAULT []*user.UserInfoDetail

func (p *ListPromptResponse) GetUsers() (v []*user.UserInfoDetail) {
	if p == nil {
		return
	}
	if !p.IsSetUsers() {
		return ListPromptResponse_Users_DEFAULT
	}
	return p.Users
}

var ListPromptResponse_Total_DEFAULT int32

func (p *ListPromptResponse) GetTotal() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetTotal() {
		return ListPromptResponse_Total_DEFAULT
	}
	return *p.Total
}

var ListPromptResponse_BaseResp_DEFAULT *base.BaseResp

func (p *ListPromptResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return ListPromptResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ListPromptResponse) SetPrompts(val []*prompt.Prompt) {
	p.Prompts = val
}
func (p *ListPromptResponse) SetUsers(val []*user.UserInfoDetail) {
	p.Users = val
}
func (p *ListPromptResponse) SetTotal(val *int32) {
	p.Total = val
}
func (p *ListPromptResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_ListPromptResponse = map[int16]string{
	1:   "prompts",
	11:  "users",
	127: "total",
	255: "BaseResp",
}

func (p *ListPromptResponse) IsSetPrompts() bool {
	return p.Prompts != nil
}

func (p *ListPromptResponse) IsSetUsers() bool {
	return p.Users != nil
}

func (p *ListPromptResponse) IsSetTotal() bool {
	return p.Total != nil
}

func (p *ListPromptResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ListPromptResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 127:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField127(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListPromptResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListPromptResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*prompt.Prompt, 0, size)
	values := make([]prompt.Prompt, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Prompts = _field
	return nil
}
func (p *ListPromptResponse) ReadField11(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*user.UserInfoDetail, 0, size)
	values := make([]user.UserInfoDetail, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Users = _field
	return nil
}
func (p *ListPromptResponse) ReadField127(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Total = _field
	return nil
}
func (p *ListPromptResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *ListPromptResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListPromptResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField127(oprot); err != nil {
			fieldId = 127
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListPromptResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPrompts() {
		if err = oprot.WriteFieldBegin("prompts", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Prompts)); err != nil {
			return err
		}
		for _, v := range p.Prompts {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListPromptResponse) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetUsers() {
		if err = oprot.WriteFieldBegin("users", thrift.LIST, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Users)); err != nil {
			return err
		}
		for _, v := range p.Users {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}
func (p *ListPromptResponse) writeField127(oprot thrift.TProtocol) (err error) {
	if p.IsSetTotal() {
		if err = oprot.WriteFieldBegin("total", thrift.I32, 127); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Total); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 127 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 127 end error: ", p), err)
}
func (p *ListPromptResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseResp() {
		if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseResp.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListPromptResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListPromptResponse(%+v)", *p)

}

func (p *ListPromptResponse) DeepEqual(ano *ListPromptResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Prompts) {
		return false
	}
	if !p.Field11DeepEqual(ano.Users) {
		return false
	}
	if !p.Field127DeepEqual(ano.Total) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *ListPromptResponse) Field1DeepEqual(src []*prompt.Prompt) bool {

	if len(p.Prompts) != len(src) {
		return false
	}
	for i, v := range p.Prompts {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListPromptResponse) Field11DeepEqual(src []*user.UserInfoDetail) bool {

	if len(p.Users) != len(src) {
		return false
	}
	for i, v := range p.Users {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListPromptResponse) Field127DeepEqual(src *int32) bool {

	if p.Total == src {
		return true
	} else if p.Total == nil || src == nil {
		return false
	}
	if *p.Total != *src {
		return false
	}
	return true
}
func (p *ListPromptResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type UpdatePromptRequest struct {
	PromptID          *int64     `thrift:"prompt_id,1,optional" frugal:"1,optional,i64" json:"prompt_id" path:"prompt_id" `
	PromptName        *string    `thrift:"prompt_name,11,optional" frugal:"11,optional,string" form:"prompt_name" json:"prompt_name,omitempty" query:"prompt_name"`
	PromptDescription *string    `thrift:"prompt_description,12,optional" frugal:"12,optional,string" form:"prompt_description" json:"prompt_description,omitempty" query:"prompt_description"`
	Base              *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewUpdatePromptRequest() *UpdatePromptRequest {
	return &UpdatePromptRequest{}
}

func (p *UpdatePromptRequest) InitDefault() {
}

var UpdatePromptRequest_PromptID_DEFAULT int64

func (p *UpdatePromptRequest) GetPromptID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetPromptID() {
		return UpdatePromptRequest_PromptID_DEFAULT
	}
	return *p.PromptID
}

var UpdatePromptRequest_PromptName_DEFAULT string

func (p *UpdatePromptRequest) GetPromptName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetPromptName() {
		return UpdatePromptRequest_PromptName_DEFAULT
	}
	return *p.PromptName
}

var UpdatePromptRequest_PromptDescription_DEFAULT string

func (p *UpdatePromptRequest) GetPromptDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetPromptDescription() {
		return UpdatePromptRequest_PromptDescription_DEFAULT
	}
	return *p.PromptDescription
}

var UpdatePromptRequest_Base_DEFAULT *base.Base

func (p *UpdatePromptRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return UpdatePromptRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *UpdatePromptRequest) SetPromptID(val *int64) {
	p.PromptID = val
}
func (p *UpdatePromptRequest) SetPromptName(val *string) {
	p.PromptName = val
}
func (p *UpdatePromptRequest) SetPromptDescription(val *string) {
	p.PromptDescription = val
}
func (p *UpdatePromptRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_UpdatePromptRequest = map[int16]string{
	1:   "prompt_id",
	11:  "prompt_name",
	12:  "prompt_description",
	255: "Base",
}

func (p *UpdatePromptRequest) IsSetPromptID() bool {
	return p.PromptID != nil
}

func (p *UpdatePromptRequest) IsSetPromptName() bool {
	return p.PromptName != nil
}

func (p *UpdatePromptRequest) IsSetPromptDescription() bool {
	return p.PromptDescription != nil
}

func (p *UpdatePromptRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdatePromptRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdatePromptRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdatePromptRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PromptID = _field
	return nil
}
func (p *UpdatePromptRequest) ReadField11(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PromptName = _field
	return nil
}
func (p *UpdatePromptRequest) ReadField12(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PromptDescription = _field
	return nil
}
func (p *UpdatePromptRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *UpdatePromptRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdatePromptRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdatePromptRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPromptID() {
		if err = oprot.WriteFieldBegin("prompt_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PromptID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *UpdatePromptRequest) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetPromptName() {
		if err = oprot.WriteFieldBegin("prompt_name", thrift.STRING, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PromptName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}
func (p *UpdatePromptRequest) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetPromptDescription() {
		if err = oprot.WriteFieldBegin("prompt_description", thrift.STRING, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PromptDescription); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}
func (p *UpdatePromptRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpdatePromptRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdatePromptRequest(%+v)", *p)

}

func (p *UpdatePromptRequest) DeepEqual(ano *UpdatePromptRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PromptID) {
		return false
	}
	if !p.Field11DeepEqual(ano.PromptName) {
		return false
	}
	if !p.Field12DeepEqual(ano.PromptDescription) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *UpdatePromptRequest) Field1DeepEqual(src *int64) bool {

	if p.PromptID == src {
		return true
	} else if p.PromptID == nil || src == nil {
		return false
	}
	if *p.PromptID != *src {
		return false
	}
	return true
}
func (p *UpdatePromptRequest) Field11DeepEqual(src *string) bool {

	if p.PromptName == src {
		return true
	} else if p.PromptName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PromptName, *src) != 0 {
		return false
	}
	return true
}
func (p *UpdatePromptRequest) Field12DeepEqual(src *string) bool {

	if p.PromptDescription == src {
		return true
	} else if p.PromptDescription == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PromptDescription, *src) != 0 {
		return false
	}
	return true
}
func (p *UpdatePromptRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type UpdatePromptResponse struct {
	BaseResp *base.BaseResp `thrift:"BaseResp,255,optional" frugal:"255,optional,base.BaseResp" form:"BaseResp" json:"BaseResp,omitempty" query:"BaseResp"`
}

func NewUpdatePromptResponse() *UpdatePromptResponse {
	return &UpdatePromptResponse{}
}

func (p *UpdatePromptResponse) InitDefault() {
}

var UpdatePromptResponse_BaseResp_DEFAULT *base.BaseResp

func (p *UpdatePromptResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return UpdatePromptResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *UpdatePromptResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_UpdatePromptResponse = map[int16]string{
	255: "BaseResp",
}

func (p *UpdatePromptResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *UpdatePromptResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdatePromptResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdatePromptResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *UpdatePromptResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdatePromptResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdatePromptResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseResp() {
		if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseResp.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpdatePromptResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdatePromptResponse(%+v)", *p)

}

func (p *UpdatePromptResponse) DeepEqual(ano *UpdatePromptResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *UpdatePromptResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type SaveDraftRequest struct {
	PromptID    *int64              `thrift:"prompt_id,1,optional" frugal:"1,optional,i64" json:"prompt_id" path:"prompt_id" `
	PromptDraft *prompt.PromptDraft `thrift:"prompt_draft,11,optional" frugal:"11,optional,prompt.PromptDraft" form:"prompt_draft" json:"prompt_draft,omitempty" query:"prompt_draft"`
	Base        *base.Base          `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewSaveDraftRequest() *SaveDraftRequest {
	return &SaveDraftRequest{}
}

func (p *SaveDraftRequest) InitDefault() {
}

var SaveDraftRequest_PromptID_DEFAULT int64

func (p *SaveDraftRequest) GetPromptID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetPromptID() {
		return SaveDraftRequest_PromptID_DEFAULT
	}
	return *p.PromptID
}

var SaveDraftRequest_PromptDraft_DEFAULT *prompt.PromptDraft

func (p *SaveDraftRequest) GetPromptDraft() (v *prompt.PromptDraft) {
	if p == nil {
		return
	}
	if !p.IsSetPromptDraft() {
		return SaveDraftRequest_PromptDraft_DEFAULT
	}
	return p.PromptDraft
}

var SaveDraftRequest_Base_DEFAULT *base.Base

func (p *SaveDraftRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return SaveDraftRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *SaveDraftRequest) SetPromptID(val *int64) {
	p.PromptID = val
}
func (p *SaveDraftRequest) SetPromptDraft(val *prompt.PromptDraft) {
	p.PromptDraft = val
}
func (p *SaveDraftRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_SaveDraftRequest = map[int16]string{
	1:   "prompt_id",
	11:  "prompt_draft",
	255: "Base",
}

func (p *SaveDraftRequest) IsSetPromptID() bool {
	return p.PromptID != nil
}

func (p *SaveDraftRequest) IsSetPromptDraft() bool {
	return p.PromptDraft != nil
}

func (p *SaveDraftRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *SaveDraftRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SaveDraftRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SaveDraftRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PromptID = _field
	return nil
}
func (p *SaveDraftRequest) ReadField11(iprot thrift.TProtocol) error {
	_field := prompt.NewPromptDraft()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.PromptDraft = _field
	return nil
}
func (p *SaveDraftRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *SaveDraftRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SaveDraftRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SaveDraftRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPromptID() {
		if err = oprot.WriteFieldBegin("prompt_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PromptID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *SaveDraftRequest) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetPromptDraft() {
		if err = oprot.WriteFieldBegin("prompt_draft", thrift.STRUCT, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.PromptDraft.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}
func (p *SaveDraftRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *SaveDraftRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaveDraftRequest(%+v)", *p)

}

func (p *SaveDraftRequest) DeepEqual(ano *SaveDraftRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PromptID) {
		return false
	}
	if !p.Field11DeepEqual(ano.PromptDraft) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *SaveDraftRequest) Field1DeepEqual(src *int64) bool {

	if p.PromptID == src {
		return true
	} else if p.PromptID == nil || src == nil {
		return false
	}
	if *p.PromptID != *src {
		return false
	}
	return true
}
func (p *SaveDraftRequest) Field11DeepEqual(src *prompt.PromptDraft) bool {

	if !p.PromptDraft.DeepEqual(src) {
		return false
	}
	return true
}
func (p *SaveDraftRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type SaveDraftResponse struct {
	DraftInfo *prompt.DraftInfo `thrift:"draft_info,1,optional" frugal:"1,optional,prompt.DraftInfo" form:"draft_info" json:"draft_info,omitempty" query:"draft_info"`
	BaseResp  *base.BaseResp    `thrift:"BaseResp,255,optional" frugal:"255,optional,base.BaseResp" form:"BaseResp" json:"BaseResp,omitempty" query:"BaseResp"`
}

func NewSaveDraftResponse() *SaveDraftResponse {
	return &SaveDraftResponse{}
}

func (p *SaveDraftResponse) InitDefault() {
}

var SaveDraftResponse_DraftInfo_DEFAULT *prompt.DraftInfo

func (p *SaveDraftResponse) GetDraftInfo() (v *prompt.DraftInfo) {
	if p == nil {
		return
	}
	if !p.IsSetDraftInfo() {
		return SaveDraftResponse_DraftInfo_DEFAULT
	}
	return p.DraftInfo
}

var SaveDraftResponse_BaseResp_DEFAULT *base.BaseResp

func (p *SaveDraftResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return SaveDraftResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *SaveDraftResponse) SetDraftInfo(val *prompt.DraftInfo) {
	p.DraftInfo = val
}
func (p *SaveDraftResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_SaveDraftResponse = map[int16]string{
	1:   "draft_info",
	255: "BaseResp",
}

func (p *SaveDraftResponse) IsSetDraftInfo() bool {
	return p.DraftInfo != nil
}

func (p *SaveDraftResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *SaveDraftResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SaveDraftResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SaveDraftResponse) ReadField1(iprot thrift.TProtocol) error {
	_field := prompt.NewDraftInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.DraftInfo = _field
	return nil
}
func (p *SaveDraftResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *SaveDraftResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SaveDraftResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SaveDraftResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDraftInfo() {
		if err = oprot.WriteFieldBegin("draft_info", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.DraftInfo.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *SaveDraftResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseResp() {
		if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseResp.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *SaveDraftResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SaveDraftResponse(%+v)", *p)

}

func (p *SaveDraftResponse) DeepEqual(ano *SaveDraftResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.DraftInfo) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *SaveDraftResponse) Field1DeepEqual(src *prompt.DraftInfo) bool {

	if !p.DraftInfo.DeepEqual(src) {
		return false
	}
	return true
}
func (p *SaveDraftResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type CommitDraftRequest struct {
	PromptID          *int64     `thrift:"prompt_id,1,optional" frugal:"1,optional,i64" json:"prompt_id" path:"prompt_id" `
	CommitVersion     *string    `thrift:"commit_version,11,optional" frugal:"11,optional,string" form:"commit_version" json:"commit_version,omitempty" query:"commit_version"`
	CommitDescription *string    `thrift:"commit_description,12,optional" frugal:"12,optional,string" form:"commit_description" json:"commit_description,omitempty" query:"commit_description"`
	Base              *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewCommitDraftRequest() *CommitDraftRequest {
	return &CommitDraftRequest{}
}

func (p *CommitDraftRequest) InitDefault() {
}

var CommitDraftRequest_PromptID_DEFAULT int64

func (p *CommitDraftRequest) GetPromptID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetPromptID() {
		return CommitDraftRequest_PromptID_DEFAULT
	}
	return *p.PromptID
}

var CommitDraftRequest_CommitVersion_DEFAULT string

func (p *CommitDraftRequest) GetCommitVersion() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetCommitVersion() {
		return CommitDraftRequest_CommitVersion_DEFAULT
	}
	return *p.CommitVersion
}

var CommitDraftRequest_CommitDescription_DEFAULT string

func (p *CommitDraftRequest) GetCommitDescription() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetCommitDescription() {
		return CommitDraftRequest_CommitDescription_DEFAULT
	}
	return *p.CommitDescription
}

var CommitDraftRequest_Base_DEFAULT *base.Base

func (p *CommitDraftRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return CommitDraftRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *CommitDraftRequest) SetPromptID(val *int64) {
	p.PromptID = val
}
func (p *CommitDraftRequest) SetCommitVersion(val *string) {
	p.CommitVersion = val
}
func (p *CommitDraftRequest) SetCommitDescription(val *string) {
	p.CommitDescription = val
}
func (p *CommitDraftRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_CommitDraftRequest = map[int16]string{
	1:   "prompt_id",
	11:  "commit_version",
	12:  "commit_description",
	255: "Base",
}

func (p *CommitDraftRequest) IsSetPromptID() bool {
	return p.PromptID != nil
}

func (p *CommitDraftRequest) IsSetCommitVersion() bool {
	return p.CommitVersion != nil
}

func (p *CommitDraftRequest) IsSetCommitDescription() bool {
	return p.CommitDescription != nil
}

func (p *CommitDraftRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *CommitDraftRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CommitDraftRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CommitDraftRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PromptID = _field
	return nil
}
func (p *CommitDraftRequest) ReadField11(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CommitVersion = _field
	return nil
}
func (p *CommitDraftRequest) ReadField12(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CommitDescription = _field
	return nil
}
func (p *CommitDraftRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *CommitDraftRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CommitDraftRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CommitDraftRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPromptID() {
		if err = oprot.WriteFieldBegin("prompt_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PromptID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CommitDraftRequest) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetCommitVersion() {
		if err = oprot.WriteFieldBegin("commit_version", thrift.STRING, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CommitVersion); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}
func (p *CommitDraftRequest) writeField12(oprot thrift.TProtocol) (err error) {
	if p.IsSetCommitDescription() {
		if err = oprot.WriteFieldBegin("commit_description", thrift.STRING, 12); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CommitDescription); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}
func (p *CommitDraftRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CommitDraftRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommitDraftRequest(%+v)", *p)

}

func (p *CommitDraftRequest) DeepEqual(ano *CommitDraftRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PromptID) {
		return false
	}
	if !p.Field11DeepEqual(ano.CommitVersion) {
		return false
	}
	if !p.Field12DeepEqual(ano.CommitDescription) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *CommitDraftRequest) Field1DeepEqual(src *int64) bool {

	if p.PromptID == src {
		return true
	} else if p.PromptID == nil || src == nil {
		return false
	}
	if *p.PromptID != *src {
		return false
	}
	return true
}
func (p *CommitDraftRequest) Field11DeepEqual(src *string) bool {

	if p.CommitVersion == src {
		return true
	} else if p.CommitVersion == nil || src == nil {
		return false
	}
	if strings.Compare(*p.CommitVersion, *src) != 0 {
		return false
	}
	return true
}
func (p *CommitDraftRequest) Field12DeepEqual(src *string) bool {

	if p.CommitDescription == src {
		return true
	} else if p.CommitDescription == nil || src == nil {
		return false
	}
	if strings.Compare(*p.CommitDescription, *src) != 0 {
		return false
	}
	return true
}
func (p *CommitDraftRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type CommitDraftResponse struct {
	BaseResp *base.BaseResp `thrift:"BaseResp,255,optional" frugal:"255,optional,base.BaseResp" form:"BaseResp" json:"BaseResp,omitempty" query:"BaseResp"`
}

func NewCommitDraftResponse() *CommitDraftResponse {
	return &CommitDraftResponse{}
}

func (p *CommitDraftResponse) InitDefault() {
}

var CommitDraftResponse_BaseResp_DEFAULT *base.BaseResp

func (p *CommitDraftResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return CommitDraftResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CommitDraftResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_CommitDraftResponse = map[int16]string{
	255: "BaseResp",
}

func (p *CommitDraftResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CommitDraftResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CommitDraftResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CommitDraftResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *CommitDraftResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CommitDraftResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CommitDraftResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseResp() {
		if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseResp.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CommitDraftResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CommitDraftResponse(%+v)", *p)

}

func (p *CommitDraftResponse) DeepEqual(ano *CommitDraftResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *CommitDraftResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

// 搜索Prompt提交版本
type ListCommitRequest struct {
	PromptID  *int64     `thrift:"prompt_id,1,optional" frugal:"1,optional,i64" json:"prompt_id" path:"prompt_id" `
	PageSize  *int32     `thrift:"page_size,127,optional" frugal:"127,optional,i32" form:"page_size" json:"page_size,omitempty" query:"page_size"`
	PageToken *string    `thrift:"page_token,128,optional" frugal:"128,optional,string" form:"page_token" json:"page_token,omitempty" query:"page_token"`
	Asc       *bool      `thrift:"asc,129,optional" frugal:"129,optional,bool" form:"asc" json:"asc,omitempty" query:"asc"`
	Base      *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewListCommitRequest() *ListCommitRequest {
	return &ListCommitRequest{}
}

func (p *ListCommitRequest) InitDefault() {
}

var ListCommitRequest_PromptID_DEFAULT int64

func (p *ListCommitRequest) GetPromptID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetPromptID() {
		return ListCommitRequest_PromptID_DEFAULT
	}
	return *p.PromptID
}

var ListCommitRequest_PageSize_DEFAULT int32

func (p *ListCommitRequest) GetPageSize() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageSize() {
		return ListCommitRequest_PageSize_DEFAULT
	}
	return *p.PageSize
}

var ListCommitRequest_PageToken_DEFAULT string

func (p *ListCommitRequest) GetPageToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetPageToken() {
		return ListCommitRequest_PageToken_DEFAULT
	}
	return *p.PageToken
}

var ListCommitRequest_Asc_DEFAULT bool

func (p *ListCommitRequest) GetAsc() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetAsc() {
		return ListCommitRequest_Asc_DEFAULT
	}
	return *p.Asc
}

var ListCommitRequest_Base_DEFAULT *base.Base

func (p *ListCommitRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return ListCommitRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ListCommitRequest) SetPromptID(val *int64) {
	p.PromptID = val
}
func (p *ListCommitRequest) SetPageSize(val *int32) {
	p.PageSize = val
}
func (p *ListCommitRequest) SetPageToken(val *string) {
	p.PageToken = val
}
func (p *ListCommitRequest) SetAsc(val *bool) {
	p.Asc = val
}
func (p *ListCommitRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListCommitRequest = map[int16]string{
	1:   "prompt_id",
	127: "page_size",
	128: "page_token",
	129: "asc",
	255: "Base",
}

func (p *ListCommitRequest) IsSetPromptID() bool {
	return p.PromptID != nil
}

func (p *ListCommitRequest) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *ListCommitRequest) IsSetPageToken() bool {
	return p.PageToken != nil
}

func (p *ListCommitRequest) IsSetAsc() bool {
	return p.Asc != nil
}

func (p *ListCommitRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListCommitRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 127:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField127(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 128:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField128(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 129:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField129(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListCommitRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListCommitRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PromptID = _field
	return nil
}
func (p *ListCommitRequest) ReadField127(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageSize = _field
	return nil
}
func (p *ListCommitRequest) ReadField128(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageToken = _field
	return nil
}
func (p *ListCommitRequest) ReadField129(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Asc = _field
	return nil
}
func (p *ListCommitRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *ListCommitRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListCommitRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField127(oprot); err != nil {
			fieldId = 127
			goto WriteFieldError
		}
		if err = p.writeField128(oprot); err != nil {
			fieldId = 128
			goto WriteFieldError
		}
		if err = p.writeField129(oprot); err != nil {
			fieldId = 129
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListCommitRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPromptID() {
		if err = oprot.WriteFieldBegin("prompt_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PromptID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListCommitRequest) writeField127(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("page_size", thrift.I32, 127); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 127 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 127 end error: ", p), err)
}
func (p *ListCommitRequest) writeField128(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageToken() {
		if err = oprot.WriteFieldBegin("page_token", thrift.STRING, 128); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PageToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 128 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 128 end error: ", p), err)
}
func (p *ListCommitRequest) writeField129(oprot thrift.TProtocol) (err error) {
	if p.IsSetAsc() {
		if err = oprot.WriteFieldBegin("asc", thrift.BOOL, 129); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.Asc); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 129 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 129 end error: ", p), err)
}
func (p *ListCommitRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListCommitRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListCommitRequest(%+v)", *p)

}

func (p *ListCommitRequest) DeepEqual(ano *ListCommitRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PromptID) {
		return false
	}
	if !p.Field127DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field128DeepEqual(ano.PageToken) {
		return false
	}
	if !p.Field129DeepEqual(ano.Asc) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListCommitRequest) Field1DeepEqual(src *int64) bool {

	if p.PromptID == src {
		return true
	} else if p.PromptID == nil || src == nil {
		return false
	}
	if *p.PromptID != *src {
		return false
	}
	return true
}
func (p *ListCommitRequest) Field127DeepEqual(src *int32) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}
func (p *ListCommitRequest) Field128DeepEqual(src *string) bool {

	if p.PageToken == src {
		return true
	} else if p.PageToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PageToken, *src) != 0 {
		return false
	}
	return true
}
func (p *ListCommitRequest) Field129DeepEqual(src *bool) bool {

	if p.Asc == src {
		return true
	} else if p.Asc == nil || src == nil {
		return false
	}
	if *p.Asc != *src {
		return false
	}
	return true
}
func (p *ListCommitRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ListCommitResponse struct {
	PromptCommitInfos []*prompt.CommitInfo   `thrift:"prompt_commit_infos,1,optional" frugal:"1,optional,list<prompt.CommitInfo>" form:"prompt_commit_infos" json:"prompt_commit_infos,omitempty" query:"prompt_commit_infos"`
	Users             []*user.UserInfoDetail `thrift:"users,11,optional" frugal:"11,optional,list<user.UserInfoDetail>" form:"users" json:"users,omitempty" query:"users"`
	HasMore           *bool                  `thrift:"has_more,127,optional" frugal:"127,optional,bool" form:"has_more" json:"has_more,omitempty" query:"has_more"`
	NextPageToken     *string                `thrift:"next_page_token,128,optional" frugal:"128,optional,string" form:"next_page_token" json:"next_page_token,omitempty" query:"next_page_token"`
	BaseResp          *base.BaseResp         `thrift:"BaseResp,255,optional" frugal:"255,optional,base.BaseResp" form:"BaseResp" json:"BaseResp,omitempty" query:"BaseResp"`
}

func NewListCommitResponse() *ListCommitResponse {
	return &ListCommitResponse{}
}

func (p *ListCommitResponse) InitDefault() {
}

var ListCommitResponse_PromptCommitInfos_DEFAULT []*prompt.CommitInfo

func (p *ListCommitResponse) GetPromptCommitInfos() (v []*prompt.CommitInfo) {
	if p == nil {
		return
	}
	if !p.IsSetPromptCommitInfos() {
		return ListCommitResponse_PromptCommitInfos_DEFAULT
	}
	return p.PromptCommitInfos
}

var ListCommitResponse_Users_DEFAULT []*user.UserInfoDetail

func (p *ListCommitResponse) GetUsers() (v []*user.UserInfoDetail) {
	if p == nil {
		return
	}
	if !p.IsSetUsers() {
		return ListCommitResponse_Users_DEFAULT
	}
	return p.Users
}

var ListCommitResponse_HasMore_DEFAULT bool

func (p *ListCommitResponse) GetHasMore() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetHasMore() {
		return ListCommitResponse_HasMore_DEFAULT
	}
	return *p.HasMore
}

var ListCommitResponse_NextPageToken_DEFAULT string

func (p *ListCommitResponse) GetNextPageToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetNextPageToken() {
		return ListCommitResponse_NextPageToken_DEFAULT
	}
	return *p.NextPageToken
}

var ListCommitResponse_BaseResp_DEFAULT *base.BaseResp

func (p *ListCommitResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return ListCommitResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ListCommitResponse) SetPromptCommitInfos(val []*prompt.CommitInfo) {
	p.PromptCommitInfos = val
}
func (p *ListCommitResponse) SetUsers(val []*user.UserInfoDetail) {
	p.Users = val
}
func (p *ListCommitResponse) SetHasMore(val *bool) {
	p.HasMore = val
}
func (p *ListCommitResponse) SetNextPageToken(val *string) {
	p.NextPageToken = val
}
func (p *ListCommitResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_ListCommitResponse = map[int16]string{
	1:   "prompt_commit_infos",
	11:  "users",
	127: "has_more",
	128: "next_page_token",
	255: "BaseResp",
}

func (p *ListCommitResponse) IsSetPromptCommitInfos() bool {
	return p.PromptCommitInfos != nil
}

func (p *ListCommitResponse) IsSetUsers() bool {
	return p.Users != nil
}

func (p *ListCommitResponse) IsSetHasMore() bool {
	return p.HasMore != nil
}

func (p *ListCommitResponse) IsSetNextPageToken() bool {
	return p.NextPageToken != nil
}

func (p *ListCommitResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ListCommitResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 127:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField127(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 128:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField128(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListCommitResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ListCommitResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*prompt.CommitInfo, 0, size)
	values := make([]prompt.CommitInfo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.PromptCommitInfos = _field
	return nil
}
func (p *ListCommitResponse) ReadField11(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*user.UserInfoDetail, 0, size)
	values := make([]user.UserInfoDetail, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Users = _field
	return nil
}
func (p *ListCommitResponse) ReadField127(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.HasMore = _field
	return nil
}
func (p *ListCommitResponse) ReadField128(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.NextPageToken = _field
	return nil
}
func (p *ListCommitResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *ListCommitResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListCommitResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField127(oprot); err != nil {
			fieldId = 127
			goto WriteFieldError
		}
		if err = p.writeField128(oprot); err != nil {
			fieldId = 128
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListCommitResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPromptCommitInfos() {
		if err = oprot.WriteFieldBegin("prompt_commit_infos", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.PromptCommitInfos)); err != nil {
			return err
		}
		for _, v := range p.PromptCommitInfos {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListCommitResponse) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetUsers() {
		if err = oprot.WriteFieldBegin("users", thrift.LIST, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Users)); err != nil {
			return err
		}
		for _, v := range p.Users {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}
func (p *ListCommitResponse) writeField127(oprot thrift.TProtocol) (err error) {
	if p.IsSetHasMore() {
		if err = oprot.WriteFieldBegin("has_more", thrift.BOOL, 127); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.HasMore); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 127 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 127 end error: ", p), err)
}
func (p *ListCommitResponse) writeField128(oprot thrift.TProtocol) (err error) {
	if p.IsSetNextPageToken() {
		if err = oprot.WriteFieldBegin("next_page_token", thrift.STRING, 128); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.NextPageToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 128 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 128 end error: ", p), err)
}
func (p *ListCommitResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseResp() {
		if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseResp.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListCommitResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListCommitResponse(%+v)", *p)

}

func (p *ListCommitResponse) DeepEqual(ano *ListCommitResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PromptCommitInfos) {
		return false
	}
	if !p.Field11DeepEqual(ano.Users) {
		return false
	}
	if !p.Field127DeepEqual(ano.HasMore) {
		return false
	}
	if !p.Field128DeepEqual(ano.NextPageToken) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *ListCommitResponse) Field1DeepEqual(src []*prompt.CommitInfo) bool {

	if len(p.PromptCommitInfos) != len(src) {
		return false
	}
	for i, v := range p.PromptCommitInfos {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListCommitResponse) Field11DeepEqual(src []*user.UserInfoDetail) bool {

	if len(p.Users) != len(src) {
		return false
	}
	for i, v := range p.Users {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListCommitResponse) Field127DeepEqual(src *bool) bool {

	if p.HasMore == src {
		return true
	} else if p.HasMore == nil || src == nil {
		return false
	}
	if *p.HasMore != *src {
		return false
	}
	return true
}
func (p *ListCommitResponse) Field128DeepEqual(src *string) bool {

	if p.NextPageToken == src {
		return true
	} else if p.NextPageToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.NextPageToken, *src) != 0 {
		return false
	}
	return true
}
func (p *ListCommitResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type RevertDraftFromCommitRequest struct {
	PromptID                   *int64     `thrift:"prompt_id,1,optional" frugal:"1,optional,i64" json:"prompt_id" path:"prompt_id" `
	CommitVersionRevertingFrom *string    `thrift:"commit_version_reverting_from,2,optional" frugal:"2,optional,string" form:"commit_version_reverting_from" json:"commit_version_reverting_from,omitempty" query:"commit_version_reverting_from"`
	Base                       *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewRevertDraftFromCommitRequest() *RevertDraftFromCommitRequest {
	return &RevertDraftFromCommitRequest{}
}

func (p *RevertDraftFromCommitRequest) InitDefault() {
}

var RevertDraftFromCommitRequest_PromptID_DEFAULT int64

func (p *RevertDraftFromCommitRequest) GetPromptID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetPromptID() {
		return RevertDraftFromCommitRequest_PromptID_DEFAULT
	}
	return *p.PromptID
}

var RevertDraftFromCommitRequest_CommitVersionRevertingFrom_DEFAULT string

func (p *RevertDraftFromCommitRequest) GetCommitVersionRevertingFrom() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetCommitVersionRevertingFrom() {
		return RevertDraftFromCommitRequest_CommitVersionRevertingFrom_DEFAULT
	}
	return *p.CommitVersionRevertingFrom
}

var RevertDraftFromCommitRequest_Base_DEFAULT *base.Base

func (p *RevertDraftFromCommitRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return RevertDraftFromCommitRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *RevertDraftFromCommitRequest) SetPromptID(val *int64) {
	p.PromptID = val
}
func (p *RevertDraftFromCommitRequest) SetCommitVersionRevertingFrom(val *string) {
	p.CommitVersionRevertingFrom = val
}
func (p *RevertDraftFromCommitRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_RevertDraftFromCommitRequest = map[int16]string{
	1:   "prompt_id",
	2:   "commit_version_reverting_from",
	255: "Base",
}

func (p *RevertDraftFromCommitRequest) IsSetPromptID() bool {
	return p.PromptID != nil
}

func (p *RevertDraftFromCommitRequest) IsSetCommitVersionRevertingFrom() bool {
	return p.CommitVersionRevertingFrom != nil
}

func (p *RevertDraftFromCommitRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *RevertDraftFromCommitRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RevertDraftFromCommitRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RevertDraftFromCommitRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PromptID = _field
	return nil
}
func (p *RevertDraftFromCommitRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CommitVersionRevertingFrom = _field
	return nil
}
func (p *RevertDraftFromCommitRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *RevertDraftFromCommitRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RevertDraftFromCommitRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RevertDraftFromCommitRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPromptID() {
		if err = oprot.WriteFieldBegin("prompt_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.PromptID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *RevertDraftFromCommitRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCommitVersionRevertingFrom() {
		if err = oprot.WriteFieldBegin("commit_version_reverting_from", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CommitVersionRevertingFrom); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *RevertDraftFromCommitRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *RevertDraftFromCommitRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RevertDraftFromCommitRequest(%+v)", *p)

}

func (p *RevertDraftFromCommitRequest) DeepEqual(ano *RevertDraftFromCommitRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PromptID) {
		return false
	}
	if !p.Field2DeepEqual(ano.CommitVersionRevertingFrom) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *RevertDraftFromCommitRequest) Field1DeepEqual(src *int64) bool {

	if p.PromptID == src {
		return true
	} else if p.PromptID == nil || src == nil {
		return false
	}
	if *p.PromptID != *src {
		return false
	}
	return true
}
func (p *RevertDraftFromCommitRequest) Field2DeepEqual(src *string) bool {

	if p.CommitVersionRevertingFrom == src {
		return true
	} else if p.CommitVersionRevertingFrom == nil || src == nil {
		return false
	}
	if strings.Compare(*p.CommitVersionRevertingFrom, *src) != 0 {
		return false
	}
	return true
}
func (p *RevertDraftFromCommitRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type RevertDraftFromCommitResponse struct {
	BaseResp *base.BaseResp `thrift:"BaseResp,255,optional" frugal:"255,optional,base.BaseResp" form:"BaseResp" json:"BaseResp,omitempty" query:"BaseResp"`
}

func NewRevertDraftFromCommitResponse() *RevertDraftFromCommitResponse {
	return &RevertDraftFromCommitResponse{}
}

func (p *RevertDraftFromCommitResponse) InitDefault() {
}

var RevertDraftFromCommitResponse_BaseResp_DEFAULT *base.BaseResp

func (p *RevertDraftFromCommitResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return RevertDraftFromCommitResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *RevertDraftFromCommitResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_RevertDraftFromCommitResponse = map[int16]string{
	255: "BaseResp",
}

func (p *RevertDraftFromCommitResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *RevertDraftFromCommitResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RevertDraftFromCommitResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RevertDraftFromCommitResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *RevertDraftFromCommitResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RevertDraftFromCommitResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RevertDraftFromCommitResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseResp() {
		if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseResp.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *RevertDraftFromCommitResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RevertDraftFromCommitResponse(%+v)", *p)

}

func (p *RevertDraftFromCommitResponse) DeepEqual(ano *RevertDraftFromCommitResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *RevertDraftFromCommitResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type PromptManageService interface {
	// --------------- Prompt管理 --------------- //
	// 增
	CreatePrompt(ctx context.Context, request *CreatePromptRequest) (r *CreatePromptResponse, err error)

	ClonePrompt(ctx context.Context, request *ClonePromptRequest) (r *ClonePromptResponse, err error)
	// 删
	DeletePrompt(ctx context.Context, request *DeletePromptRequest) (r *DeletePromptResponse, err error)
	// 查
	GetPrompt(ctx context.Context, request *GetPromptRequest) (r *GetPromptResponse, err error)

	BatchGetPrompt(ctx context.Context, request *BatchGetPromptRequest) (r *BatchGetPromptResponse, err error)

	ListPrompt(ctx context.Context, request *ListPromptRequest) (r *ListPromptResponse, err error)
	// 改
	UpdatePrompt(ctx context.Context, request *UpdatePromptRequest) (r *UpdatePromptResponse, err error)

	SaveDraft(ctx context.Context, request *SaveDraftRequest) (r *SaveDraftResponse, err error)
	// --------------- Prompt版本管理 --------------- //
	ListCommit(ctx context.Context, request *ListCommitRequest) (r *ListCommitResponse, err error)

	CommitDraft(ctx context.Context, request *CommitDraftRequest) (r *CommitDraftResponse, err error)

	RevertDraftFromCommit(ctx context.Context, request *RevertDraftFromCommitRequest) (r *RevertDraftFromCommitResponse, err error)
}

type PromptManageServiceClient struct {
	c thrift.TClient
}

func NewPromptManageServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *PromptManageServiceClient {
	return &PromptManageServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewPromptManageServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *PromptManageServiceClient {
	return &PromptManageServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewPromptManageServiceClient(c thrift.TClient) *PromptManageServiceClient {
	return &PromptManageServiceClient{
		c: c,
	}
}

func (p *PromptManageServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *PromptManageServiceClient) CreatePrompt(ctx context.Context, request *CreatePromptRequest) (r *CreatePromptResponse, err error) {
	var _args PromptManageServiceCreatePromptArgs
	_args.Request = request
	var _result PromptManageServiceCreatePromptResult
	if err = p.Client_().Call(ctx, "CreatePrompt", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *PromptManageServiceClient) ClonePrompt(ctx context.Context, request *ClonePromptRequest) (r *ClonePromptResponse, err error) {
	var _args PromptManageServiceClonePromptArgs
	_args.Request = request
	var _result PromptManageServiceClonePromptResult
	if err = p.Client_().Call(ctx, "ClonePrompt", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *PromptManageServiceClient) DeletePrompt(ctx context.Context, request *DeletePromptRequest) (r *DeletePromptResponse, err error) {
	var _args PromptManageServiceDeletePromptArgs
	_args.Request = request
	var _result PromptManageServiceDeletePromptResult
	if err = p.Client_().Call(ctx, "DeletePrompt", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *PromptManageServiceClient) GetPrompt(ctx context.Context, request *GetPromptRequest) (r *GetPromptResponse, err error) {
	var _args PromptManageServiceGetPromptArgs
	_args.Request = request
	var _result PromptManageServiceGetPromptResult
	if err = p.Client_().Call(ctx, "GetPrompt", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *PromptManageServiceClient) BatchGetPrompt(ctx context.Context, request *BatchGetPromptRequest) (r *BatchGetPromptResponse, err error) {
	var _args PromptManageServiceBatchGetPromptArgs
	_args.Request = request
	var _result PromptManageServiceBatchGetPromptResult
	if err = p.Client_().Call(ctx, "BatchGetPrompt", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *PromptManageServiceClient) ListPrompt(ctx context.Context, request *ListPromptRequest) (r *ListPromptResponse, err error) {
	var _args PromptManageServiceListPromptArgs
	_args.Request = request
	var _result PromptManageServiceListPromptResult
	if err = p.Client_().Call(ctx, "ListPrompt", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *PromptManageServiceClient) UpdatePrompt(ctx context.Context, request *UpdatePromptRequest) (r *UpdatePromptResponse, err error) {
	var _args PromptManageServiceUpdatePromptArgs
	_args.Request = request
	var _result PromptManageServiceUpdatePromptResult
	if err = p.Client_().Call(ctx, "UpdatePrompt", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *PromptManageServiceClient) SaveDraft(ctx context.Context, request *SaveDraftRequest) (r *SaveDraftResponse, err error) {
	var _args PromptManageServiceSaveDraftArgs
	_args.Request = request
	var _result PromptManageServiceSaveDraftResult
	if err = p.Client_().Call(ctx, "SaveDraft", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *PromptManageServiceClient) ListCommit(ctx context.Context, request *ListCommitRequest) (r *ListCommitResponse, err error) {
	var _args PromptManageServiceListCommitArgs
	_args.Request = request
	var _result PromptManageServiceListCommitResult
	if err = p.Client_().Call(ctx, "ListCommit", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *PromptManageServiceClient) CommitDraft(ctx context.Context, request *CommitDraftRequest) (r *CommitDraftResponse, err error) {
	var _args PromptManageServiceCommitDraftArgs
	_args.Request = request
	var _result PromptManageServiceCommitDraftResult
	if err = p.Client_().Call(ctx, "CommitDraft", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *PromptManageServiceClient) RevertDraftFromCommit(ctx context.Context, request *RevertDraftFromCommitRequest) (r *RevertDraftFromCommitResponse, err error) {
	var _args PromptManageServiceRevertDraftFromCommitArgs
	_args.Request = request
	var _result PromptManageServiceRevertDraftFromCommitResult
	if err = p.Client_().Call(ctx, "RevertDraftFromCommit", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type PromptManageServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      PromptManageService
}

func (p *PromptManageServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *PromptManageServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *PromptManageServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewPromptManageServiceProcessor(handler PromptManageService) *PromptManageServiceProcessor {
	self := &PromptManageServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("CreatePrompt", &promptManageServiceProcessorCreatePrompt{handler: handler})
	self.AddToProcessorMap("ClonePrompt", &promptManageServiceProcessorClonePrompt{handler: handler})
	self.AddToProcessorMap("DeletePrompt", &promptManageServiceProcessorDeletePrompt{handler: handler})
	self.AddToProcessorMap("GetPrompt", &promptManageServiceProcessorGetPrompt{handler: handler})
	self.AddToProcessorMap("BatchGetPrompt", &promptManageServiceProcessorBatchGetPrompt{handler: handler})
	self.AddToProcessorMap("ListPrompt", &promptManageServiceProcessorListPrompt{handler: handler})
	self.AddToProcessorMap("UpdatePrompt", &promptManageServiceProcessorUpdatePrompt{handler: handler})
	self.AddToProcessorMap("SaveDraft", &promptManageServiceProcessorSaveDraft{handler: handler})
	self.AddToProcessorMap("ListCommit", &promptManageServiceProcessorListCommit{handler: handler})
	self.AddToProcessorMap("CommitDraft", &promptManageServiceProcessorCommitDraft{handler: handler})
	self.AddToProcessorMap("RevertDraftFromCommit", &promptManageServiceProcessorRevertDraftFromCommit{handler: handler})
	return self
}
func (p *PromptManageServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type promptManageServiceProcessorCreatePrompt struct {
	handler PromptManageService
}

func (p *promptManageServiceProcessorCreatePrompt) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PromptManageServiceCreatePromptArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreatePrompt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PromptManageServiceCreatePromptResult{}
	var retval *CreatePromptResponse
	if retval, err2 = p.handler.CreatePrompt(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreatePrompt: "+err2.Error())
		oprot.WriteMessageBegin("CreatePrompt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreatePrompt", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type promptManageServiceProcessorClonePrompt struct {
	handler PromptManageService
}

func (p *promptManageServiceProcessorClonePrompt) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PromptManageServiceClonePromptArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ClonePrompt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PromptManageServiceClonePromptResult{}
	var retval *ClonePromptResponse
	if retval, err2 = p.handler.ClonePrompt(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ClonePrompt: "+err2.Error())
		oprot.WriteMessageBegin("ClonePrompt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ClonePrompt", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type promptManageServiceProcessorDeletePrompt struct {
	handler PromptManageService
}

func (p *promptManageServiceProcessorDeletePrompt) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PromptManageServiceDeletePromptArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeletePrompt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PromptManageServiceDeletePromptResult{}
	var retval *DeletePromptResponse
	if retval, err2 = p.handler.DeletePrompt(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeletePrompt: "+err2.Error())
		oprot.WriteMessageBegin("DeletePrompt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeletePrompt", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type promptManageServiceProcessorGetPrompt struct {
	handler PromptManageService
}

func (p *promptManageServiceProcessorGetPrompt) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PromptManageServiceGetPromptArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetPrompt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PromptManageServiceGetPromptResult{}
	var retval *GetPromptResponse
	if retval, err2 = p.handler.GetPrompt(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetPrompt: "+err2.Error())
		oprot.WriteMessageBegin("GetPrompt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetPrompt", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type promptManageServiceProcessorBatchGetPrompt struct {
	handler PromptManageService
}

func (p *promptManageServiceProcessorBatchGetPrompt) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PromptManageServiceBatchGetPromptArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BatchGetPrompt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PromptManageServiceBatchGetPromptResult{}
	var retval *BatchGetPromptResponse
	if retval, err2 = p.handler.BatchGetPrompt(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BatchGetPrompt: "+err2.Error())
		oprot.WriteMessageBegin("BatchGetPrompt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BatchGetPrompt", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type promptManageServiceProcessorListPrompt struct {
	handler PromptManageService
}

func (p *promptManageServiceProcessorListPrompt) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PromptManageServiceListPromptArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListPrompt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PromptManageServiceListPromptResult{}
	var retval *ListPromptResponse
	if retval, err2 = p.handler.ListPrompt(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListPrompt: "+err2.Error())
		oprot.WriteMessageBegin("ListPrompt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListPrompt", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type promptManageServiceProcessorUpdatePrompt struct {
	handler PromptManageService
}

func (p *promptManageServiceProcessorUpdatePrompt) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PromptManageServiceUpdatePromptArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdatePrompt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PromptManageServiceUpdatePromptResult{}
	var retval *UpdatePromptResponse
	if retval, err2 = p.handler.UpdatePrompt(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdatePrompt: "+err2.Error())
		oprot.WriteMessageBegin("UpdatePrompt", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdatePrompt", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type promptManageServiceProcessorSaveDraft struct {
	handler PromptManageService
}

func (p *promptManageServiceProcessorSaveDraft) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PromptManageServiceSaveDraftArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SaveDraft", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PromptManageServiceSaveDraftResult{}
	var retval *SaveDraftResponse
	if retval, err2 = p.handler.SaveDraft(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SaveDraft: "+err2.Error())
		oprot.WriteMessageBegin("SaveDraft", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("SaveDraft", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type promptManageServiceProcessorListCommit struct {
	handler PromptManageService
}

func (p *promptManageServiceProcessorListCommit) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PromptManageServiceListCommitArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListCommit", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PromptManageServiceListCommitResult{}
	var retval *ListCommitResponse
	if retval, err2 = p.handler.ListCommit(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListCommit: "+err2.Error())
		oprot.WriteMessageBegin("ListCommit", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListCommit", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type promptManageServiceProcessorCommitDraft struct {
	handler PromptManageService
}

func (p *promptManageServiceProcessorCommitDraft) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PromptManageServiceCommitDraftArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CommitDraft", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PromptManageServiceCommitDraftResult{}
	var retval *CommitDraftResponse
	if retval, err2 = p.handler.CommitDraft(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CommitDraft: "+err2.Error())
		oprot.WriteMessageBegin("CommitDraft", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CommitDraft", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type promptManageServiceProcessorRevertDraftFromCommit struct {
	handler PromptManageService
}

func (p *promptManageServiceProcessorRevertDraftFromCommit) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PromptManageServiceRevertDraftFromCommitArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("RevertDraftFromCommit", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PromptManageServiceRevertDraftFromCommitResult{}
	var retval *RevertDraftFromCommitResponse
	if retval, err2 = p.handler.RevertDraftFromCommit(ctx, args.Request); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing RevertDraftFromCommit: "+err2.Error())
		oprot.WriteMessageBegin("RevertDraftFromCommit", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("RevertDraftFromCommit", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type PromptManageServiceCreatePromptArgs struct {
	Request *CreatePromptRequest `thrift:"request,1" frugal:"1,default,CreatePromptRequest"`
}

func NewPromptManageServiceCreatePromptArgs() *PromptManageServiceCreatePromptArgs {
	return &PromptManageServiceCreatePromptArgs{}
}

func (p *PromptManageServiceCreatePromptArgs) InitDefault() {
}

var PromptManageServiceCreatePromptArgs_Request_DEFAULT *CreatePromptRequest

func (p *PromptManageServiceCreatePromptArgs) GetRequest() (v *CreatePromptRequest) {
	if p == nil {
		return
	}
	if !p.IsSetRequest() {
		return PromptManageServiceCreatePromptArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *PromptManageServiceCreatePromptArgs) SetRequest(val *CreatePromptRequest) {
	p.Request = val
}

var fieldIDToName_PromptManageServiceCreatePromptArgs = map[int16]string{
	1: "request",
}

func (p *PromptManageServiceCreatePromptArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *PromptManageServiceCreatePromptArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PromptManageServiceCreatePromptArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PromptManageServiceCreatePromptArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreatePromptRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *PromptManageServiceCreatePromptArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreatePrompt_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PromptManageServiceCreatePromptArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PromptManageServiceCreatePromptArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PromptManageServiceCreatePromptArgs(%+v)", *p)

}

func (p *PromptManageServiceCreatePromptArgs) DeepEqual(ano *PromptManageServiceCreatePromptArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *PromptManageServiceCreatePromptArgs) Field1DeepEqual(src *CreatePromptRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type PromptManageServiceCreatePromptResult struct {
	Success *CreatePromptResponse `thrift:"success,0,optional" frugal:"0,optional,CreatePromptResponse"`
}

func NewPromptManageServiceCreatePromptResult() *PromptManageServiceCreatePromptResult {
	return &PromptManageServiceCreatePromptResult{}
}

func (p *PromptManageServiceCreatePromptResult) InitDefault() {
}

var PromptManageServiceCreatePromptResult_Success_DEFAULT *CreatePromptResponse

func (p *PromptManageServiceCreatePromptResult) GetSuccess() (v *CreatePromptResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return PromptManageServiceCreatePromptResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PromptManageServiceCreatePromptResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreatePromptResponse)
}

var fieldIDToName_PromptManageServiceCreatePromptResult = map[int16]string{
	0: "success",
}

func (p *PromptManageServiceCreatePromptResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PromptManageServiceCreatePromptResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PromptManageServiceCreatePromptResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PromptManageServiceCreatePromptResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreatePromptResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *PromptManageServiceCreatePromptResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreatePrompt_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PromptManageServiceCreatePromptResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PromptManageServiceCreatePromptResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PromptManageServiceCreatePromptResult(%+v)", *p)

}

func (p *PromptManageServiceCreatePromptResult) DeepEqual(ano *PromptManageServiceCreatePromptResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PromptManageServiceCreatePromptResult) Field0DeepEqual(src *CreatePromptResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type PromptManageServiceClonePromptArgs struct {
	Request *ClonePromptRequest `thrift:"request,1" frugal:"1,default,ClonePromptRequest"`
}

func NewPromptManageServiceClonePromptArgs() *PromptManageServiceClonePromptArgs {
	return &PromptManageServiceClonePromptArgs{}
}

func (p *PromptManageServiceClonePromptArgs) InitDefault() {
}

var PromptManageServiceClonePromptArgs_Request_DEFAULT *ClonePromptRequest

func (p *PromptManageServiceClonePromptArgs) GetRequest() (v *ClonePromptRequest) {
	if p == nil {
		return
	}
	if !p.IsSetRequest() {
		return PromptManageServiceClonePromptArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *PromptManageServiceClonePromptArgs) SetRequest(val *ClonePromptRequest) {
	p.Request = val
}

var fieldIDToName_PromptManageServiceClonePromptArgs = map[int16]string{
	1: "request",
}

func (p *PromptManageServiceClonePromptArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *PromptManageServiceClonePromptArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PromptManageServiceClonePromptArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PromptManageServiceClonePromptArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewClonePromptRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *PromptManageServiceClonePromptArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ClonePrompt_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PromptManageServiceClonePromptArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PromptManageServiceClonePromptArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PromptManageServiceClonePromptArgs(%+v)", *p)

}

func (p *PromptManageServiceClonePromptArgs) DeepEqual(ano *PromptManageServiceClonePromptArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *PromptManageServiceClonePromptArgs) Field1DeepEqual(src *ClonePromptRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type PromptManageServiceClonePromptResult struct {
	Success *ClonePromptResponse `thrift:"success,0,optional" frugal:"0,optional,ClonePromptResponse"`
}

func NewPromptManageServiceClonePromptResult() *PromptManageServiceClonePromptResult {
	return &PromptManageServiceClonePromptResult{}
}

func (p *PromptManageServiceClonePromptResult) InitDefault() {
}

var PromptManageServiceClonePromptResult_Success_DEFAULT *ClonePromptResponse

func (p *PromptManageServiceClonePromptResult) GetSuccess() (v *ClonePromptResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return PromptManageServiceClonePromptResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PromptManageServiceClonePromptResult) SetSuccess(x interface{}) {
	p.Success = x.(*ClonePromptResponse)
}

var fieldIDToName_PromptManageServiceClonePromptResult = map[int16]string{
	0: "success",
}

func (p *PromptManageServiceClonePromptResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PromptManageServiceClonePromptResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PromptManageServiceClonePromptResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PromptManageServiceClonePromptResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewClonePromptResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *PromptManageServiceClonePromptResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ClonePrompt_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PromptManageServiceClonePromptResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PromptManageServiceClonePromptResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PromptManageServiceClonePromptResult(%+v)", *p)

}

func (p *PromptManageServiceClonePromptResult) DeepEqual(ano *PromptManageServiceClonePromptResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PromptManageServiceClonePromptResult) Field0DeepEqual(src *ClonePromptResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type PromptManageServiceDeletePromptArgs struct {
	Request *DeletePromptRequest `thrift:"request,1" frugal:"1,default,DeletePromptRequest"`
}

func NewPromptManageServiceDeletePromptArgs() *PromptManageServiceDeletePromptArgs {
	return &PromptManageServiceDeletePromptArgs{}
}

func (p *PromptManageServiceDeletePromptArgs) InitDefault() {
}

var PromptManageServiceDeletePromptArgs_Request_DEFAULT *DeletePromptRequest

func (p *PromptManageServiceDeletePromptArgs) GetRequest() (v *DeletePromptRequest) {
	if p == nil {
		return
	}
	if !p.IsSetRequest() {
		return PromptManageServiceDeletePromptArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *PromptManageServiceDeletePromptArgs) SetRequest(val *DeletePromptRequest) {
	p.Request = val
}

var fieldIDToName_PromptManageServiceDeletePromptArgs = map[int16]string{
	1: "request",
}

func (p *PromptManageServiceDeletePromptArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *PromptManageServiceDeletePromptArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PromptManageServiceDeletePromptArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PromptManageServiceDeletePromptArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewDeletePromptRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *PromptManageServiceDeletePromptArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeletePrompt_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PromptManageServiceDeletePromptArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PromptManageServiceDeletePromptArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PromptManageServiceDeletePromptArgs(%+v)", *p)

}

func (p *PromptManageServiceDeletePromptArgs) DeepEqual(ano *PromptManageServiceDeletePromptArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *PromptManageServiceDeletePromptArgs) Field1DeepEqual(src *DeletePromptRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type PromptManageServiceDeletePromptResult struct {
	Success *DeletePromptResponse `thrift:"success,0,optional" frugal:"0,optional,DeletePromptResponse"`
}

func NewPromptManageServiceDeletePromptResult() *PromptManageServiceDeletePromptResult {
	return &PromptManageServiceDeletePromptResult{}
}

func (p *PromptManageServiceDeletePromptResult) InitDefault() {
}

var PromptManageServiceDeletePromptResult_Success_DEFAULT *DeletePromptResponse

func (p *PromptManageServiceDeletePromptResult) GetSuccess() (v *DeletePromptResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return PromptManageServiceDeletePromptResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PromptManageServiceDeletePromptResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeletePromptResponse)
}

var fieldIDToName_PromptManageServiceDeletePromptResult = map[int16]string{
	0: "success",
}

func (p *PromptManageServiceDeletePromptResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PromptManageServiceDeletePromptResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PromptManageServiceDeletePromptResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PromptManageServiceDeletePromptResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewDeletePromptResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *PromptManageServiceDeletePromptResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeletePrompt_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PromptManageServiceDeletePromptResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PromptManageServiceDeletePromptResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PromptManageServiceDeletePromptResult(%+v)", *p)

}

func (p *PromptManageServiceDeletePromptResult) DeepEqual(ano *PromptManageServiceDeletePromptResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PromptManageServiceDeletePromptResult) Field0DeepEqual(src *DeletePromptResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type PromptManageServiceGetPromptArgs struct {
	Request *GetPromptRequest `thrift:"request,1" frugal:"1,default,GetPromptRequest"`
}

func NewPromptManageServiceGetPromptArgs() *PromptManageServiceGetPromptArgs {
	return &PromptManageServiceGetPromptArgs{}
}

func (p *PromptManageServiceGetPromptArgs) InitDefault() {
}

var PromptManageServiceGetPromptArgs_Request_DEFAULT *GetPromptRequest

func (p *PromptManageServiceGetPromptArgs) GetRequest() (v *GetPromptRequest) {
	if p == nil {
		return
	}
	if !p.IsSetRequest() {
		return PromptManageServiceGetPromptArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *PromptManageServiceGetPromptArgs) SetRequest(val *GetPromptRequest) {
	p.Request = val
}

var fieldIDToName_PromptManageServiceGetPromptArgs = map[int16]string{
	1: "request",
}

func (p *PromptManageServiceGetPromptArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *PromptManageServiceGetPromptArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PromptManageServiceGetPromptArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PromptManageServiceGetPromptArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetPromptRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *PromptManageServiceGetPromptArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPrompt_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PromptManageServiceGetPromptArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PromptManageServiceGetPromptArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PromptManageServiceGetPromptArgs(%+v)", *p)

}

func (p *PromptManageServiceGetPromptArgs) DeepEqual(ano *PromptManageServiceGetPromptArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *PromptManageServiceGetPromptArgs) Field1DeepEqual(src *GetPromptRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type PromptManageServiceGetPromptResult struct {
	Success *GetPromptResponse `thrift:"success,0,optional" frugal:"0,optional,GetPromptResponse"`
}

func NewPromptManageServiceGetPromptResult() *PromptManageServiceGetPromptResult {
	return &PromptManageServiceGetPromptResult{}
}

func (p *PromptManageServiceGetPromptResult) InitDefault() {
}

var PromptManageServiceGetPromptResult_Success_DEFAULT *GetPromptResponse

func (p *PromptManageServiceGetPromptResult) GetSuccess() (v *GetPromptResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return PromptManageServiceGetPromptResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PromptManageServiceGetPromptResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetPromptResponse)
}

var fieldIDToName_PromptManageServiceGetPromptResult = map[int16]string{
	0: "success",
}

func (p *PromptManageServiceGetPromptResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PromptManageServiceGetPromptResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PromptManageServiceGetPromptResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PromptManageServiceGetPromptResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetPromptResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *PromptManageServiceGetPromptResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetPrompt_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PromptManageServiceGetPromptResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PromptManageServiceGetPromptResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PromptManageServiceGetPromptResult(%+v)", *p)

}

func (p *PromptManageServiceGetPromptResult) DeepEqual(ano *PromptManageServiceGetPromptResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PromptManageServiceGetPromptResult) Field0DeepEqual(src *GetPromptResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type PromptManageServiceBatchGetPromptArgs struct {
	Request *BatchGetPromptRequest `thrift:"request,1" frugal:"1,default,BatchGetPromptRequest"`
}

func NewPromptManageServiceBatchGetPromptArgs() *PromptManageServiceBatchGetPromptArgs {
	return &PromptManageServiceBatchGetPromptArgs{}
}

func (p *PromptManageServiceBatchGetPromptArgs) InitDefault() {
}

var PromptManageServiceBatchGetPromptArgs_Request_DEFAULT *BatchGetPromptRequest

func (p *PromptManageServiceBatchGetPromptArgs) GetRequest() (v *BatchGetPromptRequest) {
	if p == nil {
		return
	}
	if !p.IsSetRequest() {
		return PromptManageServiceBatchGetPromptArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *PromptManageServiceBatchGetPromptArgs) SetRequest(val *BatchGetPromptRequest) {
	p.Request = val
}

var fieldIDToName_PromptManageServiceBatchGetPromptArgs = map[int16]string{
	1: "request",
}

func (p *PromptManageServiceBatchGetPromptArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *PromptManageServiceBatchGetPromptArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PromptManageServiceBatchGetPromptArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PromptManageServiceBatchGetPromptArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewBatchGetPromptRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *PromptManageServiceBatchGetPromptArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetPrompt_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PromptManageServiceBatchGetPromptArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PromptManageServiceBatchGetPromptArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PromptManageServiceBatchGetPromptArgs(%+v)", *p)

}

func (p *PromptManageServiceBatchGetPromptArgs) DeepEqual(ano *PromptManageServiceBatchGetPromptArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *PromptManageServiceBatchGetPromptArgs) Field1DeepEqual(src *BatchGetPromptRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type PromptManageServiceBatchGetPromptResult struct {
	Success *BatchGetPromptResponse `thrift:"success,0,optional" frugal:"0,optional,BatchGetPromptResponse"`
}

func NewPromptManageServiceBatchGetPromptResult() *PromptManageServiceBatchGetPromptResult {
	return &PromptManageServiceBatchGetPromptResult{}
}

func (p *PromptManageServiceBatchGetPromptResult) InitDefault() {
}

var PromptManageServiceBatchGetPromptResult_Success_DEFAULT *BatchGetPromptResponse

func (p *PromptManageServiceBatchGetPromptResult) GetSuccess() (v *BatchGetPromptResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return PromptManageServiceBatchGetPromptResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PromptManageServiceBatchGetPromptResult) SetSuccess(x interface{}) {
	p.Success = x.(*BatchGetPromptResponse)
}

var fieldIDToName_PromptManageServiceBatchGetPromptResult = map[int16]string{
	0: "success",
}

func (p *PromptManageServiceBatchGetPromptResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PromptManageServiceBatchGetPromptResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PromptManageServiceBatchGetPromptResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PromptManageServiceBatchGetPromptResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewBatchGetPromptResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *PromptManageServiceBatchGetPromptResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetPrompt_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PromptManageServiceBatchGetPromptResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PromptManageServiceBatchGetPromptResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PromptManageServiceBatchGetPromptResult(%+v)", *p)

}

func (p *PromptManageServiceBatchGetPromptResult) DeepEqual(ano *PromptManageServiceBatchGetPromptResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PromptManageServiceBatchGetPromptResult) Field0DeepEqual(src *BatchGetPromptResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type PromptManageServiceListPromptArgs struct {
	Request *ListPromptRequest `thrift:"request,1" frugal:"1,default,ListPromptRequest"`
}

func NewPromptManageServiceListPromptArgs() *PromptManageServiceListPromptArgs {
	return &PromptManageServiceListPromptArgs{}
}

func (p *PromptManageServiceListPromptArgs) InitDefault() {
}

var PromptManageServiceListPromptArgs_Request_DEFAULT *ListPromptRequest

func (p *PromptManageServiceListPromptArgs) GetRequest() (v *ListPromptRequest) {
	if p == nil {
		return
	}
	if !p.IsSetRequest() {
		return PromptManageServiceListPromptArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *PromptManageServiceListPromptArgs) SetRequest(val *ListPromptRequest) {
	p.Request = val
}

var fieldIDToName_PromptManageServiceListPromptArgs = map[int16]string{
	1: "request",
}

func (p *PromptManageServiceListPromptArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *PromptManageServiceListPromptArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PromptManageServiceListPromptArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PromptManageServiceListPromptArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewListPromptRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *PromptManageServiceListPromptArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListPrompt_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PromptManageServiceListPromptArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PromptManageServiceListPromptArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PromptManageServiceListPromptArgs(%+v)", *p)

}

func (p *PromptManageServiceListPromptArgs) DeepEqual(ano *PromptManageServiceListPromptArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *PromptManageServiceListPromptArgs) Field1DeepEqual(src *ListPromptRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type PromptManageServiceListPromptResult struct {
	Success *ListPromptResponse `thrift:"success,0,optional" frugal:"0,optional,ListPromptResponse"`
}

func NewPromptManageServiceListPromptResult() *PromptManageServiceListPromptResult {
	return &PromptManageServiceListPromptResult{}
}

func (p *PromptManageServiceListPromptResult) InitDefault() {
}

var PromptManageServiceListPromptResult_Success_DEFAULT *ListPromptResponse

func (p *PromptManageServiceListPromptResult) GetSuccess() (v *ListPromptResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return PromptManageServiceListPromptResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PromptManageServiceListPromptResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListPromptResponse)
}

var fieldIDToName_PromptManageServiceListPromptResult = map[int16]string{
	0: "success",
}

func (p *PromptManageServiceListPromptResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PromptManageServiceListPromptResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PromptManageServiceListPromptResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PromptManageServiceListPromptResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewListPromptResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *PromptManageServiceListPromptResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListPrompt_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PromptManageServiceListPromptResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PromptManageServiceListPromptResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PromptManageServiceListPromptResult(%+v)", *p)

}

func (p *PromptManageServiceListPromptResult) DeepEqual(ano *PromptManageServiceListPromptResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PromptManageServiceListPromptResult) Field0DeepEqual(src *ListPromptResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type PromptManageServiceUpdatePromptArgs struct {
	Request *UpdatePromptRequest `thrift:"request,1" frugal:"1,default,UpdatePromptRequest"`
}

func NewPromptManageServiceUpdatePromptArgs() *PromptManageServiceUpdatePromptArgs {
	return &PromptManageServiceUpdatePromptArgs{}
}

func (p *PromptManageServiceUpdatePromptArgs) InitDefault() {
}

var PromptManageServiceUpdatePromptArgs_Request_DEFAULT *UpdatePromptRequest

func (p *PromptManageServiceUpdatePromptArgs) GetRequest() (v *UpdatePromptRequest) {
	if p == nil {
		return
	}
	if !p.IsSetRequest() {
		return PromptManageServiceUpdatePromptArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *PromptManageServiceUpdatePromptArgs) SetRequest(val *UpdatePromptRequest) {
	p.Request = val
}

var fieldIDToName_PromptManageServiceUpdatePromptArgs = map[int16]string{
	1: "request",
}

func (p *PromptManageServiceUpdatePromptArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *PromptManageServiceUpdatePromptArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PromptManageServiceUpdatePromptArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PromptManageServiceUpdatePromptArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUpdatePromptRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *PromptManageServiceUpdatePromptArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdatePrompt_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PromptManageServiceUpdatePromptArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PromptManageServiceUpdatePromptArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PromptManageServiceUpdatePromptArgs(%+v)", *p)

}

func (p *PromptManageServiceUpdatePromptArgs) DeepEqual(ano *PromptManageServiceUpdatePromptArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *PromptManageServiceUpdatePromptArgs) Field1DeepEqual(src *UpdatePromptRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type PromptManageServiceUpdatePromptResult struct {
	Success *UpdatePromptResponse `thrift:"success,0,optional" frugal:"0,optional,UpdatePromptResponse"`
}

func NewPromptManageServiceUpdatePromptResult() *PromptManageServiceUpdatePromptResult {
	return &PromptManageServiceUpdatePromptResult{}
}

func (p *PromptManageServiceUpdatePromptResult) InitDefault() {
}

var PromptManageServiceUpdatePromptResult_Success_DEFAULT *UpdatePromptResponse

func (p *PromptManageServiceUpdatePromptResult) GetSuccess() (v *UpdatePromptResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return PromptManageServiceUpdatePromptResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PromptManageServiceUpdatePromptResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdatePromptResponse)
}

var fieldIDToName_PromptManageServiceUpdatePromptResult = map[int16]string{
	0: "success",
}

func (p *PromptManageServiceUpdatePromptResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PromptManageServiceUpdatePromptResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PromptManageServiceUpdatePromptResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PromptManageServiceUpdatePromptResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewUpdatePromptResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *PromptManageServiceUpdatePromptResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdatePrompt_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PromptManageServiceUpdatePromptResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PromptManageServiceUpdatePromptResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PromptManageServiceUpdatePromptResult(%+v)", *p)

}

func (p *PromptManageServiceUpdatePromptResult) DeepEqual(ano *PromptManageServiceUpdatePromptResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PromptManageServiceUpdatePromptResult) Field0DeepEqual(src *UpdatePromptResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type PromptManageServiceSaveDraftArgs struct {
	Request *SaveDraftRequest `thrift:"request,1" frugal:"1,default,SaveDraftRequest"`
}

func NewPromptManageServiceSaveDraftArgs() *PromptManageServiceSaveDraftArgs {
	return &PromptManageServiceSaveDraftArgs{}
}

func (p *PromptManageServiceSaveDraftArgs) InitDefault() {
}

var PromptManageServiceSaveDraftArgs_Request_DEFAULT *SaveDraftRequest

func (p *PromptManageServiceSaveDraftArgs) GetRequest() (v *SaveDraftRequest) {
	if p == nil {
		return
	}
	if !p.IsSetRequest() {
		return PromptManageServiceSaveDraftArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *PromptManageServiceSaveDraftArgs) SetRequest(val *SaveDraftRequest) {
	p.Request = val
}

var fieldIDToName_PromptManageServiceSaveDraftArgs = map[int16]string{
	1: "request",
}

func (p *PromptManageServiceSaveDraftArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *PromptManageServiceSaveDraftArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PromptManageServiceSaveDraftArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PromptManageServiceSaveDraftArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewSaveDraftRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *PromptManageServiceSaveDraftArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SaveDraft_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PromptManageServiceSaveDraftArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PromptManageServiceSaveDraftArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PromptManageServiceSaveDraftArgs(%+v)", *p)

}

func (p *PromptManageServiceSaveDraftArgs) DeepEqual(ano *PromptManageServiceSaveDraftArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *PromptManageServiceSaveDraftArgs) Field1DeepEqual(src *SaveDraftRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type PromptManageServiceSaveDraftResult struct {
	Success *SaveDraftResponse `thrift:"success,0,optional" frugal:"0,optional,SaveDraftResponse"`
}

func NewPromptManageServiceSaveDraftResult() *PromptManageServiceSaveDraftResult {
	return &PromptManageServiceSaveDraftResult{}
}

func (p *PromptManageServiceSaveDraftResult) InitDefault() {
}

var PromptManageServiceSaveDraftResult_Success_DEFAULT *SaveDraftResponse

func (p *PromptManageServiceSaveDraftResult) GetSuccess() (v *SaveDraftResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return PromptManageServiceSaveDraftResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PromptManageServiceSaveDraftResult) SetSuccess(x interface{}) {
	p.Success = x.(*SaveDraftResponse)
}

var fieldIDToName_PromptManageServiceSaveDraftResult = map[int16]string{
	0: "success",
}

func (p *PromptManageServiceSaveDraftResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PromptManageServiceSaveDraftResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PromptManageServiceSaveDraftResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PromptManageServiceSaveDraftResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewSaveDraftResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *PromptManageServiceSaveDraftResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SaveDraft_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PromptManageServiceSaveDraftResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PromptManageServiceSaveDraftResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PromptManageServiceSaveDraftResult(%+v)", *p)

}

func (p *PromptManageServiceSaveDraftResult) DeepEqual(ano *PromptManageServiceSaveDraftResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PromptManageServiceSaveDraftResult) Field0DeepEqual(src *SaveDraftResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type PromptManageServiceListCommitArgs struct {
	Request *ListCommitRequest `thrift:"request,1" frugal:"1,default,ListCommitRequest"`
}

func NewPromptManageServiceListCommitArgs() *PromptManageServiceListCommitArgs {
	return &PromptManageServiceListCommitArgs{}
}

func (p *PromptManageServiceListCommitArgs) InitDefault() {
}

var PromptManageServiceListCommitArgs_Request_DEFAULT *ListCommitRequest

func (p *PromptManageServiceListCommitArgs) GetRequest() (v *ListCommitRequest) {
	if p == nil {
		return
	}
	if !p.IsSetRequest() {
		return PromptManageServiceListCommitArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *PromptManageServiceListCommitArgs) SetRequest(val *ListCommitRequest) {
	p.Request = val
}

var fieldIDToName_PromptManageServiceListCommitArgs = map[int16]string{
	1: "request",
}

func (p *PromptManageServiceListCommitArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *PromptManageServiceListCommitArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PromptManageServiceListCommitArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PromptManageServiceListCommitArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewListCommitRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *PromptManageServiceListCommitArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListCommit_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PromptManageServiceListCommitArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PromptManageServiceListCommitArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PromptManageServiceListCommitArgs(%+v)", *p)

}

func (p *PromptManageServiceListCommitArgs) DeepEqual(ano *PromptManageServiceListCommitArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *PromptManageServiceListCommitArgs) Field1DeepEqual(src *ListCommitRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type PromptManageServiceListCommitResult struct {
	Success *ListCommitResponse `thrift:"success,0,optional" frugal:"0,optional,ListCommitResponse"`
}

func NewPromptManageServiceListCommitResult() *PromptManageServiceListCommitResult {
	return &PromptManageServiceListCommitResult{}
}

func (p *PromptManageServiceListCommitResult) InitDefault() {
}

var PromptManageServiceListCommitResult_Success_DEFAULT *ListCommitResponse

func (p *PromptManageServiceListCommitResult) GetSuccess() (v *ListCommitResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return PromptManageServiceListCommitResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PromptManageServiceListCommitResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListCommitResponse)
}

var fieldIDToName_PromptManageServiceListCommitResult = map[int16]string{
	0: "success",
}

func (p *PromptManageServiceListCommitResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PromptManageServiceListCommitResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PromptManageServiceListCommitResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PromptManageServiceListCommitResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewListCommitResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *PromptManageServiceListCommitResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListCommit_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PromptManageServiceListCommitResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PromptManageServiceListCommitResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PromptManageServiceListCommitResult(%+v)", *p)

}

func (p *PromptManageServiceListCommitResult) DeepEqual(ano *PromptManageServiceListCommitResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PromptManageServiceListCommitResult) Field0DeepEqual(src *ListCommitResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type PromptManageServiceCommitDraftArgs struct {
	Request *CommitDraftRequest `thrift:"request,1" frugal:"1,default,CommitDraftRequest"`
}

func NewPromptManageServiceCommitDraftArgs() *PromptManageServiceCommitDraftArgs {
	return &PromptManageServiceCommitDraftArgs{}
}

func (p *PromptManageServiceCommitDraftArgs) InitDefault() {
}

var PromptManageServiceCommitDraftArgs_Request_DEFAULT *CommitDraftRequest

func (p *PromptManageServiceCommitDraftArgs) GetRequest() (v *CommitDraftRequest) {
	if p == nil {
		return
	}
	if !p.IsSetRequest() {
		return PromptManageServiceCommitDraftArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *PromptManageServiceCommitDraftArgs) SetRequest(val *CommitDraftRequest) {
	p.Request = val
}

var fieldIDToName_PromptManageServiceCommitDraftArgs = map[int16]string{
	1: "request",
}

func (p *PromptManageServiceCommitDraftArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *PromptManageServiceCommitDraftArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PromptManageServiceCommitDraftArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PromptManageServiceCommitDraftArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCommitDraftRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *PromptManageServiceCommitDraftArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CommitDraft_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PromptManageServiceCommitDraftArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PromptManageServiceCommitDraftArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PromptManageServiceCommitDraftArgs(%+v)", *p)

}

func (p *PromptManageServiceCommitDraftArgs) DeepEqual(ano *PromptManageServiceCommitDraftArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *PromptManageServiceCommitDraftArgs) Field1DeepEqual(src *CommitDraftRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type PromptManageServiceCommitDraftResult struct {
	Success *CommitDraftResponse `thrift:"success,0,optional" frugal:"0,optional,CommitDraftResponse"`
}

func NewPromptManageServiceCommitDraftResult() *PromptManageServiceCommitDraftResult {
	return &PromptManageServiceCommitDraftResult{}
}

func (p *PromptManageServiceCommitDraftResult) InitDefault() {
}

var PromptManageServiceCommitDraftResult_Success_DEFAULT *CommitDraftResponse

func (p *PromptManageServiceCommitDraftResult) GetSuccess() (v *CommitDraftResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return PromptManageServiceCommitDraftResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PromptManageServiceCommitDraftResult) SetSuccess(x interface{}) {
	p.Success = x.(*CommitDraftResponse)
}

var fieldIDToName_PromptManageServiceCommitDraftResult = map[int16]string{
	0: "success",
}

func (p *PromptManageServiceCommitDraftResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PromptManageServiceCommitDraftResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PromptManageServiceCommitDraftResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PromptManageServiceCommitDraftResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCommitDraftResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *PromptManageServiceCommitDraftResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CommitDraft_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PromptManageServiceCommitDraftResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PromptManageServiceCommitDraftResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PromptManageServiceCommitDraftResult(%+v)", *p)

}

func (p *PromptManageServiceCommitDraftResult) DeepEqual(ano *PromptManageServiceCommitDraftResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PromptManageServiceCommitDraftResult) Field0DeepEqual(src *CommitDraftResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type PromptManageServiceRevertDraftFromCommitArgs struct {
	Request *RevertDraftFromCommitRequest `thrift:"request,1" frugal:"1,default,RevertDraftFromCommitRequest"`
}

func NewPromptManageServiceRevertDraftFromCommitArgs() *PromptManageServiceRevertDraftFromCommitArgs {
	return &PromptManageServiceRevertDraftFromCommitArgs{}
}

func (p *PromptManageServiceRevertDraftFromCommitArgs) InitDefault() {
}

var PromptManageServiceRevertDraftFromCommitArgs_Request_DEFAULT *RevertDraftFromCommitRequest

func (p *PromptManageServiceRevertDraftFromCommitArgs) GetRequest() (v *RevertDraftFromCommitRequest) {
	if p == nil {
		return
	}
	if !p.IsSetRequest() {
		return PromptManageServiceRevertDraftFromCommitArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *PromptManageServiceRevertDraftFromCommitArgs) SetRequest(val *RevertDraftFromCommitRequest) {
	p.Request = val
}

var fieldIDToName_PromptManageServiceRevertDraftFromCommitArgs = map[int16]string{
	1: "request",
}

func (p *PromptManageServiceRevertDraftFromCommitArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *PromptManageServiceRevertDraftFromCommitArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PromptManageServiceRevertDraftFromCommitArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PromptManageServiceRevertDraftFromCommitArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewRevertDraftFromCommitRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Request = _field
	return nil
}

func (p *PromptManageServiceRevertDraftFromCommitArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RevertDraftFromCommit_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PromptManageServiceRevertDraftFromCommitArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Request.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PromptManageServiceRevertDraftFromCommitArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PromptManageServiceRevertDraftFromCommitArgs(%+v)", *p)

}

func (p *PromptManageServiceRevertDraftFromCommitArgs) DeepEqual(ano *PromptManageServiceRevertDraftFromCommitArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Request) {
		return false
	}
	return true
}

func (p *PromptManageServiceRevertDraftFromCommitArgs) Field1DeepEqual(src *RevertDraftFromCommitRequest) bool {

	if !p.Request.DeepEqual(src) {
		return false
	}
	return true
}

type PromptManageServiceRevertDraftFromCommitResult struct {
	Success *RevertDraftFromCommitResponse `thrift:"success,0,optional" frugal:"0,optional,RevertDraftFromCommitResponse"`
}

func NewPromptManageServiceRevertDraftFromCommitResult() *PromptManageServiceRevertDraftFromCommitResult {
	return &PromptManageServiceRevertDraftFromCommitResult{}
}

func (p *PromptManageServiceRevertDraftFromCommitResult) InitDefault() {
}

var PromptManageServiceRevertDraftFromCommitResult_Success_DEFAULT *RevertDraftFromCommitResponse

func (p *PromptManageServiceRevertDraftFromCommitResult) GetSuccess() (v *RevertDraftFromCommitResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return PromptManageServiceRevertDraftFromCommitResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PromptManageServiceRevertDraftFromCommitResult) SetSuccess(x interface{}) {
	p.Success = x.(*RevertDraftFromCommitResponse)
}

var fieldIDToName_PromptManageServiceRevertDraftFromCommitResult = map[int16]string{
	0: "success",
}

func (p *PromptManageServiceRevertDraftFromCommitResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PromptManageServiceRevertDraftFromCommitResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PromptManageServiceRevertDraftFromCommitResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PromptManageServiceRevertDraftFromCommitResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewRevertDraftFromCommitResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *PromptManageServiceRevertDraftFromCommitResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RevertDraftFromCommit_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PromptManageServiceRevertDraftFromCommitResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PromptManageServiceRevertDraftFromCommitResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PromptManageServiceRevertDraftFromCommitResult(%+v)", *p)

}

func (p *PromptManageServiceRevertDraftFromCommitResult) DeepEqual(ano *PromptManageServiceRevertDraftFromCommitResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PromptManageServiceRevertDraftFromCommitResult) Field0DeepEqual(src *RevertDraftFromCommitResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
