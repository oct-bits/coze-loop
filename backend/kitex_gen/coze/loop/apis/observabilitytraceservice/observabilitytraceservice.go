// Code generated by Kitex v0.13.1. DO NOT EDIT.

package observabilitytraceservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	apis "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/apis"
	trace "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/observability/trace"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"ListSpans": kitex.NewMethodInfo(
		listSpansHandler,
		newTraceServiceListSpansArgs,
		newTraceServiceListSpansResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetTrace": kitex.NewMethodInfo(
		getTraceHandler,
		newTraceServiceGetTraceArgs,
		newTraceServiceGetTraceResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"BatchGetTracesAdvanceInfo": kitex.NewMethodInfo(
		batchGetTracesAdvanceInfoHandler,
		newTraceServiceBatchGetTracesAdvanceInfoArgs,
		newTraceServiceBatchGetTracesAdvanceInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"IngestTracesInner": kitex.NewMethodInfo(
		ingestTracesInnerHandler,
		newTraceServiceIngestTracesInnerArgs,
		newTraceServiceIngestTracesInnerResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetTracesMetaInfo": kitex.NewMethodInfo(
		getTracesMetaInfoHandler,
		newTraceServiceGetTracesMetaInfoArgs,
		newTraceServiceGetTracesMetaInfoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateView": kitex.NewMethodInfo(
		createViewHandler,
		newTraceServiceCreateViewArgs,
		newTraceServiceCreateViewResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateView": kitex.NewMethodInfo(
		updateViewHandler,
		newTraceServiceUpdateViewArgs,
		newTraceServiceUpdateViewResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteView": kitex.NewMethodInfo(
		deleteViewHandler,
		newTraceServiceDeleteViewArgs,
		newTraceServiceDeleteViewResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ListViews": kitex.NewMethodInfo(
		listViewsHandler,
		newTraceServiceListViewsArgs,
		newTraceServiceListViewsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateManualAnnotation": kitex.NewMethodInfo(
		createManualAnnotationHandler,
		newTraceServiceCreateManualAnnotationArgs,
		newTraceServiceCreateManualAnnotationResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"UpdateManualAnnotation": kitex.NewMethodInfo(
		updateManualAnnotationHandler,
		newTraceServiceUpdateManualAnnotationArgs,
		newTraceServiceUpdateManualAnnotationResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"DeleteManualAnnotation": kitex.NewMethodInfo(
		deleteManualAnnotationHandler,
		newTraceServiceDeleteManualAnnotationArgs,
		newTraceServiceDeleteManualAnnotationResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"ListAnnotations": kitex.NewMethodInfo(
		listAnnotationsHandler,
		newTraceServiceListAnnotationsArgs,
		newTraceServiceListAnnotationsResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	observabilityTraceServiceServiceInfo = NewServiceInfo()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return observabilityTraceServiceServiceInfo
}

// NewServiceInfo creates a new ServiceInfo
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo()
}

func newServiceInfo() *kitex.ServiceInfo {
	serviceName := "ObservabilityTraceService"
	handlerType := (*apis.ObservabilityTraceService)(nil)
	extra := map[string]interface{}{
		"PackageName": "apis",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         serviceMethods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.13.1",
		Extra:           extra,
	}
	return svcInfo
}

func listSpansHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*trace.TraceServiceListSpansArgs)
	realResult := result.(*trace.TraceServiceListSpansResult)
	success, err := handler.(trace.TraceService).ListSpans(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newTraceServiceListSpansArgs() interface{} {
	return trace.NewTraceServiceListSpansArgs()
}

func newTraceServiceListSpansResult() interface{} {
	return trace.NewTraceServiceListSpansResult()
}

func getTraceHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*trace.TraceServiceGetTraceArgs)
	realResult := result.(*trace.TraceServiceGetTraceResult)
	success, err := handler.(trace.TraceService).GetTrace(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newTraceServiceGetTraceArgs() interface{} {
	return trace.NewTraceServiceGetTraceArgs()
}

func newTraceServiceGetTraceResult() interface{} {
	return trace.NewTraceServiceGetTraceResult()
}

func batchGetTracesAdvanceInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*trace.TraceServiceBatchGetTracesAdvanceInfoArgs)
	realResult := result.(*trace.TraceServiceBatchGetTracesAdvanceInfoResult)
	success, err := handler.(trace.TraceService).BatchGetTracesAdvanceInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newTraceServiceBatchGetTracesAdvanceInfoArgs() interface{} {
	return trace.NewTraceServiceBatchGetTracesAdvanceInfoArgs()
}

func newTraceServiceBatchGetTracesAdvanceInfoResult() interface{} {
	return trace.NewTraceServiceBatchGetTracesAdvanceInfoResult()
}

func ingestTracesInnerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*trace.TraceServiceIngestTracesInnerArgs)
	realResult := result.(*trace.TraceServiceIngestTracesInnerResult)
	success, err := handler.(trace.TraceService).IngestTracesInner(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newTraceServiceIngestTracesInnerArgs() interface{} {
	return trace.NewTraceServiceIngestTracesInnerArgs()
}

func newTraceServiceIngestTracesInnerResult() interface{} {
	return trace.NewTraceServiceIngestTracesInnerResult()
}

func getTracesMetaInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*trace.TraceServiceGetTracesMetaInfoArgs)
	realResult := result.(*trace.TraceServiceGetTracesMetaInfoResult)
	success, err := handler.(trace.TraceService).GetTracesMetaInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newTraceServiceGetTracesMetaInfoArgs() interface{} {
	return trace.NewTraceServiceGetTracesMetaInfoArgs()
}

func newTraceServiceGetTracesMetaInfoResult() interface{} {
	return trace.NewTraceServiceGetTracesMetaInfoResult()
}

func createViewHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*trace.TraceServiceCreateViewArgs)
	realResult := result.(*trace.TraceServiceCreateViewResult)
	success, err := handler.(trace.TraceService).CreateView(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newTraceServiceCreateViewArgs() interface{} {
	return trace.NewTraceServiceCreateViewArgs()
}

func newTraceServiceCreateViewResult() interface{} {
	return trace.NewTraceServiceCreateViewResult()
}

func updateViewHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*trace.TraceServiceUpdateViewArgs)
	realResult := result.(*trace.TraceServiceUpdateViewResult)
	success, err := handler.(trace.TraceService).UpdateView(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newTraceServiceUpdateViewArgs() interface{} {
	return trace.NewTraceServiceUpdateViewArgs()
}

func newTraceServiceUpdateViewResult() interface{} {
	return trace.NewTraceServiceUpdateViewResult()
}

func deleteViewHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*trace.TraceServiceDeleteViewArgs)
	realResult := result.(*trace.TraceServiceDeleteViewResult)
	success, err := handler.(trace.TraceService).DeleteView(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newTraceServiceDeleteViewArgs() interface{} {
	return trace.NewTraceServiceDeleteViewArgs()
}

func newTraceServiceDeleteViewResult() interface{} {
	return trace.NewTraceServiceDeleteViewResult()
}

func listViewsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*trace.TraceServiceListViewsArgs)
	realResult := result.(*trace.TraceServiceListViewsResult)
	success, err := handler.(trace.TraceService).ListViews(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newTraceServiceListViewsArgs() interface{} {
	return trace.NewTraceServiceListViewsArgs()
}

func newTraceServiceListViewsResult() interface{} {
	return trace.NewTraceServiceListViewsResult()
}

func createManualAnnotationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*trace.TraceServiceCreateManualAnnotationArgs)
	realResult := result.(*trace.TraceServiceCreateManualAnnotationResult)
	success, err := handler.(trace.TraceService).CreateManualAnnotation(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newTraceServiceCreateManualAnnotationArgs() interface{} {
	return trace.NewTraceServiceCreateManualAnnotationArgs()
}

func newTraceServiceCreateManualAnnotationResult() interface{} {
	return trace.NewTraceServiceCreateManualAnnotationResult()
}

func updateManualAnnotationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*trace.TraceServiceUpdateManualAnnotationArgs)
	realResult := result.(*trace.TraceServiceUpdateManualAnnotationResult)
	success, err := handler.(trace.TraceService).UpdateManualAnnotation(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newTraceServiceUpdateManualAnnotationArgs() interface{} {
	return trace.NewTraceServiceUpdateManualAnnotationArgs()
}

func newTraceServiceUpdateManualAnnotationResult() interface{} {
	return trace.NewTraceServiceUpdateManualAnnotationResult()
}

func deleteManualAnnotationHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*trace.TraceServiceDeleteManualAnnotationArgs)
	realResult := result.(*trace.TraceServiceDeleteManualAnnotationResult)
	success, err := handler.(trace.TraceService).DeleteManualAnnotation(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newTraceServiceDeleteManualAnnotationArgs() interface{} {
	return trace.NewTraceServiceDeleteManualAnnotationArgs()
}

func newTraceServiceDeleteManualAnnotationResult() interface{} {
	return trace.NewTraceServiceDeleteManualAnnotationResult()
}

func listAnnotationsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*trace.TraceServiceListAnnotationsArgs)
	realResult := result.(*trace.TraceServiceListAnnotationsResult)
	success, err := handler.(trace.TraceService).ListAnnotations(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newTraceServiceListAnnotationsArgs() interface{} {
	return trace.NewTraceServiceListAnnotationsArgs()
}

func newTraceServiceListAnnotationsResult() interface{} {
	return trace.NewTraceServiceListAnnotationsResult()
}

type kClient struct {
	c  client.Client
	sc client.Streaming
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c:  c,
		sc: c.(client.Streaming),
	}
}

func (p *kClient) ListSpans(ctx context.Context, req *trace.ListSpansRequest) (r *trace.ListSpansResponse, err error) {
	var _args trace.TraceServiceListSpansArgs
	_args.Req = req
	var _result trace.TraceServiceListSpansResult
	if err = p.c.Call(ctx, "ListSpans", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetTrace(ctx context.Context, req *trace.GetTraceRequest) (r *trace.GetTraceResponse, err error) {
	var _args trace.TraceServiceGetTraceArgs
	_args.Req = req
	var _result trace.TraceServiceGetTraceResult
	if err = p.c.Call(ctx, "GetTrace", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) BatchGetTracesAdvanceInfo(ctx context.Context, req *trace.BatchGetTracesAdvanceInfoRequest) (r *trace.BatchGetTracesAdvanceInfoResponse, err error) {
	var _args trace.TraceServiceBatchGetTracesAdvanceInfoArgs
	_args.Req = req
	var _result trace.TraceServiceBatchGetTracesAdvanceInfoResult
	if err = p.c.Call(ctx, "BatchGetTracesAdvanceInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) IngestTracesInner(ctx context.Context, req *trace.IngestTracesRequest) (r *trace.IngestTracesResponse, err error) {
	var _args trace.TraceServiceIngestTracesInnerArgs
	_args.Req = req
	var _result trace.TraceServiceIngestTracesInnerResult
	if err = p.c.Call(ctx, "IngestTracesInner", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetTracesMetaInfo(ctx context.Context, req *trace.GetTracesMetaInfoRequest) (r *trace.GetTracesMetaInfoResponse, err error) {
	var _args trace.TraceServiceGetTracesMetaInfoArgs
	_args.Req = req
	var _result trace.TraceServiceGetTracesMetaInfoResult
	if err = p.c.Call(ctx, "GetTracesMetaInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateView(ctx context.Context, req *trace.CreateViewRequest) (r *trace.CreateViewResponse, err error) {
	var _args trace.TraceServiceCreateViewArgs
	_args.Req = req
	var _result trace.TraceServiceCreateViewResult
	if err = p.c.Call(ctx, "CreateView", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateView(ctx context.Context, req *trace.UpdateViewRequest) (r *trace.UpdateViewResponse, err error) {
	var _args trace.TraceServiceUpdateViewArgs
	_args.Req = req
	var _result trace.TraceServiceUpdateViewResult
	if err = p.c.Call(ctx, "UpdateView", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteView(ctx context.Context, req *trace.DeleteViewRequest) (r *trace.DeleteViewResponse, err error) {
	var _args trace.TraceServiceDeleteViewArgs
	_args.Req = req
	var _result trace.TraceServiceDeleteViewResult
	if err = p.c.Call(ctx, "DeleteView", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListViews(ctx context.Context, req *trace.ListViewsRequest) (r *trace.ListViewsResponse, err error) {
	var _args trace.TraceServiceListViewsArgs
	_args.Req = req
	var _result trace.TraceServiceListViewsResult
	if err = p.c.Call(ctx, "ListViews", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateManualAnnotation(ctx context.Context, req *trace.CreateManualAnnotationRequest) (r *trace.CreateManualAnnotationResponse, err error) {
	var _args trace.TraceServiceCreateManualAnnotationArgs
	_args.Req = req
	var _result trace.TraceServiceCreateManualAnnotationResult
	if err = p.c.Call(ctx, "CreateManualAnnotation", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UpdateManualAnnotation(ctx context.Context, req *trace.UpdateManualAnnotationRequest) (r *trace.UpdateManualAnnotationResponse, err error) {
	var _args trace.TraceServiceUpdateManualAnnotationArgs
	_args.Req = req
	var _result trace.TraceServiceUpdateManualAnnotationResult
	if err = p.c.Call(ctx, "UpdateManualAnnotation", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) DeleteManualAnnotation(ctx context.Context, req *trace.DeleteManualAnnotationRequest) (r *trace.DeleteManualAnnotationResponse, err error) {
	var _args trace.TraceServiceDeleteManualAnnotationArgs
	_args.Req = req
	var _result trace.TraceServiceDeleteManualAnnotationResult
	if err = p.c.Call(ctx, "DeleteManualAnnotation", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListAnnotations(ctx context.Context, req *trace.ListAnnotationsRequest) (r *trace.ListAnnotationsResponse, err error) {
	var _args trace.TraceServiceListAnnotationsArgs
	_args.Req = req
	var _result trace.TraceServiceListAnnotationsResult
	if err = p.c.Call(ctx, "ListAnnotations", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
