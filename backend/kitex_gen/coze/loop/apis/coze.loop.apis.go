// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package apis

import (
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/data/dataset"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/data/tag"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/eval_set"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/eval_target"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/evaluator"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/evaluation/expt"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/auth"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/authn"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/file"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/openapi"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/space"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/foundation/user"
	manage0 "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/llm/manage"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/llm/runtime"
	openapi1 "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/observability/openapi"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/observability/trace"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/prompt/debug"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/prompt/execute"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/prompt/manage"
	openapi0 "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/prompt/openapi"
)

type EvaluationSetService interface {
	eval_set.EvaluationSetService
}

type EvaluationSetServiceClient struct {
	*eval_set.EvaluationSetServiceClient
}

func NewEvaluationSetServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *EvaluationSetServiceClient {
	return &EvaluationSetServiceClient{
		EvaluationSetServiceClient: eval_set.NewEvaluationSetServiceClientFactory(t, f),
	}
}

func NewEvaluationSetServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *EvaluationSetServiceClient {
	return &EvaluationSetServiceClient{
		EvaluationSetServiceClient: eval_set.NewEvaluationSetServiceClientProtocol(t, iprot, oprot),
	}
}

func NewEvaluationSetServiceClient(c thrift.TClient) *EvaluationSetServiceClient {
	return &EvaluationSetServiceClient{
		EvaluationSetServiceClient: eval_set.NewEvaluationSetServiceClient(c),
	}
}

type EvaluatorService interface {
	evaluator.EvaluatorService
}

type EvaluatorServiceClient struct {
	*evaluator.EvaluatorServiceClient
}

func NewEvaluatorServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *EvaluatorServiceClient {
	return &EvaluatorServiceClient{
		EvaluatorServiceClient: evaluator.NewEvaluatorServiceClientFactory(t, f),
	}
}

func NewEvaluatorServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *EvaluatorServiceClient {
	return &EvaluatorServiceClient{
		EvaluatorServiceClient: evaluator.NewEvaluatorServiceClientProtocol(t, iprot, oprot),
	}
}

func NewEvaluatorServiceClient(c thrift.TClient) *EvaluatorServiceClient {
	return &EvaluatorServiceClient{
		EvaluatorServiceClient: evaluator.NewEvaluatorServiceClient(c),
	}
}

type EvalTargetService interface {
	eval_target.EvalTargetService
}

type EvalTargetServiceClient struct {
	*eval_target.EvalTargetServiceClient
}

func NewEvalTargetServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *EvalTargetServiceClient {
	return &EvalTargetServiceClient{
		EvalTargetServiceClient: eval_target.NewEvalTargetServiceClientFactory(t, f),
	}
}

func NewEvalTargetServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *EvalTargetServiceClient {
	return &EvalTargetServiceClient{
		EvalTargetServiceClient: eval_target.NewEvalTargetServiceClientProtocol(t, iprot, oprot),
	}
}

func NewEvalTargetServiceClient(c thrift.TClient) *EvalTargetServiceClient {
	return &EvalTargetServiceClient{
		EvalTargetServiceClient: eval_target.NewEvalTargetServiceClient(c),
	}
}

type ExperimentService interface {
	expt.ExperimentService
}

type ExperimentServiceClient struct {
	*expt.ExperimentServiceClient
}

func NewExperimentServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ExperimentServiceClient {
	return &ExperimentServiceClient{
		ExperimentServiceClient: expt.NewExperimentServiceClientFactory(t, f),
	}
}

func NewExperimentServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ExperimentServiceClient {
	return &ExperimentServiceClient{
		ExperimentServiceClient: expt.NewExperimentServiceClientProtocol(t, iprot, oprot),
	}
}

func NewExperimentServiceClient(c thrift.TClient) *ExperimentServiceClient {
	return &ExperimentServiceClient{
		ExperimentServiceClient: expt.NewExperimentServiceClient(c),
	}
}

type DatasetService interface {
	dataset.DatasetService
}

type DatasetServiceClient struct {
	*dataset.DatasetServiceClient
}

func NewDatasetServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *DatasetServiceClient {
	return &DatasetServiceClient{
		DatasetServiceClient: dataset.NewDatasetServiceClientFactory(t, f),
	}
}

func NewDatasetServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *DatasetServiceClient {
	return &DatasetServiceClient{
		DatasetServiceClient: dataset.NewDatasetServiceClientProtocol(t, iprot, oprot),
	}
}

func NewDatasetServiceClient(c thrift.TClient) *DatasetServiceClient {
	return &DatasetServiceClient{
		DatasetServiceClient: dataset.NewDatasetServiceClient(c),
	}
}

type TagService interface {
	tag.TagService
}

type TagServiceClient struct {
	*tag.TagServiceClient
}

func NewTagServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TagServiceClient {
	return &TagServiceClient{
		TagServiceClient: tag.NewTagServiceClientFactory(t, f),
	}
}

func NewTagServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TagServiceClient {
	return &TagServiceClient{
		TagServiceClient: tag.NewTagServiceClientProtocol(t, iprot, oprot),
	}
}

func NewTagServiceClient(c thrift.TClient) *TagServiceClient {
	return &TagServiceClient{
		TagServiceClient: tag.NewTagServiceClient(c),
	}
}

type PromptManageService interface {
	manage.PromptManageService
}

type PromptManageServiceClient struct {
	*manage.PromptManageServiceClient
}

func NewPromptManageServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *PromptManageServiceClient {
	return &PromptManageServiceClient{
		PromptManageServiceClient: manage.NewPromptManageServiceClientFactory(t, f),
	}
}

func NewPromptManageServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *PromptManageServiceClient {
	return &PromptManageServiceClient{
		PromptManageServiceClient: manage.NewPromptManageServiceClientProtocol(t, iprot, oprot),
	}
}

func NewPromptManageServiceClient(c thrift.TClient) *PromptManageServiceClient {
	return &PromptManageServiceClient{
		PromptManageServiceClient: manage.NewPromptManageServiceClient(c),
	}
}

type PromptDebugService interface {
	debug.PromptDebugService
}

type PromptDebugServiceClient struct {
	*debug.PromptDebugServiceClient
}

func NewPromptDebugServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *PromptDebugServiceClient {
	return &PromptDebugServiceClient{
		PromptDebugServiceClient: debug.NewPromptDebugServiceClientFactory(t, f),
	}
}

func NewPromptDebugServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *PromptDebugServiceClient {
	return &PromptDebugServiceClient{
		PromptDebugServiceClient: debug.NewPromptDebugServiceClientProtocol(t, iprot, oprot),
	}
}

func NewPromptDebugServiceClient(c thrift.TClient) *PromptDebugServiceClient {
	return &PromptDebugServiceClient{
		PromptDebugServiceClient: debug.NewPromptDebugServiceClient(c),
	}
}

type PromptExecuteService interface {
	execute.PromptExecuteService
}

type PromptExecuteServiceClient struct {
	*execute.PromptExecuteServiceClient
}

func NewPromptExecuteServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *PromptExecuteServiceClient {
	return &PromptExecuteServiceClient{
		PromptExecuteServiceClient: execute.NewPromptExecuteServiceClientFactory(t, f),
	}
}

func NewPromptExecuteServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *PromptExecuteServiceClient {
	return &PromptExecuteServiceClient{
		PromptExecuteServiceClient: execute.NewPromptExecuteServiceClientProtocol(t, iprot, oprot),
	}
}

func NewPromptExecuteServiceClient(c thrift.TClient) *PromptExecuteServiceClient {
	return &PromptExecuteServiceClient{
		PromptExecuteServiceClient: execute.NewPromptExecuteServiceClient(c),
	}
}

type PromptOpenAPIService interface {
	openapi0.PromptOpenAPIService
}

type PromptOpenAPIServiceClient struct {
	*openapi0.PromptOpenAPIServiceClient
}

func NewPromptOpenAPIServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *PromptOpenAPIServiceClient {
	return &PromptOpenAPIServiceClient{
		PromptOpenAPIServiceClient: openapi0.NewPromptOpenAPIServiceClientFactory(t, f),
	}
}

func NewPromptOpenAPIServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *PromptOpenAPIServiceClient {
	return &PromptOpenAPIServiceClient{
		PromptOpenAPIServiceClient: openapi0.NewPromptOpenAPIServiceClientProtocol(t, iprot, oprot),
	}
}

func NewPromptOpenAPIServiceClient(c thrift.TClient) *PromptOpenAPIServiceClient {
	return &PromptOpenAPIServiceClient{
		PromptOpenAPIServiceClient: openapi0.NewPromptOpenAPIServiceClient(c),
	}
}

type LLMManageService interface {
	manage0.LLMManageService
}

type LLMManageServiceClient struct {
	*manage0.LLMManageServiceClient
}

func NewLLMManageServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *LLMManageServiceClient {
	return &LLMManageServiceClient{
		LLMManageServiceClient: manage0.NewLLMManageServiceClientFactory(t, f),
	}
}

func NewLLMManageServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *LLMManageServiceClient {
	return &LLMManageServiceClient{
		LLMManageServiceClient: manage0.NewLLMManageServiceClientProtocol(t, iprot, oprot),
	}
}

func NewLLMManageServiceClient(c thrift.TClient) *LLMManageServiceClient {
	return &LLMManageServiceClient{
		LLMManageServiceClient: manage0.NewLLMManageServiceClient(c),
	}
}

type LLMRuntimeService interface {
	runtime.LLMRuntimeService
}

type LLMRuntimeServiceClient struct {
	*runtime.LLMRuntimeServiceClient
}

func NewLLMRuntimeServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *LLMRuntimeServiceClient {
	return &LLMRuntimeServiceClient{
		LLMRuntimeServiceClient: runtime.NewLLMRuntimeServiceClientFactory(t, f),
	}
}

func NewLLMRuntimeServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *LLMRuntimeServiceClient {
	return &LLMRuntimeServiceClient{
		LLMRuntimeServiceClient: runtime.NewLLMRuntimeServiceClientProtocol(t, iprot, oprot),
	}
}

func NewLLMRuntimeServiceClient(c thrift.TClient) *LLMRuntimeServiceClient {
	return &LLMRuntimeServiceClient{
		LLMRuntimeServiceClient: runtime.NewLLMRuntimeServiceClient(c),
	}
}

type ObservabilityTraceService interface {
	trace.TraceService
}

type ObservabilityTraceServiceClient struct {
	*trace.TraceServiceClient
}

func NewObservabilityTraceServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ObservabilityTraceServiceClient {
	return &ObservabilityTraceServiceClient{
		TraceServiceClient: trace.NewTraceServiceClientFactory(t, f),
	}
}

func NewObservabilityTraceServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ObservabilityTraceServiceClient {
	return &ObservabilityTraceServiceClient{
		TraceServiceClient: trace.NewTraceServiceClientProtocol(t, iprot, oprot),
	}
}

func NewObservabilityTraceServiceClient(c thrift.TClient) *ObservabilityTraceServiceClient {
	return &ObservabilityTraceServiceClient{
		TraceServiceClient: trace.NewTraceServiceClient(c),
	}
}

type ObservabilityOpenAPIService interface {
	openapi1.OpenAPIService
}

type ObservabilityOpenAPIServiceClient struct {
	*openapi1.OpenAPIServiceClient
}

func NewObservabilityOpenAPIServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ObservabilityOpenAPIServiceClient {
	return &ObservabilityOpenAPIServiceClient{
		OpenAPIServiceClient: openapi1.NewOpenAPIServiceClientFactory(t, f),
	}
}

func NewObservabilityOpenAPIServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ObservabilityOpenAPIServiceClient {
	return &ObservabilityOpenAPIServiceClient{
		OpenAPIServiceClient: openapi1.NewOpenAPIServiceClientProtocol(t, iprot, oprot),
	}
}

func NewObservabilityOpenAPIServiceClient(c thrift.TClient) *ObservabilityOpenAPIServiceClient {
	return &ObservabilityOpenAPIServiceClient{
		OpenAPIServiceClient: openapi1.NewOpenAPIServiceClient(c),
	}
}

type FoundationAuthService interface {
	auth.AuthService
}

type FoundationAuthServiceClient struct {
	*auth.AuthServiceClient
}

func NewFoundationAuthServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *FoundationAuthServiceClient {
	return &FoundationAuthServiceClient{
		AuthServiceClient: auth.NewAuthServiceClientFactory(t, f),
	}
}

func NewFoundationAuthServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *FoundationAuthServiceClient {
	return &FoundationAuthServiceClient{
		AuthServiceClient: auth.NewAuthServiceClientProtocol(t, iprot, oprot),
	}
}

func NewFoundationAuthServiceClient(c thrift.TClient) *FoundationAuthServiceClient {
	return &FoundationAuthServiceClient{
		AuthServiceClient: auth.NewAuthServiceClient(c),
	}
}

type FoundationAuthNService interface {
	authn.AuthNService
}

type FoundationAuthNServiceClient struct {
	*authn.AuthNServiceClient
}

func NewFoundationAuthNServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *FoundationAuthNServiceClient {
	return &FoundationAuthNServiceClient{
		AuthNServiceClient: authn.NewAuthNServiceClientFactory(t, f),
	}
}

func NewFoundationAuthNServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *FoundationAuthNServiceClient {
	return &FoundationAuthNServiceClient{
		AuthNServiceClient: authn.NewAuthNServiceClientProtocol(t, iprot, oprot),
	}
}

func NewFoundationAuthNServiceClient(c thrift.TClient) *FoundationAuthNServiceClient {
	return &FoundationAuthNServiceClient{
		AuthNServiceClient: authn.NewAuthNServiceClient(c),
	}
}

type FoundationUserService interface {
	user.UserService
}

type FoundationUserServiceClient struct {
	*user.UserServiceClient
}

func NewFoundationUserServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *FoundationUserServiceClient {
	return &FoundationUserServiceClient{
		UserServiceClient: user.NewUserServiceClientFactory(t, f),
	}
}

func NewFoundationUserServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *FoundationUserServiceClient {
	return &FoundationUserServiceClient{
		UserServiceClient: user.NewUserServiceClientProtocol(t, iprot, oprot),
	}
}

func NewFoundationUserServiceClient(c thrift.TClient) *FoundationUserServiceClient {
	return &FoundationUserServiceClient{
		UserServiceClient: user.NewUserServiceClient(c),
	}
}

type FoundationSpaceService interface {
	space.SpaceService
}

type FoundationSpaceServiceClient struct {
	*space.SpaceServiceClient
}

func NewFoundationSpaceServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *FoundationSpaceServiceClient {
	return &FoundationSpaceServiceClient{
		SpaceServiceClient: space.NewSpaceServiceClientFactory(t, f),
	}
}

func NewFoundationSpaceServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *FoundationSpaceServiceClient {
	return &FoundationSpaceServiceClient{
		SpaceServiceClient: space.NewSpaceServiceClientProtocol(t, iprot, oprot),
	}
}

func NewFoundationSpaceServiceClient(c thrift.TClient) *FoundationSpaceServiceClient {
	return &FoundationSpaceServiceClient{
		SpaceServiceClient: space.NewSpaceServiceClient(c),
	}
}

type FoundationFileService interface {
	file.FileService
}

type FoundationFileServiceClient struct {
	*file.FileServiceClient
}

func NewFoundationFileServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *FoundationFileServiceClient {
	return &FoundationFileServiceClient{
		FileServiceClient: file.NewFileServiceClientFactory(t, f),
	}
}

func NewFoundationFileServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *FoundationFileServiceClient {
	return &FoundationFileServiceClient{
		FileServiceClient: file.NewFileServiceClientProtocol(t, iprot, oprot),
	}
}

func NewFoundationFileServiceClient(c thrift.TClient) *FoundationFileServiceClient {
	return &FoundationFileServiceClient{
		FileServiceClient: file.NewFileServiceClient(c),
	}
}

type FoundationOpenAPIService interface {
	openapi.FoundationOpenAPIService
}

type FoundationOpenAPIServiceClient struct {
	*openapi.FoundationOpenAPIServiceClient
}

func NewFoundationOpenAPIServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *FoundationOpenAPIServiceClient {
	return &FoundationOpenAPIServiceClient{
		FoundationOpenAPIServiceClient: openapi.NewFoundationOpenAPIServiceClientFactory(t, f),
	}
}

func NewFoundationOpenAPIServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *FoundationOpenAPIServiceClient {
	return &FoundationOpenAPIServiceClient{
		FoundationOpenAPIServiceClient: openapi.NewFoundationOpenAPIServiceClientProtocol(t, iprot, oprot),
	}
}

func NewFoundationOpenAPIServiceClient(c thrift.TClient) *FoundationOpenAPIServiceClient {
	return &FoundationOpenAPIServiceClient{
		FoundationOpenAPIServiceClient: openapi.NewFoundationOpenAPIServiceClient(c),
	}
}

type EvaluationSetServiceProcessor struct {
	*eval_set.EvaluationSetServiceProcessor
}

func NewEvaluationSetServiceProcessor(handler EvaluationSetService) *EvaluationSetServiceProcessor {
	self := &EvaluationSetServiceProcessor{eval_set.NewEvaluationSetServiceProcessor(handler)}
	return self
}

type EvaluatorServiceProcessor struct {
	*evaluator.EvaluatorServiceProcessor
}

func NewEvaluatorServiceProcessor(handler EvaluatorService) *EvaluatorServiceProcessor {
	self := &EvaluatorServiceProcessor{evaluator.NewEvaluatorServiceProcessor(handler)}
	return self
}

type EvalTargetServiceProcessor struct {
	*eval_target.EvalTargetServiceProcessor
}

func NewEvalTargetServiceProcessor(handler EvalTargetService) *EvalTargetServiceProcessor {
	self := &EvalTargetServiceProcessor{eval_target.NewEvalTargetServiceProcessor(handler)}
	return self
}

type ExperimentServiceProcessor struct {
	*expt.ExperimentServiceProcessor
}

func NewExperimentServiceProcessor(handler ExperimentService) *ExperimentServiceProcessor {
	self := &ExperimentServiceProcessor{expt.NewExperimentServiceProcessor(handler)}
	return self
}

type DatasetServiceProcessor struct {
	*dataset.DatasetServiceProcessor
}

func NewDatasetServiceProcessor(handler DatasetService) *DatasetServiceProcessor {
	self := &DatasetServiceProcessor{dataset.NewDatasetServiceProcessor(handler)}
	return self
}

type TagServiceProcessor struct {
	*tag.TagServiceProcessor
}

func NewTagServiceProcessor(handler TagService) *TagServiceProcessor {
	self := &TagServiceProcessor{tag.NewTagServiceProcessor(handler)}
	return self
}

type PromptManageServiceProcessor struct {
	*manage.PromptManageServiceProcessor
}

func NewPromptManageServiceProcessor(handler PromptManageService) *PromptManageServiceProcessor {
	self := &PromptManageServiceProcessor{manage.NewPromptManageServiceProcessor(handler)}
	return self
}

type PromptDebugServiceProcessor struct {
	*debug.PromptDebugServiceProcessor
}

func NewPromptDebugServiceProcessor(handler PromptDebugService) *PromptDebugServiceProcessor {
	self := &PromptDebugServiceProcessor{debug.NewPromptDebugServiceProcessor(handler)}
	return self
}

type PromptExecuteServiceProcessor struct {
	*execute.PromptExecuteServiceProcessor
}

func NewPromptExecuteServiceProcessor(handler PromptExecuteService) *PromptExecuteServiceProcessor {
	self := &PromptExecuteServiceProcessor{execute.NewPromptExecuteServiceProcessor(handler)}
	return self
}

type PromptOpenAPIServiceProcessor struct {
	*openapi0.PromptOpenAPIServiceProcessor
}

func NewPromptOpenAPIServiceProcessor(handler PromptOpenAPIService) *PromptOpenAPIServiceProcessor {
	self := &PromptOpenAPIServiceProcessor{openapi0.NewPromptOpenAPIServiceProcessor(handler)}
	return self
}

type LLMManageServiceProcessor struct {
	*manage0.LLMManageServiceProcessor
}

func NewLLMManageServiceProcessor(handler LLMManageService) *LLMManageServiceProcessor {
	self := &LLMManageServiceProcessor{manage0.NewLLMManageServiceProcessor(handler)}
	return self
}

type LLMRuntimeServiceProcessor struct {
	*runtime.LLMRuntimeServiceProcessor
}

func NewLLMRuntimeServiceProcessor(handler LLMRuntimeService) *LLMRuntimeServiceProcessor {
	self := &LLMRuntimeServiceProcessor{runtime.NewLLMRuntimeServiceProcessor(handler)}
	return self
}

type ObservabilityTraceServiceProcessor struct {
	*trace.TraceServiceProcessor
}

func NewObservabilityTraceServiceProcessor(handler ObservabilityTraceService) *ObservabilityTraceServiceProcessor {
	self := &ObservabilityTraceServiceProcessor{trace.NewTraceServiceProcessor(handler)}
	return self
}

type ObservabilityOpenAPIServiceProcessor struct {
	*openapi1.OpenAPIServiceProcessor
}

func NewObservabilityOpenAPIServiceProcessor(handler ObservabilityOpenAPIService) *ObservabilityOpenAPIServiceProcessor {
	self := &ObservabilityOpenAPIServiceProcessor{openapi1.NewOpenAPIServiceProcessor(handler)}
	return self
}

type FoundationAuthServiceProcessor struct {
	*auth.AuthServiceProcessor
}

func NewFoundationAuthServiceProcessor(handler FoundationAuthService) *FoundationAuthServiceProcessor {
	self := &FoundationAuthServiceProcessor{auth.NewAuthServiceProcessor(handler)}
	return self
}

type FoundationAuthNServiceProcessor struct {
	*authn.AuthNServiceProcessor
}

func NewFoundationAuthNServiceProcessor(handler FoundationAuthNService) *FoundationAuthNServiceProcessor {
	self := &FoundationAuthNServiceProcessor{authn.NewAuthNServiceProcessor(handler)}
	return self
}

type FoundationUserServiceProcessor struct {
	*user.UserServiceProcessor
}

func NewFoundationUserServiceProcessor(handler FoundationUserService) *FoundationUserServiceProcessor {
	self := &FoundationUserServiceProcessor{user.NewUserServiceProcessor(handler)}
	return self
}

type FoundationSpaceServiceProcessor struct {
	*space.SpaceServiceProcessor
}

func NewFoundationSpaceServiceProcessor(handler FoundationSpaceService) *FoundationSpaceServiceProcessor {
	self := &FoundationSpaceServiceProcessor{space.NewSpaceServiceProcessor(handler)}
	return self
}

type FoundationFileServiceProcessor struct {
	*file.FileServiceProcessor
}

func NewFoundationFileServiceProcessor(handler FoundationFileService) *FoundationFileServiceProcessor {
	self := &FoundationFileServiceProcessor{file.NewFileServiceProcessor(handler)}
	return self
}

type FoundationOpenAPIServiceProcessor struct {
	*openapi.FoundationOpenAPIServiceProcessor
}

func NewFoundationOpenAPIServiceProcessor(handler FoundationOpenAPIService) *FoundationOpenAPIServiceProcessor {
	self := &FoundationOpenAPIServiceProcessor{openapi.NewFoundationOpenAPIServiceProcessor(handler)}
	return self
}
