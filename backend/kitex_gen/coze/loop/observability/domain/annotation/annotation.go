// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package annotation

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/observability/domain/common"
	"strings"
)

const (
	AnnotationTypeAutoEvaluate = "auto_evaluate"

	AnnotationTypeEvaluationSet = "manual_evaluation_set"

	AnnotationTypeManualFeedback = "manual_feedback"

	AnnotationTypeCozeFeedback = "coze_feedback"

	ValueTypeString = "string"

	ValueTypeLong = "long"

	ValueTypeDouble = "double"

	ValueTypeBool = "bool"
)

type AnnotationType = string

type ValueType = string

type Correction struct {
	Score    *float64         `thrift:"score,1,optional" frugal:"1,optional,double" form:"score" json:"score,omitempty" query:"score"`
	Explain  *string          `thrift:"explain,2,optional" frugal:"2,optional,string" form:"explain" json:"explain,omitempty" query:"explain"`
	BaseInfo *common.BaseInfo `thrift:"base_info,100,optional" frugal:"100,optional,common.BaseInfo" form:"base_info" json:"base_info,omitempty" query:"base_info"`
}

func NewCorrection() *Correction {
	return &Correction{}
}

func (p *Correction) InitDefault() {
}

var Correction_Score_DEFAULT float64

func (p *Correction) GetScore() (v float64) {
	if p == nil {
		return
	}
	if !p.IsSetScore() {
		return Correction_Score_DEFAULT
	}
	return *p.Score
}

var Correction_Explain_DEFAULT string

func (p *Correction) GetExplain() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetExplain() {
		return Correction_Explain_DEFAULT
	}
	return *p.Explain
}

var Correction_BaseInfo_DEFAULT *common.BaseInfo

func (p *Correction) GetBaseInfo() (v *common.BaseInfo) {
	if p == nil {
		return
	}
	if !p.IsSetBaseInfo() {
		return Correction_BaseInfo_DEFAULT
	}
	return p.BaseInfo
}
func (p *Correction) SetScore(val *float64) {
	p.Score = val
}
func (p *Correction) SetExplain(val *string) {
	p.Explain = val
}
func (p *Correction) SetBaseInfo(val *common.BaseInfo) {
	p.BaseInfo = val
}

var fieldIDToName_Correction = map[int16]string{
	1:   "score",
	2:   "explain",
	100: "base_info",
}

func (p *Correction) IsSetScore() bool {
	return p.Score != nil
}

func (p *Correction) IsSetExplain() bool {
	return p.Explain != nil
}

func (p *Correction) IsSetBaseInfo() bool {
	return p.BaseInfo != nil
}

func (p *Correction) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Correction[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Correction) ReadField1(iprot thrift.TProtocol) error {

	var _field *float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Score = _field
	return nil
}
func (p *Correction) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Explain = _field
	return nil
}
func (p *Correction) ReadField100(iprot thrift.TProtocol) error {
	_field := common.NewBaseInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseInfo = _field
	return nil
}

func (p *Correction) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Correction"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Correction) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetScore() {
		if err = oprot.WriteFieldBegin("score", thrift.DOUBLE, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.Score); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *Correction) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetExplain() {
		if err = oprot.WriteFieldBegin("explain", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Explain); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *Correction) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseInfo() {
		if err = oprot.WriteFieldBegin("base_info", thrift.STRUCT, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseInfo.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}

func (p *Correction) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Correction(%+v)", *p)

}

func (p *Correction) DeepEqual(ano *Correction) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Score) {
		return false
	}
	if !p.Field2DeepEqual(ano.Explain) {
		return false
	}
	if !p.Field100DeepEqual(ano.BaseInfo) {
		return false
	}
	return true
}

func (p *Correction) Field1DeepEqual(src *float64) bool {

	if p.Score == src {
		return true
	} else if p.Score == nil || src == nil {
		return false
	}
	if *p.Score != *src {
		return false
	}
	return true
}
func (p *Correction) Field2DeepEqual(src *string) bool {

	if p.Explain == src {
		return true
	} else if p.Explain == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Explain, *src) != 0 {
		return false
	}
	return true
}
func (p *Correction) Field100DeepEqual(src *common.BaseInfo) bool {

	if !p.BaseInfo.DeepEqual(src) {
		return false
	}
	return true
}

type EvaluatorResult_ struct {
	Score      *float64    `thrift:"score,1,optional" frugal:"1,optional,double" form:"score" json:"score,omitempty" query:"score"`
	Correction *Correction `thrift:"correction,2,optional" frugal:"2,optional,Correction" form:"correction" json:"correction,omitempty" query:"correction"`
	Reasoning  *string     `thrift:"reasoning,3,optional" frugal:"3,optional,string" form:"reasoning" json:"reasoning,omitempty" query:"reasoning"`
}

func NewEvaluatorResult_() *EvaluatorResult_ {
	return &EvaluatorResult_{}
}

func (p *EvaluatorResult_) InitDefault() {
}

var EvaluatorResult__Score_DEFAULT float64

func (p *EvaluatorResult_) GetScore() (v float64) {
	if p == nil {
		return
	}
	if !p.IsSetScore() {
		return EvaluatorResult__Score_DEFAULT
	}
	return *p.Score
}

var EvaluatorResult__Correction_DEFAULT *Correction

func (p *EvaluatorResult_) GetCorrection() (v *Correction) {
	if p == nil {
		return
	}
	if !p.IsSetCorrection() {
		return EvaluatorResult__Correction_DEFAULT
	}
	return p.Correction
}

var EvaluatorResult__Reasoning_DEFAULT string

func (p *EvaluatorResult_) GetReasoning() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetReasoning() {
		return EvaluatorResult__Reasoning_DEFAULT
	}
	return *p.Reasoning
}
func (p *EvaluatorResult_) SetScore(val *float64) {
	p.Score = val
}
func (p *EvaluatorResult_) SetCorrection(val *Correction) {
	p.Correction = val
}
func (p *EvaluatorResult_) SetReasoning(val *string) {
	p.Reasoning = val
}

var fieldIDToName_EvaluatorResult_ = map[int16]string{
	1: "score",
	2: "correction",
	3: "reasoning",
}

func (p *EvaluatorResult_) IsSetScore() bool {
	return p.Score != nil
}

func (p *EvaluatorResult_) IsSetCorrection() bool {
	return p.Correction != nil
}

func (p *EvaluatorResult_) IsSetReasoning() bool {
	return p.Reasoning != nil
}

func (p *EvaluatorResult_) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EvaluatorResult_[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EvaluatorResult_) ReadField1(iprot thrift.TProtocol) error {

	var _field *float64
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Score = _field
	return nil
}
func (p *EvaluatorResult_) ReadField2(iprot thrift.TProtocol) error {
	_field := NewCorrection()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Correction = _field
	return nil
}
func (p *EvaluatorResult_) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Reasoning = _field
	return nil
}

func (p *EvaluatorResult_) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EvaluatorResult"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EvaluatorResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetScore() {
		if err = oprot.WriteFieldBegin("score", thrift.DOUBLE, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteDouble(*p.Score); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *EvaluatorResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetCorrection() {
		if err = oprot.WriteFieldBegin("correction", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Correction.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *EvaluatorResult_) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetReasoning() {
		if err = oprot.WriteFieldBegin("reasoning", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Reasoning); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *EvaluatorResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EvaluatorResult_(%+v)", *p)

}

func (p *EvaluatorResult_) DeepEqual(ano *EvaluatorResult_) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Score) {
		return false
	}
	if !p.Field2DeepEqual(ano.Correction) {
		return false
	}
	if !p.Field3DeepEqual(ano.Reasoning) {
		return false
	}
	return true
}

func (p *EvaluatorResult_) Field1DeepEqual(src *float64) bool {

	if p.Score == src {
		return true
	} else if p.Score == nil || src == nil {
		return false
	}
	if *p.Score != *src {
		return false
	}
	return true
}
func (p *EvaluatorResult_) Field2DeepEqual(src *Correction) bool {

	if !p.Correction.DeepEqual(src) {
		return false
	}
	return true
}
func (p *EvaluatorResult_) Field3DeepEqual(src *string) bool {

	if p.Reasoning == src {
		return true
	} else if p.Reasoning == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Reasoning, *src) != 0 {
		return false
	}
	return true
}

type AutoEvaluate struct {
	EvaluatorVersionID int64             `thrift:"evaluator_version_id,1,required" frugal:"1,required,i64" json:"evaluator_version_id" form:"evaluator_version_id,required" query:"evaluator_version_id,required"`
	EvaluatorName      string            `thrift:"evaluator_name,2,required" frugal:"2,required,string" form:"evaluator_name,required" json:"evaluator_name,required" query:"evaluator_name,required"`
	EvaluatorVersion   string            `thrift:"evaluator_version,3,required" frugal:"3,required,string" form:"evaluator_version,required" json:"evaluator_version,required" query:"evaluator_version,required"`
	EvaluatorResult_   *EvaluatorResult_ `thrift:"evaluator_result,4,optional" frugal:"4,optional,EvaluatorResult_" form:"evaluator_result" json:"evaluator_result,omitempty" query:"evaluator_result"`
	RecordID           int64             `thrift:"record_id,5,required" frugal:"5,required,i64" json:"record_id" form:"record_id,required" query:"record_id,required"`
	TaskID             string            `thrift:"task_id,6,required" frugal:"6,required,string" form:"task_id,required" json:"task_id,required" query:"task_id,required"`
}

func NewAutoEvaluate() *AutoEvaluate {
	return &AutoEvaluate{}
}

func (p *AutoEvaluate) InitDefault() {
}

func (p *AutoEvaluate) GetEvaluatorVersionID() (v int64) {
	if p != nil {
		return p.EvaluatorVersionID
	}
	return
}

func (p *AutoEvaluate) GetEvaluatorName() (v string) {
	if p != nil {
		return p.EvaluatorName
	}
	return
}

func (p *AutoEvaluate) GetEvaluatorVersion() (v string) {
	if p != nil {
		return p.EvaluatorVersion
	}
	return
}

var AutoEvaluate_EvaluatorResult__DEFAULT *EvaluatorResult_

func (p *AutoEvaluate) GetEvaluatorResult_() (v *EvaluatorResult_) {
	if p == nil {
		return
	}
	if !p.IsSetEvaluatorResult_() {
		return AutoEvaluate_EvaluatorResult__DEFAULT
	}
	return p.EvaluatorResult_
}

func (p *AutoEvaluate) GetRecordID() (v int64) {
	if p != nil {
		return p.RecordID
	}
	return
}

func (p *AutoEvaluate) GetTaskID() (v string) {
	if p != nil {
		return p.TaskID
	}
	return
}
func (p *AutoEvaluate) SetEvaluatorVersionID(val int64) {
	p.EvaluatorVersionID = val
}
func (p *AutoEvaluate) SetEvaluatorName(val string) {
	p.EvaluatorName = val
}
func (p *AutoEvaluate) SetEvaluatorVersion(val string) {
	p.EvaluatorVersion = val
}
func (p *AutoEvaluate) SetEvaluatorResult_(val *EvaluatorResult_) {
	p.EvaluatorResult_ = val
}
func (p *AutoEvaluate) SetRecordID(val int64) {
	p.RecordID = val
}
func (p *AutoEvaluate) SetTaskID(val string) {
	p.TaskID = val
}

var fieldIDToName_AutoEvaluate = map[int16]string{
	1: "evaluator_version_id",
	2: "evaluator_name",
	3: "evaluator_version",
	4: "evaluator_result",
	5: "record_id",
	6: "task_id",
}

func (p *AutoEvaluate) IsSetEvaluatorResult_() bool {
	return p.EvaluatorResult_ != nil
}

func (p *AutoEvaluate) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetEvaluatorVersionID bool = false
	var issetEvaluatorName bool = false
	var issetEvaluatorVersion bool = false
	var issetRecordID bool = false
	var issetTaskID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluatorVersionID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluatorName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetEvaluatorVersion = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetRecordID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetTaskID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetEvaluatorVersionID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetEvaluatorName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetEvaluatorVersion {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetRecordID {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetTaskID {
		fieldId = 6
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AutoEvaluate[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_AutoEvaluate[fieldId]))
}

func (p *AutoEvaluate) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluatorVersionID = _field
	return nil
}
func (p *AutoEvaluate) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluatorName = _field
	return nil
}
func (p *AutoEvaluate) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EvaluatorVersion = _field
	return nil
}
func (p *AutoEvaluate) ReadField4(iprot thrift.TProtocol) error {
	_field := NewEvaluatorResult_()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.EvaluatorResult_ = _field
	return nil
}
func (p *AutoEvaluate) ReadField5(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.RecordID = _field
	return nil
}
func (p *AutoEvaluate) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TaskID = _field
	return nil
}

func (p *AutoEvaluate) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AutoEvaluate"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AutoEvaluate) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluator_version_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EvaluatorVersionID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *AutoEvaluate) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluator_name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.EvaluatorName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *AutoEvaluate) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("evaluator_version", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.EvaluatorVersion); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *AutoEvaluate) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetEvaluatorResult_() {
		if err = oprot.WriteFieldBegin("evaluator_result", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.EvaluatorResult_.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *AutoEvaluate) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("record_id", thrift.I64, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.RecordID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *AutoEvaluate) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("task_id", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TaskID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *AutoEvaluate) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AutoEvaluate(%+v)", *p)

}

func (p *AutoEvaluate) DeepEqual(ano *AutoEvaluate) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EvaluatorVersionID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EvaluatorName) {
		return false
	}
	if !p.Field3DeepEqual(ano.EvaluatorVersion) {
		return false
	}
	if !p.Field4DeepEqual(ano.EvaluatorResult_) {
		return false
	}
	if !p.Field5DeepEqual(ano.RecordID) {
		return false
	}
	if !p.Field6DeepEqual(ano.TaskID) {
		return false
	}
	return true
}

func (p *AutoEvaluate) Field1DeepEqual(src int64) bool {

	if p.EvaluatorVersionID != src {
		return false
	}
	return true
}
func (p *AutoEvaluate) Field2DeepEqual(src string) bool {

	if strings.Compare(p.EvaluatorName, src) != 0 {
		return false
	}
	return true
}
func (p *AutoEvaluate) Field3DeepEqual(src string) bool {

	if strings.Compare(p.EvaluatorVersion, src) != 0 {
		return false
	}
	return true
}
func (p *AutoEvaluate) Field4DeepEqual(src *EvaluatorResult_) bool {

	if !p.EvaluatorResult_.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AutoEvaluate) Field5DeepEqual(src int64) bool {

	if p.RecordID != src {
		return false
	}
	return true
}
func (p *AutoEvaluate) Field6DeepEqual(src string) bool {

	if strings.Compare(p.TaskID, src) != 0 {
		return false
	}
	return true
}

type ManualFeedback struct {
	TagKeyID   int64   `thrift:"tag_key_id,1,required" frugal:"1,required,i64" json:"tag_key_id" form:"tag_key_id,required" query:"tag_key_id,required"`
	TagKeyName string  `thrift:"tag_key_name,2,required" frugal:"2,required,string" form:"tag_key_name,required" json:"tag_key_name,required" query:"tag_key_name,required"`
	TagValueID *int64  `thrift:"tag_value_id,3,optional" frugal:"3,optional,i64" json:"tag_value_id" form:"tag_value_id" query:"tag_value_id"`
	TagValue   *string `thrift:"tag_value,4,optional" frugal:"4,optional,string" form:"tag_value" json:"tag_value,omitempty" query:"tag_value"`
}

func NewManualFeedback() *ManualFeedback {
	return &ManualFeedback{}
}

func (p *ManualFeedback) InitDefault() {
}

func (p *ManualFeedback) GetTagKeyID() (v int64) {
	if p != nil {
		return p.TagKeyID
	}
	return
}

func (p *ManualFeedback) GetTagKeyName() (v string) {
	if p != nil {
		return p.TagKeyName
	}
	return
}

var ManualFeedback_TagValueID_DEFAULT int64

func (p *ManualFeedback) GetTagValueID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetTagValueID() {
		return ManualFeedback_TagValueID_DEFAULT
	}
	return *p.TagValueID
}

var ManualFeedback_TagValue_DEFAULT string

func (p *ManualFeedback) GetTagValue() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetTagValue() {
		return ManualFeedback_TagValue_DEFAULT
	}
	return *p.TagValue
}
func (p *ManualFeedback) SetTagKeyID(val int64) {
	p.TagKeyID = val
}
func (p *ManualFeedback) SetTagKeyName(val string) {
	p.TagKeyName = val
}
func (p *ManualFeedback) SetTagValueID(val *int64) {
	p.TagValueID = val
}
func (p *ManualFeedback) SetTagValue(val *string) {
	p.TagValue = val
}

var fieldIDToName_ManualFeedback = map[int16]string{
	1: "tag_key_id",
	2: "tag_key_name",
	3: "tag_value_id",
	4: "tag_value",
}

func (p *ManualFeedback) IsSetTagValueID() bool {
	return p.TagValueID != nil
}

func (p *ManualFeedback) IsSetTagValue() bool {
	return p.TagValue != nil
}

func (p *ManualFeedback) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTagKeyID bool = false
	var issetTagKeyName bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTagKeyID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTagKeyName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTagKeyID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTagKeyName {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ManualFeedback[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ManualFeedback[fieldId]))
}

func (p *ManualFeedback) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TagKeyID = _field
	return nil
}
func (p *ManualFeedback) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TagKeyName = _field
	return nil
}
func (p *ManualFeedback) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TagValueID = _field
	return nil
}
func (p *ManualFeedback) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TagValue = _field
	return nil
}

func (p *ManualFeedback) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ManualFeedback"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ManualFeedback) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tag_key_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TagKeyID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ManualFeedback) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tag_key_name", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TagKeyName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ManualFeedback) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagValueID() {
		if err = oprot.WriteFieldBegin("tag_value_id", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.TagValueID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ManualFeedback) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagValue() {
		if err = oprot.WriteFieldBegin("tag_value", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TagValue); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *ManualFeedback) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ManualFeedback(%+v)", *p)

}

func (p *ManualFeedback) DeepEqual(ano *ManualFeedback) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TagKeyID) {
		return false
	}
	if !p.Field2DeepEqual(ano.TagKeyName) {
		return false
	}
	if !p.Field3DeepEqual(ano.TagValueID) {
		return false
	}
	if !p.Field4DeepEqual(ano.TagValue) {
		return false
	}
	return true
}

func (p *ManualFeedback) Field1DeepEqual(src int64) bool {

	if p.TagKeyID != src {
		return false
	}
	return true
}
func (p *ManualFeedback) Field2DeepEqual(src string) bool {

	if strings.Compare(p.TagKeyName, src) != 0 {
		return false
	}
	return true
}
func (p *ManualFeedback) Field3DeepEqual(src *int64) bool {

	if p.TagValueID == src {
		return true
	} else if p.TagValueID == nil || src == nil {
		return false
	}
	if *p.TagValueID != *src {
		return false
	}
	return true
}
func (p *ManualFeedback) Field4DeepEqual(src *string) bool {

	if p.TagValue == src {
		return true
	} else if p.TagValue == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TagValue, *src) != 0 {
		return false
	}
	return true
}

type Annotation struct {
	ID             *string          `thrift:"id,1,optional" frugal:"1,optional,string" form:"id" json:"id,omitempty" query:"id"`
	SpanID         *string          `thrift:"span_id,2,optional" frugal:"2,optional,string" form:"span_id" json:"span_id,omitempty" query:"span_id"`
	TraceID        *string          `thrift:"trace_id,3,optional" frugal:"3,optional,string" form:"trace_id" json:"trace_id,omitempty" query:"trace_id"`
	WorkspaceID    *string          `thrift:"workspace_id,4,optional" frugal:"4,optional,string" form:"workspace_id" json:"workspace_id,omitempty" query:"workspace_id"`
	StartTime      *int64           `thrift:"start_time,5,optional" frugal:"5,optional,i64" json:"start_time" form:"start_time" query:"start_time"`
	Type           *AnnotationType  `thrift:"type,6,optional" frugal:"6,optional,string" form:"type" json:"type,omitempty" query:"type"`
	Key            *string          `thrift:"key,7,optional" frugal:"7,optional,string" form:"key" json:"key,omitempty" query:"key"`
	ValueType      *ValueType       `thrift:"value_type,8,optional" frugal:"8,optional,string" form:"value_type" json:"value_type,omitempty" query:"value_type"`
	Value          *string          `thrift:"value,9,optional" frugal:"9,optional,string" form:"value" json:"value,omitempty" query:"value"`
	Status         *string          `thrift:"status,10,optional" frugal:"10,optional,string" form:"status" json:"status,omitempty" query:"status"`
	Reasoning      *string          `thrift:"reasoning,11,optional" frugal:"11,optional,string" form:"reasoning" json:"reasoning,omitempty" query:"reasoning"`
	BaseInfo       *common.BaseInfo `thrift:"base_info,100,optional" frugal:"100,optional,common.BaseInfo" form:"base_info" json:"base_info,omitempty" query:"base_info"`
	AutoEvaluate   *AutoEvaluate    `thrift:"auto_evaluate,101,optional" frugal:"101,optional,AutoEvaluate" form:"auto_evaluate" json:"auto_evaluate,omitempty" query:"auto_evaluate"`
	ManualFeedback *ManualFeedback  `thrift:"manual_feedback,102,optional" frugal:"102,optional,ManualFeedback" form:"manual_feedback" json:"manual_feedback,omitempty" query:"manual_feedback"`
}

func NewAnnotation() *Annotation {
	return &Annotation{}
}

func (p *Annotation) InitDefault() {
}

var Annotation_ID_DEFAULT string

func (p *Annotation) GetID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetID() {
		return Annotation_ID_DEFAULT
	}
	return *p.ID
}

var Annotation_SpanID_DEFAULT string

func (p *Annotation) GetSpanID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetSpanID() {
		return Annotation_SpanID_DEFAULT
	}
	return *p.SpanID
}

var Annotation_TraceID_DEFAULT string

func (p *Annotation) GetTraceID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetTraceID() {
		return Annotation_TraceID_DEFAULT
	}
	return *p.TraceID
}

var Annotation_WorkspaceID_DEFAULT string

func (p *Annotation) GetWorkspaceID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return Annotation_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var Annotation_StartTime_DEFAULT int64

func (p *Annotation) GetStartTime() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetStartTime() {
		return Annotation_StartTime_DEFAULT
	}
	return *p.StartTime
}

var Annotation_Type_DEFAULT AnnotationType

func (p *Annotation) GetType() (v AnnotationType) {
	if p == nil {
		return
	}
	if !p.IsSetType() {
		return Annotation_Type_DEFAULT
	}
	return *p.Type
}

var Annotation_Key_DEFAULT string

func (p *Annotation) GetKey() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetKey() {
		return Annotation_Key_DEFAULT
	}
	return *p.Key
}

var Annotation_ValueType_DEFAULT ValueType

func (p *Annotation) GetValueType() (v ValueType) {
	if p == nil {
		return
	}
	if !p.IsSetValueType() {
		return Annotation_ValueType_DEFAULT
	}
	return *p.ValueType
}

var Annotation_Value_DEFAULT string

func (p *Annotation) GetValue() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetValue() {
		return Annotation_Value_DEFAULT
	}
	return *p.Value
}

var Annotation_Status_DEFAULT string

func (p *Annotation) GetStatus() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetStatus() {
		return Annotation_Status_DEFAULT
	}
	return *p.Status
}

var Annotation_Reasoning_DEFAULT string

func (p *Annotation) GetReasoning() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetReasoning() {
		return Annotation_Reasoning_DEFAULT
	}
	return *p.Reasoning
}

var Annotation_BaseInfo_DEFAULT *common.BaseInfo

func (p *Annotation) GetBaseInfo() (v *common.BaseInfo) {
	if p == nil {
		return
	}
	if !p.IsSetBaseInfo() {
		return Annotation_BaseInfo_DEFAULT
	}
	return p.BaseInfo
}

var Annotation_AutoEvaluate_DEFAULT *AutoEvaluate

func (p *Annotation) GetAutoEvaluate() (v *AutoEvaluate) {
	if p == nil {
		return
	}
	if !p.IsSetAutoEvaluate() {
		return Annotation_AutoEvaluate_DEFAULT
	}
	return p.AutoEvaluate
}

var Annotation_ManualFeedback_DEFAULT *ManualFeedback

func (p *Annotation) GetManualFeedback() (v *ManualFeedback) {
	if p == nil {
		return
	}
	if !p.IsSetManualFeedback() {
		return Annotation_ManualFeedback_DEFAULT
	}
	return p.ManualFeedback
}
func (p *Annotation) SetID(val *string) {
	p.ID = val
}
func (p *Annotation) SetSpanID(val *string) {
	p.SpanID = val
}
func (p *Annotation) SetTraceID(val *string) {
	p.TraceID = val
}
func (p *Annotation) SetWorkspaceID(val *string) {
	p.WorkspaceID = val
}
func (p *Annotation) SetStartTime(val *int64) {
	p.StartTime = val
}
func (p *Annotation) SetType(val *AnnotationType) {
	p.Type = val
}
func (p *Annotation) SetKey(val *string) {
	p.Key = val
}
func (p *Annotation) SetValueType(val *ValueType) {
	p.ValueType = val
}
func (p *Annotation) SetValue(val *string) {
	p.Value = val
}
func (p *Annotation) SetStatus(val *string) {
	p.Status = val
}
func (p *Annotation) SetReasoning(val *string) {
	p.Reasoning = val
}
func (p *Annotation) SetBaseInfo(val *common.BaseInfo) {
	p.BaseInfo = val
}
func (p *Annotation) SetAutoEvaluate(val *AutoEvaluate) {
	p.AutoEvaluate = val
}
func (p *Annotation) SetManualFeedback(val *ManualFeedback) {
	p.ManualFeedback = val
}

var fieldIDToName_Annotation = map[int16]string{
	1:   "id",
	2:   "span_id",
	3:   "trace_id",
	4:   "workspace_id",
	5:   "start_time",
	6:   "type",
	7:   "key",
	8:   "value_type",
	9:   "value",
	10:  "status",
	11:  "reasoning",
	100: "base_info",
	101: "auto_evaluate",
	102: "manual_feedback",
}

func (p *Annotation) IsSetID() bool {
	return p.ID != nil
}

func (p *Annotation) IsSetSpanID() bool {
	return p.SpanID != nil
}

func (p *Annotation) IsSetTraceID() bool {
	return p.TraceID != nil
}

func (p *Annotation) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *Annotation) IsSetStartTime() bool {
	return p.StartTime != nil
}

func (p *Annotation) IsSetType() bool {
	return p.Type != nil
}

func (p *Annotation) IsSetKey() bool {
	return p.Key != nil
}

func (p *Annotation) IsSetValueType() bool {
	return p.ValueType != nil
}

func (p *Annotation) IsSetValue() bool {
	return p.Value != nil
}

func (p *Annotation) IsSetStatus() bool {
	return p.Status != nil
}

func (p *Annotation) IsSetReasoning() bool {
	return p.Reasoning != nil
}

func (p *Annotation) IsSetBaseInfo() bool {
	return p.BaseInfo != nil
}

func (p *Annotation) IsSetAutoEvaluate() bool {
	return p.AutoEvaluate != nil
}

func (p *Annotation) IsSetManualFeedback() bool {
	return p.ManualFeedback != nil
}

func (p *Annotation) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 100:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField100(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 102:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField102(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Annotation[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Annotation) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ID = _field
	return nil
}
func (p *Annotation) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SpanID = _field
	return nil
}
func (p *Annotation) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.TraceID = _field
	return nil
}
func (p *Annotation) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *Annotation) ReadField5(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.StartTime = _field
	return nil
}
func (p *Annotation) ReadField6(iprot thrift.TProtocol) error {

	var _field *AnnotationType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Type = _field
	return nil
}
func (p *Annotation) ReadField7(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Key = _field
	return nil
}
func (p *Annotation) ReadField8(iprot thrift.TProtocol) error {

	var _field *ValueType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ValueType = _field
	return nil
}
func (p *Annotation) ReadField9(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Value = _field
	return nil
}
func (p *Annotation) ReadField10(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Status = _field
	return nil
}
func (p *Annotation) ReadField11(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Reasoning = _field
	return nil
}
func (p *Annotation) ReadField100(iprot thrift.TProtocol) error {
	_field := common.NewBaseInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseInfo = _field
	return nil
}
func (p *Annotation) ReadField101(iprot thrift.TProtocol) error {
	_field := NewAutoEvaluate()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.AutoEvaluate = _field
	return nil
}
func (p *Annotation) ReadField102(iprot thrift.TProtocol) error {
	_field := NewManualFeedback()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.ManualFeedback = _field
	return nil
}

func (p *Annotation) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Annotation"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField100(oprot); err != nil {
			fieldId = 100
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField102(oprot); err != nil {
			fieldId = 102
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Annotation) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *Annotation) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSpanID() {
		if err = oprot.WriteFieldBegin("span_id", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.SpanID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *Annotation) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTraceID() {
		if err = oprot.WriteFieldBegin("trace_id", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.TraceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *Annotation) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *Annotation) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetStartTime() {
		if err = oprot.WriteFieldBegin("start_time", thrift.I64, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.StartTime); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *Annotation) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetType() {
		if err = oprot.WriteFieldBegin("type", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Type); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *Annotation) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetKey() {
		if err = oprot.WriteFieldBegin("key", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Key); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}
func (p *Annotation) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetValueType() {
		if err = oprot.WriteFieldBegin("value_type", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ValueType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}
func (p *Annotation) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetValue() {
		if err = oprot.WriteFieldBegin("value", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Value); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}
func (p *Annotation) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetStatus() {
		if err = oprot.WriteFieldBegin("status", thrift.STRING, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Status); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}
func (p *Annotation) writeField11(oprot thrift.TProtocol) (err error) {
	if p.IsSetReasoning() {
		if err = oprot.WriteFieldBegin("reasoning", thrift.STRING, 11); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Reasoning); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}
func (p *Annotation) writeField100(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseInfo() {
		if err = oprot.WriteFieldBegin("base_info", thrift.STRUCT, 100); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseInfo.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 100 end error: ", p), err)
}
func (p *Annotation) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetAutoEvaluate() {
		if err = oprot.WriteFieldBegin("auto_evaluate", thrift.STRUCT, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.AutoEvaluate.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}
func (p *Annotation) writeField102(oprot thrift.TProtocol) (err error) {
	if p.IsSetManualFeedback() {
		if err = oprot.WriteFieldBegin("manual_feedback", thrift.STRUCT, 102); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.ManualFeedback.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 end error: ", p), err)
}

func (p *Annotation) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Annotation(%+v)", *p)

}

func (p *Annotation) DeepEqual(ano *Annotation) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field2DeepEqual(ano.SpanID) {
		return false
	}
	if !p.Field3DeepEqual(ano.TraceID) {
		return false
	}
	if !p.Field4DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field5DeepEqual(ano.StartTime) {
		return false
	}
	if !p.Field6DeepEqual(ano.Type) {
		return false
	}
	if !p.Field7DeepEqual(ano.Key) {
		return false
	}
	if !p.Field8DeepEqual(ano.ValueType) {
		return false
	}
	if !p.Field9DeepEqual(ano.Value) {
		return false
	}
	if !p.Field10DeepEqual(ano.Status) {
		return false
	}
	if !p.Field11DeepEqual(ano.Reasoning) {
		return false
	}
	if !p.Field100DeepEqual(ano.BaseInfo) {
		return false
	}
	if !p.Field101DeepEqual(ano.AutoEvaluate) {
		return false
	}
	if !p.Field102DeepEqual(ano.ManualFeedback) {
		return false
	}
	return true
}

func (p *Annotation) Field1DeepEqual(src *string) bool {

	if p.ID == src {
		return true
	} else if p.ID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ID, *src) != 0 {
		return false
	}
	return true
}
func (p *Annotation) Field2DeepEqual(src *string) bool {

	if p.SpanID == src {
		return true
	} else if p.SpanID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.SpanID, *src) != 0 {
		return false
	}
	return true
}
func (p *Annotation) Field3DeepEqual(src *string) bool {

	if p.TraceID == src {
		return true
	} else if p.TraceID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.TraceID, *src) != 0 {
		return false
	}
	return true
}
func (p *Annotation) Field4DeepEqual(src *string) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.WorkspaceID, *src) != 0 {
		return false
	}
	return true
}
func (p *Annotation) Field5DeepEqual(src *int64) bool {

	if p.StartTime == src {
		return true
	} else if p.StartTime == nil || src == nil {
		return false
	}
	if *p.StartTime != *src {
		return false
	}
	return true
}
func (p *Annotation) Field6DeepEqual(src *AnnotationType) bool {

	if p.Type == src {
		return true
	} else if p.Type == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Type, *src) != 0 {
		return false
	}
	return true
}
func (p *Annotation) Field7DeepEqual(src *string) bool {

	if p.Key == src {
		return true
	} else if p.Key == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Key, *src) != 0 {
		return false
	}
	return true
}
func (p *Annotation) Field8DeepEqual(src *ValueType) bool {

	if p.ValueType == src {
		return true
	} else if p.ValueType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ValueType, *src) != 0 {
		return false
	}
	return true
}
func (p *Annotation) Field9DeepEqual(src *string) bool {

	if p.Value == src {
		return true
	} else if p.Value == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Value, *src) != 0 {
		return false
	}
	return true
}
func (p *Annotation) Field10DeepEqual(src *string) bool {

	if p.Status == src {
		return true
	} else if p.Status == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Status, *src) != 0 {
		return false
	}
	return true
}
func (p *Annotation) Field11DeepEqual(src *string) bool {

	if p.Reasoning == src {
		return true
	} else if p.Reasoning == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Reasoning, *src) != 0 {
		return false
	}
	return true
}
func (p *Annotation) Field100DeepEqual(src *common.BaseInfo) bool {

	if !p.BaseInfo.DeepEqual(src) {
		return false
	}
	return true
}
func (p *Annotation) Field101DeepEqual(src *AutoEvaluate) bool {

	if !p.AutoEvaluate.DeepEqual(src) {
		return false
	}
	return true
}
func (p *Annotation) Field102DeepEqual(src *ManualFeedback) bool {

	if !p.ManualFeedback.DeepEqual(src) {
		return false
	}
	return true
}
