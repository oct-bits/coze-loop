// Code generated by Validator v0.2.6. DO NOT EDIT.

package annotation

import (
	"bytes"
	"fmt"
	"reflect"
	"regexp"
	"strings"
	"time"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
	_ = (*bytes.Buffer)(nil)
	_ = (*strings.Builder)(nil)
	_ = reflect.Type(nil)
	_ = (*regexp.Regexp)(nil)
	_ = time.Nanosecond
)

func (p *Correction) IsValid() error {
	if p.BaseInfo != nil {
		if err := p.BaseInfo.IsValid(); err != nil {
			return fmt.Errorf("field BaseInfo not valid, %w", err)
		}
	}
	return nil
}
func (p *EvaluatorResult_) IsValid() error {
	if p.Correction != nil {
		if err := p.Correction.IsValid(); err != nil {
			return fmt.Errorf("field Correction not valid, %w", err)
		}
	}
	return nil
}
func (p *AutoEvaluate) IsValid() error {
	if p.EvaluatorResult_ != nil {
		if err := p.EvaluatorResult_.IsValid(); err != nil {
			return fmt.Errorf("field EvaluatorResult_ not valid, %w", err)
		}
	}
	return nil
}
func (p *ManualFeedback) IsValid() error {
	return nil
}
func (p *Annotation) IsValid() error {
	if p.SpanID == nil {
		return fmt.Errorf("field SpanID not_nil rule failed")
	}
	if len(*p.SpanID) < int(1) {
		return fmt.Errorf("field SpanID min_len rule failed, current value: %d", len(*p.SpanID))
	}
	if p.TraceID == nil {
		return fmt.Errorf("field TraceID not_nil rule failed")
	}
	if len(*p.TraceID) < int(1) {
		return fmt.Errorf("field TraceID min_len rule failed, current value: %d", len(*p.TraceID))
	}
	if p.WorkspaceID == nil {
		return fmt.Errorf("field WorkspaceID not_nil rule failed")
	}
	if len(*p.WorkspaceID) < int(1) {
		return fmt.Errorf("field WorkspaceID min_len rule failed, current value: %d", len(*p.WorkspaceID))
	}
	if p.StartTime == nil {
		return fmt.Errorf("field StartTime not_nil rule failed")
	}
	if *p.StartTime <= int64(0) {
		return fmt.Errorf("field StartTime gt rule failed, current value: %v", *p.StartTime)
	}
	if p.Key == nil {
		return fmt.Errorf("field Key not_nil rule failed")
	}
	if len(*p.Key) < int(1) {
		return fmt.Errorf("field Key min_len rule failed, current value: %d", len(*p.Key))
	}
	if p.BaseInfo != nil {
		if err := p.BaseInfo.IsValid(); err != nil {
			return fmt.Errorf("field BaseInfo not valid, %w", err)
		}
	}
	if p.AutoEvaluate != nil {
		if err := p.AutoEvaluate.IsValid(); err != nil {
			return fmt.Errorf("field AutoEvaluate not valid, %w", err)
		}
	}
	if p.ManualFeedback != nil {
		if err := p.ManualFeedback.IsValid(); err != nil {
			return fmt.Errorf("field ManualFeedback not valid, %w", err)
		}
	}
	return nil
}
