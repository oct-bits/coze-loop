// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package common

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

const (
	PlatformTypeCozeloop = "cozeloop"

	PlatformTypePrompt = "prompt"

	PlatformTypeEvaluator = "evaluator"

	PlatformTypeEvaluationTarget = "evaluation_target"

	PlatformTypeCozeBot = "coze_bot"

	PlatformTypeProject = "coze_project"

	PlatformTypeWorkflow = "coze_workflow"

	PlatformTypeLoopAll = "loop_all"

	SpanListTypeRootSpan = "root_span"

	SpanListTypeAllSpan = "all_span"

	SpanListTypeLlmSpan = "llm_span"
)

type PlatformType = string

type SpanListType = string

type OrderBy struct {
	Field *string `thrift:"field,1,optional" frugal:"1,optional,string" form:"field" json:"field,omitempty" query:"field"`
	IsAsc *bool   `thrift:"is_asc,2,optional" frugal:"2,optional,bool" form:"is_asc" json:"is_asc,omitempty" query:"is_asc"`
}

func NewOrderBy() *OrderBy {
	return &OrderBy{}
}

func (p *OrderBy) InitDefault() {
}

var OrderBy_Field_DEFAULT string

func (p *OrderBy) GetField() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetField() {
		return OrderBy_Field_DEFAULT
	}
	return *p.Field
}

var OrderBy_IsAsc_DEFAULT bool

func (p *OrderBy) GetIsAsc() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetIsAsc() {
		return OrderBy_IsAsc_DEFAULT
	}
	return *p.IsAsc
}
func (p *OrderBy) SetField(val *string) {
	p.Field = val
}
func (p *OrderBy) SetIsAsc(val *bool) {
	p.IsAsc = val
}

var fieldIDToName_OrderBy = map[int16]string{
	1: "field",
	2: "is_asc",
}

func (p *OrderBy) IsSetField() bool {
	return p.Field != nil
}

func (p *OrderBy) IsSetIsAsc() bool {
	return p.IsAsc != nil
}

func (p *OrderBy) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_OrderBy[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *OrderBy) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Field = _field
	return nil
}
func (p *OrderBy) ReadField2(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsAsc = _field
	return nil
}

func (p *OrderBy) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("OrderBy"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *OrderBy) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetField() {
		if err = oprot.WriteFieldBegin("field", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Field); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *OrderBy) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsAsc() {
		if err = oprot.WriteFieldBegin("is_asc", thrift.BOOL, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsAsc); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *OrderBy) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OrderBy(%+v)", *p)

}

func (p *OrderBy) DeepEqual(ano *OrderBy) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Field) {
		return false
	}
	if !p.Field2DeepEqual(ano.IsAsc) {
		return false
	}
	return true
}

func (p *OrderBy) Field1DeepEqual(src *string) bool {

	if p.Field == src {
		return true
	} else if p.Field == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Field, *src) != 0 {
		return false
	}
	return true
}
func (p *OrderBy) Field2DeepEqual(src *bool) bool {

	if p.IsAsc == src {
		return true
	} else if p.IsAsc == nil || src == nil {
		return false
	}
	if *p.IsAsc != *src {
		return false
	}
	return true
}

type UserInfo struct {
	Name        *string `thrift:"name,1,optional" frugal:"1,optional,string" form:"name" json:"name,omitempty" query:"name"`
	EnName      *string `thrift:"en_name,2,optional" frugal:"2,optional,string" form:"en_name" json:"en_name,omitempty" query:"en_name"`
	AvatarURL   *string `thrift:"avatar_url,3,optional" frugal:"3,optional,string" form:"avatar_url" json:"avatar_url,omitempty" query:"avatar_url"`
	AvatarThumb *string `thrift:"avatar_thumb,4,optional" frugal:"4,optional,string" form:"avatar_thumb" json:"avatar_thumb,omitempty" query:"avatar_thumb"`
	OpenID      *string `thrift:"open_id,5,optional" frugal:"5,optional,string" form:"open_id" json:"open_id,omitempty" query:"open_id"`
	UnionID     *string `thrift:"union_id,6,optional" frugal:"6,optional,string" form:"union_id" json:"union_id,omitempty" query:"union_id"`
	UserID      *string `thrift:"user_id,8,optional" frugal:"8,optional,string" form:"user_id" json:"user_id,omitempty" query:"user_id"`
	Email       *string `thrift:"email,9,optional" frugal:"9,optional,string" form:"email" json:"email,omitempty" query:"email"`
}

func NewUserInfo() *UserInfo {
	return &UserInfo{}
}

func (p *UserInfo) InitDefault() {
}

var UserInfo_Name_DEFAULT string

func (p *UserInfo) GetName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetName() {
		return UserInfo_Name_DEFAULT
	}
	return *p.Name
}

var UserInfo_EnName_DEFAULT string

func (p *UserInfo) GetEnName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetEnName() {
		return UserInfo_EnName_DEFAULT
	}
	return *p.EnName
}

var UserInfo_AvatarURL_DEFAULT string

func (p *UserInfo) GetAvatarURL() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetAvatarURL() {
		return UserInfo_AvatarURL_DEFAULT
	}
	return *p.AvatarURL
}

var UserInfo_AvatarThumb_DEFAULT string

func (p *UserInfo) GetAvatarThumb() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetAvatarThumb() {
		return UserInfo_AvatarThumb_DEFAULT
	}
	return *p.AvatarThumb
}

var UserInfo_OpenID_DEFAULT string

func (p *UserInfo) GetOpenID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetOpenID() {
		return UserInfo_OpenID_DEFAULT
	}
	return *p.OpenID
}

var UserInfo_UnionID_DEFAULT string

func (p *UserInfo) GetUnionID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetUnionID() {
		return UserInfo_UnionID_DEFAULT
	}
	return *p.UnionID
}

var UserInfo_UserID_DEFAULT string

func (p *UserInfo) GetUserID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetUserID() {
		return UserInfo_UserID_DEFAULT
	}
	return *p.UserID
}

var UserInfo_Email_DEFAULT string

func (p *UserInfo) GetEmail() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetEmail() {
		return UserInfo_Email_DEFAULT
	}
	return *p.Email
}
func (p *UserInfo) SetName(val *string) {
	p.Name = val
}
func (p *UserInfo) SetEnName(val *string) {
	p.EnName = val
}
func (p *UserInfo) SetAvatarURL(val *string) {
	p.AvatarURL = val
}
func (p *UserInfo) SetAvatarThumb(val *string) {
	p.AvatarThumb = val
}
func (p *UserInfo) SetOpenID(val *string) {
	p.OpenID = val
}
func (p *UserInfo) SetUnionID(val *string) {
	p.UnionID = val
}
func (p *UserInfo) SetUserID(val *string) {
	p.UserID = val
}
func (p *UserInfo) SetEmail(val *string) {
	p.Email = val
}

var fieldIDToName_UserInfo = map[int16]string{
	1: "name",
	2: "en_name",
	3: "avatar_url",
	4: "avatar_thumb",
	5: "open_id",
	6: "union_id",
	8: "user_id",
	9: "email",
}

func (p *UserInfo) IsSetName() bool {
	return p.Name != nil
}

func (p *UserInfo) IsSetEnName() bool {
	return p.EnName != nil
}

func (p *UserInfo) IsSetAvatarURL() bool {
	return p.AvatarURL != nil
}

func (p *UserInfo) IsSetAvatarThumb() bool {
	return p.AvatarThumb != nil
}

func (p *UserInfo) IsSetOpenID() bool {
	return p.OpenID != nil
}

func (p *UserInfo) IsSetUnionID() bool {
	return p.UnionID != nil
}

func (p *UserInfo) IsSetUserID() bool {
	return p.UserID != nil
}

func (p *UserInfo) IsSetEmail() bool {
	return p.Email != nil
}

func (p *UserInfo) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UserInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UserInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Name = _field
	return nil
}
func (p *UserInfo) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EnName = _field
	return nil
}
func (p *UserInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AvatarURL = _field
	return nil
}
func (p *UserInfo) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AvatarThumb = _field
	return nil
}
func (p *UserInfo) ReadField5(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.OpenID = _field
	return nil
}
func (p *UserInfo) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UnionID = _field
	return nil
}
func (p *UserInfo) ReadField8(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UserID = _field
	return nil
}
func (p *UserInfo) ReadField9(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Email = _field
	return nil
}

func (p *UserInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UserInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UserInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetName() {
		if err = oprot.WriteFieldBegin("name", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Name); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *UserInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnName() {
		if err = oprot.WriteFieldBegin("en_name", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.EnName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *UserInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAvatarURL() {
		if err = oprot.WriteFieldBegin("avatar_url", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.AvatarURL); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *UserInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetAvatarThumb() {
		if err = oprot.WriteFieldBegin("avatar_thumb", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.AvatarThumb); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *UserInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetOpenID() {
		if err = oprot.WriteFieldBegin("open_id", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.OpenID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *UserInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetUnionID() {
		if err = oprot.WriteFieldBegin("union_id", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.UnionID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *UserInfo) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserID() {
		if err = oprot.WriteFieldBegin("user_id", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.UserID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}
func (p *UserInfo) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetEmail() {
		if err = oprot.WriteFieldBegin("email", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Email); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *UserInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UserInfo(%+v)", *p)

}

func (p *UserInfo) DeepEqual(ano *UserInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.EnName) {
		return false
	}
	if !p.Field3DeepEqual(ano.AvatarURL) {
		return false
	}
	if !p.Field4DeepEqual(ano.AvatarThumb) {
		return false
	}
	if !p.Field5DeepEqual(ano.OpenID) {
		return false
	}
	if !p.Field6DeepEqual(ano.UnionID) {
		return false
	}
	if !p.Field8DeepEqual(ano.UserID) {
		return false
	}
	if !p.Field9DeepEqual(ano.Email) {
		return false
	}
	return true
}

func (p *UserInfo) Field1DeepEqual(src *string) bool {

	if p.Name == src {
		return true
	} else if p.Name == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Name, *src) != 0 {
		return false
	}
	return true
}
func (p *UserInfo) Field2DeepEqual(src *string) bool {

	if p.EnName == src {
		return true
	} else if p.EnName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.EnName, *src) != 0 {
		return false
	}
	return true
}
func (p *UserInfo) Field3DeepEqual(src *string) bool {

	if p.AvatarURL == src {
		return true
	} else if p.AvatarURL == nil || src == nil {
		return false
	}
	if strings.Compare(*p.AvatarURL, *src) != 0 {
		return false
	}
	return true
}
func (p *UserInfo) Field4DeepEqual(src *string) bool {

	if p.AvatarThumb == src {
		return true
	} else if p.AvatarThumb == nil || src == nil {
		return false
	}
	if strings.Compare(*p.AvatarThumb, *src) != 0 {
		return false
	}
	return true
}
func (p *UserInfo) Field5DeepEqual(src *string) bool {

	if p.OpenID == src {
		return true
	} else if p.OpenID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.OpenID, *src) != 0 {
		return false
	}
	return true
}
func (p *UserInfo) Field6DeepEqual(src *string) bool {

	if p.UnionID == src {
		return true
	} else if p.UnionID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.UnionID, *src) != 0 {
		return false
	}
	return true
}
func (p *UserInfo) Field8DeepEqual(src *string) bool {

	if p.UserID == src {
		return true
	} else if p.UserID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.UserID, *src) != 0 {
		return false
	}
	return true
}
func (p *UserInfo) Field9DeepEqual(src *string) bool {

	if p.Email == src {
		return true
	} else if p.Email == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Email, *src) != 0 {
		return false
	}
	return true
}

type BaseInfo struct {
	CreatedBy *UserInfo `thrift:"created_by,1,optional" frugal:"1,optional,UserInfo" form:"created_by" json:"created_by,omitempty" query:"created_by"`
	UpdatedBy *UserInfo `thrift:"updated_by,2,optional" frugal:"2,optional,UserInfo" form:"updated_by" json:"updated_by,omitempty" query:"updated_by"`
	CreatedAt *int64    `thrift:"created_at,3,optional" frugal:"3,optional,i64" json:"created_at" form:"created_at" query:"created_at"`
	UpdatedAt *int64    `thrift:"updated_at,4,optional" frugal:"4,optional,i64" json:"updated_at" form:"updated_at" query:"updated_at"`
}

func NewBaseInfo() *BaseInfo {
	return &BaseInfo{}
}

func (p *BaseInfo) InitDefault() {
}

var BaseInfo_CreatedBy_DEFAULT *UserInfo

func (p *BaseInfo) GetCreatedBy() (v *UserInfo) {
	if p == nil {
		return
	}
	if !p.IsSetCreatedBy() {
		return BaseInfo_CreatedBy_DEFAULT
	}
	return p.CreatedBy
}

var BaseInfo_UpdatedBy_DEFAULT *UserInfo

func (p *BaseInfo) GetUpdatedBy() (v *UserInfo) {
	if p == nil {
		return
	}
	if !p.IsSetUpdatedBy() {
		return BaseInfo_UpdatedBy_DEFAULT
	}
	return p.UpdatedBy
}

var BaseInfo_CreatedAt_DEFAULT int64

func (p *BaseInfo) GetCreatedAt() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetCreatedAt() {
		return BaseInfo_CreatedAt_DEFAULT
	}
	return *p.CreatedAt
}

var BaseInfo_UpdatedAt_DEFAULT int64

func (p *BaseInfo) GetUpdatedAt() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetUpdatedAt() {
		return BaseInfo_UpdatedAt_DEFAULT
	}
	return *p.UpdatedAt
}
func (p *BaseInfo) SetCreatedBy(val *UserInfo) {
	p.CreatedBy = val
}
func (p *BaseInfo) SetUpdatedBy(val *UserInfo) {
	p.UpdatedBy = val
}
func (p *BaseInfo) SetCreatedAt(val *int64) {
	p.CreatedAt = val
}
func (p *BaseInfo) SetUpdatedAt(val *int64) {
	p.UpdatedAt = val
}

var fieldIDToName_BaseInfo = map[int16]string{
	1: "created_by",
	2: "updated_by",
	3: "created_at",
	4: "updated_at",
}

func (p *BaseInfo) IsSetCreatedBy() bool {
	return p.CreatedBy != nil
}

func (p *BaseInfo) IsSetUpdatedBy() bool {
	return p.UpdatedBy != nil
}

func (p *BaseInfo) IsSetCreatedAt() bool {
	return p.CreatedAt != nil
}

func (p *BaseInfo) IsSetUpdatedAt() bool {
	return p.UpdatedAt != nil
}

func (p *BaseInfo) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BaseInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BaseInfo) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUserInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.CreatedBy = _field
	return nil
}
func (p *BaseInfo) ReadField2(iprot thrift.TProtocol) error {
	_field := NewUserInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.UpdatedBy = _field
	return nil
}
func (p *BaseInfo) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CreatedAt = _field
	return nil
}
func (p *BaseInfo) ReadField4(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UpdatedAt = _field
	return nil
}

func (p *BaseInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BaseInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BaseInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedBy() {
		if err = oprot.WriteFieldBegin("created_by", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.CreatedBy.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BaseInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdatedBy() {
		if err = oprot.WriteFieldBegin("updated_by", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.UpdatedBy.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BaseInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetCreatedAt() {
		if err = oprot.WriteFieldBegin("created_at", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.CreatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *BaseInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetUpdatedAt() {
		if err = oprot.WriteFieldBegin("updated_at", thrift.I64, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.UpdatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *BaseInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BaseInfo(%+v)", *p)

}

func (p *BaseInfo) DeepEqual(ano *BaseInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.CreatedBy) {
		return false
	}
	if !p.Field2DeepEqual(ano.UpdatedBy) {
		return false
	}
	if !p.Field3DeepEqual(ano.CreatedAt) {
		return false
	}
	if !p.Field4DeepEqual(ano.UpdatedAt) {
		return false
	}
	return true
}

func (p *BaseInfo) Field1DeepEqual(src *UserInfo) bool {

	if !p.CreatedBy.DeepEqual(src) {
		return false
	}
	return true
}
func (p *BaseInfo) Field2DeepEqual(src *UserInfo) bool {

	if !p.UpdatedBy.DeepEqual(src) {
		return false
	}
	return true
}
func (p *BaseInfo) Field3DeepEqual(src *int64) bool {

	if p.CreatedAt == src {
		return true
	} else if p.CreatedAt == nil || src == nil {
		return false
	}
	if *p.CreatedAt != *src {
		return false
	}
	return true
}
func (p *BaseInfo) Field4DeepEqual(src *int64) bool {

	if p.UpdatedAt == src {
		return true
	} else if p.UpdatedAt == nil || src == nil {
		return false
	}
	if *p.UpdatedAt != *src {
		return false
	}
	return true
}
