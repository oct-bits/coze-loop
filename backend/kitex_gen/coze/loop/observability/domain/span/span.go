// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package span

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/observability/domain/annotation"
	"strings"
)

const (
	SpanStatusSuccess = "success"

	SpanStatusError = "error"

	SpanStatusBroken = "broken"

	SpanTypeUnknown = "unknwon"

	SpanTypePrompt = "prompt"

	SpanTypeModel = "model"
)

type SpanStatus = string

type SpanType = string

type AttrTos struct {
	InputDataURL   *string           `thrift:"input_data_url,1,optional" frugal:"1,optional,string" form:"input_data_url" json:"input_data_url,omitempty" query:"input_data_url"`
	OutputDataURL  *string           `thrift:"output_data_url,2,optional" frugal:"2,optional,string" form:"output_data_url" json:"output_data_url,omitempty" query:"output_data_url"`
	MultimodalData map[string]string `thrift:"multimodal_data,3,optional" frugal:"3,optional,map<string:string>" form:"multimodal_data" json:"multimodal_data,omitempty" query:"multimodal_data"`
}

func NewAttrTos() *AttrTos {
	return &AttrTos{}
}

func (p *AttrTos) InitDefault() {
}

var AttrTos_InputDataURL_DEFAULT string

func (p *AttrTos) GetInputDataURL() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetInputDataURL() {
		return AttrTos_InputDataURL_DEFAULT
	}
	return *p.InputDataURL
}

var AttrTos_OutputDataURL_DEFAULT string

func (p *AttrTos) GetOutputDataURL() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetOutputDataURL() {
		return AttrTos_OutputDataURL_DEFAULT
	}
	return *p.OutputDataURL
}

var AttrTos_MultimodalData_DEFAULT map[string]string

func (p *AttrTos) GetMultimodalData() (v map[string]string) {
	if p == nil {
		return
	}
	if !p.IsSetMultimodalData() {
		return AttrTos_MultimodalData_DEFAULT
	}
	return p.MultimodalData
}
func (p *AttrTos) SetInputDataURL(val *string) {
	p.InputDataURL = val
}
func (p *AttrTos) SetOutputDataURL(val *string) {
	p.OutputDataURL = val
}
func (p *AttrTos) SetMultimodalData(val map[string]string) {
	p.MultimodalData = val
}

var fieldIDToName_AttrTos = map[int16]string{
	1: "input_data_url",
	2: "output_data_url",
	3: "multimodal_data",
}

func (p *AttrTos) IsSetInputDataURL() bool {
	return p.InputDataURL != nil
}

func (p *AttrTos) IsSetOutputDataURL() bool {
	return p.OutputDataURL != nil
}

func (p *AttrTos) IsSetMultimodalData() bool {
	return p.MultimodalData != nil
}

func (p *AttrTos) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AttrTos[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AttrTos) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.InputDataURL = _field
	return nil
}
func (p *AttrTos) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.OutputDataURL = _field
	return nil
}
func (p *AttrTos) ReadField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.MultimodalData = _field
	return nil
}

func (p *AttrTos) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AttrTos"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AttrTos) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetInputDataURL() {
		if err = oprot.WriteFieldBegin("input_data_url", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.InputDataURL); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *AttrTos) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutputDataURL() {
		if err = oprot.WriteFieldBegin("output_data_url", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.OutputDataURL); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *AttrTos) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetMultimodalData() {
		if err = oprot.WriteFieldBegin("multimodal_data", thrift.MAP, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.MultimodalData)); err != nil {
			return err
		}
		for k, v := range p.MultimodalData {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *AttrTos) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AttrTos(%+v)", *p)

}

func (p *AttrTos) DeepEqual(ano *AttrTos) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.InputDataURL) {
		return false
	}
	if !p.Field2DeepEqual(ano.OutputDataURL) {
		return false
	}
	if !p.Field3DeepEqual(ano.MultimodalData) {
		return false
	}
	return true
}

func (p *AttrTos) Field1DeepEqual(src *string) bool {

	if p.InputDataURL == src {
		return true
	} else if p.InputDataURL == nil || src == nil {
		return false
	}
	if strings.Compare(*p.InputDataURL, *src) != 0 {
		return false
	}
	return true
}
func (p *AttrTos) Field2DeepEqual(src *string) bool {

	if p.OutputDataURL == src {
		return true
	} else if p.OutputDataURL == nil || src == nil {
		return false
	}
	if strings.Compare(*p.OutputDataURL, *src) != 0 {
		return false
	}
	return true
}
func (p *AttrTos) Field3DeepEqual(src map[string]string) bool {

	if len(p.MultimodalData) != len(src) {
		return false
	}
	for k, v := range p.MultimodalData {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type OutputSpan struct {
	TraceID         string                   `thrift:"trace_id,1,required" frugal:"1,required,string" form:"trace_id,required" json:"trace_id,required" query:"trace_id,required"`
	SpanID          string                   `thrift:"span_id,2,required" frugal:"2,required,string" form:"span_id,required" json:"span_id,required" query:"span_id,required"`
	ParentID        string                   `thrift:"parent_id,3,required" frugal:"3,required,string" form:"parent_id,required" json:"parent_id,required" query:"parent_id,required"`
	SpanName        string                   `thrift:"span_name,4,required" frugal:"4,required,string" form:"span_name,required" json:"span_name,required" query:"span_name,required"`
	SpanType        string                   `thrift:"span_type,5,required" frugal:"5,required,string" form:"span_type,required" json:"span_type,required" query:"span_type,required"`
	Type            SpanType                 `thrift:"type,6,required" frugal:"6,required,string" form:"type,required" json:"type,required" query:"type,required"`
	StartedAt       int64                    `thrift:"started_at,7,required" frugal:"7,required,i64" json:"started_at" form:"started_at,required" query:"started_at,required"`
	Duration        int64                    `thrift:"duration,8,required" frugal:"8,required,i64" json:"duration" form:"duration,required" query:"duration,required"`
	Status          SpanStatus               `thrift:"status,9,required" frugal:"9,required,string" form:"status,required" json:"status,required" query:"status,required"`
	StatusCode      int32                    `thrift:"status_code,10,required" frugal:"10,required,i32" form:"status_code,required" json:"status_code,required" query:"status_code,required"`
	Input           string                   `thrift:"input,11,required" frugal:"11,required,string" form:"input,required" json:"input,required" query:"input,required"`
	Output          string                   `thrift:"output,12,required" frugal:"12,required,string" form:"output,required" json:"output,required" query:"output,required"`
	LogicDeleteDate *int64                   `thrift:"logic_delete_date,13,optional" frugal:"13,optional,i64" json:"logic_delete_date" form:"logic_delete_date" query:"logic_delete_date"`
	CustomTags      map[string]string        `thrift:"custom_tags,101,optional" frugal:"101,optional,map<string:string>" form:"custom_tags" json:"custom_tags,omitempty" query:"custom_tags"`
	AttrTos         *AttrTos                 `thrift:"attr_tos,102,optional" frugal:"102,optional,AttrTos" form:"attr_tos" json:"attr_tos,omitempty" query:"attr_tos"`
	SystemTags      map[string]string        `thrift:"system_tags,103,optional" frugal:"103,optional,map<string:string>" form:"system_tags" json:"system_tags,omitempty" query:"system_tags"`
	Annotations     []*annotation.Annotation `thrift:"annotations,104,optional" frugal:"104,optional,list<annotation.Annotation>" form:"annotations" json:"annotations,omitempty" query:"annotations"`
}

func NewOutputSpan() *OutputSpan {
	return &OutputSpan{}
}

func (p *OutputSpan) InitDefault() {
}

func (p *OutputSpan) GetTraceID() (v string) {
	if p != nil {
		return p.TraceID
	}
	return
}

func (p *OutputSpan) GetSpanID() (v string) {
	if p != nil {
		return p.SpanID
	}
	return
}

func (p *OutputSpan) GetParentID() (v string) {
	if p != nil {
		return p.ParentID
	}
	return
}

func (p *OutputSpan) GetSpanName() (v string) {
	if p != nil {
		return p.SpanName
	}
	return
}

func (p *OutputSpan) GetSpanType() (v string) {
	if p != nil {
		return p.SpanType
	}
	return
}

func (p *OutputSpan) GetType() (v SpanType) {
	if p != nil {
		return p.Type
	}
	return
}

func (p *OutputSpan) GetStartedAt() (v int64) {
	if p != nil {
		return p.StartedAt
	}
	return
}

func (p *OutputSpan) GetDuration() (v int64) {
	if p != nil {
		return p.Duration
	}
	return
}

func (p *OutputSpan) GetStatus() (v SpanStatus) {
	if p != nil {
		return p.Status
	}
	return
}

func (p *OutputSpan) GetStatusCode() (v int32) {
	if p != nil {
		return p.StatusCode
	}
	return
}

func (p *OutputSpan) GetInput() (v string) {
	if p != nil {
		return p.Input
	}
	return
}

func (p *OutputSpan) GetOutput() (v string) {
	if p != nil {
		return p.Output
	}
	return
}

var OutputSpan_LogicDeleteDate_DEFAULT int64

func (p *OutputSpan) GetLogicDeleteDate() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetLogicDeleteDate() {
		return OutputSpan_LogicDeleteDate_DEFAULT
	}
	return *p.LogicDeleteDate
}

var OutputSpan_CustomTags_DEFAULT map[string]string

func (p *OutputSpan) GetCustomTags() (v map[string]string) {
	if p == nil {
		return
	}
	if !p.IsSetCustomTags() {
		return OutputSpan_CustomTags_DEFAULT
	}
	return p.CustomTags
}

var OutputSpan_AttrTos_DEFAULT *AttrTos

func (p *OutputSpan) GetAttrTos() (v *AttrTos) {
	if p == nil {
		return
	}
	if !p.IsSetAttrTos() {
		return OutputSpan_AttrTos_DEFAULT
	}
	return p.AttrTos
}

var OutputSpan_SystemTags_DEFAULT map[string]string

func (p *OutputSpan) GetSystemTags() (v map[string]string) {
	if p == nil {
		return
	}
	if !p.IsSetSystemTags() {
		return OutputSpan_SystemTags_DEFAULT
	}
	return p.SystemTags
}

var OutputSpan_Annotations_DEFAULT []*annotation.Annotation

func (p *OutputSpan) GetAnnotations() (v []*annotation.Annotation) {
	if p == nil {
		return
	}
	if !p.IsSetAnnotations() {
		return OutputSpan_Annotations_DEFAULT
	}
	return p.Annotations
}
func (p *OutputSpan) SetTraceID(val string) {
	p.TraceID = val
}
func (p *OutputSpan) SetSpanID(val string) {
	p.SpanID = val
}
func (p *OutputSpan) SetParentID(val string) {
	p.ParentID = val
}
func (p *OutputSpan) SetSpanName(val string) {
	p.SpanName = val
}
func (p *OutputSpan) SetSpanType(val string) {
	p.SpanType = val
}
func (p *OutputSpan) SetType(val SpanType) {
	p.Type = val
}
func (p *OutputSpan) SetStartedAt(val int64) {
	p.StartedAt = val
}
func (p *OutputSpan) SetDuration(val int64) {
	p.Duration = val
}
func (p *OutputSpan) SetStatus(val SpanStatus) {
	p.Status = val
}
func (p *OutputSpan) SetStatusCode(val int32) {
	p.StatusCode = val
}
func (p *OutputSpan) SetInput(val string) {
	p.Input = val
}
func (p *OutputSpan) SetOutput(val string) {
	p.Output = val
}
func (p *OutputSpan) SetLogicDeleteDate(val *int64) {
	p.LogicDeleteDate = val
}
func (p *OutputSpan) SetCustomTags(val map[string]string) {
	p.CustomTags = val
}
func (p *OutputSpan) SetAttrTos(val *AttrTos) {
	p.AttrTos = val
}
func (p *OutputSpan) SetSystemTags(val map[string]string) {
	p.SystemTags = val
}
func (p *OutputSpan) SetAnnotations(val []*annotation.Annotation) {
	p.Annotations = val
}

var fieldIDToName_OutputSpan = map[int16]string{
	1:   "trace_id",
	2:   "span_id",
	3:   "parent_id",
	4:   "span_name",
	5:   "span_type",
	6:   "type",
	7:   "started_at",
	8:   "duration",
	9:   "status",
	10:  "status_code",
	11:  "input",
	12:  "output",
	13:  "logic_delete_date",
	101: "custom_tags",
	102: "attr_tos",
	103: "system_tags",
	104: "annotations",
}

func (p *OutputSpan) IsSetLogicDeleteDate() bool {
	return p.LogicDeleteDate != nil
}

func (p *OutputSpan) IsSetCustomTags() bool {
	return p.CustomTags != nil
}

func (p *OutputSpan) IsSetAttrTos() bool {
	return p.AttrTos != nil
}

func (p *OutputSpan) IsSetSystemTags() bool {
	return p.SystemTags != nil
}

func (p *OutputSpan) IsSetAnnotations() bool {
	return p.Annotations != nil
}

func (p *OutputSpan) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTraceID bool = false
	var issetSpanID bool = false
	var issetParentID bool = false
	var issetSpanName bool = false
	var issetSpanType bool = false
	var issetType bool = false
	var issetStartedAt bool = false
	var issetDuration bool = false
	var issetStatus bool = false
	var issetStatusCode bool = false
	var issetInput bool = false
	var issetOutput bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTraceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetSpanID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetParentID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetSpanName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetSpanType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
				issetStartedAt = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
				issetDuration = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatus = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatusCode = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
				issetInput = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
				issetOutput = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 101:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField101(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 102:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField102(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 103:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField103(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 104:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField104(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTraceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetSpanID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetParentID {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetSpanName {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetSpanType {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetType {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetStartedAt {
		fieldId = 7
		goto RequiredFieldNotSetError
	}

	if !issetDuration {
		fieldId = 8
		goto RequiredFieldNotSetError
	}

	if !issetStatus {
		fieldId = 9
		goto RequiredFieldNotSetError
	}

	if !issetStatusCode {
		fieldId = 10
		goto RequiredFieldNotSetError
	}

	if !issetInput {
		fieldId = 11
		goto RequiredFieldNotSetError
	}

	if !issetOutput {
		fieldId = 12
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_OutputSpan[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_OutputSpan[fieldId]))
}

func (p *OutputSpan) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TraceID = _field
	return nil
}
func (p *OutputSpan) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SpanID = _field
	return nil
}
func (p *OutputSpan) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ParentID = _field
	return nil
}
func (p *OutputSpan) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SpanName = _field
	return nil
}
func (p *OutputSpan) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SpanType = _field
	return nil
}
func (p *OutputSpan) ReadField6(iprot thrift.TProtocol) error {

	var _field SpanType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Type = _field
	return nil
}
func (p *OutputSpan) ReadField7(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StartedAt = _field
	return nil
}
func (p *OutputSpan) ReadField8(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Duration = _field
	return nil
}
func (p *OutputSpan) ReadField9(iprot thrift.TProtocol) error {

	var _field SpanStatus
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Status = _field
	return nil
}
func (p *OutputSpan) ReadField10(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StatusCode = _field
	return nil
}
func (p *OutputSpan) ReadField11(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Input = _field
	return nil
}
func (p *OutputSpan) ReadField12(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Output = _field
	return nil
}
func (p *OutputSpan) ReadField13(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.LogicDeleteDate = _field
	return nil
}
func (p *OutputSpan) ReadField101(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.CustomTags = _field
	return nil
}
func (p *OutputSpan) ReadField102(iprot thrift.TProtocol) error {
	_field := NewAttrTos()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.AttrTos = _field
	return nil
}
func (p *OutputSpan) ReadField103(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.SystemTags = _field
	return nil
}
func (p *OutputSpan) ReadField104(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*annotation.Annotation, 0, size)
	values := make([]annotation.Annotation, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Annotations = _field
	return nil
}

func (p *OutputSpan) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("OutputSpan"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField101(oprot); err != nil {
			fieldId = 101
			goto WriteFieldError
		}
		if err = p.writeField102(oprot); err != nil {
			fieldId = 102
			goto WriteFieldError
		}
		if err = p.writeField103(oprot); err != nil {
			fieldId = 103
			goto WriteFieldError
		}
		if err = p.writeField104(oprot); err != nil {
			fieldId = 104
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *OutputSpan) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("trace_id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TraceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *OutputSpan) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("span_id", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.SpanID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *OutputSpan) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("parent_id", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ParentID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *OutputSpan) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("span_name", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.SpanName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *OutputSpan) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("span_type", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.SpanType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *OutputSpan) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("type", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Type); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *OutputSpan) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("started_at", thrift.I64, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.StartedAt); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}
func (p *OutputSpan) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("duration", thrift.I64, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Duration); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}
func (p *OutputSpan) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}
func (p *OutputSpan) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status_code", thrift.I32, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.StatusCode); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}
func (p *OutputSpan) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("input", thrift.STRING, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Input); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}
func (p *OutputSpan) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("output", thrift.STRING, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Output); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}
func (p *OutputSpan) writeField13(oprot thrift.TProtocol) (err error) {
	if p.IsSetLogicDeleteDate() {
		if err = oprot.WriteFieldBegin("logic_delete_date", thrift.I64, 13); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.LogicDeleteDate); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}
func (p *OutputSpan) writeField101(oprot thrift.TProtocol) (err error) {
	if p.IsSetCustomTags() {
		if err = oprot.WriteFieldBegin("custom_tags", thrift.MAP, 101); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.CustomTags)); err != nil {
			return err
		}
		for k, v := range p.CustomTags {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 101 end error: ", p), err)
}
func (p *OutputSpan) writeField102(oprot thrift.TProtocol) (err error) {
	if p.IsSetAttrTos() {
		if err = oprot.WriteFieldBegin("attr_tos", thrift.STRUCT, 102); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.AttrTos.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 102 end error: ", p), err)
}
func (p *OutputSpan) writeField103(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemTags() {
		if err = oprot.WriteFieldBegin("system_tags", thrift.MAP, 103); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.SystemTags)); err != nil {
			return err
		}
		for k, v := range p.SystemTags {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 103 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 103 end error: ", p), err)
}
func (p *OutputSpan) writeField104(oprot thrift.TProtocol) (err error) {
	if p.IsSetAnnotations() {
		if err = oprot.WriteFieldBegin("annotations", thrift.LIST, 104); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Annotations)); err != nil {
			return err
		}
		for _, v := range p.Annotations {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 104 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 104 end error: ", p), err)
}

func (p *OutputSpan) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OutputSpan(%+v)", *p)

}

func (p *OutputSpan) DeepEqual(ano *OutputSpan) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TraceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.SpanID) {
		return false
	}
	if !p.Field3DeepEqual(ano.ParentID) {
		return false
	}
	if !p.Field4DeepEqual(ano.SpanName) {
		return false
	}
	if !p.Field5DeepEqual(ano.SpanType) {
		return false
	}
	if !p.Field6DeepEqual(ano.Type) {
		return false
	}
	if !p.Field7DeepEqual(ano.StartedAt) {
		return false
	}
	if !p.Field8DeepEqual(ano.Duration) {
		return false
	}
	if !p.Field9DeepEqual(ano.Status) {
		return false
	}
	if !p.Field10DeepEqual(ano.StatusCode) {
		return false
	}
	if !p.Field11DeepEqual(ano.Input) {
		return false
	}
	if !p.Field12DeepEqual(ano.Output) {
		return false
	}
	if !p.Field13DeepEqual(ano.LogicDeleteDate) {
		return false
	}
	if !p.Field101DeepEqual(ano.CustomTags) {
		return false
	}
	if !p.Field102DeepEqual(ano.AttrTos) {
		return false
	}
	if !p.Field103DeepEqual(ano.SystemTags) {
		return false
	}
	if !p.Field104DeepEqual(ano.Annotations) {
		return false
	}
	return true
}

func (p *OutputSpan) Field1DeepEqual(src string) bool {

	if strings.Compare(p.TraceID, src) != 0 {
		return false
	}
	return true
}
func (p *OutputSpan) Field2DeepEqual(src string) bool {

	if strings.Compare(p.SpanID, src) != 0 {
		return false
	}
	return true
}
func (p *OutputSpan) Field3DeepEqual(src string) bool {

	if strings.Compare(p.ParentID, src) != 0 {
		return false
	}
	return true
}
func (p *OutputSpan) Field4DeepEqual(src string) bool {

	if strings.Compare(p.SpanName, src) != 0 {
		return false
	}
	return true
}
func (p *OutputSpan) Field5DeepEqual(src string) bool {

	if strings.Compare(p.SpanType, src) != 0 {
		return false
	}
	return true
}
func (p *OutputSpan) Field6DeepEqual(src SpanType) bool {

	if strings.Compare(p.Type, src) != 0 {
		return false
	}
	return true
}
func (p *OutputSpan) Field7DeepEqual(src int64) bool {

	if p.StartedAt != src {
		return false
	}
	return true
}
func (p *OutputSpan) Field8DeepEqual(src int64) bool {

	if p.Duration != src {
		return false
	}
	return true
}
func (p *OutputSpan) Field9DeepEqual(src SpanStatus) bool {

	if strings.Compare(p.Status, src) != 0 {
		return false
	}
	return true
}
func (p *OutputSpan) Field10DeepEqual(src int32) bool {

	if p.StatusCode != src {
		return false
	}
	return true
}
func (p *OutputSpan) Field11DeepEqual(src string) bool {

	if strings.Compare(p.Input, src) != 0 {
		return false
	}
	return true
}
func (p *OutputSpan) Field12DeepEqual(src string) bool {

	if strings.Compare(p.Output, src) != 0 {
		return false
	}
	return true
}
func (p *OutputSpan) Field13DeepEqual(src *int64) bool {

	if p.LogicDeleteDate == src {
		return true
	} else if p.LogicDeleteDate == nil || src == nil {
		return false
	}
	if *p.LogicDeleteDate != *src {
		return false
	}
	return true
}
func (p *OutputSpan) Field101DeepEqual(src map[string]string) bool {

	if len(p.CustomTags) != len(src) {
		return false
	}
	for k, v := range p.CustomTags {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *OutputSpan) Field102DeepEqual(src *AttrTos) bool {

	if !p.AttrTos.DeepEqual(src) {
		return false
	}
	return true
}
func (p *OutputSpan) Field103DeepEqual(src map[string]string) bool {

	if len(p.SystemTags) != len(src) {
		return false
	}
	for k, v := range p.SystemTags {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *OutputSpan) Field104DeepEqual(src []*annotation.Annotation) bool {

	if len(p.Annotations) != len(src) {
		return false
	}
	for i, v := range p.Annotations {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type InputSpan struct {
	StartedAtMicros  int64              `thrift:"started_at_micros,1,required" frugal:"1,required,i64" json:"started_at_micros" form:"started_at_micros,required" query:"started_at_micros,required"`
	SpanID           string             `thrift:"span_id,3,required" frugal:"3,required,string" form:"span_id,required" json:"span_id,required" query:"span_id,required"`
	ParentID         string             `thrift:"parent_id,4,required" frugal:"4,required,string" form:"parent_id,required" json:"parent_id,required" query:"parent_id,required"`
	TraceID          string             `thrift:"trace_id,5,required" frugal:"5,required,string" form:"trace_id,required" json:"trace_id,required" query:"trace_id,required"`
	Duration         int64              `thrift:"duration,6,required" frugal:"6,required,i64" json:"duration" form:"duration,required" query:"duration,required"`
	CallType         *string            `thrift:"call_type,8,optional" frugal:"8,optional,string" form:"call_type" json:"call_type,omitempty" query:"call_type"`
	WorkspaceID      string             `thrift:"workspace_id,9,required" frugal:"9,required,string" form:"workspace_id,required" json:"workspace_id,required" query:"workspace_id,required"`
	SpanName         string             `thrift:"span_name,10,required" frugal:"10,required,string" form:"span_name,required" json:"span_name,required" query:"span_name,required"`
	SpanType         string             `thrift:"span_type,11,required" frugal:"11,required,string" form:"span_type,required" json:"span_type,required" query:"span_type,required"`
	Method           string             `thrift:"method,12,required" frugal:"12,required,string" form:"method,required" json:"method,required" query:"method,required"`
	StatusCode       int32              `thrift:"status_code,13,required" frugal:"13,required,i32" form:"status_code,required" json:"status_code,required" query:"status_code,required"`
	Input            string             `thrift:"input,14,required" frugal:"14,required,string" form:"input,required" json:"input,required" query:"input,required"`
	Output           string             `thrift:"output,15,required" frugal:"15,required,string" form:"output,required" json:"output,required" query:"output,required"`
	ObjectStorage    *string            `thrift:"object_storage,16,optional" frugal:"16,optional,string" form:"object_storage" json:"object_storage,omitempty" query:"object_storage"`
	SystemTagsString map[string]string  `thrift:"system_tags_string,17,optional" frugal:"17,optional,map<string:string>" form:"system_tags_string" json:"system_tags_string,omitempty" query:"system_tags_string"`
	SystemTagsLong   map[string]int64   `thrift:"system_tags_long,18,optional" frugal:"18,optional,map<string:i64>" json:"system_tags_long" form:"system_tags_long" query:"system_tags_long"`
	SystemTagsDouble map[string]float64 `thrift:"system_tags_double,19,optional" frugal:"19,optional,map<string:double>" form:"system_tags_double" json:"system_tags_double,omitempty" query:"system_tags_double"`
	TagsString       map[string]string  `thrift:"tags_string,20,optional" frugal:"20,optional,map<string:string>" form:"tags_string" json:"tags_string,omitempty" query:"tags_string"`
	TagsLong         map[string]int64   `thrift:"tags_long,21,optional" frugal:"21,optional,map<string:i64>" json:"tags_long" form:"tags_long" query:"tags_long"`
	TagsDouble       map[string]float64 `thrift:"tags_double,22,optional" frugal:"22,optional,map<string:double>" form:"tags_double" json:"tags_double,omitempty" query:"tags_double"`
	TagsBool         map[string]bool    `thrift:"tags_bool,23,optional" frugal:"23,optional,map<string:bool>" form:"tags_bool" json:"tags_bool,omitempty" query:"tags_bool"`
	TagsBytes        map[string]string  `thrift:"tags_bytes,24,optional" frugal:"24,optional,map<string:string>" form:"tags_bytes" json:"tags_bytes,omitempty" query:"tags_bytes"`
	DurationMicros   *int64             `thrift:"duration_micros,25,optional" frugal:"25,optional,i64" json:"duration_micros" form:"duration_micros" query:"duration_micros"`
}

func NewInputSpan() *InputSpan {
	return &InputSpan{}
}

func (p *InputSpan) InitDefault() {
}

func (p *InputSpan) GetStartedAtMicros() (v int64) {
	if p != nil {
		return p.StartedAtMicros
	}
	return
}

func (p *InputSpan) GetSpanID() (v string) {
	if p != nil {
		return p.SpanID
	}
	return
}

func (p *InputSpan) GetParentID() (v string) {
	if p != nil {
		return p.ParentID
	}
	return
}

func (p *InputSpan) GetTraceID() (v string) {
	if p != nil {
		return p.TraceID
	}
	return
}

func (p *InputSpan) GetDuration() (v int64) {
	if p != nil {
		return p.Duration
	}
	return
}

var InputSpan_CallType_DEFAULT string

func (p *InputSpan) GetCallType() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetCallType() {
		return InputSpan_CallType_DEFAULT
	}
	return *p.CallType
}

func (p *InputSpan) GetWorkspaceID() (v string) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *InputSpan) GetSpanName() (v string) {
	if p != nil {
		return p.SpanName
	}
	return
}

func (p *InputSpan) GetSpanType() (v string) {
	if p != nil {
		return p.SpanType
	}
	return
}

func (p *InputSpan) GetMethod() (v string) {
	if p != nil {
		return p.Method
	}
	return
}

func (p *InputSpan) GetStatusCode() (v int32) {
	if p != nil {
		return p.StatusCode
	}
	return
}

func (p *InputSpan) GetInput() (v string) {
	if p != nil {
		return p.Input
	}
	return
}

func (p *InputSpan) GetOutput() (v string) {
	if p != nil {
		return p.Output
	}
	return
}

var InputSpan_ObjectStorage_DEFAULT string

func (p *InputSpan) GetObjectStorage() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetObjectStorage() {
		return InputSpan_ObjectStorage_DEFAULT
	}
	return *p.ObjectStorage
}

var InputSpan_SystemTagsString_DEFAULT map[string]string

func (p *InputSpan) GetSystemTagsString() (v map[string]string) {
	if p == nil {
		return
	}
	if !p.IsSetSystemTagsString() {
		return InputSpan_SystemTagsString_DEFAULT
	}
	return p.SystemTagsString
}

var InputSpan_SystemTagsLong_DEFAULT map[string]int64

func (p *InputSpan) GetSystemTagsLong() (v map[string]int64) {
	if p == nil {
		return
	}
	if !p.IsSetSystemTagsLong() {
		return InputSpan_SystemTagsLong_DEFAULT
	}
	return p.SystemTagsLong
}

var InputSpan_SystemTagsDouble_DEFAULT map[string]float64

func (p *InputSpan) GetSystemTagsDouble() (v map[string]float64) {
	if p == nil {
		return
	}
	if !p.IsSetSystemTagsDouble() {
		return InputSpan_SystemTagsDouble_DEFAULT
	}
	return p.SystemTagsDouble
}

var InputSpan_TagsString_DEFAULT map[string]string

func (p *InputSpan) GetTagsString() (v map[string]string) {
	if p == nil {
		return
	}
	if !p.IsSetTagsString() {
		return InputSpan_TagsString_DEFAULT
	}
	return p.TagsString
}

var InputSpan_TagsLong_DEFAULT map[string]int64

func (p *InputSpan) GetTagsLong() (v map[string]int64) {
	if p == nil {
		return
	}
	if !p.IsSetTagsLong() {
		return InputSpan_TagsLong_DEFAULT
	}
	return p.TagsLong
}

var InputSpan_TagsDouble_DEFAULT map[string]float64

func (p *InputSpan) GetTagsDouble() (v map[string]float64) {
	if p == nil {
		return
	}
	if !p.IsSetTagsDouble() {
		return InputSpan_TagsDouble_DEFAULT
	}
	return p.TagsDouble
}

var InputSpan_TagsBool_DEFAULT map[string]bool

func (p *InputSpan) GetTagsBool() (v map[string]bool) {
	if p == nil {
		return
	}
	if !p.IsSetTagsBool() {
		return InputSpan_TagsBool_DEFAULT
	}
	return p.TagsBool
}

var InputSpan_TagsBytes_DEFAULT map[string]string

func (p *InputSpan) GetTagsBytes() (v map[string]string) {
	if p == nil {
		return
	}
	if !p.IsSetTagsBytes() {
		return InputSpan_TagsBytes_DEFAULT
	}
	return p.TagsBytes
}

var InputSpan_DurationMicros_DEFAULT int64

func (p *InputSpan) GetDurationMicros() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetDurationMicros() {
		return InputSpan_DurationMicros_DEFAULT
	}
	return *p.DurationMicros
}
func (p *InputSpan) SetStartedAtMicros(val int64) {
	p.StartedAtMicros = val
}
func (p *InputSpan) SetSpanID(val string) {
	p.SpanID = val
}
func (p *InputSpan) SetParentID(val string) {
	p.ParentID = val
}
func (p *InputSpan) SetTraceID(val string) {
	p.TraceID = val
}
func (p *InputSpan) SetDuration(val int64) {
	p.Duration = val
}
func (p *InputSpan) SetCallType(val *string) {
	p.CallType = val
}
func (p *InputSpan) SetWorkspaceID(val string) {
	p.WorkspaceID = val
}
func (p *InputSpan) SetSpanName(val string) {
	p.SpanName = val
}
func (p *InputSpan) SetSpanType(val string) {
	p.SpanType = val
}
func (p *InputSpan) SetMethod(val string) {
	p.Method = val
}
func (p *InputSpan) SetStatusCode(val int32) {
	p.StatusCode = val
}
func (p *InputSpan) SetInput(val string) {
	p.Input = val
}
func (p *InputSpan) SetOutput(val string) {
	p.Output = val
}
func (p *InputSpan) SetObjectStorage(val *string) {
	p.ObjectStorage = val
}
func (p *InputSpan) SetSystemTagsString(val map[string]string) {
	p.SystemTagsString = val
}
func (p *InputSpan) SetSystemTagsLong(val map[string]int64) {
	p.SystemTagsLong = val
}
func (p *InputSpan) SetSystemTagsDouble(val map[string]float64) {
	p.SystemTagsDouble = val
}
func (p *InputSpan) SetTagsString(val map[string]string) {
	p.TagsString = val
}
func (p *InputSpan) SetTagsLong(val map[string]int64) {
	p.TagsLong = val
}
func (p *InputSpan) SetTagsDouble(val map[string]float64) {
	p.TagsDouble = val
}
func (p *InputSpan) SetTagsBool(val map[string]bool) {
	p.TagsBool = val
}
func (p *InputSpan) SetTagsBytes(val map[string]string) {
	p.TagsBytes = val
}
func (p *InputSpan) SetDurationMicros(val *int64) {
	p.DurationMicros = val
}

var fieldIDToName_InputSpan = map[int16]string{
	1:  "started_at_micros",
	3:  "span_id",
	4:  "parent_id",
	5:  "trace_id",
	6:  "duration",
	8:  "call_type",
	9:  "workspace_id",
	10: "span_name",
	11: "span_type",
	12: "method",
	13: "status_code",
	14: "input",
	15: "output",
	16: "object_storage",
	17: "system_tags_string",
	18: "system_tags_long",
	19: "system_tags_double",
	20: "tags_string",
	21: "tags_long",
	22: "tags_double",
	23: "tags_bool",
	24: "tags_bytes",
	25: "duration_micros",
}

func (p *InputSpan) IsSetCallType() bool {
	return p.CallType != nil
}

func (p *InputSpan) IsSetObjectStorage() bool {
	return p.ObjectStorage != nil
}

func (p *InputSpan) IsSetSystemTagsString() bool {
	return p.SystemTagsString != nil
}

func (p *InputSpan) IsSetSystemTagsLong() bool {
	return p.SystemTagsLong != nil
}

func (p *InputSpan) IsSetSystemTagsDouble() bool {
	return p.SystemTagsDouble != nil
}

func (p *InputSpan) IsSetTagsString() bool {
	return p.TagsString != nil
}

func (p *InputSpan) IsSetTagsLong() bool {
	return p.TagsLong != nil
}

func (p *InputSpan) IsSetTagsDouble() bool {
	return p.TagsDouble != nil
}

func (p *InputSpan) IsSetTagsBool() bool {
	return p.TagsBool != nil
}

func (p *InputSpan) IsSetTagsBytes() bool {
	return p.TagsBytes != nil
}

func (p *InputSpan) IsSetDurationMicros() bool {
	return p.DurationMicros != nil
}

func (p *InputSpan) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetStartedAtMicros bool = false
	var issetSpanID bool = false
	var issetParentID bool = false
	var issetTraceID bool = false
	var issetDuration bool = false
	var issetWorkspaceID bool = false
	var issetSpanName bool = false
	var issetSpanType bool = false
	var issetMethod bool = false
	var issetStatusCode bool = false
	var issetInput bool = false
	var issetOutput bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetStartedAtMicros = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetSpanID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetParentID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetTraceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetDuration = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
				issetSpanName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
				issetSpanType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 12:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
				issetMethod = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 13:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
				issetStatusCode = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
				issetInput = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
				issetOutput = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 16:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 17:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 18:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField18(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 19:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField19(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 20:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField20(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 21:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField21(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 22:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField22(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 23:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField23(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 24:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField24(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 25:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField25(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetStartedAtMicros {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetSpanID {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetParentID {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetTraceID {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetDuration {
		fieldId = 6
		goto RequiredFieldNotSetError
	}

	if !issetWorkspaceID {
		fieldId = 9
		goto RequiredFieldNotSetError
	}

	if !issetSpanName {
		fieldId = 10
		goto RequiredFieldNotSetError
	}

	if !issetSpanType {
		fieldId = 11
		goto RequiredFieldNotSetError
	}

	if !issetMethod {
		fieldId = 12
		goto RequiredFieldNotSetError
	}

	if !issetStatusCode {
		fieldId = 13
		goto RequiredFieldNotSetError
	}

	if !issetInput {
		fieldId = 14
		goto RequiredFieldNotSetError
	}

	if !issetOutput {
		fieldId = 15
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_InputSpan[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_InputSpan[fieldId]))
}

func (p *InputSpan) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StartedAtMicros = _field
	return nil
}
func (p *InputSpan) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SpanID = _field
	return nil
}
func (p *InputSpan) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ParentID = _field
	return nil
}
func (p *InputSpan) ReadField5(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TraceID = _field
	return nil
}
func (p *InputSpan) ReadField6(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Duration = _field
	return nil
}
func (p *InputSpan) ReadField8(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.CallType = _field
	return nil
}
func (p *InputSpan) ReadField9(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *InputSpan) ReadField10(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SpanName = _field
	return nil
}
func (p *InputSpan) ReadField11(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SpanType = _field
	return nil
}
func (p *InputSpan) ReadField12(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Method = _field
	return nil
}
func (p *InputSpan) ReadField13(iprot thrift.TProtocol) error {

	var _field int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StatusCode = _field
	return nil
}
func (p *InputSpan) ReadField14(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Input = _field
	return nil
}
func (p *InputSpan) ReadField15(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Output = _field
	return nil
}
func (p *InputSpan) ReadField16(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ObjectStorage = _field
	return nil
}
func (p *InputSpan) ReadField17(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.SystemTagsString = _field
	return nil
}
func (p *InputSpan) ReadField18(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]int64, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.SystemTagsLong = _field
	return nil
}
func (p *InputSpan) ReadField19(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]float64, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val float64
		if v, err := iprot.ReadDouble(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.SystemTagsDouble = _field
	return nil
}
func (p *InputSpan) ReadField20(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.TagsString = _field
	return nil
}
func (p *InputSpan) ReadField21(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]int64, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.TagsLong = _field
	return nil
}
func (p *InputSpan) ReadField22(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]float64, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val float64
		if v, err := iprot.ReadDouble(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.TagsDouble = _field
	return nil
}
func (p *InputSpan) ReadField23(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]bool, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val bool
		if v, err := iprot.ReadBool(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.TagsBool = _field
	return nil
}
func (p *InputSpan) ReadField24(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.TagsBytes = _field
	return nil
}
func (p *InputSpan) ReadField25(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DurationMicros = _field
	return nil
}

func (p *InputSpan) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("InputSpan"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}
		if err = p.writeField18(oprot); err != nil {
			fieldId = 18
			goto WriteFieldError
		}
		if err = p.writeField19(oprot); err != nil {
			fieldId = 19
			goto WriteFieldError
		}
		if err = p.writeField20(oprot); err != nil {
			fieldId = 20
			goto WriteFieldError
		}
		if err = p.writeField21(oprot); err != nil {
			fieldId = 21
			goto WriteFieldError
		}
		if err = p.writeField22(oprot); err != nil {
			fieldId = 22
			goto WriteFieldError
		}
		if err = p.writeField23(oprot); err != nil {
			fieldId = 23
			goto WriteFieldError
		}
		if err = p.writeField24(oprot); err != nil {
			fieldId = 24
			goto WriteFieldError
		}
		if err = p.writeField25(oprot); err != nil {
			fieldId = 25
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *InputSpan) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("started_at_micros", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.StartedAtMicros); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *InputSpan) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("span_id", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.SpanID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *InputSpan) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("parent_id", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ParentID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *InputSpan) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("trace_id", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TraceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *InputSpan) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("duration", thrift.I64, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Duration); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *InputSpan) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetCallType() {
		if err = oprot.WriteFieldBegin("call_type", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.CallType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}
func (p *InputSpan) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}
func (p *InputSpan) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("span_name", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.SpanName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}
func (p *InputSpan) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("span_type", thrift.STRING, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.SpanType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}
func (p *InputSpan) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("method", thrift.STRING, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Method); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}
func (p *InputSpan) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status_code", thrift.I32, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.StatusCode); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}
func (p *InputSpan) writeField14(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("input", thrift.STRING, 14); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Input); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}
func (p *InputSpan) writeField15(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("output", thrift.STRING, 15); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Output); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}
func (p *InputSpan) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetObjectStorage() {
		if err = oprot.WriteFieldBegin("object_storage", thrift.STRING, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ObjectStorage); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}
func (p *InputSpan) writeField17(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemTagsString() {
		if err = oprot.WriteFieldBegin("system_tags_string", thrift.MAP, 17); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.SystemTagsString)); err != nil {
			return err
		}
		for k, v := range p.SystemTagsString {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}
func (p *InputSpan) writeField18(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemTagsLong() {
		if err = oprot.WriteFieldBegin("system_tags_long", thrift.MAP, 18); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.I64, len(p.SystemTagsLong)); err != nil {
			return err
		}
		for k, v := range p.SystemTagsLong {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 18 end error: ", p), err)
}
func (p *InputSpan) writeField19(oprot thrift.TProtocol) (err error) {
	if p.IsSetSystemTagsDouble() {
		if err = oprot.WriteFieldBegin("system_tags_double", thrift.MAP, 19); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.DOUBLE, len(p.SystemTagsDouble)); err != nil {
			return err
		}
		for k, v := range p.SystemTagsDouble {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteDouble(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 19 end error: ", p), err)
}
func (p *InputSpan) writeField20(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagsString() {
		if err = oprot.WriteFieldBegin("tags_string", thrift.MAP, 20); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.TagsString)); err != nil {
			return err
		}
		for k, v := range p.TagsString {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 20 end error: ", p), err)
}
func (p *InputSpan) writeField21(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagsLong() {
		if err = oprot.WriteFieldBegin("tags_long", thrift.MAP, 21); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.I64, len(p.TagsLong)); err != nil {
			return err
		}
		for k, v := range p.TagsLong {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 21 end error: ", p), err)
}
func (p *InputSpan) writeField22(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagsDouble() {
		if err = oprot.WriteFieldBegin("tags_double", thrift.MAP, 22); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.DOUBLE, len(p.TagsDouble)); err != nil {
			return err
		}
		for k, v := range p.TagsDouble {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteDouble(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 22 end error: ", p), err)
}
func (p *InputSpan) writeField23(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagsBool() {
		if err = oprot.WriteFieldBegin("tags_bool", thrift.MAP, 23); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.BOOL, len(p.TagsBool)); err != nil {
			return err
		}
		for k, v := range p.TagsBool {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteBool(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 23 end error: ", p), err)
}
func (p *InputSpan) writeField24(oprot thrift.TProtocol) (err error) {
	if p.IsSetTagsBytes() {
		if err = oprot.WriteFieldBegin("tags_bytes", thrift.MAP, 24); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.TagsBytes)); err != nil {
			return err
		}
		for k, v := range p.TagsBytes {
			if err := oprot.WriteString(k); err != nil {
				return err
			}
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 24 end error: ", p), err)
}
func (p *InputSpan) writeField25(oprot thrift.TProtocol) (err error) {
	if p.IsSetDurationMicros() {
		if err = oprot.WriteFieldBegin("duration_micros", thrift.I64, 25); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.DurationMicros); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 25 end error: ", p), err)
}

func (p *InputSpan) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("InputSpan(%+v)", *p)

}

func (p *InputSpan) DeepEqual(ano *InputSpan) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.StartedAtMicros) {
		return false
	}
	if !p.Field3DeepEqual(ano.SpanID) {
		return false
	}
	if !p.Field4DeepEqual(ano.ParentID) {
		return false
	}
	if !p.Field5DeepEqual(ano.TraceID) {
		return false
	}
	if !p.Field6DeepEqual(ano.Duration) {
		return false
	}
	if !p.Field8DeepEqual(ano.CallType) {
		return false
	}
	if !p.Field9DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field10DeepEqual(ano.SpanName) {
		return false
	}
	if !p.Field11DeepEqual(ano.SpanType) {
		return false
	}
	if !p.Field12DeepEqual(ano.Method) {
		return false
	}
	if !p.Field13DeepEqual(ano.StatusCode) {
		return false
	}
	if !p.Field14DeepEqual(ano.Input) {
		return false
	}
	if !p.Field15DeepEqual(ano.Output) {
		return false
	}
	if !p.Field16DeepEqual(ano.ObjectStorage) {
		return false
	}
	if !p.Field17DeepEqual(ano.SystemTagsString) {
		return false
	}
	if !p.Field18DeepEqual(ano.SystemTagsLong) {
		return false
	}
	if !p.Field19DeepEqual(ano.SystemTagsDouble) {
		return false
	}
	if !p.Field20DeepEqual(ano.TagsString) {
		return false
	}
	if !p.Field21DeepEqual(ano.TagsLong) {
		return false
	}
	if !p.Field22DeepEqual(ano.TagsDouble) {
		return false
	}
	if !p.Field23DeepEqual(ano.TagsBool) {
		return false
	}
	if !p.Field24DeepEqual(ano.TagsBytes) {
		return false
	}
	if !p.Field25DeepEqual(ano.DurationMicros) {
		return false
	}
	return true
}

func (p *InputSpan) Field1DeepEqual(src int64) bool {

	if p.StartedAtMicros != src {
		return false
	}
	return true
}
func (p *InputSpan) Field3DeepEqual(src string) bool {

	if strings.Compare(p.SpanID, src) != 0 {
		return false
	}
	return true
}
func (p *InputSpan) Field4DeepEqual(src string) bool {

	if strings.Compare(p.ParentID, src) != 0 {
		return false
	}
	return true
}
func (p *InputSpan) Field5DeepEqual(src string) bool {

	if strings.Compare(p.TraceID, src) != 0 {
		return false
	}
	return true
}
func (p *InputSpan) Field6DeepEqual(src int64) bool {

	if p.Duration != src {
		return false
	}
	return true
}
func (p *InputSpan) Field8DeepEqual(src *string) bool {

	if p.CallType == src {
		return true
	} else if p.CallType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.CallType, *src) != 0 {
		return false
	}
	return true
}
func (p *InputSpan) Field9DeepEqual(src string) bool {

	if strings.Compare(p.WorkspaceID, src) != 0 {
		return false
	}
	return true
}
func (p *InputSpan) Field10DeepEqual(src string) bool {

	if strings.Compare(p.SpanName, src) != 0 {
		return false
	}
	return true
}
func (p *InputSpan) Field11DeepEqual(src string) bool {

	if strings.Compare(p.SpanType, src) != 0 {
		return false
	}
	return true
}
func (p *InputSpan) Field12DeepEqual(src string) bool {

	if strings.Compare(p.Method, src) != 0 {
		return false
	}
	return true
}
func (p *InputSpan) Field13DeepEqual(src int32) bool {

	if p.StatusCode != src {
		return false
	}
	return true
}
func (p *InputSpan) Field14DeepEqual(src string) bool {

	if strings.Compare(p.Input, src) != 0 {
		return false
	}
	return true
}
func (p *InputSpan) Field15DeepEqual(src string) bool {

	if strings.Compare(p.Output, src) != 0 {
		return false
	}
	return true
}
func (p *InputSpan) Field16DeepEqual(src *string) bool {

	if p.ObjectStorage == src {
		return true
	} else if p.ObjectStorage == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ObjectStorage, *src) != 0 {
		return false
	}
	return true
}
func (p *InputSpan) Field17DeepEqual(src map[string]string) bool {

	if len(p.SystemTagsString) != len(src) {
		return false
	}
	for k, v := range p.SystemTagsString {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *InputSpan) Field18DeepEqual(src map[string]int64) bool {

	if len(p.SystemTagsLong) != len(src) {
		return false
	}
	for k, v := range p.SystemTagsLong {
		_src := src[k]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *InputSpan) Field19DeepEqual(src map[string]float64) bool {

	if len(p.SystemTagsDouble) != len(src) {
		return false
	}
	for k, v := range p.SystemTagsDouble {
		_src := src[k]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *InputSpan) Field20DeepEqual(src map[string]string) bool {

	if len(p.TagsString) != len(src) {
		return false
	}
	for k, v := range p.TagsString {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *InputSpan) Field21DeepEqual(src map[string]int64) bool {

	if len(p.TagsLong) != len(src) {
		return false
	}
	for k, v := range p.TagsLong {
		_src := src[k]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *InputSpan) Field22DeepEqual(src map[string]float64) bool {

	if len(p.TagsDouble) != len(src) {
		return false
	}
	for k, v := range p.TagsDouble {
		_src := src[k]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *InputSpan) Field23DeepEqual(src map[string]bool) bool {

	if len(p.TagsBool) != len(src) {
		return false
	}
	for k, v := range p.TagsBool {
		_src := src[k]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *InputSpan) Field24DeepEqual(src map[string]string) bool {

	if len(p.TagsBytes) != len(src) {
		return false
	}
	for k, v := range p.TagsBytes {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *InputSpan) Field25DeepEqual(src *int64) bool {

	if p.DurationMicros == src {
		return true
	} else if p.DurationMicros == nil || src == nil {
		return false
	}
	if *p.DurationMicros != *src {
		return false
	}
	return true
}
