// Code generated by Validator v0.2.6. DO NOT EDIT.

package trace

import (
	"bytes"
	"fmt"
	"reflect"
	"regexp"
	"strings"
	"time"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
	_ = (*bytes.Buffer)(nil)
	_ = (*strings.Builder)(nil)
	_ = reflect.Type(nil)
	_ = (*regexp.Regexp)(nil)
	_ = time.Nanosecond
)

func (p *ListSpansRequest) IsValid() error {
	if p.Filters != nil {
		if err := p.Filters.IsValid(); err != nil {
			return fmt.Errorf("field Filters not valid, %w", err)
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *ListSpansResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *TokenCost) IsValid() error {
	return nil
}
func (p *TraceAdvanceInfo) IsValid() error {
	if p.Tokens != nil {
		if err := p.Tokens.IsValid(); err != nil {
			return fmt.Errorf("field Tokens not valid, %w", err)
		}
	}
	return nil
}
func (p *GetTraceRequest) IsValid() error {
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *GetTraceResponse) IsValid() error {
	if p.TracesAdvanceInfo != nil {
		if err := p.TracesAdvanceInfo.IsValid(); err != nil {
			return fmt.Errorf("field TracesAdvanceInfo not valid, %w", err)
		}
	}
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *TraceQueryParams) IsValid() error {
	return nil
}
func (p *BatchGetTracesAdvanceInfoRequest) IsValid() error {
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *BatchGetTracesAdvanceInfoResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *IngestTracesRequest) IsValid() error {
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *IngestTracesResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *FieldMeta) IsValid() error {
	if p.FieldOptions != nil {
		if err := p.FieldOptions.IsValid(); err != nil {
			return fmt.Errorf("field FieldOptions not valid, %w", err)
		}
	}
	return nil
}
func (p *GetTracesMetaInfoRequest) IsValid() error {
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *GetTracesMetaInfoResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *CreateViewRequest) IsValid() error {
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *CreateViewResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *UpdateViewRequest) IsValid() error {
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *UpdateViewResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *DeleteViewRequest) IsValid() error {
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *DeleteViewResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *ListViewsRequest) IsValid() error {
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *ListViewsResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *CreateManualAnnotationRequest) IsValid() error {
	if p.Annotation != nil {
		if err := p.Annotation.IsValid(); err != nil {
			return fmt.Errorf("field Annotation not valid, %w", err)
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *CreateManualAnnotationResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *UpdateManualAnnotationRequest) IsValid() error {
	if p.Annotation != nil {
		if err := p.Annotation.IsValid(); err != nil {
			return fmt.Errorf("field Annotation not valid, %w", err)
		}
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *UpdateManualAnnotationResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *DeleteManualAnnotationRequest) IsValid() error {
	if p.WorkspaceID <= int64(0) {
		return fmt.Errorf("field WorkspaceID gt rule failed, current value: %v", p.WorkspaceID)
	}
	if len(p.TraceID) < int(1) {
		return fmt.Errorf("field TraceID min_len rule failed, current value: %d", len(p.TraceID))
	}
	if len(p.SpanID) < int(1) {
		return fmt.Errorf("field SpanID min_len rule failed, current value: %d", len(p.SpanID))
	}
	if p.StartTime <= int64(0) {
		return fmt.Errorf("field StartTime gt rule failed, current value: %v", p.StartTime)
	}
	if len(p.AnnotationKey) < int(1) {
		return fmt.Errorf("field AnnotationKey min_len rule failed, current value: %d", len(p.AnnotationKey))
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *DeleteManualAnnotationResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
func (p *ListAnnotationsRequest) IsValid() error {
	if p.WorkspaceID <= int64(0) {
		return fmt.Errorf("field WorkspaceID gt rule failed, current value: %v", p.WorkspaceID)
	}
	if len(p.SpanID) < int(1) {
		return fmt.Errorf("field SpanID min_len rule failed, current value: %d", len(p.SpanID))
	}
	if len(p.TraceID) < int(1) {
		return fmt.Errorf("field TraceID min_len rule failed, current value: %d", len(p.TraceID))
	}
	if p.StartTime <= int64(0) {
		return fmt.Errorf("field StartTime gt rule failed, current value: %v", p.StartTime)
	}
	if p.Base != nil {
		if err := p.Base.IsValid(); err != nil {
			return fmt.Errorf("field Base not valid, %w", err)
		}
	}
	return nil
}
func (p *ListAnnotationsResponse) IsValid() error {
	if p.BaseResp != nil {
		if err := p.BaseResp.IsValid(); err != nil {
			return fmt.Errorf("field BaseResp not valid, %w", err)
		}
	}
	return nil
}
