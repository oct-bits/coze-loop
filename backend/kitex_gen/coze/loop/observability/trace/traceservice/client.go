// Code generated by Kitex v0.13.1. DO NOT EDIT.

package traceservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	trace "github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/observability/trace"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	ListSpans(ctx context.Context, req *trace.ListSpansRequest, callOptions ...callopt.Option) (r *trace.ListSpansResponse, err error)
	GetTrace(ctx context.Context, req *trace.GetTraceRequest, callOptions ...callopt.Option) (r *trace.GetTraceResponse, err error)
	BatchGetTracesAdvanceInfo(ctx context.Context, req *trace.BatchGetTracesAdvanceInfoRequest, callOptions ...callopt.Option) (r *trace.BatchGetTracesAdvanceInfoResponse, err error)
	IngestTracesInner(ctx context.Context, req *trace.IngestTracesRequest, callOptions ...callopt.Option) (r *trace.IngestTracesResponse, err error)
	GetTracesMetaInfo(ctx context.Context, req *trace.GetTracesMetaInfoRequest, callOptions ...callopt.Option) (r *trace.GetTracesMetaInfoResponse, err error)
	CreateView(ctx context.Context, req *trace.CreateViewRequest, callOptions ...callopt.Option) (r *trace.CreateViewResponse, err error)
	UpdateView(ctx context.Context, req *trace.UpdateViewRequest, callOptions ...callopt.Option) (r *trace.UpdateViewResponse, err error)
	DeleteView(ctx context.Context, req *trace.DeleteViewRequest, callOptions ...callopt.Option) (r *trace.DeleteViewResponse, err error)
	ListViews(ctx context.Context, req *trace.ListViewsRequest, callOptions ...callopt.Option) (r *trace.ListViewsResponse, err error)
	CreateManualAnnotation(ctx context.Context, req *trace.CreateManualAnnotationRequest, callOptions ...callopt.Option) (r *trace.CreateManualAnnotationResponse, err error)
	UpdateManualAnnotation(ctx context.Context, req *trace.UpdateManualAnnotationRequest, callOptions ...callopt.Option) (r *trace.UpdateManualAnnotationResponse, err error)
	DeleteManualAnnotation(ctx context.Context, req *trace.DeleteManualAnnotationRequest, callOptions ...callopt.Option) (r *trace.DeleteManualAnnotationResponse, err error)
	ListAnnotations(ctx context.Context, req *trace.ListAnnotationsRequest, callOptions ...callopt.Option) (r *trace.ListAnnotationsResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kTraceServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kTraceServiceClient struct {
	*kClient
}

func (p *kTraceServiceClient) ListSpans(ctx context.Context, req *trace.ListSpansRequest, callOptions ...callopt.Option) (r *trace.ListSpansResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListSpans(ctx, req)
}

func (p *kTraceServiceClient) GetTrace(ctx context.Context, req *trace.GetTraceRequest, callOptions ...callopt.Option) (r *trace.GetTraceResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetTrace(ctx, req)
}

func (p *kTraceServiceClient) BatchGetTracesAdvanceInfo(ctx context.Context, req *trace.BatchGetTracesAdvanceInfoRequest, callOptions ...callopt.Option) (r *trace.BatchGetTracesAdvanceInfoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.BatchGetTracesAdvanceInfo(ctx, req)
}

func (p *kTraceServiceClient) IngestTracesInner(ctx context.Context, req *trace.IngestTracesRequest, callOptions ...callopt.Option) (r *trace.IngestTracesResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.IngestTracesInner(ctx, req)
}

func (p *kTraceServiceClient) GetTracesMetaInfo(ctx context.Context, req *trace.GetTracesMetaInfoRequest, callOptions ...callopt.Option) (r *trace.GetTracesMetaInfoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetTracesMetaInfo(ctx, req)
}

func (p *kTraceServiceClient) CreateView(ctx context.Context, req *trace.CreateViewRequest, callOptions ...callopt.Option) (r *trace.CreateViewResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateView(ctx, req)
}

func (p *kTraceServiceClient) UpdateView(ctx context.Context, req *trace.UpdateViewRequest, callOptions ...callopt.Option) (r *trace.UpdateViewResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateView(ctx, req)
}

func (p *kTraceServiceClient) DeleteView(ctx context.Context, req *trace.DeleteViewRequest, callOptions ...callopt.Option) (r *trace.DeleteViewResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteView(ctx, req)
}

func (p *kTraceServiceClient) ListViews(ctx context.Context, req *trace.ListViewsRequest, callOptions ...callopt.Option) (r *trace.ListViewsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListViews(ctx, req)
}

func (p *kTraceServiceClient) CreateManualAnnotation(ctx context.Context, req *trace.CreateManualAnnotationRequest, callOptions ...callopt.Option) (r *trace.CreateManualAnnotationResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateManualAnnotation(ctx, req)
}

func (p *kTraceServiceClient) UpdateManualAnnotation(ctx context.Context, req *trace.UpdateManualAnnotationRequest, callOptions ...callopt.Option) (r *trace.UpdateManualAnnotationResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.UpdateManualAnnotation(ctx, req)
}

func (p *kTraceServiceClient) DeleteManualAnnotation(ctx context.Context, req *trace.DeleteManualAnnotationRequest, callOptions ...callopt.Option) (r *trace.DeleteManualAnnotationResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteManualAnnotation(ctx, req)
}

func (p *kTraceServiceClient) ListAnnotations(ctx context.Context, req *trace.ListAnnotationsRequest, callOptions ...callopt.Option) (r *trace.ListAnnotationsResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ListAnnotations(ctx, req)
}
