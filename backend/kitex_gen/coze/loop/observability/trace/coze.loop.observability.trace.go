// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package trace

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/base"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/observability/domain/annotation"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/observability/domain/common"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/observability/domain/filter"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/observability/domain/span"
	"github.com/coze-dev/coze-loop/backend/kitex_gen/coze/loop/observability/domain/view"
	"strings"
)

type ListSpansRequest struct {
	WorkspaceID int64 `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" `
	// ms
	StartTime int64 `thrift:"start_time,2,required" frugal:"2,required,i64" json:"start_time" form:"start_time,required" `
	// ms
	EndTime      int64                `thrift:"end_time,3,required" frugal:"3,required,i64" json:"end_time" form:"end_time,required" `
	Filters      *filter.FilterFields `thrift:"filters,4,optional" frugal:"4,optional,filter.FilterFields" form:"filters" json:"filters,omitempty"`
	PageSize     *int32               `thrift:"page_size,5,optional" frugal:"5,optional,i32" form:"page_size" json:"page_size,omitempty"`
	OrderBys     []*common.OrderBy    `thrift:"order_bys,6,optional" frugal:"6,optional,list<common.OrderBy>" form:"order_bys" json:"order_bys,omitempty"`
	PageToken    *string              `thrift:"page_token,7,optional" frugal:"7,optional,string" form:"page_token" json:"page_token,omitempty"`
	PlatformType *common.PlatformType `thrift:"platform_type,8,optional" frugal:"8,optional,string" form:"platform_type" json:"platform_type,omitempty"`
	// default root span
	SpanListType *common.SpanListType `thrift:"span_list_type,9,optional" frugal:"9,optional,string" form:"span_list_type" json:"span_list_type,omitempty"`
	Base         *base.Base           `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewListSpansRequest() *ListSpansRequest {
	return &ListSpansRequest{}
}

func (p *ListSpansRequest) InitDefault() {
}

func (p *ListSpansRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *ListSpansRequest) GetStartTime() (v int64) {
	if p != nil {
		return p.StartTime
	}
	return
}

func (p *ListSpansRequest) GetEndTime() (v int64) {
	if p != nil {
		return p.EndTime
	}
	return
}

var ListSpansRequest_Filters_DEFAULT *filter.FilterFields

func (p *ListSpansRequest) GetFilters() (v *filter.FilterFields) {
	if p == nil {
		return
	}
	if !p.IsSetFilters() {
		return ListSpansRequest_Filters_DEFAULT
	}
	return p.Filters
}

var ListSpansRequest_PageSize_DEFAULT int32

func (p *ListSpansRequest) GetPageSize() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetPageSize() {
		return ListSpansRequest_PageSize_DEFAULT
	}
	return *p.PageSize
}

var ListSpansRequest_OrderBys_DEFAULT []*common.OrderBy

func (p *ListSpansRequest) GetOrderBys() (v []*common.OrderBy) {
	if p == nil {
		return
	}
	if !p.IsSetOrderBys() {
		return ListSpansRequest_OrderBys_DEFAULT
	}
	return p.OrderBys
}

var ListSpansRequest_PageToken_DEFAULT string

func (p *ListSpansRequest) GetPageToken() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetPageToken() {
		return ListSpansRequest_PageToken_DEFAULT
	}
	return *p.PageToken
}

var ListSpansRequest_PlatformType_DEFAULT common.PlatformType

func (p *ListSpansRequest) GetPlatformType() (v common.PlatformType) {
	if p == nil {
		return
	}
	if !p.IsSetPlatformType() {
		return ListSpansRequest_PlatformType_DEFAULT
	}
	return *p.PlatformType
}

var ListSpansRequest_SpanListType_DEFAULT common.SpanListType

func (p *ListSpansRequest) GetSpanListType() (v common.SpanListType) {
	if p == nil {
		return
	}
	if !p.IsSetSpanListType() {
		return ListSpansRequest_SpanListType_DEFAULT
	}
	return *p.SpanListType
}

var ListSpansRequest_Base_DEFAULT *base.Base

func (p *ListSpansRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return ListSpansRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ListSpansRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *ListSpansRequest) SetStartTime(val int64) {
	p.StartTime = val
}
func (p *ListSpansRequest) SetEndTime(val int64) {
	p.EndTime = val
}
func (p *ListSpansRequest) SetFilters(val *filter.FilterFields) {
	p.Filters = val
}
func (p *ListSpansRequest) SetPageSize(val *int32) {
	p.PageSize = val
}
func (p *ListSpansRequest) SetOrderBys(val []*common.OrderBy) {
	p.OrderBys = val
}
func (p *ListSpansRequest) SetPageToken(val *string) {
	p.PageToken = val
}
func (p *ListSpansRequest) SetPlatformType(val *common.PlatformType) {
	p.PlatformType = val
}
func (p *ListSpansRequest) SetSpanListType(val *common.SpanListType) {
	p.SpanListType = val
}
func (p *ListSpansRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListSpansRequest = map[int16]string{
	1:   "workspace_id",
	2:   "start_time",
	3:   "end_time",
	4:   "filters",
	5:   "page_size",
	6:   "order_bys",
	7:   "page_token",
	8:   "platform_type",
	9:   "span_list_type",
	255: "Base",
}

func (p *ListSpansRequest) IsSetFilters() bool {
	return p.Filters != nil
}

func (p *ListSpansRequest) IsSetPageSize() bool {
	return p.PageSize != nil
}

func (p *ListSpansRequest) IsSetOrderBys() bool {
	return p.OrderBys != nil
}

func (p *ListSpansRequest) IsSetPageToken() bool {
	return p.PageToken != nil
}

func (p *ListSpansRequest) IsSetPlatformType() bool {
	return p.PlatformType != nil
}

func (p *ListSpansRequest) IsSetSpanListType() bool {
	return p.SpanListType != nil
}

func (p *ListSpansRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListSpansRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetStartTime bool = false
	var issetEndTime bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetStartTime = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetEndTime = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetStartTime {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetEndTime {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListSpansRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ListSpansRequest[fieldId]))
}

func (p *ListSpansRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *ListSpansRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StartTime = _field
	return nil
}
func (p *ListSpansRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EndTime = _field
	return nil
}
func (p *ListSpansRequest) ReadField4(iprot thrift.TProtocol) error {
	_field := filter.NewFilterFields()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Filters = _field
	return nil
}
func (p *ListSpansRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageSize = _field
	return nil
}
func (p *ListSpansRequest) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*common.OrderBy, 0, size)
	values := make([]common.OrderBy, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.OrderBys = _field
	return nil
}
func (p *ListSpansRequest) ReadField7(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PageToken = _field
	return nil
}
func (p *ListSpansRequest) ReadField8(iprot thrift.TProtocol) error {

	var _field *common.PlatformType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PlatformType = _field
	return nil
}
func (p *ListSpansRequest) ReadField9(iprot thrift.TProtocol) error {

	var _field *common.SpanListType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SpanListType = _field
	return nil
}
func (p *ListSpansRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *ListSpansRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListSpansRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListSpansRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListSpansRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("start_time", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.StartTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ListSpansRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("end_time", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EndTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ListSpansRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetFilters() {
		if err = oprot.WriteFieldBegin("filters", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Filters.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *ListSpansRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageSize() {
		if err = oprot.WriteFieldBegin("page_size", thrift.I32, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.PageSize); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *ListSpansRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetOrderBys() {
		if err = oprot.WriteFieldBegin("order_bys", thrift.LIST, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.OrderBys)); err != nil {
			return err
		}
		for _, v := range p.OrderBys {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *ListSpansRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetPageToken() {
		if err = oprot.WriteFieldBegin("page_token", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PageToken); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}
func (p *ListSpansRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetPlatformType() {
		if err = oprot.WriteFieldBegin("platform_type", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PlatformType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}
func (p *ListSpansRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetSpanListType() {
		if err = oprot.WriteFieldBegin("span_list_type", thrift.STRING, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.SpanListType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}
func (p *ListSpansRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListSpansRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListSpansRequest(%+v)", *p)

}

func (p *ListSpansRequest) DeepEqual(ano *ListSpansRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.StartTime) {
		return false
	}
	if !p.Field3DeepEqual(ano.EndTime) {
		return false
	}
	if !p.Field4DeepEqual(ano.Filters) {
		return false
	}
	if !p.Field5DeepEqual(ano.PageSize) {
		return false
	}
	if !p.Field6DeepEqual(ano.OrderBys) {
		return false
	}
	if !p.Field7DeepEqual(ano.PageToken) {
		return false
	}
	if !p.Field8DeepEqual(ano.PlatformType) {
		return false
	}
	if !p.Field9DeepEqual(ano.SpanListType) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListSpansRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *ListSpansRequest) Field2DeepEqual(src int64) bool {

	if p.StartTime != src {
		return false
	}
	return true
}
func (p *ListSpansRequest) Field3DeepEqual(src int64) bool {

	if p.EndTime != src {
		return false
	}
	return true
}
func (p *ListSpansRequest) Field4DeepEqual(src *filter.FilterFields) bool {

	if !p.Filters.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ListSpansRequest) Field5DeepEqual(src *int32) bool {

	if p.PageSize == src {
		return true
	} else if p.PageSize == nil || src == nil {
		return false
	}
	if *p.PageSize != *src {
		return false
	}
	return true
}
func (p *ListSpansRequest) Field6DeepEqual(src []*common.OrderBy) bool {

	if len(p.OrderBys) != len(src) {
		return false
	}
	for i, v := range p.OrderBys {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListSpansRequest) Field7DeepEqual(src *string) bool {

	if p.PageToken == src {
		return true
	} else if p.PageToken == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PageToken, *src) != 0 {
		return false
	}
	return true
}
func (p *ListSpansRequest) Field8DeepEqual(src *common.PlatformType) bool {

	if p.PlatformType == src {
		return true
	} else if p.PlatformType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PlatformType, *src) != 0 {
		return false
	}
	return true
}
func (p *ListSpansRequest) Field9DeepEqual(src *common.SpanListType) bool {

	if p.SpanListType == src {
		return true
	} else if p.SpanListType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.SpanListType, *src) != 0 {
		return false
	}
	return true
}
func (p *ListSpansRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ListSpansResponse struct {
	Spans         []*span.OutputSpan `thrift:"spans,1,required" frugal:"1,required,list<span.OutputSpan>" form:"spans,required" json:"spans,required" query:"spans,required"`
	NextPageToken string             `thrift:"next_page_token,2,required" frugal:"2,required,string" form:"next_page_token,required" json:"next_page_token,required" query:"next_page_token,required"`
	HasMore       bool               `thrift:"has_more,3,required" frugal:"3,required,bool" form:"has_more,required" json:"has_more,required" query:"has_more,required"`
	BaseResp      *base.BaseResp     `thrift:"BaseResp,255,optional" frugal:"255,optional,base.BaseResp" form:"BaseResp" json:"BaseResp,omitempty" query:"BaseResp"`
}

func NewListSpansResponse() *ListSpansResponse {
	return &ListSpansResponse{}
}

func (p *ListSpansResponse) InitDefault() {
}

func (p *ListSpansResponse) GetSpans() (v []*span.OutputSpan) {
	if p != nil {
		return p.Spans
	}
	return
}

func (p *ListSpansResponse) GetNextPageToken() (v string) {
	if p != nil {
		return p.NextPageToken
	}
	return
}

func (p *ListSpansResponse) GetHasMore() (v bool) {
	if p != nil {
		return p.HasMore
	}
	return
}

var ListSpansResponse_BaseResp_DEFAULT *base.BaseResp

func (p *ListSpansResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return ListSpansResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ListSpansResponse) SetSpans(val []*span.OutputSpan) {
	p.Spans = val
}
func (p *ListSpansResponse) SetNextPageToken(val string) {
	p.NextPageToken = val
}
func (p *ListSpansResponse) SetHasMore(val bool) {
	p.HasMore = val
}
func (p *ListSpansResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_ListSpansResponse = map[int16]string{
	1:   "spans",
	2:   "next_page_token",
	3:   "has_more",
	255: "BaseResp",
}

func (p *ListSpansResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ListSpansResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetSpans bool = false
	var issetNextPageToken bool = false
	var issetHasMore bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetSpans = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetNextPageToken = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetHasMore = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetSpans {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetNextPageToken {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetHasMore {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListSpansResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ListSpansResponse[fieldId]))
}

func (p *ListSpansResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*span.OutputSpan, 0, size)
	values := make([]span.OutputSpan, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Spans = _field
	return nil
}
func (p *ListSpansResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.NextPageToken = _field
	return nil
}
func (p *ListSpansResponse) ReadField3(iprot thrift.TProtocol) error {

	var _field bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = v
	}
	p.HasMore = _field
	return nil
}
func (p *ListSpansResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *ListSpansResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListSpansResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListSpansResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("spans", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Spans)); err != nil {
		return err
	}
	for _, v := range p.Spans {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListSpansResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("next_page_token", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.NextPageToken); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ListSpansResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("has_more", thrift.BOOL, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.HasMore); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ListSpansResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseResp() {
		if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseResp.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListSpansResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListSpansResponse(%+v)", *p)

}

func (p *ListSpansResponse) DeepEqual(ano *ListSpansResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Spans) {
		return false
	}
	if !p.Field2DeepEqual(ano.NextPageToken) {
		return false
	}
	if !p.Field3DeepEqual(ano.HasMore) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *ListSpansResponse) Field1DeepEqual(src []*span.OutputSpan) bool {

	if len(p.Spans) != len(src) {
		return false
	}
	for i, v := range p.Spans {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListSpansResponse) Field2DeepEqual(src string) bool {

	if strings.Compare(p.NextPageToken, src) != 0 {
		return false
	}
	return true
}
func (p *ListSpansResponse) Field3DeepEqual(src bool) bool {

	if p.HasMore != src {
		return false
	}
	return true
}
func (p *ListSpansResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type TokenCost struct {
	Input  int64 `thrift:"input,1,required" frugal:"1,required,i64" json:"input" form:"input,required" query:"input,required"`
	Output int64 `thrift:"output,2,required" frugal:"2,required,i64" json:"output" form:"output,required" query:"output,required"`
}

func NewTokenCost() *TokenCost {
	return &TokenCost{}
}

func (p *TokenCost) InitDefault() {
}

func (p *TokenCost) GetInput() (v int64) {
	if p != nil {
		return p.Input
	}
	return
}

func (p *TokenCost) GetOutput() (v int64) {
	if p != nil {
		return p.Output
	}
	return
}
func (p *TokenCost) SetInput(val int64) {
	p.Input = val
}
func (p *TokenCost) SetOutput(val int64) {
	p.Output = val
}

var fieldIDToName_TokenCost = map[int16]string{
	1: "input",
	2: "output",
}

func (p *TokenCost) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetInput bool = false
	var issetOutput bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetInput = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetOutput = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetInput {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetOutput {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TokenCost[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TokenCost[fieldId]))
}

func (p *TokenCost) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Input = _field
	return nil
}
func (p *TokenCost) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Output = _field
	return nil
}

func (p *TokenCost) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TokenCost"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TokenCost) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("input", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Input); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *TokenCost) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("output", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Output); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TokenCost) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TokenCost(%+v)", *p)

}

func (p *TokenCost) DeepEqual(ano *TokenCost) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Input) {
		return false
	}
	if !p.Field2DeepEqual(ano.Output) {
		return false
	}
	return true
}

func (p *TokenCost) Field1DeepEqual(src int64) bool {

	if p.Input != src {
		return false
	}
	return true
}
func (p *TokenCost) Field2DeepEqual(src int64) bool {

	if p.Output != src {
		return false
	}
	return true
}

type TraceAdvanceInfo struct {
	TraceID string     `thrift:"trace_id,1,required" frugal:"1,required,string" form:"trace_id,required" json:"trace_id,required" query:"trace_id,required"`
	Tokens  *TokenCost `thrift:"tokens,2,required" frugal:"2,required,TokenCost" form:"tokens,required" json:"tokens,required" query:"tokens,required"`
}

func NewTraceAdvanceInfo() *TraceAdvanceInfo {
	return &TraceAdvanceInfo{}
}

func (p *TraceAdvanceInfo) InitDefault() {
}

func (p *TraceAdvanceInfo) GetTraceID() (v string) {
	if p != nil {
		return p.TraceID
	}
	return
}

var TraceAdvanceInfo_Tokens_DEFAULT *TokenCost

func (p *TraceAdvanceInfo) GetTokens() (v *TokenCost) {
	if p == nil {
		return
	}
	if !p.IsSetTokens() {
		return TraceAdvanceInfo_Tokens_DEFAULT
	}
	return p.Tokens
}
func (p *TraceAdvanceInfo) SetTraceID(val string) {
	p.TraceID = val
}
func (p *TraceAdvanceInfo) SetTokens(val *TokenCost) {
	p.Tokens = val
}

var fieldIDToName_TraceAdvanceInfo = map[int16]string{
	1: "trace_id",
	2: "tokens",
}

func (p *TraceAdvanceInfo) IsSetTokens() bool {
	return p.Tokens != nil
}

func (p *TraceAdvanceInfo) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTraceID bool = false
	var issetTokens bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTraceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTokens = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTraceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTokens {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TraceAdvanceInfo[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TraceAdvanceInfo[fieldId]))
}

func (p *TraceAdvanceInfo) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TraceID = _field
	return nil
}
func (p *TraceAdvanceInfo) ReadField2(iprot thrift.TProtocol) error {
	_field := NewTokenCost()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Tokens = _field
	return nil
}

func (p *TraceAdvanceInfo) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TraceAdvanceInfo"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TraceAdvanceInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("trace_id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TraceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *TraceAdvanceInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("tokens", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Tokens.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *TraceAdvanceInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TraceAdvanceInfo(%+v)", *p)

}

func (p *TraceAdvanceInfo) DeepEqual(ano *TraceAdvanceInfo) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TraceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Tokens) {
		return false
	}
	return true
}

func (p *TraceAdvanceInfo) Field1DeepEqual(src string) bool {

	if strings.Compare(p.TraceID, src) != 0 {
		return false
	}
	return true
}
func (p *TraceAdvanceInfo) Field2DeepEqual(src *TokenCost) bool {

	if !p.Tokens.DeepEqual(src) {
		return false
	}
	return true
}

type GetTraceRequest struct {
	WorkspaceID int64  `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" query:"workspace_id,required" `
	TraceID     string `thrift:"trace_id,2,required" frugal:"2,required,string" json:"trace_id,required" path:"trace_id,required"`
	// ms
	StartTime int64 `thrift:"start_time,3,required" frugal:"3,required,i64" json:"start_time" query:"start_time,required" `
	// ms
	EndTime      int64                `thrift:"end_time,4,required" frugal:"4,required,i64" json:"end_time" query:"end_time,required" `
	PlatformType *common.PlatformType `thrift:"platform_type,8,optional" frugal:"8,optional,string" json:"platform_type,omitempty" query:"platform_type"`
	Base         *base.Base           `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewGetTraceRequest() *GetTraceRequest {
	return &GetTraceRequest{}
}

func (p *GetTraceRequest) InitDefault() {
}

func (p *GetTraceRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *GetTraceRequest) GetTraceID() (v string) {
	if p != nil {
		return p.TraceID
	}
	return
}

func (p *GetTraceRequest) GetStartTime() (v int64) {
	if p != nil {
		return p.StartTime
	}
	return
}

func (p *GetTraceRequest) GetEndTime() (v int64) {
	if p != nil {
		return p.EndTime
	}
	return
}

var GetTraceRequest_PlatformType_DEFAULT common.PlatformType

func (p *GetTraceRequest) GetPlatformType() (v common.PlatformType) {
	if p == nil {
		return
	}
	if !p.IsSetPlatformType() {
		return GetTraceRequest_PlatformType_DEFAULT
	}
	return *p.PlatformType
}

var GetTraceRequest_Base_DEFAULT *base.Base

func (p *GetTraceRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return GetTraceRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetTraceRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *GetTraceRequest) SetTraceID(val string) {
	p.TraceID = val
}
func (p *GetTraceRequest) SetStartTime(val int64) {
	p.StartTime = val
}
func (p *GetTraceRequest) SetEndTime(val int64) {
	p.EndTime = val
}
func (p *GetTraceRequest) SetPlatformType(val *common.PlatformType) {
	p.PlatformType = val
}
func (p *GetTraceRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetTraceRequest = map[int16]string{
	1:   "workspace_id",
	2:   "trace_id",
	3:   "start_time",
	4:   "end_time",
	8:   "platform_type",
	255: "Base",
}

func (p *GetTraceRequest) IsSetPlatformType() bool {
	return p.PlatformType != nil
}

func (p *GetTraceRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetTraceRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetTraceID bool = false
	var issetStartTime bool = false
	var issetEndTime bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTraceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetStartTime = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetEndTime = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTraceID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetStartTime {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetEndTime {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetTraceRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetTraceRequest[fieldId]))
}

func (p *GetTraceRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *GetTraceRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TraceID = _field
	return nil
}
func (p *GetTraceRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StartTime = _field
	return nil
}
func (p *GetTraceRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EndTime = _field
	return nil
}
func (p *GetTraceRequest) ReadField8(iprot thrift.TProtocol) error {

	var _field *common.PlatformType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PlatformType = _field
	return nil
}
func (p *GetTraceRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *GetTraceRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTraceRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetTraceRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetTraceRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("trace_id", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TraceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetTraceRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("start_time", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.StartTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *GetTraceRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("end_time", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EndTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *GetTraceRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetPlatformType() {
		if err = oprot.WriteFieldBegin("platform_type", thrift.STRING, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PlatformType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}
func (p *GetTraceRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetTraceRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTraceRequest(%+v)", *p)

}

func (p *GetTraceRequest) DeepEqual(ano *GetTraceRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.TraceID) {
		return false
	}
	if !p.Field3DeepEqual(ano.StartTime) {
		return false
	}
	if !p.Field4DeepEqual(ano.EndTime) {
		return false
	}
	if !p.Field8DeepEqual(ano.PlatformType) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetTraceRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *GetTraceRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.TraceID, src) != 0 {
		return false
	}
	return true
}
func (p *GetTraceRequest) Field3DeepEqual(src int64) bool {

	if p.StartTime != src {
		return false
	}
	return true
}
func (p *GetTraceRequest) Field4DeepEqual(src int64) bool {

	if p.EndTime != src {
		return false
	}
	return true
}
func (p *GetTraceRequest) Field8DeepEqual(src *common.PlatformType) bool {

	if p.PlatformType == src {
		return true
	} else if p.PlatformType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PlatformType, *src) != 0 {
		return false
	}
	return true
}
func (p *GetTraceRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetTraceResponse struct {
	Spans             []*span.OutputSpan `thrift:"spans,1,required" frugal:"1,required,list<span.OutputSpan>" form:"spans,required" json:"spans,required" query:"spans,required"`
	TracesAdvanceInfo *TraceAdvanceInfo  `thrift:"traces_advance_info,2,optional" frugal:"2,optional,TraceAdvanceInfo" form:"traces_advance_info" json:"traces_advance_info,omitempty" query:"traces_advance_info"`
	BaseResp          *base.BaseResp     `thrift:"BaseResp,255,optional" frugal:"255,optional,base.BaseResp" form:"BaseResp" json:"BaseResp,omitempty" query:"BaseResp"`
}

func NewGetTraceResponse() *GetTraceResponse {
	return &GetTraceResponse{}
}

func (p *GetTraceResponse) InitDefault() {
}

func (p *GetTraceResponse) GetSpans() (v []*span.OutputSpan) {
	if p != nil {
		return p.Spans
	}
	return
}

var GetTraceResponse_TracesAdvanceInfo_DEFAULT *TraceAdvanceInfo

func (p *GetTraceResponse) GetTracesAdvanceInfo() (v *TraceAdvanceInfo) {
	if p == nil {
		return
	}
	if !p.IsSetTracesAdvanceInfo() {
		return GetTraceResponse_TracesAdvanceInfo_DEFAULT
	}
	return p.TracesAdvanceInfo
}

var GetTraceResponse_BaseResp_DEFAULT *base.BaseResp

func (p *GetTraceResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return GetTraceResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetTraceResponse) SetSpans(val []*span.OutputSpan) {
	p.Spans = val
}
func (p *GetTraceResponse) SetTracesAdvanceInfo(val *TraceAdvanceInfo) {
	p.TracesAdvanceInfo = val
}
func (p *GetTraceResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_GetTraceResponse = map[int16]string{
	1:   "spans",
	2:   "traces_advance_info",
	255: "BaseResp",
}

func (p *GetTraceResponse) IsSetTracesAdvanceInfo() bool {
	return p.TracesAdvanceInfo != nil
}

func (p *GetTraceResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetTraceResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetSpans bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetSpans = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetSpans {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetTraceResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetTraceResponse[fieldId]))
}

func (p *GetTraceResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*span.OutputSpan, 0, size)
	values := make([]span.OutputSpan, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Spans = _field
	return nil
}
func (p *GetTraceResponse) ReadField2(iprot thrift.TProtocol) error {
	_field := NewTraceAdvanceInfo()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.TracesAdvanceInfo = _field
	return nil
}
func (p *GetTraceResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *GetTraceResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTraceResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetTraceResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("spans", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Spans)); err != nil {
		return err
	}
	for _, v := range p.Spans {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetTraceResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTracesAdvanceInfo() {
		if err = oprot.WriteFieldBegin("traces_advance_info", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.TracesAdvanceInfo.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetTraceResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseResp() {
		if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseResp.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetTraceResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTraceResponse(%+v)", *p)

}

func (p *GetTraceResponse) DeepEqual(ano *GetTraceResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Spans) {
		return false
	}
	if !p.Field2DeepEqual(ano.TracesAdvanceInfo) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *GetTraceResponse) Field1DeepEqual(src []*span.OutputSpan) bool {

	if len(p.Spans) != len(src) {
		return false
	}
	for i, v := range p.Spans {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetTraceResponse) Field2DeepEqual(src *TraceAdvanceInfo) bool {

	if !p.TracesAdvanceInfo.DeepEqual(src) {
		return false
	}
	return true
}
func (p *GetTraceResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type TraceQueryParams struct {
	TraceID   string `thrift:"trace_id,1,required" frugal:"1,required,string" form:"trace_id,required" json:"trace_id,required" query:"trace_id,required"`
	StartTime int64  `thrift:"start_time,2,required" frugal:"2,required,i64" json:"start_time" form:"start_time,required" query:"start_time,required"`
	EndTime   int64  `thrift:"end_time,3,required" frugal:"3,required,i64" json:"end_time" form:"end_time,required" query:"end_time,required"`
}

func NewTraceQueryParams() *TraceQueryParams {
	return &TraceQueryParams{}
}

func (p *TraceQueryParams) InitDefault() {
}

func (p *TraceQueryParams) GetTraceID() (v string) {
	if p != nil {
		return p.TraceID
	}
	return
}

func (p *TraceQueryParams) GetStartTime() (v int64) {
	if p != nil {
		return p.StartTime
	}
	return
}

func (p *TraceQueryParams) GetEndTime() (v int64) {
	if p != nil {
		return p.EndTime
	}
	return
}
func (p *TraceQueryParams) SetTraceID(val string) {
	p.TraceID = val
}
func (p *TraceQueryParams) SetStartTime(val int64) {
	p.StartTime = val
}
func (p *TraceQueryParams) SetEndTime(val int64) {
	p.EndTime = val
}

var fieldIDToName_TraceQueryParams = map[int16]string{
	1: "trace_id",
	2: "start_time",
	3: "end_time",
}

func (p *TraceQueryParams) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTraceID bool = false
	var issetStartTime bool = false
	var issetEndTime bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTraceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetStartTime = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetEndTime = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTraceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetStartTime {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetEndTime {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TraceQueryParams[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_TraceQueryParams[fieldId]))
}

func (p *TraceQueryParams) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TraceID = _field
	return nil
}
func (p *TraceQueryParams) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StartTime = _field
	return nil
}
func (p *TraceQueryParams) ReadField3(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.EndTime = _field
	return nil
}

func (p *TraceQueryParams) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("TraceQueryParams"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TraceQueryParams) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("trace_id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TraceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *TraceQueryParams) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("start_time", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.StartTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *TraceQueryParams) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("end_time", thrift.I64, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.EndTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *TraceQueryParams) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TraceQueryParams(%+v)", *p)

}

func (p *TraceQueryParams) DeepEqual(ano *TraceQueryParams) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TraceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.StartTime) {
		return false
	}
	if !p.Field3DeepEqual(ano.EndTime) {
		return false
	}
	return true
}

func (p *TraceQueryParams) Field1DeepEqual(src string) bool {

	if strings.Compare(p.TraceID, src) != 0 {
		return false
	}
	return true
}
func (p *TraceQueryParams) Field2DeepEqual(src int64) bool {

	if p.StartTime != src {
		return false
	}
	return true
}
func (p *TraceQueryParams) Field3DeepEqual(src int64) bool {

	if p.EndTime != src {
		return false
	}
	return true
}

type BatchGetTracesAdvanceInfoRequest struct {
	WorkspaceID  int64                `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" `
	Traces       []*TraceQueryParams  `thrift:"traces,2,required" frugal:"2,required,list<TraceQueryParams>" form:"traces,required" json:"traces,required"`
	PlatformType *common.PlatformType `thrift:"platform_type,6,optional" frugal:"6,optional,string" form:"platform_type" json:"platform_type,omitempty"`
	Base         *base.Base           `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewBatchGetTracesAdvanceInfoRequest() *BatchGetTracesAdvanceInfoRequest {
	return &BatchGetTracesAdvanceInfoRequest{}
}

func (p *BatchGetTracesAdvanceInfoRequest) InitDefault() {
}

func (p *BatchGetTracesAdvanceInfoRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *BatchGetTracesAdvanceInfoRequest) GetTraces() (v []*TraceQueryParams) {
	if p != nil {
		return p.Traces
	}
	return
}

var BatchGetTracesAdvanceInfoRequest_PlatformType_DEFAULT common.PlatformType

func (p *BatchGetTracesAdvanceInfoRequest) GetPlatformType() (v common.PlatformType) {
	if p == nil {
		return
	}
	if !p.IsSetPlatformType() {
		return BatchGetTracesAdvanceInfoRequest_PlatformType_DEFAULT
	}
	return *p.PlatformType
}

var BatchGetTracesAdvanceInfoRequest_Base_DEFAULT *base.Base

func (p *BatchGetTracesAdvanceInfoRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return BatchGetTracesAdvanceInfoRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *BatchGetTracesAdvanceInfoRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *BatchGetTracesAdvanceInfoRequest) SetTraces(val []*TraceQueryParams) {
	p.Traces = val
}
func (p *BatchGetTracesAdvanceInfoRequest) SetPlatformType(val *common.PlatformType) {
	p.PlatformType = val
}
func (p *BatchGetTracesAdvanceInfoRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_BatchGetTracesAdvanceInfoRequest = map[int16]string{
	1:   "workspace_id",
	2:   "traces",
	6:   "platform_type",
	255: "Base",
}

func (p *BatchGetTracesAdvanceInfoRequest) IsSetPlatformType() bool {
	return p.PlatformType != nil
}

func (p *BatchGetTracesAdvanceInfoRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *BatchGetTracesAdvanceInfoRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetTraces bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetTraces = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetTraces {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchGetTracesAdvanceInfoRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_BatchGetTracesAdvanceInfoRequest[fieldId]))
}

func (p *BatchGetTracesAdvanceInfoRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *BatchGetTracesAdvanceInfoRequest) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TraceQueryParams, 0, size)
	values := make([]TraceQueryParams, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Traces = _field
	return nil
}
func (p *BatchGetTracesAdvanceInfoRequest) ReadField6(iprot thrift.TProtocol) error {

	var _field *common.PlatformType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PlatformType = _field
	return nil
}
func (p *BatchGetTracesAdvanceInfoRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *BatchGetTracesAdvanceInfoRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetTracesAdvanceInfoRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchGetTracesAdvanceInfoRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchGetTracesAdvanceInfoRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("traces", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Traces)); err != nil {
		return err
	}
	for _, v := range p.Traces {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *BatchGetTracesAdvanceInfoRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetPlatformType() {
		if err = oprot.WriteFieldBegin("platform_type", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PlatformType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *BatchGetTracesAdvanceInfoRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchGetTracesAdvanceInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchGetTracesAdvanceInfoRequest(%+v)", *p)

}

func (p *BatchGetTracesAdvanceInfoRequest) DeepEqual(ano *BatchGetTracesAdvanceInfoRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Traces) {
		return false
	}
	if !p.Field6DeepEqual(ano.PlatformType) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *BatchGetTracesAdvanceInfoRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *BatchGetTracesAdvanceInfoRequest) Field2DeepEqual(src []*TraceQueryParams) bool {

	if len(p.Traces) != len(src) {
		return false
	}
	for i, v := range p.Traces {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *BatchGetTracesAdvanceInfoRequest) Field6DeepEqual(src *common.PlatformType) bool {

	if p.PlatformType == src {
		return true
	} else if p.PlatformType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PlatformType, *src) != 0 {
		return false
	}
	return true
}
func (p *BatchGetTracesAdvanceInfoRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type BatchGetTracesAdvanceInfoResponse struct {
	TracesAdvanceInfo []*TraceAdvanceInfo `thrift:"traces_advance_info,1,required" frugal:"1,required,list<TraceAdvanceInfo>" form:"traces_advance_info,required" json:"traces_advance_info,required" query:"traces_advance_info,required"`
	BaseResp          *base.BaseResp      `thrift:"BaseResp,255,optional" frugal:"255,optional,base.BaseResp" form:"BaseResp" json:"BaseResp,omitempty" query:"BaseResp"`
}

func NewBatchGetTracesAdvanceInfoResponse() *BatchGetTracesAdvanceInfoResponse {
	return &BatchGetTracesAdvanceInfoResponse{}
}

func (p *BatchGetTracesAdvanceInfoResponse) InitDefault() {
}

func (p *BatchGetTracesAdvanceInfoResponse) GetTracesAdvanceInfo() (v []*TraceAdvanceInfo) {
	if p != nil {
		return p.TracesAdvanceInfo
	}
	return
}

var BatchGetTracesAdvanceInfoResponse_BaseResp_DEFAULT *base.BaseResp

func (p *BatchGetTracesAdvanceInfoResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return BatchGetTracesAdvanceInfoResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *BatchGetTracesAdvanceInfoResponse) SetTracesAdvanceInfo(val []*TraceAdvanceInfo) {
	p.TracesAdvanceInfo = val
}
func (p *BatchGetTracesAdvanceInfoResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_BatchGetTracesAdvanceInfoResponse = map[int16]string{
	1:   "traces_advance_info",
	255: "BaseResp",
}

func (p *BatchGetTracesAdvanceInfoResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *BatchGetTracesAdvanceInfoResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetTracesAdvanceInfo bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetTracesAdvanceInfo = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetTracesAdvanceInfo {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BatchGetTracesAdvanceInfoResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_BatchGetTracesAdvanceInfoResponse[fieldId]))
}

func (p *BatchGetTracesAdvanceInfoResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*TraceAdvanceInfo, 0, size)
	values := make([]TraceAdvanceInfo, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.TracesAdvanceInfo = _field
	return nil
}
func (p *BatchGetTracesAdvanceInfoResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *BatchGetTracesAdvanceInfoResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetTracesAdvanceInfoResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BatchGetTracesAdvanceInfoResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("traces_advance_info", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.TracesAdvanceInfo)); err != nil {
		return err
	}
	for _, v := range p.TracesAdvanceInfo {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *BatchGetTracesAdvanceInfoResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseResp() {
		if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseResp.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *BatchGetTracesAdvanceInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchGetTracesAdvanceInfoResponse(%+v)", *p)

}

func (p *BatchGetTracesAdvanceInfoResponse) DeepEqual(ano *BatchGetTracesAdvanceInfoResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.TracesAdvanceInfo) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *BatchGetTracesAdvanceInfoResponse) Field1DeepEqual(src []*TraceAdvanceInfo) bool {

	if len(p.TracesAdvanceInfo) != len(src) {
		return false
	}
	for i, v := range p.TracesAdvanceInfo {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *BatchGetTracesAdvanceInfoResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type IngestTracesRequest struct {
	Spans []*span.InputSpan `thrift:"spans,1,optional" frugal:"1,optional,list<span.InputSpan>" form:"spans" json:"spans,omitempty"`
	Base  *base.Base        `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewIngestTracesRequest() *IngestTracesRequest {
	return &IngestTracesRequest{}
}

func (p *IngestTracesRequest) InitDefault() {
}

var IngestTracesRequest_Spans_DEFAULT []*span.InputSpan

func (p *IngestTracesRequest) GetSpans() (v []*span.InputSpan) {
	if p == nil {
		return
	}
	if !p.IsSetSpans() {
		return IngestTracesRequest_Spans_DEFAULT
	}
	return p.Spans
}

var IngestTracesRequest_Base_DEFAULT *base.Base

func (p *IngestTracesRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return IngestTracesRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *IngestTracesRequest) SetSpans(val []*span.InputSpan) {
	p.Spans = val
}
func (p *IngestTracesRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_IngestTracesRequest = map[int16]string{
	1:   "spans",
	255: "Base",
}

func (p *IngestTracesRequest) IsSetSpans() bool {
	return p.Spans != nil
}

func (p *IngestTracesRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *IngestTracesRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_IngestTracesRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *IngestTracesRequest) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*span.InputSpan, 0, size)
	values := make([]span.InputSpan, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Spans = _field
	return nil
}
func (p *IngestTracesRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *IngestTracesRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("IngestTracesRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *IngestTracesRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSpans() {
		if err = oprot.WriteFieldBegin("spans", thrift.LIST, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Spans)); err != nil {
			return err
		}
		for _, v := range p.Spans {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *IngestTracesRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *IngestTracesRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IngestTracesRequest(%+v)", *p)

}

func (p *IngestTracesRequest) DeepEqual(ano *IngestTracesRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Spans) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *IngestTracesRequest) Field1DeepEqual(src []*span.InputSpan) bool {

	if len(p.Spans) != len(src) {
		return false
	}
	for i, v := range p.Spans {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *IngestTracesRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type IngestTracesResponse struct {
	Code     *int32         `thrift:"code,1,optional" frugal:"1,optional,i32" form:"code" json:"code,omitempty" query:"code"`
	Msg      *string        `thrift:"msg,2,optional" frugal:"2,optional,string" form:"msg" json:"msg,omitempty" query:"msg"`
	BaseResp *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" form:"BaseResp" json:"BaseResp" query:"BaseResp"`
}

func NewIngestTracesResponse() *IngestTracesResponse {
	return &IngestTracesResponse{}
}

func (p *IngestTracesResponse) InitDefault() {
}

var IngestTracesResponse_Code_DEFAULT int32

func (p *IngestTracesResponse) GetCode() (v int32) {
	if p == nil {
		return
	}
	if !p.IsSetCode() {
		return IngestTracesResponse_Code_DEFAULT
	}
	return *p.Code
}

var IngestTracesResponse_Msg_DEFAULT string

func (p *IngestTracesResponse) GetMsg() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetMsg() {
		return IngestTracesResponse_Msg_DEFAULT
	}
	return *p.Msg
}

var IngestTracesResponse_BaseResp_DEFAULT *base.BaseResp

func (p *IngestTracesResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return IngestTracesResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *IngestTracesResponse) SetCode(val *int32) {
	p.Code = val
}
func (p *IngestTracesResponse) SetMsg(val *string) {
	p.Msg = val
}
func (p *IngestTracesResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_IngestTracesResponse = map[int16]string{
	1:   "code",
	2:   "msg",
	255: "BaseResp",
}

func (p *IngestTracesResponse) IsSetCode() bool {
	return p.Code != nil
}

func (p *IngestTracesResponse) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *IngestTracesResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *IngestTracesResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_IngestTracesResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *IngestTracesResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *int32
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Code = _field
	return nil
}
func (p *IngestTracesResponse) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Msg = _field
	return nil
}
func (p *IngestTracesResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *IngestTracesResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("IngestTracesResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *IngestTracesResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetCode() {
		if err = oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Code); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *IngestTracesResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetMsg() {
		if err = oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Msg); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *IngestTracesResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *IngestTracesResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IngestTracesResponse(%+v)", *p)

}

func (p *IngestTracesResponse) DeepEqual(ano *IngestTracesResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Code) {
		return false
	}
	if !p.Field2DeepEqual(ano.Msg) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *IngestTracesResponse) Field1DeepEqual(src *int32) bool {

	if p.Code == src {
		return true
	} else if p.Code == nil || src == nil {
		return false
	}
	if *p.Code != *src {
		return false
	}
	return true
}
func (p *IngestTracesResponse) Field2DeepEqual(src *string) bool {

	if p.Msg == src {
		return true
	} else if p.Msg == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Msg, *src) != 0 {
		return false
	}
	return true
}
func (p *IngestTracesResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type FieldMeta struct {
	ValueType                 filter.FieldType     `thrift:"value_type,1,required" frugal:"1,required,string" form:"value_type,required" json:"value_type,required" query:"value_type,required"`
	FilterTypes               []filter.QueryType   `thrift:"filter_types,2,required" frugal:"2,required,list<string>" form:"filter_types,required" json:"filter_types,required" query:"filter_types,required"`
	FieldOptions              *filter.FieldOptions `thrift:"field_options,3,optional" frugal:"3,optional,filter.FieldOptions" form:"field_options" json:"field_options,omitempty" query:"field_options"`
	SupportCustomizableOption *bool                `thrift:"support_customizable_option,4,optional" frugal:"4,optional,bool" form:"support_customizable_option" json:"support_customizable_option,omitempty" query:"support_customizable_option"`
}

func NewFieldMeta() *FieldMeta {
	return &FieldMeta{}
}

func (p *FieldMeta) InitDefault() {
}

func (p *FieldMeta) GetValueType() (v filter.FieldType) {
	if p != nil {
		return p.ValueType
	}
	return
}

func (p *FieldMeta) GetFilterTypes() (v []filter.QueryType) {
	if p != nil {
		return p.FilterTypes
	}
	return
}

var FieldMeta_FieldOptions_DEFAULT *filter.FieldOptions

func (p *FieldMeta) GetFieldOptions() (v *filter.FieldOptions) {
	if p == nil {
		return
	}
	if !p.IsSetFieldOptions() {
		return FieldMeta_FieldOptions_DEFAULT
	}
	return p.FieldOptions
}

var FieldMeta_SupportCustomizableOption_DEFAULT bool

func (p *FieldMeta) GetSupportCustomizableOption() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetSupportCustomizableOption() {
		return FieldMeta_SupportCustomizableOption_DEFAULT
	}
	return *p.SupportCustomizableOption
}
func (p *FieldMeta) SetValueType(val filter.FieldType) {
	p.ValueType = val
}
func (p *FieldMeta) SetFilterTypes(val []filter.QueryType) {
	p.FilterTypes = val
}
func (p *FieldMeta) SetFieldOptions(val *filter.FieldOptions) {
	p.FieldOptions = val
}
func (p *FieldMeta) SetSupportCustomizableOption(val *bool) {
	p.SupportCustomizableOption = val
}

var fieldIDToName_FieldMeta = map[int16]string{
	1: "value_type",
	2: "filter_types",
	3: "field_options",
	4: "support_customizable_option",
}

func (p *FieldMeta) IsSetFieldOptions() bool {
	return p.FieldOptions != nil
}

func (p *FieldMeta) IsSetSupportCustomizableOption() bool {
	return p.SupportCustomizableOption != nil
}

func (p *FieldMeta) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetValueType bool = false
	var issetFilterTypes bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetValueType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetFilterTypes = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetValueType {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetFilterTypes {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_FieldMeta[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_FieldMeta[fieldId]))
}

func (p *FieldMeta) ReadField1(iprot thrift.TProtocol) error {

	var _field filter.FieldType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ValueType = _field
	return nil
}
func (p *FieldMeta) ReadField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]filter.QueryType, 0, size)
	for i := 0; i < size; i++ {

		var _elem filter.QueryType
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.FilterTypes = _field
	return nil
}
func (p *FieldMeta) ReadField3(iprot thrift.TProtocol) error {
	_field := filter.NewFieldOptions()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.FieldOptions = _field
	return nil
}
func (p *FieldMeta) ReadField4(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SupportCustomizableOption = _field
	return nil
}

func (p *FieldMeta) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("FieldMeta"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *FieldMeta) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("value_type", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ValueType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *FieldMeta) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("filter_types", thrift.LIST, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.FilterTypes)); err != nil {
		return err
	}
	for _, v := range p.FilterTypes {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *FieldMeta) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetFieldOptions() {
		if err = oprot.WriteFieldBegin("field_options", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.FieldOptions.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *FieldMeta) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetSupportCustomizableOption() {
		if err = oprot.WriteFieldBegin("support_customizable_option", thrift.BOOL, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.SupportCustomizableOption); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *FieldMeta) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FieldMeta(%+v)", *p)

}

func (p *FieldMeta) DeepEqual(ano *FieldMeta) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ValueType) {
		return false
	}
	if !p.Field2DeepEqual(ano.FilterTypes) {
		return false
	}
	if !p.Field3DeepEqual(ano.FieldOptions) {
		return false
	}
	if !p.Field4DeepEqual(ano.SupportCustomizableOption) {
		return false
	}
	return true
}

func (p *FieldMeta) Field1DeepEqual(src filter.FieldType) bool {

	if strings.Compare(p.ValueType, src) != 0 {
		return false
	}
	return true
}
func (p *FieldMeta) Field2DeepEqual(src []filter.QueryType) bool {

	if len(p.FilterTypes) != len(src) {
		return false
	}
	for i, v := range p.FilterTypes {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *FieldMeta) Field3DeepEqual(src *filter.FieldOptions) bool {

	if !p.FieldOptions.DeepEqual(src) {
		return false
	}
	return true
}
func (p *FieldMeta) Field4DeepEqual(src *bool) bool {

	if p.SupportCustomizableOption == src {
		return true
	} else if p.SupportCustomizableOption == nil || src == nil {
		return false
	}
	if *p.SupportCustomizableOption != *src {
		return false
	}
	return true
}

type GetTracesMetaInfoRequest struct {
	PlatformType *common.PlatformType `thrift:"platform_type,1,optional" frugal:"1,optional,string" json:"platform_type,omitempty" query:"platform_type"`
	SpanListType *common.SpanListType `thrift:"spanList_type,2,optional" frugal:"2,optional,string" json:"spanList_type,omitempty" query:"span_list_type"`
	// required
	WorkspaceID *int64     `thrift:"workspace_id,3,optional" frugal:"3,optional,i64" json:"workspace_id,string,omitempty" query:"workspace_id"`
	Base        *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewGetTracesMetaInfoRequest() *GetTracesMetaInfoRequest {
	return &GetTracesMetaInfoRequest{}
}

func (p *GetTracesMetaInfoRequest) InitDefault() {
}

var GetTracesMetaInfoRequest_PlatformType_DEFAULT common.PlatformType

func (p *GetTracesMetaInfoRequest) GetPlatformType() (v common.PlatformType) {
	if p == nil {
		return
	}
	if !p.IsSetPlatformType() {
		return GetTracesMetaInfoRequest_PlatformType_DEFAULT
	}
	return *p.PlatformType
}

var GetTracesMetaInfoRequest_SpanListType_DEFAULT common.SpanListType

func (p *GetTracesMetaInfoRequest) GetSpanListType() (v common.SpanListType) {
	if p == nil {
		return
	}
	if !p.IsSetSpanListType() {
		return GetTracesMetaInfoRequest_SpanListType_DEFAULT
	}
	return *p.SpanListType
}

var GetTracesMetaInfoRequest_WorkspaceID_DEFAULT int64

func (p *GetTracesMetaInfoRequest) GetWorkspaceID() (v int64) {
	if p == nil {
		return
	}
	if !p.IsSetWorkspaceID() {
		return GetTracesMetaInfoRequest_WorkspaceID_DEFAULT
	}
	return *p.WorkspaceID
}

var GetTracesMetaInfoRequest_Base_DEFAULT *base.Base

func (p *GetTracesMetaInfoRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return GetTracesMetaInfoRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetTracesMetaInfoRequest) SetPlatformType(val *common.PlatformType) {
	p.PlatformType = val
}
func (p *GetTracesMetaInfoRequest) SetSpanListType(val *common.SpanListType) {
	p.SpanListType = val
}
func (p *GetTracesMetaInfoRequest) SetWorkspaceID(val *int64) {
	p.WorkspaceID = val
}
func (p *GetTracesMetaInfoRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_GetTracesMetaInfoRequest = map[int16]string{
	1:   "platform_type",
	2:   "spanList_type",
	3:   "workspace_id",
	255: "Base",
}

func (p *GetTracesMetaInfoRequest) IsSetPlatformType() bool {
	return p.PlatformType != nil
}

func (p *GetTracesMetaInfoRequest) IsSetSpanListType() bool {
	return p.SpanListType != nil
}

func (p *GetTracesMetaInfoRequest) IsSetWorkspaceID() bool {
	return p.WorkspaceID != nil
}

func (p *GetTracesMetaInfoRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetTracesMetaInfoRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetTracesMetaInfoRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *GetTracesMetaInfoRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *common.PlatformType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PlatformType = _field
	return nil
}
func (p *GetTracesMetaInfoRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *common.SpanListType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SpanListType = _field
	return nil
}
func (p *GetTracesMetaInfoRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *GetTracesMetaInfoRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *GetTracesMetaInfoRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTracesMetaInfoRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetTracesMetaInfoRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetPlatformType() {
		if err = oprot.WriteFieldBegin("platform_type", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PlatformType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetTracesMetaInfoRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetSpanListType() {
		if err = oprot.WriteFieldBegin("spanList_type", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.SpanListType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *GetTracesMetaInfoRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetWorkspaceID() {
		if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.WorkspaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *GetTracesMetaInfoRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetTracesMetaInfoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTracesMetaInfoRequest(%+v)", *p)

}

func (p *GetTracesMetaInfoRequest) DeepEqual(ano *GetTracesMetaInfoRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.PlatformType) {
		return false
	}
	if !p.Field2DeepEqual(ano.SpanListType) {
		return false
	}
	if !p.Field3DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *GetTracesMetaInfoRequest) Field1DeepEqual(src *common.PlatformType) bool {

	if p.PlatformType == src {
		return true
	} else if p.PlatformType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PlatformType, *src) != 0 {
		return false
	}
	return true
}
func (p *GetTracesMetaInfoRequest) Field2DeepEqual(src *common.SpanListType) bool {

	if p.SpanListType == src {
		return true
	} else if p.SpanListType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.SpanListType, *src) != 0 {
		return false
	}
	return true
}
func (p *GetTracesMetaInfoRequest) Field3DeepEqual(src *int64) bool {

	if p.WorkspaceID == src {
		return true
	} else if p.WorkspaceID == nil || src == nil {
		return false
	}
	if *p.WorkspaceID != *src {
		return false
	}
	return true
}
func (p *GetTracesMetaInfoRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type GetTracesMetaInfoResponse struct {
	FieldMetas map[string]*FieldMeta `thrift:"field_metas,1,required" frugal:"1,required,map<string:FieldMeta>" form:"field_metas,required" json:"field_metas,required" query:"field_metas,required"`
	BaseResp   *base.BaseResp        `thrift:"BaseResp,255,optional" frugal:"255,optional,base.BaseResp" form:"BaseResp" json:"BaseResp,omitempty" query:"BaseResp"`
}

func NewGetTracesMetaInfoResponse() *GetTracesMetaInfoResponse {
	return &GetTracesMetaInfoResponse{}
}

func (p *GetTracesMetaInfoResponse) InitDefault() {
}

func (p *GetTracesMetaInfoResponse) GetFieldMetas() (v map[string]*FieldMeta) {
	if p != nil {
		return p.FieldMetas
	}
	return
}

var GetTracesMetaInfoResponse_BaseResp_DEFAULT *base.BaseResp

func (p *GetTracesMetaInfoResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return GetTracesMetaInfoResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetTracesMetaInfoResponse) SetFieldMetas(val map[string]*FieldMeta) {
	p.FieldMetas = val
}
func (p *GetTracesMetaInfoResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_GetTracesMetaInfoResponse = map[int16]string{
	1:   "field_metas",
	255: "BaseResp",
}

func (p *GetTracesMetaInfoResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetTracesMetaInfoResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetFieldMetas bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetFieldMetas = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetFieldMetas {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_GetTracesMetaInfoResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_GetTracesMetaInfoResponse[fieldId]))
}

func (p *GetTracesMetaInfoResponse) ReadField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	_field := make(map[string]*FieldMeta, size)
	values := make([]FieldMeta, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		_val := &values[i]
		_val.InitDefault()
		if err := _val.Read(iprot); err != nil {
			return err
		}

		_field[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	p.FieldMetas = _field
	return nil
}
func (p *GetTracesMetaInfoResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *GetTracesMetaInfoResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTracesMetaInfoResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *GetTracesMetaInfoResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("field_metas", thrift.MAP, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.FieldMetas)); err != nil {
		return err
	}
	for k, v := range p.FieldMetas {
		if err := oprot.WriteString(k); err != nil {
			return err
		}
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *GetTracesMetaInfoResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseResp() {
		if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseResp.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *GetTracesMetaInfoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTracesMetaInfoResponse(%+v)", *p)

}

func (p *GetTracesMetaInfoResponse) DeepEqual(ano *GetTracesMetaInfoResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.FieldMetas) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *GetTracesMetaInfoResponse) Field1DeepEqual(src map[string]*FieldMeta) bool {

	if len(p.FieldMetas) != len(src) {
		return false
	}
	for k, v := range p.FieldMetas {
		_src := src[k]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *GetTracesMetaInfoResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type CreateViewRequest struct {
	EnterpriseID *string             `thrift:"enterprise_id,1,optional" frugal:"1,optional,string" form:"enterprise_id" json:"enterprise_id,omitempty"`
	WorkspaceID  int64               `thrift:"workspace_id,2,required" frugal:"2,required,i64" json:"workspace_id" form:"workspace_id,required" `
	ViewName     string              `thrift:"view_name,3,required" frugal:"3,required,string" form:"view_name,required" json:"view_name,required"`
	PlatformType common.PlatformType `thrift:"platform_type,4,required" frugal:"4,required,string" form:"platform_type,required" json:"platform_type,required"`
	SpanListType common.SpanListType `thrift:"span_list_type,5,required" frugal:"5,required,string" form:"span_list_type,required" json:"span_list_type,required"`
	Filters      string              `thrift:"filters,6,required" frugal:"6,required,string" form:"filters,required" json:"filters,required"`
	Base         *base.Base          `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewCreateViewRequest() *CreateViewRequest {
	return &CreateViewRequest{}
}

func (p *CreateViewRequest) InitDefault() {
}

var CreateViewRequest_EnterpriseID_DEFAULT string

func (p *CreateViewRequest) GetEnterpriseID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetEnterpriseID() {
		return CreateViewRequest_EnterpriseID_DEFAULT
	}
	return *p.EnterpriseID
}

func (p *CreateViewRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *CreateViewRequest) GetViewName() (v string) {
	if p != nil {
		return p.ViewName
	}
	return
}

func (p *CreateViewRequest) GetPlatformType() (v common.PlatformType) {
	if p != nil {
		return p.PlatformType
	}
	return
}

func (p *CreateViewRequest) GetSpanListType() (v common.SpanListType) {
	if p != nil {
		return p.SpanListType
	}
	return
}

func (p *CreateViewRequest) GetFilters() (v string) {
	if p != nil {
		return p.Filters
	}
	return
}

var CreateViewRequest_Base_DEFAULT *base.Base

func (p *CreateViewRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return CreateViewRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *CreateViewRequest) SetEnterpriseID(val *string) {
	p.EnterpriseID = val
}
func (p *CreateViewRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *CreateViewRequest) SetViewName(val string) {
	p.ViewName = val
}
func (p *CreateViewRequest) SetPlatformType(val common.PlatformType) {
	p.PlatformType = val
}
func (p *CreateViewRequest) SetSpanListType(val common.SpanListType) {
	p.SpanListType = val
}
func (p *CreateViewRequest) SetFilters(val string) {
	p.Filters = val
}
func (p *CreateViewRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_CreateViewRequest = map[int16]string{
	1:   "enterprise_id",
	2:   "workspace_id",
	3:   "view_name",
	4:   "platform_type",
	5:   "span_list_type",
	6:   "filters",
	255: "Base",
}

func (p *CreateViewRequest) IsSetEnterpriseID() bool {
	return p.EnterpriseID != nil
}

func (p *CreateViewRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateViewRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetViewName bool = false
	var issetPlatformType bool = false
	var issetSpanListType bool = false
	var issetFilters bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetViewName = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetPlatformType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetSpanListType = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetFilters = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetViewName {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetPlatformType {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetSpanListType {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetFilters {
		fieldId = 6
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateViewRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CreateViewRequest[fieldId]))
}

func (p *CreateViewRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EnterpriseID = _field
	return nil
}
func (p *CreateViewRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *CreateViewRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ViewName = _field
	return nil
}
func (p *CreateViewRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field common.PlatformType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.PlatformType = _field
	return nil
}
func (p *CreateViewRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field common.SpanListType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SpanListType = _field
	return nil
}
func (p *CreateViewRequest) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.Filters = _field
	return nil
}
func (p *CreateViewRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *CreateViewRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateViewRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateViewRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnterpriseID() {
		if err = oprot.WriteFieldBegin("enterprise_id", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.EnterpriseID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CreateViewRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *CreateViewRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("view_name", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.ViewName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *CreateViewRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("platform_type", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.PlatformType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *CreateViewRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("span_list_type", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.SpanListType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *CreateViewRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("filters", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Filters); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *CreateViewRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateViewRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateViewRequest(%+v)", *p)

}

func (p *CreateViewRequest) DeepEqual(ano *CreateViewRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EnterpriseID) {
		return false
	}
	if !p.Field2DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field3DeepEqual(ano.ViewName) {
		return false
	}
	if !p.Field4DeepEqual(ano.PlatformType) {
		return false
	}
	if !p.Field5DeepEqual(ano.SpanListType) {
		return false
	}
	if !p.Field6DeepEqual(ano.Filters) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *CreateViewRequest) Field1DeepEqual(src *string) bool {

	if p.EnterpriseID == src {
		return true
	} else if p.EnterpriseID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.EnterpriseID, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateViewRequest) Field2DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *CreateViewRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.ViewName, src) != 0 {
		return false
	}
	return true
}
func (p *CreateViewRequest) Field4DeepEqual(src common.PlatformType) bool {

	if strings.Compare(p.PlatformType, src) != 0 {
		return false
	}
	return true
}
func (p *CreateViewRequest) Field5DeepEqual(src common.SpanListType) bool {

	if strings.Compare(p.SpanListType, src) != 0 {
		return false
	}
	return true
}
func (p *CreateViewRequest) Field6DeepEqual(src string) bool {

	if strings.Compare(p.Filters, src) != 0 {
		return false
	}
	return true
}
func (p *CreateViewRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type CreateViewResponse struct {
	ID       int64          `thrift:"id,1,required" frugal:"1,required,i64" json:"id" form:"id,required" `
	BaseResp *base.BaseResp `thrift:"BaseResp,255,optional" frugal:"255,optional,base.BaseResp" form:"BaseResp" json:"BaseResp,omitempty" query:"BaseResp"`
}

func NewCreateViewResponse() *CreateViewResponse {
	return &CreateViewResponse{}
}

func (p *CreateViewResponse) InitDefault() {
}

func (p *CreateViewResponse) GetID() (v int64) {
	if p != nil {
		return p.ID
	}
	return
}

var CreateViewResponse_BaseResp_DEFAULT *base.BaseResp

func (p *CreateViewResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return CreateViewResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CreateViewResponse) SetID(val int64) {
	p.ID = val
}
func (p *CreateViewResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_CreateViewResponse = map[int16]string{
	1:   "id",
	255: "BaseResp",
}

func (p *CreateViewResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CreateViewResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateViewResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CreateViewResponse[fieldId]))
}

func (p *CreateViewResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ID = _field
	return nil
}
func (p *CreateViewResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *CreateViewResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateViewResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateViewResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CreateViewResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseResp() {
		if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseResp.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateViewResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateViewResponse(%+v)", *p)

}

func (p *CreateViewResponse) DeepEqual(ano *CreateViewResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *CreateViewResponse) Field1DeepEqual(src int64) bool {

	if p.ID != src {
		return false
	}
	return true
}
func (p *CreateViewResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateViewRequest struct {
	ID           int64                `thrift:"id,1,required" frugal:"1,required,i64" json:"id" path:"view_id,required" `
	WorkspaceID  int64                `thrift:"workspace_id,2,required" frugal:"2,required,i64" json:"workspace_id" form:"workspace_id,required" `
	ViewName     *string              `thrift:"view_name,3,optional" frugal:"3,optional,string" form:"view_name" json:"view_name,omitempty"`
	PlatformType *common.PlatformType `thrift:"platform_type,4,optional" frugal:"4,optional,string" form:"platform_type" json:"platform_type,omitempty"`
	SpanListType *common.SpanListType `thrift:"span_list_type,5,optional" frugal:"5,optional,string" form:"span_list_type" json:"span_list_type,omitempty"`
	Filters      *string              `thrift:"filters,6,optional" frugal:"6,optional,string" form:"filters" json:"filters,omitempty"`
	Base         *base.Base           `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewUpdateViewRequest() *UpdateViewRequest {
	return &UpdateViewRequest{}
}

func (p *UpdateViewRequest) InitDefault() {
}

func (p *UpdateViewRequest) GetID() (v int64) {
	if p != nil {
		return p.ID
	}
	return
}

func (p *UpdateViewRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

var UpdateViewRequest_ViewName_DEFAULT string

func (p *UpdateViewRequest) GetViewName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetViewName() {
		return UpdateViewRequest_ViewName_DEFAULT
	}
	return *p.ViewName
}

var UpdateViewRequest_PlatformType_DEFAULT common.PlatformType

func (p *UpdateViewRequest) GetPlatformType() (v common.PlatformType) {
	if p == nil {
		return
	}
	if !p.IsSetPlatformType() {
		return UpdateViewRequest_PlatformType_DEFAULT
	}
	return *p.PlatformType
}

var UpdateViewRequest_SpanListType_DEFAULT common.SpanListType

func (p *UpdateViewRequest) GetSpanListType() (v common.SpanListType) {
	if p == nil {
		return
	}
	if !p.IsSetSpanListType() {
		return UpdateViewRequest_SpanListType_DEFAULT
	}
	return *p.SpanListType
}

var UpdateViewRequest_Filters_DEFAULT string

func (p *UpdateViewRequest) GetFilters() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetFilters() {
		return UpdateViewRequest_Filters_DEFAULT
	}
	return *p.Filters
}

var UpdateViewRequest_Base_DEFAULT *base.Base

func (p *UpdateViewRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return UpdateViewRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *UpdateViewRequest) SetID(val int64) {
	p.ID = val
}
func (p *UpdateViewRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *UpdateViewRequest) SetViewName(val *string) {
	p.ViewName = val
}
func (p *UpdateViewRequest) SetPlatformType(val *common.PlatformType) {
	p.PlatformType = val
}
func (p *UpdateViewRequest) SetSpanListType(val *common.SpanListType) {
	p.SpanListType = val
}
func (p *UpdateViewRequest) SetFilters(val *string) {
	p.Filters = val
}
func (p *UpdateViewRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_UpdateViewRequest = map[int16]string{
	1:   "id",
	2:   "workspace_id",
	3:   "view_name",
	4:   "platform_type",
	5:   "span_list_type",
	6:   "filters",
	255: "Base",
}

func (p *UpdateViewRequest) IsSetViewName() bool {
	return p.ViewName != nil
}

func (p *UpdateViewRequest) IsSetPlatformType() bool {
	return p.PlatformType != nil
}

func (p *UpdateViewRequest) IsSetSpanListType() bool {
	return p.SpanListType != nil
}

func (p *UpdateViewRequest) IsSetFilters() bool {
	return p.Filters != nil
}

func (p *UpdateViewRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateViewRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetID bool = false
	var issetWorkspaceID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetWorkspaceID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateViewRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_UpdateViewRequest[fieldId]))
}

func (p *UpdateViewRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ID = _field
	return nil
}
func (p *UpdateViewRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *UpdateViewRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ViewName = _field
	return nil
}
func (p *UpdateViewRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field *common.PlatformType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PlatformType = _field
	return nil
}
func (p *UpdateViewRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field *common.SpanListType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SpanListType = _field
	return nil
}
func (p *UpdateViewRequest) ReadField6(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Filters = _field
	return nil
}
func (p *UpdateViewRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *UpdateViewRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateViewRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateViewRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *UpdateViewRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *UpdateViewRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetViewName() {
		if err = oprot.WriteFieldBegin("view_name", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ViewName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *UpdateViewRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetPlatformType() {
		if err = oprot.WriteFieldBegin("platform_type", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PlatformType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *UpdateViewRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSpanListType() {
		if err = oprot.WriteFieldBegin("span_list_type", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.SpanListType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *UpdateViewRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetFilters() {
		if err = oprot.WriteFieldBegin("filters", thrift.STRING, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Filters); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *UpdateViewRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpdateViewRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateViewRequest(%+v)", *p)

}

func (p *UpdateViewRequest) DeepEqual(ano *UpdateViewRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field2DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field3DeepEqual(ano.ViewName) {
		return false
	}
	if !p.Field4DeepEqual(ano.PlatformType) {
		return false
	}
	if !p.Field5DeepEqual(ano.SpanListType) {
		return false
	}
	if !p.Field6DeepEqual(ano.Filters) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *UpdateViewRequest) Field1DeepEqual(src int64) bool {

	if p.ID != src {
		return false
	}
	return true
}
func (p *UpdateViewRequest) Field2DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *UpdateViewRequest) Field3DeepEqual(src *string) bool {

	if p.ViewName == src {
		return true
	} else if p.ViewName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ViewName, *src) != 0 {
		return false
	}
	return true
}
func (p *UpdateViewRequest) Field4DeepEqual(src *common.PlatformType) bool {

	if p.PlatformType == src {
		return true
	} else if p.PlatformType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PlatformType, *src) != 0 {
		return false
	}
	return true
}
func (p *UpdateViewRequest) Field5DeepEqual(src *common.SpanListType) bool {

	if p.SpanListType == src {
		return true
	} else if p.SpanListType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.SpanListType, *src) != 0 {
		return false
	}
	return true
}
func (p *UpdateViewRequest) Field6DeepEqual(src *string) bool {

	if p.Filters == src {
		return true
	} else if p.Filters == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Filters, *src) != 0 {
		return false
	}
	return true
}
func (p *UpdateViewRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateViewResponse struct {
	BaseResp *base.BaseResp `thrift:"BaseResp,255,optional" frugal:"255,optional,base.BaseResp" form:"BaseResp" json:"BaseResp,omitempty" query:"BaseResp"`
}

func NewUpdateViewResponse() *UpdateViewResponse {
	return &UpdateViewResponse{}
}

func (p *UpdateViewResponse) InitDefault() {
}

var UpdateViewResponse_BaseResp_DEFAULT *base.BaseResp

func (p *UpdateViewResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return UpdateViewResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *UpdateViewResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_UpdateViewResponse = map[int16]string{
	255: "BaseResp",
}

func (p *UpdateViewResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *UpdateViewResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateViewResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateViewResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *UpdateViewResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateViewResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateViewResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseResp() {
		if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseResp.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpdateViewResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateViewResponse(%+v)", *p)

}

func (p *UpdateViewResponse) DeepEqual(ano *UpdateViewResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *UpdateViewResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type DeleteViewRequest struct {
	ID          int64      `thrift:"id,1,required" frugal:"1,required,i64" json:"id" path:"view_id,required" `
	WorkspaceID int64      `thrift:"workspace_id,2,required" frugal:"2,required,i64" json:"workspace_id" query:"workspace_id,required" `
	Base        *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewDeleteViewRequest() *DeleteViewRequest {
	return &DeleteViewRequest{}
}

func (p *DeleteViewRequest) InitDefault() {
}

func (p *DeleteViewRequest) GetID() (v int64) {
	if p != nil {
		return p.ID
	}
	return
}

func (p *DeleteViewRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

var DeleteViewRequest_Base_DEFAULT *base.Base

func (p *DeleteViewRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return DeleteViewRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *DeleteViewRequest) SetID(val int64) {
	p.ID = val
}
func (p *DeleteViewRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *DeleteViewRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_DeleteViewRequest = map[int16]string{
	1:   "id",
	2:   "workspace_id",
	255: "Base",
}

func (p *DeleteViewRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *DeleteViewRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetID bool = false
	var issetWorkspaceID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetWorkspaceID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteViewRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_DeleteViewRequest[fieldId]))
}

func (p *DeleteViewRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.ID = _field
	return nil
}
func (p *DeleteViewRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *DeleteViewRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *DeleteViewRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteViewRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteViewRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.ID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *DeleteViewRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *DeleteViewRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *DeleteViewRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteViewRequest(%+v)", *p)

}

func (p *DeleteViewRequest) DeepEqual(ano *DeleteViewRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field2DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *DeleteViewRequest) Field1DeepEqual(src int64) bool {

	if p.ID != src {
		return false
	}
	return true
}
func (p *DeleteViewRequest) Field2DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *DeleteViewRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type DeleteViewResponse struct {
	BaseResp *base.BaseResp `thrift:"BaseResp,255,optional" frugal:"255,optional,base.BaseResp" form:"BaseResp" json:"BaseResp,omitempty" query:"BaseResp"`
}

func NewDeleteViewResponse() *DeleteViewResponse {
	return &DeleteViewResponse{}
}

func (p *DeleteViewResponse) InitDefault() {
}

var DeleteViewResponse_BaseResp_DEFAULT *base.BaseResp

func (p *DeleteViewResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return DeleteViewResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *DeleteViewResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_DeleteViewResponse = map[int16]string{
	255: "BaseResp",
}

func (p *DeleteViewResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *DeleteViewResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteViewResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteViewResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *DeleteViewResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteViewResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteViewResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseResp() {
		if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseResp.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *DeleteViewResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteViewResponse(%+v)", *p)

}

func (p *DeleteViewResponse) DeepEqual(ano *DeleteViewResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *DeleteViewResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type ListViewsRequest struct {
	EnterpriseID *string    `thrift:"enterprise_id,1,optional" frugal:"1,optional,string" form:"enterprise_id" json:"enterprise_id,omitempty"`
	WorkspaceID  int64      `thrift:"workspace_id,2,required" frugal:"2,required,i64" json:"workspace_id" form:"workspace_id,required" `
	ViewName     *string    `thrift:"view_name,3,optional" frugal:"3,optional,string" form:"view_name" json:"view_name,omitempty"`
	Base         *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewListViewsRequest() *ListViewsRequest {
	return &ListViewsRequest{}
}

func (p *ListViewsRequest) InitDefault() {
}

var ListViewsRequest_EnterpriseID_DEFAULT string

func (p *ListViewsRequest) GetEnterpriseID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetEnterpriseID() {
		return ListViewsRequest_EnterpriseID_DEFAULT
	}
	return *p.EnterpriseID
}

func (p *ListViewsRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

var ListViewsRequest_ViewName_DEFAULT string

func (p *ListViewsRequest) GetViewName() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetViewName() {
		return ListViewsRequest_ViewName_DEFAULT
	}
	return *p.ViewName
}

var ListViewsRequest_Base_DEFAULT *base.Base

func (p *ListViewsRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return ListViewsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ListViewsRequest) SetEnterpriseID(val *string) {
	p.EnterpriseID = val
}
func (p *ListViewsRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *ListViewsRequest) SetViewName(val *string) {
	p.ViewName = val
}
func (p *ListViewsRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListViewsRequest = map[int16]string{
	1:   "enterprise_id",
	2:   "workspace_id",
	3:   "view_name",
	255: "Base",
}

func (p *ListViewsRequest) IsSetEnterpriseID() bool {
	return p.EnterpriseID != nil
}

func (p *ListViewsRequest) IsSetViewName() bool {
	return p.ViewName != nil
}

func (p *ListViewsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListViewsRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListViewsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ListViewsRequest[fieldId]))
}

func (p *ListViewsRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EnterpriseID = _field
	return nil
}
func (p *ListViewsRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *ListViewsRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ViewName = _field
	return nil
}
func (p *ListViewsRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *ListViewsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListViewsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListViewsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetEnterpriseID() {
		if err = oprot.WriteFieldBegin("enterprise_id", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.EnterpriseID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListViewsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ListViewsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetViewName() {
		if err = oprot.WriteFieldBegin("view_name", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ViewName); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ListViewsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListViewsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListViewsRequest(%+v)", *p)

}

func (p *ListViewsRequest) DeepEqual(ano *ListViewsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.EnterpriseID) {
		return false
	}
	if !p.Field2DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field3DeepEqual(ano.ViewName) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListViewsRequest) Field1DeepEqual(src *string) bool {

	if p.EnterpriseID == src {
		return true
	} else if p.EnterpriseID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.EnterpriseID, *src) != 0 {
		return false
	}
	return true
}
func (p *ListViewsRequest) Field2DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *ListViewsRequest) Field3DeepEqual(src *string) bool {

	if p.ViewName == src {
		return true
	} else if p.ViewName == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ViewName, *src) != 0 {
		return false
	}
	return true
}
func (p *ListViewsRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ListViewsResponse struct {
	Views    []*view.View   `thrift:"views,1,required" frugal:"1,required,list<view.View>" form:"views,required" json:"views,required" query:"views,required"`
	BaseResp *base.BaseResp `thrift:"BaseResp,255,optional" frugal:"255,optional,base.BaseResp" form:"BaseResp" json:"BaseResp,omitempty" query:"BaseResp"`
}

func NewListViewsResponse() *ListViewsResponse {
	return &ListViewsResponse{}
}

func (p *ListViewsResponse) InitDefault() {
}

func (p *ListViewsResponse) GetViews() (v []*view.View) {
	if p != nil {
		return p.Views
	}
	return
}

var ListViewsResponse_BaseResp_DEFAULT *base.BaseResp

func (p *ListViewsResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return ListViewsResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ListViewsResponse) SetViews(val []*view.View) {
	p.Views = val
}
func (p *ListViewsResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_ListViewsResponse = map[int16]string{
	1:   "views",
	255: "BaseResp",
}

func (p *ListViewsResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ListViewsResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetViews bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetViews = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetViews {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListViewsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ListViewsResponse[fieldId]))
}

func (p *ListViewsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*view.View, 0, size)
	values := make([]view.View, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Views = _field
	return nil
}
func (p *ListViewsResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *ListViewsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListViewsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListViewsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("views", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Views)); err != nil {
		return err
	}
	for _, v := range p.Views {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListViewsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseResp() {
		if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseResp.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListViewsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListViewsResponse(%+v)", *p)

}

func (p *ListViewsResponse) DeepEqual(ano *ListViewsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Views) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *ListViewsResponse) Field1DeepEqual(src []*view.View) bool {

	if len(p.Views) != len(src) {
		return false
	}
	for i, v := range p.Views {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListViewsResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type CreateManualAnnotationRequest struct {
	Annotation   *annotation.Annotation `thrift:"annotation,1,required" frugal:"1,required,annotation.Annotation" form:"annotation,required" json:"annotation,required"`
	PlatformType *common.PlatformType   `thrift:"platform_type,2,optional" frugal:"2,optional,string" form:"platform_type" json:"platform_type,omitempty"`
	Base         *base.Base             `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewCreateManualAnnotationRequest() *CreateManualAnnotationRequest {
	return &CreateManualAnnotationRequest{}
}

func (p *CreateManualAnnotationRequest) InitDefault() {
}

var CreateManualAnnotationRequest_Annotation_DEFAULT *annotation.Annotation

func (p *CreateManualAnnotationRequest) GetAnnotation() (v *annotation.Annotation) {
	if p == nil {
		return
	}
	if !p.IsSetAnnotation() {
		return CreateManualAnnotationRequest_Annotation_DEFAULT
	}
	return p.Annotation
}

var CreateManualAnnotationRequest_PlatformType_DEFAULT common.PlatformType

func (p *CreateManualAnnotationRequest) GetPlatformType() (v common.PlatformType) {
	if p == nil {
		return
	}
	if !p.IsSetPlatformType() {
		return CreateManualAnnotationRequest_PlatformType_DEFAULT
	}
	return *p.PlatformType
}

var CreateManualAnnotationRequest_Base_DEFAULT *base.Base

func (p *CreateManualAnnotationRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return CreateManualAnnotationRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *CreateManualAnnotationRequest) SetAnnotation(val *annotation.Annotation) {
	p.Annotation = val
}
func (p *CreateManualAnnotationRequest) SetPlatformType(val *common.PlatformType) {
	p.PlatformType = val
}
func (p *CreateManualAnnotationRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_CreateManualAnnotationRequest = map[int16]string{
	1:   "annotation",
	2:   "platform_type",
	255: "Base",
}

func (p *CreateManualAnnotationRequest) IsSetAnnotation() bool {
	return p.Annotation != nil
}

func (p *CreateManualAnnotationRequest) IsSetPlatformType() bool {
	return p.PlatformType != nil
}

func (p *CreateManualAnnotationRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateManualAnnotationRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetAnnotation bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetAnnotation = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetAnnotation {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateManualAnnotationRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_CreateManualAnnotationRequest[fieldId]))
}

func (p *CreateManualAnnotationRequest) ReadField1(iprot thrift.TProtocol) error {
	_field := annotation.NewAnnotation()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Annotation = _field
	return nil
}
func (p *CreateManualAnnotationRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field *common.PlatformType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PlatformType = _field
	return nil
}
func (p *CreateManualAnnotationRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *CreateManualAnnotationRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateManualAnnotationRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateManualAnnotationRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("annotation", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Annotation.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CreateManualAnnotationRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetPlatformType() {
		if err = oprot.WriteFieldBegin("platform_type", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PlatformType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *CreateManualAnnotationRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateManualAnnotationRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateManualAnnotationRequest(%+v)", *p)

}

func (p *CreateManualAnnotationRequest) DeepEqual(ano *CreateManualAnnotationRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Annotation) {
		return false
	}
	if !p.Field2DeepEqual(ano.PlatformType) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *CreateManualAnnotationRequest) Field1DeepEqual(src *annotation.Annotation) bool {

	if !p.Annotation.DeepEqual(src) {
		return false
	}
	return true
}
func (p *CreateManualAnnotationRequest) Field2DeepEqual(src *common.PlatformType) bool {

	if p.PlatformType == src {
		return true
	} else if p.PlatformType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PlatformType, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateManualAnnotationRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type CreateManualAnnotationResponse struct {
	AnnotationID *string        `thrift:"annotation_id,1,optional" frugal:"1,optional,string" form:"annotation_id" json:"annotation_id,omitempty" query:"annotation_id"`
	BaseResp     *base.BaseResp `thrift:"BaseResp,255,optional" frugal:"255,optional,base.BaseResp" form:"BaseResp" json:"BaseResp,omitempty" query:"BaseResp"`
}

func NewCreateManualAnnotationResponse() *CreateManualAnnotationResponse {
	return &CreateManualAnnotationResponse{}
}

func (p *CreateManualAnnotationResponse) InitDefault() {
}

var CreateManualAnnotationResponse_AnnotationID_DEFAULT string

func (p *CreateManualAnnotationResponse) GetAnnotationID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetAnnotationID() {
		return CreateManualAnnotationResponse_AnnotationID_DEFAULT
	}
	return *p.AnnotationID
}

var CreateManualAnnotationResponse_BaseResp_DEFAULT *base.BaseResp

func (p *CreateManualAnnotationResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return CreateManualAnnotationResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CreateManualAnnotationResponse) SetAnnotationID(val *string) {
	p.AnnotationID = val
}
func (p *CreateManualAnnotationResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_CreateManualAnnotationResponse = map[int16]string{
	1:   "annotation_id",
	255: "BaseResp",
}

func (p *CreateManualAnnotationResponse) IsSetAnnotationID() bool {
	return p.AnnotationID != nil
}

func (p *CreateManualAnnotationResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CreateManualAnnotationResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_CreateManualAnnotationResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *CreateManualAnnotationResponse) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.AnnotationID = _field
	return nil
}
func (p *CreateManualAnnotationResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *CreateManualAnnotationResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateManualAnnotationResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *CreateManualAnnotationResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAnnotationID() {
		if err = oprot.WriteFieldBegin("annotation_id", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.AnnotationID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *CreateManualAnnotationResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseResp() {
		if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseResp.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *CreateManualAnnotationResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateManualAnnotationResponse(%+v)", *p)

}

func (p *CreateManualAnnotationResponse) DeepEqual(ano *CreateManualAnnotationResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AnnotationID) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *CreateManualAnnotationResponse) Field1DeepEqual(src *string) bool {

	if p.AnnotationID == src {
		return true
	} else if p.AnnotationID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.AnnotationID, *src) != 0 {
		return false
	}
	return true
}
func (p *CreateManualAnnotationResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateManualAnnotationRequest struct {
	AnnotationID string                 `thrift:"annotation_id,1,required" frugal:"1,required,string" json:"annotation_id,required" path:"annotation_id,required"`
	Annotation   *annotation.Annotation `thrift:"annotation,2,required" frugal:"2,required,annotation.Annotation" form:"annotation,required" json:"annotation,required"`
	PlatformType *common.PlatformType   `thrift:"platform_type,3,optional" frugal:"3,optional,string" form:"platform_type" json:"platform_type,omitempty"`
	Base         *base.Base             `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewUpdateManualAnnotationRequest() *UpdateManualAnnotationRequest {
	return &UpdateManualAnnotationRequest{}
}

func (p *UpdateManualAnnotationRequest) InitDefault() {
}

func (p *UpdateManualAnnotationRequest) GetAnnotationID() (v string) {
	if p != nil {
		return p.AnnotationID
	}
	return
}

var UpdateManualAnnotationRequest_Annotation_DEFAULT *annotation.Annotation

func (p *UpdateManualAnnotationRequest) GetAnnotation() (v *annotation.Annotation) {
	if p == nil {
		return
	}
	if !p.IsSetAnnotation() {
		return UpdateManualAnnotationRequest_Annotation_DEFAULT
	}
	return p.Annotation
}

var UpdateManualAnnotationRequest_PlatformType_DEFAULT common.PlatformType

func (p *UpdateManualAnnotationRequest) GetPlatformType() (v common.PlatformType) {
	if p == nil {
		return
	}
	if !p.IsSetPlatformType() {
		return UpdateManualAnnotationRequest_PlatformType_DEFAULT
	}
	return *p.PlatformType
}

var UpdateManualAnnotationRequest_Base_DEFAULT *base.Base

func (p *UpdateManualAnnotationRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return UpdateManualAnnotationRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *UpdateManualAnnotationRequest) SetAnnotationID(val string) {
	p.AnnotationID = val
}
func (p *UpdateManualAnnotationRequest) SetAnnotation(val *annotation.Annotation) {
	p.Annotation = val
}
func (p *UpdateManualAnnotationRequest) SetPlatformType(val *common.PlatformType) {
	p.PlatformType = val
}
func (p *UpdateManualAnnotationRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_UpdateManualAnnotationRequest = map[int16]string{
	1:   "annotation_id",
	2:   "annotation",
	3:   "platform_type",
	255: "Base",
}

func (p *UpdateManualAnnotationRequest) IsSetAnnotation() bool {
	return p.Annotation != nil
}

func (p *UpdateManualAnnotationRequest) IsSetPlatformType() bool {
	return p.PlatformType != nil
}

func (p *UpdateManualAnnotationRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateManualAnnotationRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetAnnotationID bool = false
	var issetAnnotation bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetAnnotationID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetAnnotation = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetAnnotationID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetAnnotation {
		fieldId = 2
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateManualAnnotationRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_UpdateManualAnnotationRequest[fieldId]))
}

func (p *UpdateManualAnnotationRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AnnotationID = _field
	return nil
}
func (p *UpdateManualAnnotationRequest) ReadField2(iprot thrift.TProtocol) error {
	_field := annotation.NewAnnotation()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Annotation = _field
	return nil
}
func (p *UpdateManualAnnotationRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field *common.PlatformType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PlatformType = _field
	return nil
}
func (p *UpdateManualAnnotationRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *UpdateManualAnnotationRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateManualAnnotationRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateManualAnnotationRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("annotation_id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AnnotationID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *UpdateManualAnnotationRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("annotation", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Annotation.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *UpdateManualAnnotationRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetPlatformType() {
		if err = oprot.WriteFieldBegin("platform_type", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PlatformType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *UpdateManualAnnotationRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpdateManualAnnotationRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateManualAnnotationRequest(%+v)", *p)

}

func (p *UpdateManualAnnotationRequest) DeepEqual(ano *UpdateManualAnnotationRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AnnotationID) {
		return false
	}
	if !p.Field2DeepEqual(ano.Annotation) {
		return false
	}
	if !p.Field3DeepEqual(ano.PlatformType) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *UpdateManualAnnotationRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.AnnotationID, src) != 0 {
		return false
	}
	return true
}
func (p *UpdateManualAnnotationRequest) Field2DeepEqual(src *annotation.Annotation) bool {

	if !p.Annotation.DeepEqual(src) {
		return false
	}
	return true
}
func (p *UpdateManualAnnotationRequest) Field3DeepEqual(src *common.PlatformType) bool {

	if p.PlatformType == src {
		return true
	} else if p.PlatformType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PlatformType, *src) != 0 {
		return false
	}
	return true
}
func (p *UpdateManualAnnotationRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type UpdateManualAnnotationResponse struct {
	BaseResp *base.BaseResp `thrift:"BaseResp,255,optional" frugal:"255,optional,base.BaseResp" form:"BaseResp" json:"BaseResp,omitempty" query:"BaseResp"`
}

func NewUpdateManualAnnotationResponse() *UpdateManualAnnotationResponse {
	return &UpdateManualAnnotationResponse{}
}

func (p *UpdateManualAnnotationResponse) InitDefault() {
}

var UpdateManualAnnotationResponse_BaseResp_DEFAULT *base.BaseResp

func (p *UpdateManualAnnotationResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return UpdateManualAnnotationResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *UpdateManualAnnotationResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_UpdateManualAnnotationResponse = map[int16]string{
	255: "BaseResp",
}

func (p *UpdateManualAnnotationResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *UpdateManualAnnotationResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_UpdateManualAnnotationResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *UpdateManualAnnotationResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *UpdateManualAnnotationResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateManualAnnotationResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *UpdateManualAnnotationResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseResp() {
		if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseResp.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *UpdateManualAnnotationResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateManualAnnotationResponse(%+v)", *p)

}

func (p *UpdateManualAnnotationResponse) DeepEqual(ano *UpdateManualAnnotationResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *UpdateManualAnnotationResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type DeleteManualAnnotationRequest struct {
	AnnotationID  string               `thrift:"annotation_id,1,required" frugal:"1,required,string" json:"annotation_id,required" path:"annotation_id,required"`
	WorkspaceID   int64                `thrift:"workspace_id,2,required" frugal:"2,required,i64" json:"workspace_id" query:"workspace_id,required" `
	TraceID       string               `thrift:"trace_id,3,required" frugal:"3,required,string" json:"trace_id,required" query:"trace_id,required"`
	SpanID        string               `thrift:"span_id,4,required" frugal:"4,required,string" json:"span_id,required" query:"span_id,required"`
	StartTime     int64                `thrift:"start_time,5,required" frugal:"5,required,i64" json:"start_time" query:"start_time,required" `
	AnnotationKey string               `thrift:"annotation_key,6,required" frugal:"6,required,string" json:"annotation_key,required" query:"annotation_key,required"`
	PlatformType  *common.PlatformType `thrift:"platform_type,7,optional" frugal:"7,optional,string" json:"platform_type,omitempty" query:"platform_type"`
	Base          *base.Base           `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewDeleteManualAnnotationRequest() *DeleteManualAnnotationRequest {
	return &DeleteManualAnnotationRequest{}
}

func (p *DeleteManualAnnotationRequest) InitDefault() {
}

func (p *DeleteManualAnnotationRequest) GetAnnotationID() (v string) {
	if p != nil {
		return p.AnnotationID
	}
	return
}

func (p *DeleteManualAnnotationRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *DeleteManualAnnotationRequest) GetTraceID() (v string) {
	if p != nil {
		return p.TraceID
	}
	return
}

func (p *DeleteManualAnnotationRequest) GetSpanID() (v string) {
	if p != nil {
		return p.SpanID
	}
	return
}

func (p *DeleteManualAnnotationRequest) GetStartTime() (v int64) {
	if p != nil {
		return p.StartTime
	}
	return
}

func (p *DeleteManualAnnotationRequest) GetAnnotationKey() (v string) {
	if p != nil {
		return p.AnnotationKey
	}
	return
}

var DeleteManualAnnotationRequest_PlatformType_DEFAULT common.PlatformType

func (p *DeleteManualAnnotationRequest) GetPlatformType() (v common.PlatformType) {
	if p == nil {
		return
	}
	if !p.IsSetPlatformType() {
		return DeleteManualAnnotationRequest_PlatformType_DEFAULT
	}
	return *p.PlatformType
}

var DeleteManualAnnotationRequest_Base_DEFAULT *base.Base

func (p *DeleteManualAnnotationRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return DeleteManualAnnotationRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *DeleteManualAnnotationRequest) SetAnnotationID(val string) {
	p.AnnotationID = val
}
func (p *DeleteManualAnnotationRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *DeleteManualAnnotationRequest) SetTraceID(val string) {
	p.TraceID = val
}
func (p *DeleteManualAnnotationRequest) SetSpanID(val string) {
	p.SpanID = val
}
func (p *DeleteManualAnnotationRequest) SetStartTime(val int64) {
	p.StartTime = val
}
func (p *DeleteManualAnnotationRequest) SetAnnotationKey(val string) {
	p.AnnotationKey = val
}
func (p *DeleteManualAnnotationRequest) SetPlatformType(val *common.PlatformType) {
	p.PlatformType = val
}
func (p *DeleteManualAnnotationRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_DeleteManualAnnotationRequest = map[int16]string{
	1:   "annotation_id",
	2:   "workspace_id",
	3:   "trace_id",
	4:   "span_id",
	5:   "start_time",
	6:   "annotation_key",
	7:   "platform_type",
	255: "Base",
}

func (p *DeleteManualAnnotationRequest) IsSetPlatformType() bool {
	return p.PlatformType != nil
}

func (p *DeleteManualAnnotationRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *DeleteManualAnnotationRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetAnnotationID bool = false
	var issetWorkspaceID bool = false
	var issetTraceID bool = false
	var issetSpanID bool = false
	var issetStartTime bool = false
	var issetAnnotationKey bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetAnnotationID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetTraceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetSpanID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
				issetStartTime = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
				issetAnnotationKey = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 7:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetAnnotationID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetWorkspaceID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetTraceID {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetSpanID {
		fieldId = 4
		goto RequiredFieldNotSetError
	}

	if !issetStartTime {
		fieldId = 5
		goto RequiredFieldNotSetError
	}

	if !issetAnnotationKey {
		fieldId = 6
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteManualAnnotationRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_DeleteManualAnnotationRequest[fieldId]))
}

func (p *DeleteManualAnnotationRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AnnotationID = _field
	return nil
}
func (p *DeleteManualAnnotationRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *DeleteManualAnnotationRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TraceID = _field
	return nil
}
func (p *DeleteManualAnnotationRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SpanID = _field
	return nil
}
func (p *DeleteManualAnnotationRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StartTime = _field
	return nil
}
func (p *DeleteManualAnnotationRequest) ReadField6(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.AnnotationKey = _field
	return nil
}
func (p *DeleteManualAnnotationRequest) ReadField7(iprot thrift.TProtocol) error {

	var _field *common.PlatformType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PlatformType = _field
	return nil
}
func (p *DeleteManualAnnotationRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *DeleteManualAnnotationRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteManualAnnotationRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteManualAnnotationRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("annotation_id", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AnnotationID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *DeleteManualAnnotationRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *DeleteManualAnnotationRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("trace_id", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TraceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *DeleteManualAnnotationRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("span_id", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.SpanID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *DeleteManualAnnotationRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("start_time", thrift.I64, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.StartTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *DeleteManualAnnotationRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("annotation_key", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.AnnotationKey); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *DeleteManualAnnotationRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetPlatformType() {
		if err = oprot.WriteFieldBegin("platform_type", thrift.STRING, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PlatformType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}
func (p *DeleteManualAnnotationRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *DeleteManualAnnotationRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteManualAnnotationRequest(%+v)", *p)

}

func (p *DeleteManualAnnotationRequest) DeepEqual(ano *DeleteManualAnnotationRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AnnotationID) {
		return false
	}
	if !p.Field2DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field3DeepEqual(ano.TraceID) {
		return false
	}
	if !p.Field4DeepEqual(ano.SpanID) {
		return false
	}
	if !p.Field5DeepEqual(ano.StartTime) {
		return false
	}
	if !p.Field6DeepEqual(ano.AnnotationKey) {
		return false
	}
	if !p.Field7DeepEqual(ano.PlatformType) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *DeleteManualAnnotationRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.AnnotationID, src) != 0 {
		return false
	}
	return true
}
func (p *DeleteManualAnnotationRequest) Field2DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *DeleteManualAnnotationRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.TraceID, src) != 0 {
		return false
	}
	return true
}
func (p *DeleteManualAnnotationRequest) Field4DeepEqual(src string) bool {

	if strings.Compare(p.SpanID, src) != 0 {
		return false
	}
	return true
}
func (p *DeleteManualAnnotationRequest) Field5DeepEqual(src int64) bool {

	if p.StartTime != src {
		return false
	}
	return true
}
func (p *DeleteManualAnnotationRequest) Field6DeepEqual(src string) bool {

	if strings.Compare(p.AnnotationKey, src) != 0 {
		return false
	}
	return true
}
func (p *DeleteManualAnnotationRequest) Field7DeepEqual(src *common.PlatformType) bool {

	if p.PlatformType == src {
		return true
	} else if p.PlatformType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PlatformType, *src) != 0 {
		return false
	}
	return true
}
func (p *DeleteManualAnnotationRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type DeleteManualAnnotationResponse struct {
	BaseResp *base.BaseResp `thrift:"BaseResp,255,optional" frugal:"255,optional,base.BaseResp" form:"BaseResp" json:"BaseResp,omitempty" query:"BaseResp"`
}

func NewDeleteManualAnnotationResponse() *DeleteManualAnnotationResponse {
	return &DeleteManualAnnotationResponse{}
}

func (p *DeleteManualAnnotationResponse) InitDefault() {
}

var DeleteManualAnnotationResponse_BaseResp_DEFAULT *base.BaseResp

func (p *DeleteManualAnnotationResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return DeleteManualAnnotationResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *DeleteManualAnnotationResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_DeleteManualAnnotationResponse = map[int16]string{
	255: "BaseResp",
}

func (p *DeleteManualAnnotationResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *DeleteManualAnnotationResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_DeleteManualAnnotationResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *DeleteManualAnnotationResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *DeleteManualAnnotationResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteManualAnnotationResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *DeleteManualAnnotationResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseResp() {
		if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseResp.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *DeleteManualAnnotationResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteManualAnnotationResponse(%+v)", *p)

}

func (p *DeleteManualAnnotationResponse) DeepEqual(ano *DeleteManualAnnotationResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *DeleteManualAnnotationResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type ListAnnotationsRequest struct {
	WorkspaceID     int64                `thrift:"workspace_id,1,required" frugal:"1,required,i64" json:"workspace_id" form:"workspace_id,required" `
	SpanID          string               `thrift:"span_id,2,required" frugal:"2,required,string" form:"span_id,required" json:"span_id,required"`
	TraceID         string               `thrift:"trace_id,3,required" frugal:"3,required,string" form:"trace_id,required" json:"trace_id,required"`
	StartTime       int64                `thrift:"start_time,4,required" frugal:"4,required,i64" json:"start_time" form:"start_time,required" `
	PlatformType    *common.PlatformType `thrift:"platform_type,5,optional" frugal:"5,optional,string" form:"platform_type" json:"platform_type,omitempty"`
	DescByUpdatedAt *bool                `thrift:"desc_by_updated_at,6,optional" frugal:"6,optional,bool" form:"desc_by_updated_at" json:"desc_by_updated_at,omitempty"`
	Base            *base.Base           `thrift:"Base,255,optional" frugal:"255,optional,base.Base" form:"Base" json:"Base,omitempty" query:"Base"`
}

func NewListAnnotationsRequest() *ListAnnotationsRequest {
	return &ListAnnotationsRequest{}
}

func (p *ListAnnotationsRequest) InitDefault() {
}

func (p *ListAnnotationsRequest) GetWorkspaceID() (v int64) {
	if p != nil {
		return p.WorkspaceID
	}
	return
}

func (p *ListAnnotationsRequest) GetSpanID() (v string) {
	if p != nil {
		return p.SpanID
	}
	return
}

func (p *ListAnnotationsRequest) GetTraceID() (v string) {
	if p != nil {
		return p.TraceID
	}
	return
}

func (p *ListAnnotationsRequest) GetStartTime() (v int64) {
	if p != nil {
		return p.StartTime
	}
	return
}

var ListAnnotationsRequest_PlatformType_DEFAULT common.PlatformType

func (p *ListAnnotationsRequest) GetPlatformType() (v common.PlatformType) {
	if p == nil {
		return
	}
	if !p.IsSetPlatformType() {
		return ListAnnotationsRequest_PlatformType_DEFAULT
	}
	return *p.PlatformType
}

var ListAnnotationsRequest_DescByUpdatedAt_DEFAULT bool

func (p *ListAnnotationsRequest) GetDescByUpdatedAt() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetDescByUpdatedAt() {
		return ListAnnotationsRequest_DescByUpdatedAt_DEFAULT
	}
	return *p.DescByUpdatedAt
}

var ListAnnotationsRequest_Base_DEFAULT *base.Base

func (p *ListAnnotationsRequest) GetBase() (v *base.Base) {
	if p == nil {
		return
	}
	if !p.IsSetBase() {
		return ListAnnotationsRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *ListAnnotationsRequest) SetWorkspaceID(val int64) {
	p.WorkspaceID = val
}
func (p *ListAnnotationsRequest) SetSpanID(val string) {
	p.SpanID = val
}
func (p *ListAnnotationsRequest) SetTraceID(val string) {
	p.TraceID = val
}
func (p *ListAnnotationsRequest) SetStartTime(val int64) {
	p.StartTime = val
}
func (p *ListAnnotationsRequest) SetPlatformType(val *common.PlatformType) {
	p.PlatformType = val
}
func (p *ListAnnotationsRequest) SetDescByUpdatedAt(val *bool) {
	p.DescByUpdatedAt = val
}
func (p *ListAnnotationsRequest) SetBase(val *base.Base) {
	p.Base = val
}

var fieldIDToName_ListAnnotationsRequest = map[int16]string{
	1:   "workspace_id",
	2:   "span_id",
	3:   "trace_id",
	4:   "start_time",
	5:   "platform_type",
	6:   "desc_by_updated_at",
	255: "Base",
}

func (p *ListAnnotationsRequest) IsSetPlatformType() bool {
	return p.PlatformType != nil
}

func (p *ListAnnotationsRequest) IsSetDescByUpdatedAt() bool {
	return p.DescByUpdatedAt != nil
}

func (p *ListAnnotationsRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *ListAnnotationsRequest) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetWorkspaceID bool = false
	var issetSpanID bool = false
	var issetTraceID bool = false
	var issetStartTime bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetWorkspaceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
				issetSpanID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetTraceID = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
				issetStartTime = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 6:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetWorkspaceID {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetSpanID {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetTraceID {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetStartTime {
		fieldId = 4
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListAnnotationsRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ListAnnotationsRequest[fieldId]))
}

func (p *ListAnnotationsRequest) ReadField1(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.WorkspaceID = _field
	return nil
}
func (p *ListAnnotationsRequest) ReadField2(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.SpanID = _field
	return nil
}
func (p *ListAnnotationsRequest) ReadField3(iprot thrift.TProtocol) error {

	var _field string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = v
	}
	p.TraceID = _field
	return nil
}
func (p *ListAnnotationsRequest) ReadField4(iprot thrift.TProtocol) error {

	var _field int64
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		_field = v
	}
	p.StartTime = _field
	return nil
}
func (p *ListAnnotationsRequest) ReadField5(iprot thrift.TProtocol) error {

	var _field *common.PlatformType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.PlatformType = _field
	return nil
}
func (p *ListAnnotationsRequest) ReadField6(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DescByUpdatedAt = _field
	return nil
}
func (p *ListAnnotationsRequest) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBase()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Base = _field
	return nil
}

func (p *ListAnnotationsRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListAnnotationsRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListAnnotationsRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("workspace_id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.WorkspaceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListAnnotationsRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("span_id", thrift.STRING, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.SpanID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *ListAnnotationsRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("trace_id", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.TraceID); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *ListAnnotationsRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("start_time", thrift.I64, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.StartTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}
func (p *ListAnnotationsRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetPlatformType() {
		if err = oprot.WriteFieldBegin("platform_type", thrift.STRING, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.PlatformType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}
func (p *ListAnnotationsRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetDescByUpdatedAt() {
		if err = oprot.WriteFieldBegin("desc_by_updated_at", thrift.BOOL, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.DescByUpdatedAt); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}
func (p *ListAnnotationsRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err = oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Base.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListAnnotationsRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListAnnotationsRequest(%+v)", *p)

}

func (p *ListAnnotationsRequest) DeepEqual(ano *ListAnnotationsRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.WorkspaceID) {
		return false
	}
	if !p.Field2DeepEqual(ano.SpanID) {
		return false
	}
	if !p.Field3DeepEqual(ano.TraceID) {
		return false
	}
	if !p.Field4DeepEqual(ano.StartTime) {
		return false
	}
	if !p.Field5DeepEqual(ano.PlatformType) {
		return false
	}
	if !p.Field6DeepEqual(ano.DescByUpdatedAt) {
		return false
	}
	if !p.Field255DeepEqual(ano.Base) {
		return false
	}
	return true
}

func (p *ListAnnotationsRequest) Field1DeepEqual(src int64) bool {

	if p.WorkspaceID != src {
		return false
	}
	return true
}
func (p *ListAnnotationsRequest) Field2DeepEqual(src string) bool {

	if strings.Compare(p.SpanID, src) != 0 {
		return false
	}
	return true
}
func (p *ListAnnotationsRequest) Field3DeepEqual(src string) bool {

	if strings.Compare(p.TraceID, src) != 0 {
		return false
	}
	return true
}
func (p *ListAnnotationsRequest) Field4DeepEqual(src int64) bool {

	if p.StartTime != src {
		return false
	}
	return true
}
func (p *ListAnnotationsRequest) Field5DeepEqual(src *common.PlatformType) bool {

	if p.PlatformType == src {
		return true
	} else if p.PlatformType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.PlatformType, *src) != 0 {
		return false
	}
	return true
}
func (p *ListAnnotationsRequest) Field6DeepEqual(src *bool) bool {

	if p.DescByUpdatedAt == src {
		return true
	} else if p.DescByUpdatedAt == nil || src == nil {
		return false
	}
	if *p.DescByUpdatedAt != *src {
		return false
	}
	return true
}
func (p *ListAnnotationsRequest) Field255DeepEqual(src *base.Base) bool {

	if !p.Base.DeepEqual(src) {
		return false
	}
	return true
}

type ListAnnotationsResponse struct {
	Annotations []*annotation.Annotation `thrift:"annotations,1,required" frugal:"1,required,list<annotation.Annotation>" form:"annotations,required" json:"annotations,required" query:"annotations,required"`
	BaseResp    *base.BaseResp           `thrift:"BaseResp,255,optional" frugal:"255,optional,base.BaseResp" form:"BaseResp" json:"BaseResp,omitempty" query:"BaseResp"`
}

func NewListAnnotationsResponse() *ListAnnotationsResponse {
	return &ListAnnotationsResponse{}
}

func (p *ListAnnotationsResponse) InitDefault() {
}

func (p *ListAnnotationsResponse) GetAnnotations() (v []*annotation.Annotation) {
	if p != nil {
		return p.Annotations
	}
	return
}

var ListAnnotationsResponse_BaseResp_DEFAULT *base.BaseResp

func (p *ListAnnotationsResponse) GetBaseResp() (v *base.BaseResp) {
	if p == nil {
		return
	}
	if !p.IsSetBaseResp() {
		return ListAnnotationsResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *ListAnnotationsResponse) SetAnnotations(val []*annotation.Annotation) {
	p.Annotations = val
}
func (p *ListAnnotationsResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

var fieldIDToName_ListAnnotationsResponse = map[int16]string{
	1:   "annotations",
	255: "BaseResp",
}

func (p *ListAnnotationsResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *ListAnnotationsResponse) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetAnnotations bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetAnnotations = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 255:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField255(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetAnnotations {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ListAnnotationsResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ListAnnotationsResponse[fieldId]))
}

func (p *ListAnnotationsResponse) ReadField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*annotation.Annotation, 0, size)
	values := make([]annotation.Annotation, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Annotations = _field
	return nil
}
func (p *ListAnnotationsResponse) ReadField255(iprot thrift.TProtocol) error {
	_field := base.NewBaseResp()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.BaseResp = _field
	return nil
}

func (p *ListAnnotationsResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListAnnotationsResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField255(oprot); err != nil {
			fieldId = 255
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ListAnnotationsResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("annotations", thrift.LIST, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Annotations)); err != nil {
		return err
	}
	for _, v := range p.Annotations {
		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *ListAnnotationsResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseResp() {
		if err = oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.BaseResp.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 255 end error: ", p), err)
}

func (p *ListAnnotationsResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ListAnnotationsResponse(%+v)", *p)

}

func (p *ListAnnotationsResponse) DeepEqual(ano *ListAnnotationsResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Annotations) {
		return false
	}
	if !p.Field255DeepEqual(ano.BaseResp) {
		return false
	}
	return true
}

func (p *ListAnnotationsResponse) Field1DeepEqual(src []*annotation.Annotation) bool {

	if len(p.Annotations) != len(src) {
		return false
	}
	for i, v := range p.Annotations {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *ListAnnotationsResponse) Field255DeepEqual(src *base.BaseResp) bool {

	if !p.BaseResp.DeepEqual(src) {
		return false
	}
	return true
}

type TraceService interface {
	ListSpans(ctx context.Context, req *ListSpansRequest) (r *ListSpansResponse, err error)

	GetTrace(ctx context.Context, req *GetTraceRequest) (r *GetTraceResponse, err error)

	BatchGetTracesAdvanceInfo(ctx context.Context, req *BatchGetTracesAdvanceInfoRequest) (r *BatchGetTracesAdvanceInfoResponse, err error)

	IngestTracesInner(ctx context.Context, req *IngestTracesRequest) (r *IngestTracesResponse, err error)

	GetTracesMetaInfo(ctx context.Context, req *GetTracesMetaInfoRequest) (r *GetTracesMetaInfoResponse, err error)

	CreateView(ctx context.Context, req *CreateViewRequest) (r *CreateViewResponse, err error)

	UpdateView(ctx context.Context, req *UpdateViewRequest) (r *UpdateViewResponse, err error)

	DeleteView(ctx context.Context, req *DeleteViewRequest) (r *DeleteViewResponse, err error)

	ListViews(ctx context.Context, req *ListViewsRequest) (r *ListViewsResponse, err error)

	CreateManualAnnotation(ctx context.Context, req *CreateManualAnnotationRequest) (r *CreateManualAnnotationResponse, err error)

	UpdateManualAnnotation(ctx context.Context, req *UpdateManualAnnotationRequest) (r *UpdateManualAnnotationResponse, err error)

	DeleteManualAnnotation(ctx context.Context, req *DeleteManualAnnotationRequest) (r *DeleteManualAnnotationResponse, err error)

	ListAnnotations(ctx context.Context, req *ListAnnotationsRequest) (r *ListAnnotationsResponse, err error)
}

type TraceServiceClient struct {
	c thrift.TClient
}

func NewTraceServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TraceServiceClient {
	return &TraceServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewTraceServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TraceServiceClient {
	return &TraceServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewTraceServiceClient(c thrift.TClient) *TraceServiceClient {
	return &TraceServiceClient{
		c: c,
	}
}

func (p *TraceServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *TraceServiceClient) ListSpans(ctx context.Context, req *ListSpansRequest) (r *ListSpansResponse, err error) {
	var _args TraceServiceListSpansArgs
	_args.Req = req
	var _result TraceServiceListSpansResult
	if err = p.Client_().Call(ctx, "ListSpans", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *TraceServiceClient) GetTrace(ctx context.Context, req *GetTraceRequest) (r *GetTraceResponse, err error) {
	var _args TraceServiceGetTraceArgs
	_args.Req = req
	var _result TraceServiceGetTraceResult
	if err = p.Client_().Call(ctx, "GetTrace", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *TraceServiceClient) BatchGetTracesAdvanceInfo(ctx context.Context, req *BatchGetTracesAdvanceInfoRequest) (r *BatchGetTracesAdvanceInfoResponse, err error) {
	var _args TraceServiceBatchGetTracesAdvanceInfoArgs
	_args.Req = req
	var _result TraceServiceBatchGetTracesAdvanceInfoResult
	if err = p.Client_().Call(ctx, "BatchGetTracesAdvanceInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *TraceServiceClient) IngestTracesInner(ctx context.Context, req *IngestTracesRequest) (r *IngestTracesResponse, err error) {
	var _args TraceServiceIngestTracesInnerArgs
	_args.Req = req
	var _result TraceServiceIngestTracesInnerResult
	if err = p.Client_().Call(ctx, "IngestTracesInner", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *TraceServiceClient) GetTracesMetaInfo(ctx context.Context, req *GetTracesMetaInfoRequest) (r *GetTracesMetaInfoResponse, err error) {
	var _args TraceServiceGetTracesMetaInfoArgs
	_args.Req = req
	var _result TraceServiceGetTracesMetaInfoResult
	if err = p.Client_().Call(ctx, "GetTracesMetaInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *TraceServiceClient) CreateView(ctx context.Context, req *CreateViewRequest) (r *CreateViewResponse, err error) {
	var _args TraceServiceCreateViewArgs
	_args.Req = req
	var _result TraceServiceCreateViewResult
	if err = p.Client_().Call(ctx, "CreateView", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *TraceServiceClient) UpdateView(ctx context.Context, req *UpdateViewRequest) (r *UpdateViewResponse, err error) {
	var _args TraceServiceUpdateViewArgs
	_args.Req = req
	var _result TraceServiceUpdateViewResult
	if err = p.Client_().Call(ctx, "UpdateView", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *TraceServiceClient) DeleteView(ctx context.Context, req *DeleteViewRequest) (r *DeleteViewResponse, err error) {
	var _args TraceServiceDeleteViewArgs
	_args.Req = req
	var _result TraceServiceDeleteViewResult
	if err = p.Client_().Call(ctx, "DeleteView", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *TraceServiceClient) ListViews(ctx context.Context, req *ListViewsRequest) (r *ListViewsResponse, err error) {
	var _args TraceServiceListViewsArgs
	_args.Req = req
	var _result TraceServiceListViewsResult
	if err = p.Client_().Call(ctx, "ListViews", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *TraceServiceClient) CreateManualAnnotation(ctx context.Context, req *CreateManualAnnotationRequest) (r *CreateManualAnnotationResponse, err error) {
	var _args TraceServiceCreateManualAnnotationArgs
	_args.Req = req
	var _result TraceServiceCreateManualAnnotationResult
	if err = p.Client_().Call(ctx, "CreateManualAnnotation", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *TraceServiceClient) UpdateManualAnnotation(ctx context.Context, req *UpdateManualAnnotationRequest) (r *UpdateManualAnnotationResponse, err error) {
	var _args TraceServiceUpdateManualAnnotationArgs
	_args.Req = req
	var _result TraceServiceUpdateManualAnnotationResult
	if err = p.Client_().Call(ctx, "UpdateManualAnnotation", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *TraceServiceClient) DeleteManualAnnotation(ctx context.Context, req *DeleteManualAnnotationRequest) (r *DeleteManualAnnotationResponse, err error) {
	var _args TraceServiceDeleteManualAnnotationArgs
	_args.Req = req
	var _result TraceServiceDeleteManualAnnotationResult
	if err = p.Client_().Call(ctx, "DeleteManualAnnotation", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *TraceServiceClient) ListAnnotations(ctx context.Context, req *ListAnnotationsRequest) (r *ListAnnotationsResponse, err error) {
	var _args TraceServiceListAnnotationsArgs
	_args.Req = req
	var _result TraceServiceListAnnotationsResult
	if err = p.Client_().Call(ctx, "ListAnnotations", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type TraceServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      TraceService
}

func (p *TraceServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *TraceServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *TraceServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewTraceServiceProcessor(handler TraceService) *TraceServiceProcessor {
	self := &TraceServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("ListSpans", &traceServiceProcessorListSpans{handler: handler})
	self.AddToProcessorMap("GetTrace", &traceServiceProcessorGetTrace{handler: handler})
	self.AddToProcessorMap("BatchGetTracesAdvanceInfo", &traceServiceProcessorBatchGetTracesAdvanceInfo{handler: handler})
	self.AddToProcessorMap("IngestTracesInner", &traceServiceProcessorIngestTracesInner{handler: handler})
	self.AddToProcessorMap("GetTracesMetaInfo", &traceServiceProcessorGetTracesMetaInfo{handler: handler})
	self.AddToProcessorMap("CreateView", &traceServiceProcessorCreateView{handler: handler})
	self.AddToProcessorMap("UpdateView", &traceServiceProcessorUpdateView{handler: handler})
	self.AddToProcessorMap("DeleteView", &traceServiceProcessorDeleteView{handler: handler})
	self.AddToProcessorMap("ListViews", &traceServiceProcessorListViews{handler: handler})
	self.AddToProcessorMap("CreateManualAnnotation", &traceServiceProcessorCreateManualAnnotation{handler: handler})
	self.AddToProcessorMap("UpdateManualAnnotation", &traceServiceProcessorUpdateManualAnnotation{handler: handler})
	self.AddToProcessorMap("DeleteManualAnnotation", &traceServiceProcessorDeleteManualAnnotation{handler: handler})
	self.AddToProcessorMap("ListAnnotations", &traceServiceProcessorListAnnotations{handler: handler})
	return self
}
func (p *TraceServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type traceServiceProcessorListSpans struct {
	handler TraceService
}

func (p *traceServiceProcessorListSpans) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TraceServiceListSpansArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListSpans", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := TraceServiceListSpansResult{}
	var retval *ListSpansResponse
	if retval, err2 = p.handler.ListSpans(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListSpans: "+err2.Error())
		oprot.WriteMessageBegin("ListSpans", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListSpans", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type traceServiceProcessorGetTrace struct {
	handler TraceService
}

func (p *traceServiceProcessorGetTrace) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TraceServiceGetTraceArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetTrace", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := TraceServiceGetTraceResult{}
	var retval *GetTraceResponse
	if retval, err2 = p.handler.GetTrace(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetTrace: "+err2.Error())
		oprot.WriteMessageBegin("GetTrace", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetTrace", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type traceServiceProcessorBatchGetTracesAdvanceInfo struct {
	handler TraceService
}

func (p *traceServiceProcessorBatchGetTracesAdvanceInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TraceServiceBatchGetTracesAdvanceInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BatchGetTracesAdvanceInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := TraceServiceBatchGetTracesAdvanceInfoResult{}
	var retval *BatchGetTracesAdvanceInfoResponse
	if retval, err2 = p.handler.BatchGetTracesAdvanceInfo(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BatchGetTracesAdvanceInfo: "+err2.Error())
		oprot.WriteMessageBegin("BatchGetTracesAdvanceInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BatchGetTracesAdvanceInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type traceServiceProcessorIngestTracesInner struct {
	handler TraceService
}

func (p *traceServiceProcessorIngestTracesInner) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TraceServiceIngestTracesInnerArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("IngestTracesInner", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := TraceServiceIngestTracesInnerResult{}
	var retval *IngestTracesResponse
	if retval, err2 = p.handler.IngestTracesInner(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing IngestTracesInner: "+err2.Error())
		oprot.WriteMessageBegin("IngestTracesInner", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("IngestTracesInner", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type traceServiceProcessorGetTracesMetaInfo struct {
	handler TraceService
}

func (p *traceServiceProcessorGetTracesMetaInfo) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TraceServiceGetTracesMetaInfoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetTracesMetaInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := TraceServiceGetTracesMetaInfoResult{}
	var retval *GetTracesMetaInfoResponse
	if retval, err2 = p.handler.GetTracesMetaInfo(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetTracesMetaInfo: "+err2.Error())
		oprot.WriteMessageBegin("GetTracesMetaInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("GetTracesMetaInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type traceServiceProcessorCreateView struct {
	handler TraceService
}

func (p *traceServiceProcessorCreateView) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TraceServiceCreateViewArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateView", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := TraceServiceCreateViewResult{}
	var retval *CreateViewResponse
	if retval, err2 = p.handler.CreateView(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateView: "+err2.Error())
		oprot.WriteMessageBegin("CreateView", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateView", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type traceServiceProcessorUpdateView struct {
	handler TraceService
}

func (p *traceServiceProcessorUpdateView) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TraceServiceUpdateViewArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateView", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := TraceServiceUpdateViewResult{}
	var retval *UpdateViewResponse
	if retval, err2 = p.handler.UpdateView(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateView: "+err2.Error())
		oprot.WriteMessageBegin("UpdateView", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateView", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type traceServiceProcessorDeleteView struct {
	handler TraceService
}

func (p *traceServiceProcessorDeleteView) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TraceServiceDeleteViewArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteView", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := TraceServiceDeleteViewResult{}
	var retval *DeleteViewResponse
	if retval, err2 = p.handler.DeleteView(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteView: "+err2.Error())
		oprot.WriteMessageBegin("DeleteView", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteView", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type traceServiceProcessorListViews struct {
	handler TraceService
}

func (p *traceServiceProcessorListViews) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TraceServiceListViewsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListViews", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := TraceServiceListViewsResult{}
	var retval *ListViewsResponse
	if retval, err2 = p.handler.ListViews(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListViews: "+err2.Error())
		oprot.WriteMessageBegin("ListViews", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListViews", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type traceServiceProcessorCreateManualAnnotation struct {
	handler TraceService
}

func (p *traceServiceProcessorCreateManualAnnotation) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TraceServiceCreateManualAnnotationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("CreateManualAnnotation", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := TraceServiceCreateManualAnnotationResult{}
	var retval *CreateManualAnnotationResponse
	if retval, err2 = p.handler.CreateManualAnnotation(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing CreateManualAnnotation: "+err2.Error())
		oprot.WriteMessageBegin("CreateManualAnnotation", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("CreateManualAnnotation", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type traceServiceProcessorUpdateManualAnnotation struct {
	handler TraceService
}

func (p *traceServiceProcessorUpdateManualAnnotation) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TraceServiceUpdateManualAnnotationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("UpdateManualAnnotation", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := TraceServiceUpdateManualAnnotationResult{}
	var retval *UpdateManualAnnotationResponse
	if retval, err2 = p.handler.UpdateManualAnnotation(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing UpdateManualAnnotation: "+err2.Error())
		oprot.WriteMessageBegin("UpdateManualAnnotation", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("UpdateManualAnnotation", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type traceServiceProcessorDeleteManualAnnotation struct {
	handler TraceService
}

func (p *traceServiceProcessorDeleteManualAnnotation) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TraceServiceDeleteManualAnnotationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("DeleteManualAnnotation", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := TraceServiceDeleteManualAnnotationResult{}
	var retval *DeleteManualAnnotationResponse
	if retval, err2 = p.handler.DeleteManualAnnotation(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing DeleteManualAnnotation: "+err2.Error())
		oprot.WriteMessageBegin("DeleteManualAnnotation", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("DeleteManualAnnotation", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type traceServiceProcessorListAnnotations struct {
	handler TraceService
}

func (p *traceServiceProcessorListAnnotations) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := TraceServiceListAnnotationsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("ListAnnotations", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := TraceServiceListAnnotationsResult{}
	var retval *ListAnnotationsResponse
	if retval, err2 = p.handler.ListAnnotations(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing ListAnnotations: "+err2.Error())
		oprot.WriteMessageBegin("ListAnnotations", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("ListAnnotations", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type TraceServiceListSpansArgs struct {
	Req *ListSpansRequest `thrift:"req,1" frugal:"1,default,ListSpansRequest"`
}

func NewTraceServiceListSpansArgs() *TraceServiceListSpansArgs {
	return &TraceServiceListSpansArgs{}
}

func (p *TraceServiceListSpansArgs) InitDefault() {
}

var TraceServiceListSpansArgs_Req_DEFAULT *ListSpansRequest

func (p *TraceServiceListSpansArgs) GetReq() (v *ListSpansRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return TraceServiceListSpansArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TraceServiceListSpansArgs) SetReq(val *ListSpansRequest) {
	p.Req = val
}

var fieldIDToName_TraceServiceListSpansArgs = map[int16]string{
	1: "req",
}

func (p *TraceServiceListSpansArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TraceServiceListSpansArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TraceServiceListSpansArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TraceServiceListSpansArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewListSpansRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *TraceServiceListSpansArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListSpans_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TraceServiceListSpansArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TraceServiceListSpansArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TraceServiceListSpansArgs(%+v)", *p)

}

func (p *TraceServiceListSpansArgs) DeepEqual(ano *TraceServiceListSpansArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *TraceServiceListSpansArgs) Field1DeepEqual(src *ListSpansRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type TraceServiceListSpansResult struct {
	Success *ListSpansResponse `thrift:"success,0,optional" frugal:"0,optional,ListSpansResponse"`
}

func NewTraceServiceListSpansResult() *TraceServiceListSpansResult {
	return &TraceServiceListSpansResult{}
}

func (p *TraceServiceListSpansResult) InitDefault() {
}

var TraceServiceListSpansResult_Success_DEFAULT *ListSpansResponse

func (p *TraceServiceListSpansResult) GetSuccess() (v *ListSpansResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return TraceServiceListSpansResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TraceServiceListSpansResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListSpansResponse)
}

var fieldIDToName_TraceServiceListSpansResult = map[int16]string{
	0: "success",
}

func (p *TraceServiceListSpansResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TraceServiceListSpansResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TraceServiceListSpansResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TraceServiceListSpansResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewListSpansResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *TraceServiceListSpansResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListSpans_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TraceServiceListSpansResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *TraceServiceListSpansResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TraceServiceListSpansResult(%+v)", *p)

}

func (p *TraceServiceListSpansResult) DeepEqual(ano *TraceServiceListSpansResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *TraceServiceListSpansResult) Field0DeepEqual(src *ListSpansResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type TraceServiceGetTraceArgs struct {
	Req *GetTraceRequest `thrift:"req,1" frugal:"1,default,GetTraceRequest"`
}

func NewTraceServiceGetTraceArgs() *TraceServiceGetTraceArgs {
	return &TraceServiceGetTraceArgs{}
}

func (p *TraceServiceGetTraceArgs) InitDefault() {
}

var TraceServiceGetTraceArgs_Req_DEFAULT *GetTraceRequest

func (p *TraceServiceGetTraceArgs) GetReq() (v *GetTraceRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return TraceServiceGetTraceArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TraceServiceGetTraceArgs) SetReq(val *GetTraceRequest) {
	p.Req = val
}

var fieldIDToName_TraceServiceGetTraceArgs = map[int16]string{
	1: "req",
}

func (p *TraceServiceGetTraceArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TraceServiceGetTraceArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TraceServiceGetTraceArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TraceServiceGetTraceArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetTraceRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *TraceServiceGetTraceArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTrace_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TraceServiceGetTraceArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TraceServiceGetTraceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TraceServiceGetTraceArgs(%+v)", *p)

}

func (p *TraceServiceGetTraceArgs) DeepEqual(ano *TraceServiceGetTraceArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *TraceServiceGetTraceArgs) Field1DeepEqual(src *GetTraceRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type TraceServiceGetTraceResult struct {
	Success *GetTraceResponse `thrift:"success,0,optional" frugal:"0,optional,GetTraceResponse"`
}

func NewTraceServiceGetTraceResult() *TraceServiceGetTraceResult {
	return &TraceServiceGetTraceResult{}
}

func (p *TraceServiceGetTraceResult) InitDefault() {
}

var TraceServiceGetTraceResult_Success_DEFAULT *GetTraceResponse

func (p *TraceServiceGetTraceResult) GetSuccess() (v *GetTraceResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return TraceServiceGetTraceResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TraceServiceGetTraceResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetTraceResponse)
}

var fieldIDToName_TraceServiceGetTraceResult = map[int16]string{
	0: "success",
}

func (p *TraceServiceGetTraceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TraceServiceGetTraceResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TraceServiceGetTraceResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TraceServiceGetTraceResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetTraceResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *TraceServiceGetTraceResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTrace_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TraceServiceGetTraceResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *TraceServiceGetTraceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TraceServiceGetTraceResult(%+v)", *p)

}

func (p *TraceServiceGetTraceResult) DeepEqual(ano *TraceServiceGetTraceResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *TraceServiceGetTraceResult) Field0DeepEqual(src *GetTraceResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type TraceServiceBatchGetTracesAdvanceInfoArgs struct {
	Req *BatchGetTracesAdvanceInfoRequest `thrift:"req,1" frugal:"1,default,BatchGetTracesAdvanceInfoRequest"`
}

func NewTraceServiceBatchGetTracesAdvanceInfoArgs() *TraceServiceBatchGetTracesAdvanceInfoArgs {
	return &TraceServiceBatchGetTracesAdvanceInfoArgs{}
}

func (p *TraceServiceBatchGetTracesAdvanceInfoArgs) InitDefault() {
}

var TraceServiceBatchGetTracesAdvanceInfoArgs_Req_DEFAULT *BatchGetTracesAdvanceInfoRequest

func (p *TraceServiceBatchGetTracesAdvanceInfoArgs) GetReq() (v *BatchGetTracesAdvanceInfoRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return TraceServiceBatchGetTracesAdvanceInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TraceServiceBatchGetTracesAdvanceInfoArgs) SetReq(val *BatchGetTracesAdvanceInfoRequest) {
	p.Req = val
}

var fieldIDToName_TraceServiceBatchGetTracesAdvanceInfoArgs = map[int16]string{
	1: "req",
}

func (p *TraceServiceBatchGetTracesAdvanceInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TraceServiceBatchGetTracesAdvanceInfoArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TraceServiceBatchGetTracesAdvanceInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TraceServiceBatchGetTracesAdvanceInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewBatchGetTracesAdvanceInfoRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *TraceServiceBatchGetTracesAdvanceInfoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetTracesAdvanceInfo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TraceServiceBatchGetTracesAdvanceInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TraceServiceBatchGetTracesAdvanceInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TraceServiceBatchGetTracesAdvanceInfoArgs(%+v)", *p)

}

func (p *TraceServiceBatchGetTracesAdvanceInfoArgs) DeepEqual(ano *TraceServiceBatchGetTracesAdvanceInfoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *TraceServiceBatchGetTracesAdvanceInfoArgs) Field1DeepEqual(src *BatchGetTracesAdvanceInfoRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type TraceServiceBatchGetTracesAdvanceInfoResult struct {
	Success *BatchGetTracesAdvanceInfoResponse `thrift:"success,0,optional" frugal:"0,optional,BatchGetTracesAdvanceInfoResponse"`
}

func NewTraceServiceBatchGetTracesAdvanceInfoResult() *TraceServiceBatchGetTracesAdvanceInfoResult {
	return &TraceServiceBatchGetTracesAdvanceInfoResult{}
}

func (p *TraceServiceBatchGetTracesAdvanceInfoResult) InitDefault() {
}

var TraceServiceBatchGetTracesAdvanceInfoResult_Success_DEFAULT *BatchGetTracesAdvanceInfoResponse

func (p *TraceServiceBatchGetTracesAdvanceInfoResult) GetSuccess() (v *BatchGetTracesAdvanceInfoResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return TraceServiceBatchGetTracesAdvanceInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TraceServiceBatchGetTracesAdvanceInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*BatchGetTracesAdvanceInfoResponse)
}

var fieldIDToName_TraceServiceBatchGetTracesAdvanceInfoResult = map[int16]string{
	0: "success",
}

func (p *TraceServiceBatchGetTracesAdvanceInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TraceServiceBatchGetTracesAdvanceInfoResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TraceServiceBatchGetTracesAdvanceInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TraceServiceBatchGetTracesAdvanceInfoResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewBatchGetTracesAdvanceInfoResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *TraceServiceBatchGetTracesAdvanceInfoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BatchGetTracesAdvanceInfo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TraceServiceBatchGetTracesAdvanceInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *TraceServiceBatchGetTracesAdvanceInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TraceServiceBatchGetTracesAdvanceInfoResult(%+v)", *p)

}

func (p *TraceServiceBatchGetTracesAdvanceInfoResult) DeepEqual(ano *TraceServiceBatchGetTracesAdvanceInfoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *TraceServiceBatchGetTracesAdvanceInfoResult) Field0DeepEqual(src *BatchGetTracesAdvanceInfoResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type TraceServiceIngestTracesInnerArgs struct {
	Req *IngestTracesRequest `thrift:"req,1" frugal:"1,default,IngestTracesRequest"`
}

func NewTraceServiceIngestTracesInnerArgs() *TraceServiceIngestTracesInnerArgs {
	return &TraceServiceIngestTracesInnerArgs{}
}

func (p *TraceServiceIngestTracesInnerArgs) InitDefault() {
}

var TraceServiceIngestTracesInnerArgs_Req_DEFAULT *IngestTracesRequest

func (p *TraceServiceIngestTracesInnerArgs) GetReq() (v *IngestTracesRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return TraceServiceIngestTracesInnerArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TraceServiceIngestTracesInnerArgs) SetReq(val *IngestTracesRequest) {
	p.Req = val
}

var fieldIDToName_TraceServiceIngestTracesInnerArgs = map[int16]string{
	1: "req",
}

func (p *TraceServiceIngestTracesInnerArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TraceServiceIngestTracesInnerArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TraceServiceIngestTracesInnerArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TraceServiceIngestTracesInnerArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewIngestTracesRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *TraceServiceIngestTracesInnerArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("IngestTracesInner_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TraceServiceIngestTracesInnerArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TraceServiceIngestTracesInnerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TraceServiceIngestTracesInnerArgs(%+v)", *p)

}

func (p *TraceServiceIngestTracesInnerArgs) DeepEqual(ano *TraceServiceIngestTracesInnerArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *TraceServiceIngestTracesInnerArgs) Field1DeepEqual(src *IngestTracesRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type TraceServiceIngestTracesInnerResult struct {
	Success *IngestTracesResponse `thrift:"success,0,optional" frugal:"0,optional,IngestTracesResponse"`
}

func NewTraceServiceIngestTracesInnerResult() *TraceServiceIngestTracesInnerResult {
	return &TraceServiceIngestTracesInnerResult{}
}

func (p *TraceServiceIngestTracesInnerResult) InitDefault() {
}

var TraceServiceIngestTracesInnerResult_Success_DEFAULT *IngestTracesResponse

func (p *TraceServiceIngestTracesInnerResult) GetSuccess() (v *IngestTracesResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return TraceServiceIngestTracesInnerResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TraceServiceIngestTracesInnerResult) SetSuccess(x interface{}) {
	p.Success = x.(*IngestTracesResponse)
}

var fieldIDToName_TraceServiceIngestTracesInnerResult = map[int16]string{
	0: "success",
}

func (p *TraceServiceIngestTracesInnerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TraceServiceIngestTracesInnerResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TraceServiceIngestTracesInnerResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TraceServiceIngestTracesInnerResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewIngestTracesResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *TraceServiceIngestTracesInnerResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("IngestTracesInner_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TraceServiceIngestTracesInnerResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *TraceServiceIngestTracesInnerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TraceServiceIngestTracesInnerResult(%+v)", *p)

}

func (p *TraceServiceIngestTracesInnerResult) DeepEqual(ano *TraceServiceIngestTracesInnerResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *TraceServiceIngestTracesInnerResult) Field0DeepEqual(src *IngestTracesResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type TraceServiceGetTracesMetaInfoArgs struct {
	Req *GetTracesMetaInfoRequest `thrift:"req,1" frugal:"1,default,GetTracesMetaInfoRequest"`
}

func NewTraceServiceGetTracesMetaInfoArgs() *TraceServiceGetTracesMetaInfoArgs {
	return &TraceServiceGetTracesMetaInfoArgs{}
}

func (p *TraceServiceGetTracesMetaInfoArgs) InitDefault() {
}

var TraceServiceGetTracesMetaInfoArgs_Req_DEFAULT *GetTracesMetaInfoRequest

func (p *TraceServiceGetTracesMetaInfoArgs) GetReq() (v *GetTracesMetaInfoRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return TraceServiceGetTracesMetaInfoArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TraceServiceGetTracesMetaInfoArgs) SetReq(val *GetTracesMetaInfoRequest) {
	p.Req = val
}

var fieldIDToName_TraceServiceGetTracesMetaInfoArgs = map[int16]string{
	1: "req",
}

func (p *TraceServiceGetTracesMetaInfoArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TraceServiceGetTracesMetaInfoArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TraceServiceGetTracesMetaInfoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TraceServiceGetTracesMetaInfoArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewGetTracesMetaInfoRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *TraceServiceGetTracesMetaInfoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTracesMetaInfo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TraceServiceGetTracesMetaInfoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TraceServiceGetTracesMetaInfoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TraceServiceGetTracesMetaInfoArgs(%+v)", *p)

}

func (p *TraceServiceGetTracesMetaInfoArgs) DeepEqual(ano *TraceServiceGetTracesMetaInfoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *TraceServiceGetTracesMetaInfoArgs) Field1DeepEqual(src *GetTracesMetaInfoRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type TraceServiceGetTracesMetaInfoResult struct {
	Success *GetTracesMetaInfoResponse `thrift:"success,0,optional" frugal:"0,optional,GetTracesMetaInfoResponse"`
}

func NewTraceServiceGetTracesMetaInfoResult() *TraceServiceGetTracesMetaInfoResult {
	return &TraceServiceGetTracesMetaInfoResult{}
}

func (p *TraceServiceGetTracesMetaInfoResult) InitDefault() {
}

var TraceServiceGetTracesMetaInfoResult_Success_DEFAULT *GetTracesMetaInfoResponse

func (p *TraceServiceGetTracesMetaInfoResult) GetSuccess() (v *GetTracesMetaInfoResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return TraceServiceGetTracesMetaInfoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TraceServiceGetTracesMetaInfoResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetTracesMetaInfoResponse)
}

var fieldIDToName_TraceServiceGetTracesMetaInfoResult = map[int16]string{
	0: "success",
}

func (p *TraceServiceGetTracesMetaInfoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TraceServiceGetTracesMetaInfoResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TraceServiceGetTracesMetaInfoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TraceServiceGetTracesMetaInfoResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewGetTracesMetaInfoResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *TraceServiceGetTracesMetaInfoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("GetTracesMetaInfo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TraceServiceGetTracesMetaInfoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *TraceServiceGetTracesMetaInfoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TraceServiceGetTracesMetaInfoResult(%+v)", *p)

}

func (p *TraceServiceGetTracesMetaInfoResult) DeepEqual(ano *TraceServiceGetTracesMetaInfoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *TraceServiceGetTracesMetaInfoResult) Field0DeepEqual(src *GetTracesMetaInfoResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type TraceServiceCreateViewArgs struct {
	Req *CreateViewRequest `thrift:"req,1" frugal:"1,default,CreateViewRequest"`
}

func NewTraceServiceCreateViewArgs() *TraceServiceCreateViewArgs {
	return &TraceServiceCreateViewArgs{}
}

func (p *TraceServiceCreateViewArgs) InitDefault() {
}

var TraceServiceCreateViewArgs_Req_DEFAULT *CreateViewRequest

func (p *TraceServiceCreateViewArgs) GetReq() (v *CreateViewRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return TraceServiceCreateViewArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TraceServiceCreateViewArgs) SetReq(val *CreateViewRequest) {
	p.Req = val
}

var fieldIDToName_TraceServiceCreateViewArgs = map[int16]string{
	1: "req",
}

func (p *TraceServiceCreateViewArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TraceServiceCreateViewArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TraceServiceCreateViewArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TraceServiceCreateViewArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateViewRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *TraceServiceCreateViewArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateView_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TraceServiceCreateViewArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TraceServiceCreateViewArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TraceServiceCreateViewArgs(%+v)", *p)

}

func (p *TraceServiceCreateViewArgs) DeepEqual(ano *TraceServiceCreateViewArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *TraceServiceCreateViewArgs) Field1DeepEqual(src *CreateViewRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type TraceServiceCreateViewResult struct {
	Success *CreateViewResponse `thrift:"success,0,optional" frugal:"0,optional,CreateViewResponse"`
}

func NewTraceServiceCreateViewResult() *TraceServiceCreateViewResult {
	return &TraceServiceCreateViewResult{}
}

func (p *TraceServiceCreateViewResult) InitDefault() {
}

var TraceServiceCreateViewResult_Success_DEFAULT *CreateViewResponse

func (p *TraceServiceCreateViewResult) GetSuccess() (v *CreateViewResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return TraceServiceCreateViewResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TraceServiceCreateViewResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateViewResponse)
}

var fieldIDToName_TraceServiceCreateViewResult = map[int16]string{
	0: "success",
}

func (p *TraceServiceCreateViewResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TraceServiceCreateViewResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TraceServiceCreateViewResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TraceServiceCreateViewResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreateViewResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *TraceServiceCreateViewResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateView_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TraceServiceCreateViewResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *TraceServiceCreateViewResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TraceServiceCreateViewResult(%+v)", *p)

}

func (p *TraceServiceCreateViewResult) DeepEqual(ano *TraceServiceCreateViewResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *TraceServiceCreateViewResult) Field0DeepEqual(src *CreateViewResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type TraceServiceUpdateViewArgs struct {
	Req *UpdateViewRequest `thrift:"req,1" frugal:"1,default,UpdateViewRequest"`
}

func NewTraceServiceUpdateViewArgs() *TraceServiceUpdateViewArgs {
	return &TraceServiceUpdateViewArgs{}
}

func (p *TraceServiceUpdateViewArgs) InitDefault() {
}

var TraceServiceUpdateViewArgs_Req_DEFAULT *UpdateViewRequest

func (p *TraceServiceUpdateViewArgs) GetReq() (v *UpdateViewRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return TraceServiceUpdateViewArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TraceServiceUpdateViewArgs) SetReq(val *UpdateViewRequest) {
	p.Req = val
}

var fieldIDToName_TraceServiceUpdateViewArgs = map[int16]string{
	1: "req",
}

func (p *TraceServiceUpdateViewArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TraceServiceUpdateViewArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TraceServiceUpdateViewArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TraceServiceUpdateViewArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUpdateViewRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *TraceServiceUpdateViewArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateView_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TraceServiceUpdateViewArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TraceServiceUpdateViewArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TraceServiceUpdateViewArgs(%+v)", *p)

}

func (p *TraceServiceUpdateViewArgs) DeepEqual(ano *TraceServiceUpdateViewArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *TraceServiceUpdateViewArgs) Field1DeepEqual(src *UpdateViewRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type TraceServiceUpdateViewResult struct {
	Success *UpdateViewResponse `thrift:"success,0,optional" frugal:"0,optional,UpdateViewResponse"`
}

func NewTraceServiceUpdateViewResult() *TraceServiceUpdateViewResult {
	return &TraceServiceUpdateViewResult{}
}

func (p *TraceServiceUpdateViewResult) InitDefault() {
}

var TraceServiceUpdateViewResult_Success_DEFAULT *UpdateViewResponse

func (p *TraceServiceUpdateViewResult) GetSuccess() (v *UpdateViewResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return TraceServiceUpdateViewResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TraceServiceUpdateViewResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateViewResponse)
}

var fieldIDToName_TraceServiceUpdateViewResult = map[int16]string{
	0: "success",
}

func (p *TraceServiceUpdateViewResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TraceServiceUpdateViewResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TraceServiceUpdateViewResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TraceServiceUpdateViewResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewUpdateViewResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *TraceServiceUpdateViewResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateView_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TraceServiceUpdateViewResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *TraceServiceUpdateViewResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TraceServiceUpdateViewResult(%+v)", *p)

}

func (p *TraceServiceUpdateViewResult) DeepEqual(ano *TraceServiceUpdateViewResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *TraceServiceUpdateViewResult) Field0DeepEqual(src *UpdateViewResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type TraceServiceDeleteViewArgs struct {
	Req *DeleteViewRequest `thrift:"req,1" frugal:"1,default,DeleteViewRequest"`
}

func NewTraceServiceDeleteViewArgs() *TraceServiceDeleteViewArgs {
	return &TraceServiceDeleteViewArgs{}
}

func (p *TraceServiceDeleteViewArgs) InitDefault() {
}

var TraceServiceDeleteViewArgs_Req_DEFAULT *DeleteViewRequest

func (p *TraceServiceDeleteViewArgs) GetReq() (v *DeleteViewRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return TraceServiceDeleteViewArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TraceServiceDeleteViewArgs) SetReq(val *DeleteViewRequest) {
	p.Req = val
}

var fieldIDToName_TraceServiceDeleteViewArgs = map[int16]string{
	1: "req",
}

func (p *TraceServiceDeleteViewArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TraceServiceDeleteViewArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TraceServiceDeleteViewArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TraceServiceDeleteViewArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewDeleteViewRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *TraceServiceDeleteViewArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteView_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TraceServiceDeleteViewArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TraceServiceDeleteViewArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TraceServiceDeleteViewArgs(%+v)", *p)

}

func (p *TraceServiceDeleteViewArgs) DeepEqual(ano *TraceServiceDeleteViewArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *TraceServiceDeleteViewArgs) Field1DeepEqual(src *DeleteViewRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type TraceServiceDeleteViewResult struct {
	Success *DeleteViewResponse `thrift:"success,0,optional" frugal:"0,optional,DeleteViewResponse"`
}

func NewTraceServiceDeleteViewResult() *TraceServiceDeleteViewResult {
	return &TraceServiceDeleteViewResult{}
}

func (p *TraceServiceDeleteViewResult) InitDefault() {
}

var TraceServiceDeleteViewResult_Success_DEFAULT *DeleteViewResponse

func (p *TraceServiceDeleteViewResult) GetSuccess() (v *DeleteViewResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return TraceServiceDeleteViewResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TraceServiceDeleteViewResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteViewResponse)
}

var fieldIDToName_TraceServiceDeleteViewResult = map[int16]string{
	0: "success",
}

func (p *TraceServiceDeleteViewResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TraceServiceDeleteViewResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TraceServiceDeleteViewResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TraceServiceDeleteViewResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewDeleteViewResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *TraceServiceDeleteViewResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteView_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TraceServiceDeleteViewResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *TraceServiceDeleteViewResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TraceServiceDeleteViewResult(%+v)", *p)

}

func (p *TraceServiceDeleteViewResult) DeepEqual(ano *TraceServiceDeleteViewResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *TraceServiceDeleteViewResult) Field0DeepEqual(src *DeleteViewResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type TraceServiceListViewsArgs struct {
	Req *ListViewsRequest `thrift:"req,1" frugal:"1,default,ListViewsRequest"`
}

func NewTraceServiceListViewsArgs() *TraceServiceListViewsArgs {
	return &TraceServiceListViewsArgs{}
}

func (p *TraceServiceListViewsArgs) InitDefault() {
}

var TraceServiceListViewsArgs_Req_DEFAULT *ListViewsRequest

func (p *TraceServiceListViewsArgs) GetReq() (v *ListViewsRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return TraceServiceListViewsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TraceServiceListViewsArgs) SetReq(val *ListViewsRequest) {
	p.Req = val
}

var fieldIDToName_TraceServiceListViewsArgs = map[int16]string{
	1: "req",
}

func (p *TraceServiceListViewsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TraceServiceListViewsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TraceServiceListViewsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TraceServiceListViewsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewListViewsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *TraceServiceListViewsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListViews_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TraceServiceListViewsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TraceServiceListViewsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TraceServiceListViewsArgs(%+v)", *p)

}

func (p *TraceServiceListViewsArgs) DeepEqual(ano *TraceServiceListViewsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *TraceServiceListViewsArgs) Field1DeepEqual(src *ListViewsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type TraceServiceListViewsResult struct {
	Success *ListViewsResponse `thrift:"success,0,optional" frugal:"0,optional,ListViewsResponse"`
}

func NewTraceServiceListViewsResult() *TraceServiceListViewsResult {
	return &TraceServiceListViewsResult{}
}

func (p *TraceServiceListViewsResult) InitDefault() {
}

var TraceServiceListViewsResult_Success_DEFAULT *ListViewsResponse

func (p *TraceServiceListViewsResult) GetSuccess() (v *ListViewsResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return TraceServiceListViewsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TraceServiceListViewsResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListViewsResponse)
}

var fieldIDToName_TraceServiceListViewsResult = map[int16]string{
	0: "success",
}

func (p *TraceServiceListViewsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TraceServiceListViewsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TraceServiceListViewsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TraceServiceListViewsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewListViewsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *TraceServiceListViewsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListViews_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TraceServiceListViewsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *TraceServiceListViewsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TraceServiceListViewsResult(%+v)", *p)

}

func (p *TraceServiceListViewsResult) DeepEqual(ano *TraceServiceListViewsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *TraceServiceListViewsResult) Field0DeepEqual(src *ListViewsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type TraceServiceCreateManualAnnotationArgs struct {
	Req *CreateManualAnnotationRequest `thrift:"req,1" frugal:"1,default,CreateManualAnnotationRequest"`
}

func NewTraceServiceCreateManualAnnotationArgs() *TraceServiceCreateManualAnnotationArgs {
	return &TraceServiceCreateManualAnnotationArgs{}
}

func (p *TraceServiceCreateManualAnnotationArgs) InitDefault() {
}

var TraceServiceCreateManualAnnotationArgs_Req_DEFAULT *CreateManualAnnotationRequest

func (p *TraceServiceCreateManualAnnotationArgs) GetReq() (v *CreateManualAnnotationRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return TraceServiceCreateManualAnnotationArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TraceServiceCreateManualAnnotationArgs) SetReq(val *CreateManualAnnotationRequest) {
	p.Req = val
}

var fieldIDToName_TraceServiceCreateManualAnnotationArgs = map[int16]string{
	1: "req",
}

func (p *TraceServiceCreateManualAnnotationArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TraceServiceCreateManualAnnotationArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TraceServiceCreateManualAnnotationArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TraceServiceCreateManualAnnotationArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewCreateManualAnnotationRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *TraceServiceCreateManualAnnotationArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateManualAnnotation_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TraceServiceCreateManualAnnotationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TraceServiceCreateManualAnnotationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TraceServiceCreateManualAnnotationArgs(%+v)", *p)

}

func (p *TraceServiceCreateManualAnnotationArgs) DeepEqual(ano *TraceServiceCreateManualAnnotationArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *TraceServiceCreateManualAnnotationArgs) Field1DeepEqual(src *CreateManualAnnotationRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type TraceServiceCreateManualAnnotationResult struct {
	Success *CreateManualAnnotationResponse `thrift:"success,0,optional" frugal:"0,optional,CreateManualAnnotationResponse"`
}

func NewTraceServiceCreateManualAnnotationResult() *TraceServiceCreateManualAnnotationResult {
	return &TraceServiceCreateManualAnnotationResult{}
}

func (p *TraceServiceCreateManualAnnotationResult) InitDefault() {
}

var TraceServiceCreateManualAnnotationResult_Success_DEFAULT *CreateManualAnnotationResponse

func (p *TraceServiceCreateManualAnnotationResult) GetSuccess() (v *CreateManualAnnotationResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return TraceServiceCreateManualAnnotationResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TraceServiceCreateManualAnnotationResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateManualAnnotationResponse)
}

var fieldIDToName_TraceServiceCreateManualAnnotationResult = map[int16]string{
	0: "success",
}

func (p *TraceServiceCreateManualAnnotationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TraceServiceCreateManualAnnotationResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TraceServiceCreateManualAnnotationResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TraceServiceCreateManualAnnotationResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewCreateManualAnnotationResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *TraceServiceCreateManualAnnotationResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("CreateManualAnnotation_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TraceServiceCreateManualAnnotationResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *TraceServiceCreateManualAnnotationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TraceServiceCreateManualAnnotationResult(%+v)", *p)

}

func (p *TraceServiceCreateManualAnnotationResult) DeepEqual(ano *TraceServiceCreateManualAnnotationResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *TraceServiceCreateManualAnnotationResult) Field0DeepEqual(src *CreateManualAnnotationResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type TraceServiceUpdateManualAnnotationArgs struct {
	Req *UpdateManualAnnotationRequest `thrift:"req,1" frugal:"1,default,UpdateManualAnnotationRequest"`
}

func NewTraceServiceUpdateManualAnnotationArgs() *TraceServiceUpdateManualAnnotationArgs {
	return &TraceServiceUpdateManualAnnotationArgs{}
}

func (p *TraceServiceUpdateManualAnnotationArgs) InitDefault() {
}

var TraceServiceUpdateManualAnnotationArgs_Req_DEFAULT *UpdateManualAnnotationRequest

func (p *TraceServiceUpdateManualAnnotationArgs) GetReq() (v *UpdateManualAnnotationRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return TraceServiceUpdateManualAnnotationArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TraceServiceUpdateManualAnnotationArgs) SetReq(val *UpdateManualAnnotationRequest) {
	p.Req = val
}

var fieldIDToName_TraceServiceUpdateManualAnnotationArgs = map[int16]string{
	1: "req",
}

func (p *TraceServiceUpdateManualAnnotationArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TraceServiceUpdateManualAnnotationArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TraceServiceUpdateManualAnnotationArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TraceServiceUpdateManualAnnotationArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewUpdateManualAnnotationRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *TraceServiceUpdateManualAnnotationArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateManualAnnotation_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TraceServiceUpdateManualAnnotationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TraceServiceUpdateManualAnnotationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TraceServiceUpdateManualAnnotationArgs(%+v)", *p)

}

func (p *TraceServiceUpdateManualAnnotationArgs) DeepEqual(ano *TraceServiceUpdateManualAnnotationArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *TraceServiceUpdateManualAnnotationArgs) Field1DeepEqual(src *UpdateManualAnnotationRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type TraceServiceUpdateManualAnnotationResult struct {
	Success *UpdateManualAnnotationResponse `thrift:"success,0,optional" frugal:"0,optional,UpdateManualAnnotationResponse"`
}

func NewTraceServiceUpdateManualAnnotationResult() *TraceServiceUpdateManualAnnotationResult {
	return &TraceServiceUpdateManualAnnotationResult{}
}

func (p *TraceServiceUpdateManualAnnotationResult) InitDefault() {
}

var TraceServiceUpdateManualAnnotationResult_Success_DEFAULT *UpdateManualAnnotationResponse

func (p *TraceServiceUpdateManualAnnotationResult) GetSuccess() (v *UpdateManualAnnotationResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return TraceServiceUpdateManualAnnotationResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TraceServiceUpdateManualAnnotationResult) SetSuccess(x interface{}) {
	p.Success = x.(*UpdateManualAnnotationResponse)
}

var fieldIDToName_TraceServiceUpdateManualAnnotationResult = map[int16]string{
	0: "success",
}

func (p *TraceServiceUpdateManualAnnotationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TraceServiceUpdateManualAnnotationResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TraceServiceUpdateManualAnnotationResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TraceServiceUpdateManualAnnotationResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewUpdateManualAnnotationResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *TraceServiceUpdateManualAnnotationResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("UpdateManualAnnotation_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TraceServiceUpdateManualAnnotationResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *TraceServiceUpdateManualAnnotationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TraceServiceUpdateManualAnnotationResult(%+v)", *p)

}

func (p *TraceServiceUpdateManualAnnotationResult) DeepEqual(ano *TraceServiceUpdateManualAnnotationResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *TraceServiceUpdateManualAnnotationResult) Field0DeepEqual(src *UpdateManualAnnotationResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type TraceServiceDeleteManualAnnotationArgs struct {
	Req *DeleteManualAnnotationRequest `thrift:"req,1" frugal:"1,default,DeleteManualAnnotationRequest"`
}

func NewTraceServiceDeleteManualAnnotationArgs() *TraceServiceDeleteManualAnnotationArgs {
	return &TraceServiceDeleteManualAnnotationArgs{}
}

func (p *TraceServiceDeleteManualAnnotationArgs) InitDefault() {
}

var TraceServiceDeleteManualAnnotationArgs_Req_DEFAULT *DeleteManualAnnotationRequest

func (p *TraceServiceDeleteManualAnnotationArgs) GetReq() (v *DeleteManualAnnotationRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return TraceServiceDeleteManualAnnotationArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TraceServiceDeleteManualAnnotationArgs) SetReq(val *DeleteManualAnnotationRequest) {
	p.Req = val
}

var fieldIDToName_TraceServiceDeleteManualAnnotationArgs = map[int16]string{
	1: "req",
}

func (p *TraceServiceDeleteManualAnnotationArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TraceServiceDeleteManualAnnotationArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TraceServiceDeleteManualAnnotationArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TraceServiceDeleteManualAnnotationArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewDeleteManualAnnotationRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *TraceServiceDeleteManualAnnotationArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteManualAnnotation_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TraceServiceDeleteManualAnnotationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TraceServiceDeleteManualAnnotationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TraceServiceDeleteManualAnnotationArgs(%+v)", *p)

}

func (p *TraceServiceDeleteManualAnnotationArgs) DeepEqual(ano *TraceServiceDeleteManualAnnotationArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *TraceServiceDeleteManualAnnotationArgs) Field1DeepEqual(src *DeleteManualAnnotationRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type TraceServiceDeleteManualAnnotationResult struct {
	Success *DeleteManualAnnotationResponse `thrift:"success,0,optional" frugal:"0,optional,DeleteManualAnnotationResponse"`
}

func NewTraceServiceDeleteManualAnnotationResult() *TraceServiceDeleteManualAnnotationResult {
	return &TraceServiceDeleteManualAnnotationResult{}
}

func (p *TraceServiceDeleteManualAnnotationResult) InitDefault() {
}

var TraceServiceDeleteManualAnnotationResult_Success_DEFAULT *DeleteManualAnnotationResponse

func (p *TraceServiceDeleteManualAnnotationResult) GetSuccess() (v *DeleteManualAnnotationResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return TraceServiceDeleteManualAnnotationResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TraceServiceDeleteManualAnnotationResult) SetSuccess(x interface{}) {
	p.Success = x.(*DeleteManualAnnotationResponse)
}

var fieldIDToName_TraceServiceDeleteManualAnnotationResult = map[int16]string{
	0: "success",
}

func (p *TraceServiceDeleteManualAnnotationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TraceServiceDeleteManualAnnotationResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TraceServiceDeleteManualAnnotationResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TraceServiceDeleteManualAnnotationResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewDeleteManualAnnotationResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *TraceServiceDeleteManualAnnotationResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("DeleteManualAnnotation_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TraceServiceDeleteManualAnnotationResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *TraceServiceDeleteManualAnnotationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TraceServiceDeleteManualAnnotationResult(%+v)", *p)

}

func (p *TraceServiceDeleteManualAnnotationResult) DeepEqual(ano *TraceServiceDeleteManualAnnotationResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *TraceServiceDeleteManualAnnotationResult) Field0DeepEqual(src *DeleteManualAnnotationResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type TraceServiceListAnnotationsArgs struct {
	Req *ListAnnotationsRequest `thrift:"req,1" frugal:"1,default,ListAnnotationsRequest"`
}

func NewTraceServiceListAnnotationsArgs() *TraceServiceListAnnotationsArgs {
	return &TraceServiceListAnnotationsArgs{}
}

func (p *TraceServiceListAnnotationsArgs) InitDefault() {
}

var TraceServiceListAnnotationsArgs_Req_DEFAULT *ListAnnotationsRequest

func (p *TraceServiceListAnnotationsArgs) GetReq() (v *ListAnnotationsRequest) {
	if p == nil {
		return
	}
	if !p.IsSetReq() {
		return TraceServiceListAnnotationsArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TraceServiceListAnnotationsArgs) SetReq(val *ListAnnotationsRequest) {
	p.Req = val
}

var fieldIDToName_TraceServiceListAnnotationsArgs = map[int16]string{
	1: "req",
}

func (p *TraceServiceListAnnotationsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TraceServiceListAnnotationsArgs) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TraceServiceListAnnotationsArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TraceServiceListAnnotationsArgs) ReadField1(iprot thrift.TProtocol) error {
	_field := NewListAnnotationsRequest()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Req = _field
	return nil
}

func (p *TraceServiceListAnnotationsArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListAnnotations_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TraceServiceListAnnotationsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *TraceServiceListAnnotationsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TraceServiceListAnnotationsArgs(%+v)", *p)

}

func (p *TraceServiceListAnnotationsArgs) DeepEqual(ano *TraceServiceListAnnotationsArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *TraceServiceListAnnotationsArgs) Field1DeepEqual(src *ListAnnotationsRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type TraceServiceListAnnotationsResult struct {
	Success *ListAnnotationsResponse `thrift:"success,0,optional" frugal:"0,optional,ListAnnotationsResponse"`
}

func NewTraceServiceListAnnotationsResult() *TraceServiceListAnnotationsResult {
	return &TraceServiceListAnnotationsResult{}
}

func (p *TraceServiceListAnnotationsResult) InitDefault() {
}

var TraceServiceListAnnotationsResult_Success_DEFAULT *ListAnnotationsResponse

func (p *TraceServiceListAnnotationsResult) GetSuccess() (v *ListAnnotationsResponse) {
	if p == nil {
		return
	}
	if !p.IsSetSuccess() {
		return TraceServiceListAnnotationsResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TraceServiceListAnnotationsResult) SetSuccess(x interface{}) {
	p.Success = x.(*ListAnnotationsResponse)
}

var fieldIDToName_TraceServiceListAnnotationsResult = map[int16]string{
	0: "success",
}

func (p *TraceServiceListAnnotationsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TraceServiceListAnnotationsResult) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_TraceServiceListAnnotationsResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *TraceServiceListAnnotationsResult) ReadField0(iprot thrift.TProtocol) error {
	_field := NewListAnnotationsResponse()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Success = _field
	return nil
}

func (p *TraceServiceListAnnotationsResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ListAnnotations_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *TraceServiceListAnnotationsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *TraceServiceListAnnotationsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TraceServiceListAnnotationsResult(%+v)", *p)

}

func (p *TraceServiceListAnnotationsResult) DeepEqual(ano *TraceServiceListAnnotationsResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *TraceServiceListAnnotationsResult) Field0DeepEqual(src *ListAnnotationsResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
