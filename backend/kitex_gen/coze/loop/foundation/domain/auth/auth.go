// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package auth

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

const (
	AuthEntityTypeSpace = "Space"

	AuthEntityTypePrompt = "Prompt"

	AuthEntityTypeEvaluationExperiment = "EvaluationExperiment"

	AuthEntityTypeEvaluationSet = "EvaluationSet"

	AuthEntityTypeEvaluator = "Evaluator"

	AuthEntityTypeEvaluationTarget = "EvaluationTarget"

	AuthEntityTypeTraceView = "TraceView"

	AuthEntityTypeModel = "Model"

	AuthEntityTypeAnnotation = "Annotation"
)

// 主体类型
type AuthPrincipalType int64

const (
	AuthPrincipalType_Undefined AuthPrincipalType = 0
	// 用户
	AuthPrincipalType_User AuthPrincipalType = 1
	// 部门
	AuthPrincipalType_Department AuthPrincipalType = 2
	// 用户身份标识
	AuthPrincipalType_CozeIdentifier AuthPrincipalType = 3
)

func (p AuthPrincipalType) String() string {
	switch p {
	case AuthPrincipalType_Undefined:
		return "Undefined"
	case AuthPrincipalType_User:
		return "User"
	case AuthPrincipalType_Department:
		return "Department"
	case AuthPrincipalType_CozeIdentifier:
		return "CozeIdentifier"
	}
	return "<UNSET>"
}

func AuthPrincipalTypeFromString(s string) (AuthPrincipalType, error) {
	switch s {
	case "Undefined":
		return AuthPrincipalType_Undefined, nil
	case "User":
		return AuthPrincipalType_User, nil
	case "Department":
		return AuthPrincipalType_Department, nil
	case "CozeIdentifier":
		return AuthPrincipalType_CozeIdentifier, nil
	}
	return AuthPrincipalType(0), fmt.Errorf("not a valid AuthPrincipalType string")
}

func AuthPrincipalTypePtr(v AuthPrincipalType) *AuthPrincipalType { return &v }
func (p *AuthPrincipalType) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = AuthPrincipalType(result.Int64)
	return
}

func (p *AuthPrincipalType) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

// 鉴权实体类型
type AuthEntityType = string

// 鉴权用户
type AuthUser struct {
	// 邮箱前缀，与用户ID传一个即可
	SsoUsername *string `thrift:"sso_username,1,optional" frugal:"1,optional,string" form:"sso_username" json:"sso_username,omitempty" query:"sso_username"`
	// 用户ID
	UserID *string `thrift:"user_id,2,optional" frugal:"2,optional,string" form:"user_id" json:"user_id,omitempty" query:"user_id"`
}

func NewAuthUser() *AuthUser {
	return &AuthUser{}
}

func (p *AuthUser) InitDefault() {
}

var AuthUser_SsoUsername_DEFAULT string

func (p *AuthUser) GetSsoUsername() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetSsoUsername() {
		return AuthUser_SsoUsername_DEFAULT
	}
	return *p.SsoUsername
}

var AuthUser_UserID_DEFAULT string

func (p *AuthUser) GetUserID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetUserID() {
		return AuthUser_UserID_DEFAULT
	}
	return *p.UserID
}
func (p *AuthUser) SetSsoUsername(val *string) {
	p.SsoUsername = val
}
func (p *AuthUser) SetUserID(val *string) {
	p.UserID = val
}

var fieldIDToName_AuthUser = map[int16]string{
	1: "sso_username",
	2: "user_id",
}

func (p *AuthUser) IsSetSsoUsername() bool {
	return p.SsoUsername != nil
}

func (p *AuthUser) IsSetUserID() bool {
	return p.UserID != nil
}

func (p *AuthUser) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AuthUser[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AuthUser) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SsoUsername = _field
	return nil
}
func (p *AuthUser) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.UserID = _field
	return nil
}

func (p *AuthUser) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AuthUser"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AuthUser) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSsoUsername() {
		if err = oprot.WriteFieldBegin("sso_username", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.SsoUsername); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *AuthUser) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetUserID() {
		if err = oprot.WriteFieldBegin("user_id", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.UserID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *AuthUser) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthUser(%+v)", *p)

}

func (p *AuthUser) DeepEqual(ano *AuthUser) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SsoUsername) {
		return false
	}
	if !p.Field2DeepEqual(ano.UserID) {
		return false
	}
	return true
}

func (p *AuthUser) Field1DeepEqual(src *string) bool {

	if p.SsoUsername == src {
		return true
	} else if p.SsoUsername == nil || src == nil {
		return false
	}
	if strings.Compare(*p.SsoUsername, *src) != 0 {
		return false
	}
	return true
}
func (p *AuthUser) Field2DeepEqual(src *string) bool {

	if p.UserID == src {
		return true
	} else if p.UserID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.UserID, *src) != 0 {
		return false
	}
	return true
}

// 鉴权部门
type AuthDepartment struct {
	// 部门ID
	DepartmentID *string `thrift:"department_id,1,optional" frugal:"1,optional,string" form:"department_id" json:"department_id,omitempty" query:"department_id"`
}

func NewAuthDepartment() *AuthDepartment {
	return &AuthDepartment{}
}

func (p *AuthDepartment) InitDefault() {
}

var AuthDepartment_DepartmentID_DEFAULT string

func (p *AuthDepartment) GetDepartmentID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetDepartmentID() {
		return AuthDepartment_DepartmentID_DEFAULT
	}
	return *p.DepartmentID
}
func (p *AuthDepartment) SetDepartmentID(val *string) {
	p.DepartmentID = val
}

var fieldIDToName_AuthDepartment = map[int16]string{
	1: "department_id",
}

func (p *AuthDepartment) IsSetDepartmentID() bool {
	return p.DepartmentID != nil
}

func (p *AuthDepartment) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AuthDepartment[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AuthDepartment) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.DepartmentID = _field
	return nil
}

func (p *AuthDepartment) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AuthDepartment"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AuthDepartment) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetDepartmentID() {
		if err = oprot.WriteFieldBegin("department_id", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.DepartmentID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AuthDepartment) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthDepartment(%+v)", *p)

}

func (p *AuthDepartment) DeepEqual(ano *AuthDepartment) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.DepartmentID) {
		return false
	}
	return true
}

func (p *AuthDepartment) Field1DeepEqual(src *string) bool {

	if p.DepartmentID == src {
		return true
	} else if p.DepartmentID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.DepartmentID, *src) != 0 {
		return false
	}
	return true
}

// Coze标识
type AuthCozeIdentifier struct {
	// 身份票据
	IdentityTicket *string `thrift:"identity_ticket,1,optional" frugal:"1,optional,string" form:"identity_ticket" json:"identity_ticket,omitempty" query:"identity_ticket"`
}

func NewAuthCozeIdentifier() *AuthCozeIdentifier {
	return &AuthCozeIdentifier{}
}

func (p *AuthCozeIdentifier) InitDefault() {
}

var AuthCozeIdentifier_IdentityTicket_DEFAULT string

func (p *AuthCozeIdentifier) GetIdentityTicket() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetIdentityTicket() {
		return AuthCozeIdentifier_IdentityTicket_DEFAULT
	}
	return *p.IdentityTicket
}
func (p *AuthCozeIdentifier) SetIdentityTicket(val *string) {
	p.IdentityTicket = val
}

var fieldIDToName_AuthCozeIdentifier = map[int16]string{
	1: "identity_ticket",
}

func (p *AuthCozeIdentifier) IsSetIdentityTicket() bool {
	return p.IdentityTicket != nil
}

func (p *AuthCozeIdentifier) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AuthCozeIdentifier[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AuthCozeIdentifier) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IdentityTicket = _field
	return nil
}

func (p *AuthCozeIdentifier) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AuthCozeIdentifier"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AuthCozeIdentifier) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetIdentityTicket() {
		if err = oprot.WriteFieldBegin("identity_ticket", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.IdentityTicket); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *AuthCozeIdentifier) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthCozeIdentifier(%+v)", *p)

}

func (p *AuthCozeIdentifier) DeepEqual(ano *AuthCozeIdentifier) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.IdentityTicket) {
		return false
	}
	return true
}

func (p *AuthCozeIdentifier) Field1DeepEqual(src *string) bool {

	if p.IdentityTicket == src {
		return true
	} else if p.IdentityTicket == nil || src == nil {
		return false
	}
	if strings.Compare(*p.IdentityTicket, *src) != 0 {
		return false
	}
	return true
}

// 鉴权主体
type AuthPrincipal struct {
	// 主体类型
	AuthPrincipalType *AuthPrincipalType `thrift:"auth_principal_type,1,optional" frugal:"1,optional,AuthPrincipalType" form:"auth_principal_type" json:"auth_principal_type,omitempty" query:"auth_principal_type"`
	// 鉴权用户
	AuthUser *AuthUser `thrift:"auth_user,2,optional" frugal:"2,optional,AuthUser" form:"auth_user" json:"auth_user,omitempty" query:"auth_user"`
	// 鉴权部门
	AuthDepartment *AuthDepartment `thrift:"auth_department,3,optional" frugal:"3,optional,AuthDepartment" form:"auth_department" json:"auth_department,omitempty" query:"auth_department"`
	// Coze标识
	AuthCozeIdentifier *AuthCozeIdentifier `thrift:"auth_coze_identifier,4,optional" frugal:"4,optional,AuthCozeIdentifier" form:"auth_coze_identifier" json:"auth_coze_identifier,omitempty" query:"auth_coze_identifier"`
}

func NewAuthPrincipal() *AuthPrincipal {
	return &AuthPrincipal{}
}

func (p *AuthPrincipal) InitDefault() {
}

var AuthPrincipal_AuthPrincipalType_DEFAULT AuthPrincipalType

func (p *AuthPrincipal) GetAuthPrincipalType() (v AuthPrincipalType) {
	if p == nil {
		return
	}
	if !p.IsSetAuthPrincipalType() {
		return AuthPrincipal_AuthPrincipalType_DEFAULT
	}
	return *p.AuthPrincipalType
}

var AuthPrincipal_AuthUser_DEFAULT *AuthUser

func (p *AuthPrincipal) GetAuthUser() (v *AuthUser) {
	if p == nil {
		return
	}
	if !p.IsSetAuthUser() {
		return AuthPrincipal_AuthUser_DEFAULT
	}
	return p.AuthUser
}

var AuthPrincipal_AuthDepartment_DEFAULT *AuthDepartment

func (p *AuthPrincipal) GetAuthDepartment() (v *AuthDepartment) {
	if p == nil {
		return
	}
	if !p.IsSetAuthDepartment() {
		return AuthPrincipal_AuthDepartment_DEFAULT
	}
	return p.AuthDepartment
}

var AuthPrincipal_AuthCozeIdentifier_DEFAULT *AuthCozeIdentifier

func (p *AuthPrincipal) GetAuthCozeIdentifier() (v *AuthCozeIdentifier) {
	if p == nil {
		return
	}
	if !p.IsSetAuthCozeIdentifier() {
		return AuthPrincipal_AuthCozeIdentifier_DEFAULT
	}
	return p.AuthCozeIdentifier
}
func (p *AuthPrincipal) SetAuthPrincipalType(val *AuthPrincipalType) {
	p.AuthPrincipalType = val
}
func (p *AuthPrincipal) SetAuthUser(val *AuthUser) {
	p.AuthUser = val
}
func (p *AuthPrincipal) SetAuthDepartment(val *AuthDepartment) {
	p.AuthDepartment = val
}
func (p *AuthPrincipal) SetAuthCozeIdentifier(val *AuthCozeIdentifier) {
	p.AuthCozeIdentifier = val
}

var fieldIDToName_AuthPrincipal = map[int16]string{
	1: "auth_principal_type",
	2: "auth_user",
	3: "auth_department",
	4: "auth_coze_identifier",
}

func (p *AuthPrincipal) IsSetAuthPrincipalType() bool {
	return p.AuthPrincipalType != nil
}

func (p *AuthPrincipal) IsSetAuthUser() bool {
	return p.AuthUser != nil
}

func (p *AuthPrincipal) IsSetAuthDepartment() bool {
	return p.AuthDepartment != nil
}

func (p *AuthPrincipal) IsSetAuthCozeIdentifier() bool {
	return p.AuthCozeIdentifier != nil
}

func (p *AuthPrincipal) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AuthPrincipal[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AuthPrincipal) ReadField1(iprot thrift.TProtocol) error {

	var _field *AuthPrincipalType
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		tmp := AuthPrincipalType(v)
		_field = &tmp
	}
	p.AuthPrincipalType = _field
	return nil
}
func (p *AuthPrincipal) ReadField2(iprot thrift.TProtocol) error {
	_field := NewAuthUser()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.AuthUser = _field
	return nil
}
func (p *AuthPrincipal) ReadField3(iprot thrift.TProtocol) error {
	_field := NewAuthDepartment()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.AuthDepartment = _field
	return nil
}
func (p *AuthPrincipal) ReadField4(iprot thrift.TProtocol) error {
	_field := NewAuthCozeIdentifier()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.AuthCozeIdentifier = _field
	return nil
}

func (p *AuthPrincipal) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AuthPrincipal"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AuthPrincipal) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthPrincipalType() {
		if err = oprot.WriteFieldBegin("auth_principal_type", thrift.I32, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(int32(*p.AuthPrincipalType)); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *AuthPrincipal) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthUser() {
		if err = oprot.WriteFieldBegin("auth_user", thrift.STRUCT, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.AuthUser.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *AuthPrincipal) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthDepartment() {
		if err = oprot.WriteFieldBegin("auth_department", thrift.STRUCT, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.AuthDepartment.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *AuthPrincipal) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthCozeIdentifier() {
		if err = oprot.WriteFieldBegin("auth_coze_identifier", thrift.STRUCT, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.AuthCozeIdentifier.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *AuthPrincipal) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthPrincipal(%+v)", *p)

}

func (p *AuthPrincipal) DeepEqual(ano *AuthPrincipal) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.AuthPrincipalType) {
		return false
	}
	if !p.Field2DeepEqual(ano.AuthUser) {
		return false
	}
	if !p.Field3DeepEqual(ano.AuthDepartment) {
		return false
	}
	if !p.Field4DeepEqual(ano.AuthCozeIdentifier) {
		return false
	}
	return true
}

func (p *AuthPrincipal) Field1DeepEqual(src *AuthPrincipalType) bool {

	if p.AuthPrincipalType == src {
		return true
	} else if p.AuthPrincipalType == nil || src == nil {
		return false
	}
	if *p.AuthPrincipalType != *src {
		return false
	}
	return true
}
func (p *AuthPrincipal) Field2DeepEqual(src *AuthUser) bool {

	if !p.AuthUser.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AuthPrincipal) Field3DeepEqual(src *AuthDepartment) bool {

	if !p.AuthDepartment.DeepEqual(src) {
		return false
	}
	return true
}
func (p *AuthPrincipal) Field4DeepEqual(src *AuthCozeIdentifier) bool {

	if !p.AuthCozeIdentifier.DeepEqual(src) {
		return false
	}
	return true
}

// 鉴权资源，客体
type AuthEntity struct {
	// 实体唯一ID
	ID *string `thrift:"id,1,optional" frugal:"1,optional,string" form:"id" json:"id,omitempty" query:"id"`
	// 实体类型
	EntityType *AuthEntityType `thrift:"entity_type,2,optional" frugal:"2,optional,string" form:"entity_type" json:"entity_type,omitempty" query:"entity_type"`
	// 空间ID
	SpaceID *string `thrift:"space_id,3,optional" frugal:"3,optional,string" form:"space_id" json:"space_id,omitempty" query:"space_id"`
	// 实体owner用户ID
	OwnerUserID *string `thrift:"owner_user_id,4,optional" frugal:"4,optional,string" form:"owner_user_id" json:"owner_user_id,omitempty" query:"owner_user_id"`
}

func NewAuthEntity() *AuthEntity {
	return &AuthEntity{}
}

func (p *AuthEntity) InitDefault() {
}

var AuthEntity_ID_DEFAULT string

func (p *AuthEntity) GetID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetID() {
		return AuthEntity_ID_DEFAULT
	}
	return *p.ID
}

var AuthEntity_EntityType_DEFAULT AuthEntityType

func (p *AuthEntity) GetEntityType() (v AuthEntityType) {
	if p == nil {
		return
	}
	if !p.IsSetEntityType() {
		return AuthEntity_EntityType_DEFAULT
	}
	return *p.EntityType
}

var AuthEntity_SpaceID_DEFAULT string

func (p *AuthEntity) GetSpaceID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetSpaceID() {
		return AuthEntity_SpaceID_DEFAULT
	}
	return *p.SpaceID
}

var AuthEntity_OwnerUserID_DEFAULT string

func (p *AuthEntity) GetOwnerUserID() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetOwnerUserID() {
		return AuthEntity_OwnerUserID_DEFAULT
	}
	return *p.OwnerUserID
}
func (p *AuthEntity) SetID(val *string) {
	p.ID = val
}
func (p *AuthEntity) SetEntityType(val *AuthEntityType) {
	p.EntityType = val
}
func (p *AuthEntity) SetSpaceID(val *string) {
	p.SpaceID = val
}
func (p *AuthEntity) SetOwnerUserID(val *string) {
	p.OwnerUserID = val
}

var fieldIDToName_AuthEntity = map[int16]string{
	1: "id",
	2: "entity_type",
	3: "space_id",
	4: "owner_user_id",
}

func (p *AuthEntity) IsSetID() bool {
	return p.ID != nil
}

func (p *AuthEntity) IsSetEntityType() bool {
	return p.EntityType != nil
}

func (p *AuthEntity) IsSetSpaceID() bool {
	return p.SpaceID != nil
}

func (p *AuthEntity) IsSetOwnerUserID() bool {
	return p.OwnerUserID != nil
}

func (p *AuthEntity) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_AuthEntity[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *AuthEntity) ReadField1(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.ID = _field
	return nil
}
func (p *AuthEntity) ReadField2(iprot thrift.TProtocol) error {

	var _field *AuthEntityType
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.EntityType = _field
	return nil
}
func (p *AuthEntity) ReadField3(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.SpaceID = _field
	return nil
}
func (p *AuthEntity) ReadField4(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.OwnerUserID = _field
	return nil
}

func (p *AuthEntity) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("AuthEntity"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *AuthEntity) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetID() {
		if err = oprot.WriteFieldBegin("id", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.ID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *AuthEntity) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetEntityType() {
		if err = oprot.WriteFieldBegin("entity_type", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.EntityType); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *AuthEntity) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetSpaceID() {
		if err = oprot.WriteFieldBegin("space_id", thrift.STRING, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.SpaceID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}
func (p *AuthEntity) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetOwnerUserID() {
		if err = oprot.WriteFieldBegin("owner_user_id", thrift.STRING, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.OwnerUserID); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *AuthEntity) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AuthEntity(%+v)", *p)

}

func (p *AuthEntity) DeepEqual(ano *AuthEntity) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ID) {
		return false
	}
	if !p.Field2DeepEqual(ano.EntityType) {
		return false
	}
	if !p.Field3DeepEqual(ano.SpaceID) {
		return false
	}
	if !p.Field4DeepEqual(ano.OwnerUserID) {
		return false
	}
	return true
}

func (p *AuthEntity) Field1DeepEqual(src *string) bool {

	if p.ID == src {
		return true
	} else if p.ID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.ID, *src) != 0 {
		return false
	}
	return true
}
func (p *AuthEntity) Field2DeepEqual(src *AuthEntityType) bool {

	if p.EntityType == src {
		return true
	} else if p.EntityType == nil || src == nil {
		return false
	}
	if strings.Compare(*p.EntityType, *src) != 0 {
		return false
	}
	return true
}
func (p *AuthEntity) Field3DeepEqual(src *string) bool {

	if p.SpaceID == src {
		return true
	} else if p.SpaceID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.SpaceID, *src) != 0 {
		return false
	}
	return true
}
func (p *AuthEntity) Field4DeepEqual(src *string) bool {

	if p.OwnerUserID == src {
		return true
	} else if p.OwnerUserID == nil || src == nil {
		return false
	}
	if strings.Compare(*p.OwnerUserID, *src) != 0 {
		return false
	}
	return true
}

// 主体+客体+权限点，鉴权组合信息
type SubjectActionObjects struct {
	// 主体，鉴权时通常为用户
	Subject *AuthPrincipal `thrift:"subject,1,optional" frugal:"1,optional,AuthPrincipal" form:"subject" json:"subject,omitempty" query:"subject"`
	// 权限唯一标识
	Action *string `thrift:"action,2,optional" frugal:"2,optional,string" form:"action" json:"action,omitempty" query:"action"`
	// 客体列表，默认按照或的逻辑处理
	Objects []*AuthEntity `thrift:"objects,3,optional" frugal:"3,optional,list<AuthEntity>" form:"objects" json:"objects,omitempty" query:"objects"`
}

func NewSubjectActionObjects() *SubjectActionObjects {
	return &SubjectActionObjects{}
}

func (p *SubjectActionObjects) InitDefault() {
}

var SubjectActionObjects_Subject_DEFAULT *AuthPrincipal

func (p *SubjectActionObjects) GetSubject() (v *AuthPrincipal) {
	if p == nil {
		return
	}
	if !p.IsSetSubject() {
		return SubjectActionObjects_Subject_DEFAULT
	}
	return p.Subject
}

var SubjectActionObjects_Action_DEFAULT string

func (p *SubjectActionObjects) GetAction() (v string) {
	if p == nil {
		return
	}
	if !p.IsSetAction() {
		return SubjectActionObjects_Action_DEFAULT
	}
	return *p.Action
}

var SubjectActionObjects_Objects_DEFAULT []*AuthEntity

func (p *SubjectActionObjects) GetObjects() (v []*AuthEntity) {
	if p == nil {
		return
	}
	if !p.IsSetObjects() {
		return SubjectActionObjects_Objects_DEFAULT
	}
	return p.Objects
}
func (p *SubjectActionObjects) SetSubject(val *AuthPrincipal) {
	p.Subject = val
}
func (p *SubjectActionObjects) SetAction(val *string) {
	p.Action = val
}
func (p *SubjectActionObjects) SetObjects(val []*AuthEntity) {
	p.Objects = val
}

var fieldIDToName_SubjectActionObjects = map[int16]string{
	1: "subject",
	2: "action",
	3: "objects",
}

func (p *SubjectActionObjects) IsSetSubject() bool {
	return p.Subject != nil
}

func (p *SubjectActionObjects) IsSetAction() bool {
	return p.Action != nil
}

func (p *SubjectActionObjects) IsSetObjects() bool {
	return p.Objects != nil
}

func (p *SubjectActionObjects) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SubjectActionObjects[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SubjectActionObjects) ReadField1(iprot thrift.TProtocol) error {
	_field := NewAuthPrincipal()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.Subject = _field
	return nil
}
func (p *SubjectActionObjects) ReadField2(iprot thrift.TProtocol) error {

	var _field *string
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.Action = _field
	return nil
}
func (p *SubjectActionObjects) ReadField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	_field := make([]*AuthEntity, 0, size)
	values := make([]AuthEntity, size)
	for i := 0; i < size; i++ {
		_elem := &values[i]
		_elem.InitDefault()

		if err := _elem.Read(iprot); err != nil {
			return err
		}

		_field = append(_field, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	p.Objects = _field
	return nil
}

func (p *SubjectActionObjects) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SubjectActionObjects"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SubjectActionObjects) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubject() {
		if err = oprot.WriteFieldBegin("subject", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Subject.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *SubjectActionObjects) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetAction() {
		if err = oprot.WriteFieldBegin("action", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Action); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}
func (p *SubjectActionObjects) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetObjects() {
		if err = oprot.WriteFieldBegin("objects", thrift.LIST, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Objects)); err != nil {
			return err
		}
		for _, v := range p.Objects {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *SubjectActionObjects) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubjectActionObjects(%+v)", *p)

}

func (p *SubjectActionObjects) DeepEqual(ano *SubjectActionObjects) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Subject) {
		return false
	}
	if !p.Field2DeepEqual(ano.Action) {
		return false
	}
	if !p.Field3DeepEqual(ano.Objects) {
		return false
	}
	return true
}

func (p *SubjectActionObjects) Field1DeepEqual(src *AuthPrincipal) bool {

	if !p.Subject.DeepEqual(src) {
		return false
	}
	return true
}
func (p *SubjectActionObjects) Field2DeepEqual(src *string) bool {

	if p.Action == src {
		return true
	} else if p.Action == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Action, *src) != 0 {
		return false
	}
	return true
}
func (p *SubjectActionObjects) Field3DeepEqual(src []*AuthEntity) bool {

	if len(p.Objects) != len(src) {
		return false
	}
	for i, v := range p.Objects {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

// 主体+客体+权限点，鉴权结果
type SubjectActionObjectAuthRes struct {
	// 主体+客体+权限点 鉴权对
	SubjectActionObjects *SubjectActionObjects `thrift:"subject_action_objects,1,optional" frugal:"1,optional,SubjectActionObjects" form:"subject_action_objects" json:"subject_action_objects,omitempty" query:"subject_action_objects"`
	// 是否允许
	IsAllowed *bool `thrift:"is_allowed,2,optional" frugal:"2,optional,bool" form:"is_allowed" json:"is_allowed,omitempty" query:"is_allowed"`
}

func NewSubjectActionObjectAuthRes() *SubjectActionObjectAuthRes {
	return &SubjectActionObjectAuthRes{}
}

func (p *SubjectActionObjectAuthRes) InitDefault() {
}

var SubjectActionObjectAuthRes_SubjectActionObjects_DEFAULT *SubjectActionObjects

func (p *SubjectActionObjectAuthRes) GetSubjectActionObjects() (v *SubjectActionObjects) {
	if p == nil {
		return
	}
	if !p.IsSetSubjectActionObjects() {
		return SubjectActionObjectAuthRes_SubjectActionObjects_DEFAULT
	}
	return p.SubjectActionObjects
}

var SubjectActionObjectAuthRes_IsAllowed_DEFAULT bool

func (p *SubjectActionObjectAuthRes) GetIsAllowed() (v bool) {
	if p == nil {
		return
	}
	if !p.IsSetIsAllowed() {
		return SubjectActionObjectAuthRes_IsAllowed_DEFAULT
	}
	return *p.IsAllowed
}
func (p *SubjectActionObjectAuthRes) SetSubjectActionObjects(val *SubjectActionObjects) {
	p.SubjectActionObjects = val
}
func (p *SubjectActionObjectAuthRes) SetIsAllowed(val *bool) {
	p.IsAllowed = val
}

var fieldIDToName_SubjectActionObjectAuthRes = map[int16]string{
	1: "subject_action_objects",
	2: "is_allowed",
}

func (p *SubjectActionObjectAuthRes) IsSetSubjectActionObjects() bool {
	return p.SubjectActionObjects != nil
}

func (p *SubjectActionObjectAuthRes) IsSetIsAllowed() bool {
	return p.IsAllowed != nil
}

func (p *SubjectActionObjectAuthRes) Read(iprot thrift.TProtocol) (err error) {
	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SubjectActionObjectAuthRes[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SubjectActionObjectAuthRes) ReadField1(iprot thrift.TProtocol) error {
	_field := NewSubjectActionObjects()
	if err := _field.Read(iprot); err != nil {
		return err
	}
	p.SubjectActionObjects = _field
	return nil
}
func (p *SubjectActionObjectAuthRes) ReadField2(iprot thrift.TProtocol) error {

	var _field *bool
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		_field = &v
	}
	p.IsAllowed = _field
	return nil
}

func (p *SubjectActionObjectAuthRes) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("SubjectActionObjectAuthRes"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *SubjectActionObjectAuthRes) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSubjectActionObjects() {
		if err = oprot.WriteFieldBegin("subject_action_objects", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.SubjectActionObjects.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}
func (p *SubjectActionObjectAuthRes) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetIsAllowed() {
		if err = oprot.WriteFieldBegin("is_allowed", thrift.BOOL, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.IsAllowed); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *SubjectActionObjectAuthRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubjectActionObjectAuthRes(%+v)", *p)

}

func (p *SubjectActionObjectAuthRes) DeepEqual(ano *SubjectActionObjectAuthRes) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.SubjectActionObjects) {
		return false
	}
	if !p.Field2DeepEqual(ano.IsAllowed) {
		return false
	}
	return true
}

func (p *SubjectActionObjectAuthRes) Field1DeepEqual(src *SubjectActionObjects) bool {

	if !p.SubjectActionObjects.DeepEqual(src) {
		return false
	}
	return true
}
func (p *SubjectActionObjectAuthRes) Field2DeepEqual(src *bool) bool {

	if p.IsAllowed == src {
		return true
	} else if p.IsAllowed == nil || src == nil {
		return false
	}
	if *p.IsAllowed != *src {
		return false
	}
	return true
}
